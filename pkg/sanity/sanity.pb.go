// OpenAPIArt Test API 0.0.1
// License: MIT

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: sanity.proto

package sanity

import (
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PrefixConfig_DValues_Enum int32

const (
	PrefixConfig_DValues_unspecified PrefixConfig_DValues_Enum = 0
	PrefixConfig_DValues_a           PrefixConfig_DValues_Enum = 1
	PrefixConfig_DValues_b           PrefixConfig_DValues_Enum = 2
	PrefixConfig_DValues_c           PrefixConfig_DValues_Enum = 3
)

// Enum value maps for PrefixConfig_DValues_Enum.
var (
	PrefixConfig_DValues_Enum_name = map[int32]string{
		0: "unspecified",
		1: "a",
		2: "b",
		3: "c",
	}
	PrefixConfig_DValues_Enum_value = map[string]int32{
		"unspecified": 0,
		"a":           1,
		"b":           2,
		"c":           3,
	}
)

func (x PrefixConfig_DValues_Enum) Enum() *PrefixConfig_DValues_Enum {
	p := new(PrefixConfig_DValues_Enum)
	*p = x
	return p
}

func (x PrefixConfig_DValues_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrefixConfig_DValues_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_sanity_proto_enumTypes[0].Descriptor()
}

func (PrefixConfig_DValues_Enum) Type() protoreflect.EnumType {
	return &file_sanity_proto_enumTypes[0]
}

func (x PrefixConfig_DValues_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrefixConfig_DValues_Enum.Descriptor instead.
func (PrefixConfig_DValues_Enum) EnumDescriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{6, 0, 0}
}

type GObject_Choice_Enum int32

const (
	GObject_Choice_unspecified GObject_Choice_Enum = 0
	GObject_Choice_g_d         GObject_Choice_Enum = 1
	GObject_Choice_g_e         GObject_Choice_Enum = 2
)

// Enum value maps for GObject_Choice_Enum.
var (
	GObject_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "g_d",
		2: "g_e",
	}
	GObject_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"g_d":         1,
		"g_e":         2,
	}
)

func (x GObject_Choice_Enum) Enum() *GObject_Choice_Enum {
	p := new(GObject_Choice_Enum)
	*p = x
	return p
}

func (x GObject_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GObject_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_sanity_proto_enumTypes[1].Descriptor()
}

func (GObject_Choice_Enum) Type() protoreflect.EnumType {
	return &file_sanity_proto_enumTypes[1]
}

func (x GObject_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GObject_Choice_Enum.Descriptor instead.
func (GObject_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{7, 0, 0}
}

type GObject_GF_Enum int32

const (
	GObject_GF_unspecified GObject_GF_Enum = 0
	GObject_GF_a           GObject_GF_Enum = 1
	GObject_GF_b           GObject_GF_Enum = 2
	GObject_GF_c           GObject_GF_Enum = 3
)

// Enum value maps for GObject_GF_Enum.
var (
	GObject_GF_Enum_name = map[int32]string{
		0: "unspecified",
		1: "a",
		2: "b",
		3: "c",
	}
	GObject_GF_Enum_value = map[string]int32{
		"unspecified": 0,
		"a":           1,
		"b":           2,
		"c":           3,
	}
)

func (x GObject_GF_Enum) Enum() *GObject_GF_Enum {
	p := new(GObject_GF_Enum)
	*p = x
	return p
}

func (x GObject_GF_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GObject_GF_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_sanity_proto_enumTypes[2].Descriptor()
}

func (GObject_GF_Enum) Type() protoreflect.EnumType {
	return &file_sanity_proto_enumTypes[2]
}

func (x GObject_GF_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GObject_GF_Enum.Descriptor instead.
func (GObject_GF_Enum) EnumDescriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{7, 1, 0}
}

type FObject_Choice_Enum int32

const (
	FObject_Choice_unspecified FObject_Choice_Enum = 0
	FObject_Choice_f_a         FObject_Choice_Enum = 1
	FObject_Choice_f_b         FObject_Choice_Enum = 2
)

// Enum value maps for FObject_Choice_Enum.
var (
	FObject_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "f_a",
		2: "f_b",
	}
	FObject_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"f_a":         1,
		"f_b":         2,
	}
)

func (x FObject_Choice_Enum) Enum() *FObject_Choice_Enum {
	p := new(FObject_Choice_Enum)
	*p = x
	return p
}

func (x FObject_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FObject_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_sanity_proto_enumTypes[3].Descriptor()
}

func (FObject_Choice_Enum) Type() protoreflect.EnumType {
	return &file_sanity_proto_enumTypes[3]
}

func (x FObject_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FObject_Choice_Enum.Descriptor instead.
func (FObject_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{9, 0, 0}
}

type JObject_Choice_Enum int32

const (
	JObject_Choice_unspecified JObject_Choice_Enum = 0
	JObject_Choice_j_a         JObject_Choice_Enum = 1
	JObject_Choice_j_b         JObject_Choice_Enum = 2
)

// Enum value maps for JObject_Choice_Enum.
var (
	JObject_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "j_a",
		2: "j_b",
	}
	JObject_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"j_a":         1,
		"j_b":         2,
	}
)

func (x JObject_Choice_Enum) Enum() *JObject_Choice_Enum {
	p := new(JObject_Choice_Enum)
	*p = x
	return p
}

func (x JObject_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JObject_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_sanity_proto_enumTypes[4].Descriptor()
}

func (JObject_Choice_Enum) Type() protoreflect.EnumType {
	return &file_sanity_proto_enumTypes[4]
}

func (x JObject_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JObject_Choice_Enum.Descriptor instead.
func (JObject_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{10, 0, 0}
}

type PatternIpv4PatternIpv4_Choice_Enum int32

const (
	PatternIpv4PatternIpv4_Choice_unspecified PatternIpv4PatternIpv4_Choice_Enum = 0
	PatternIpv4PatternIpv4_Choice_value       PatternIpv4PatternIpv4_Choice_Enum = 1
	PatternIpv4PatternIpv4_Choice_values      PatternIpv4PatternIpv4_Choice_Enum = 2
	PatternIpv4PatternIpv4_Choice_increment   PatternIpv4PatternIpv4_Choice_Enum = 3
	PatternIpv4PatternIpv4_Choice_decrement   PatternIpv4PatternIpv4_Choice_Enum = 4
)

// Enum value maps for PatternIpv4PatternIpv4_Choice_Enum.
var (
	PatternIpv4PatternIpv4_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "value",
		2: "values",
		3: "increment",
		4: "decrement",
	}
	PatternIpv4PatternIpv4_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       1,
		"values":      2,
		"increment":   3,
		"decrement":   4,
	}
)

func (x PatternIpv4PatternIpv4_Choice_Enum) Enum() *PatternIpv4PatternIpv4_Choice_Enum {
	p := new(PatternIpv4PatternIpv4_Choice_Enum)
	*p = x
	return p
}

func (x PatternIpv4PatternIpv4_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternIpv4PatternIpv4_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_sanity_proto_enumTypes[5].Descriptor()
}

func (PatternIpv4PatternIpv4_Choice_Enum) Type() protoreflect.EnumType {
	return &file_sanity_proto_enumTypes[5]
}

func (x PatternIpv4PatternIpv4_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternIpv4PatternIpv4_Choice_Enum.Descriptor instead.
func (PatternIpv4PatternIpv4_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{24, 0, 0}
}

type PatternIpv6PatternIpv6_Choice_Enum int32

const (
	PatternIpv6PatternIpv6_Choice_unspecified PatternIpv6PatternIpv6_Choice_Enum = 0
	PatternIpv6PatternIpv6_Choice_value       PatternIpv6PatternIpv6_Choice_Enum = 1
	PatternIpv6PatternIpv6_Choice_values      PatternIpv6PatternIpv6_Choice_Enum = 2
	PatternIpv6PatternIpv6_Choice_increment   PatternIpv6PatternIpv6_Choice_Enum = 3
	PatternIpv6PatternIpv6_Choice_decrement   PatternIpv6PatternIpv6_Choice_Enum = 4
)

// Enum value maps for PatternIpv6PatternIpv6_Choice_Enum.
var (
	PatternIpv6PatternIpv6_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "value",
		2: "values",
		3: "increment",
		4: "decrement",
	}
	PatternIpv6PatternIpv6_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       1,
		"values":      2,
		"increment":   3,
		"decrement":   4,
	}
)

func (x PatternIpv6PatternIpv6_Choice_Enum) Enum() *PatternIpv6PatternIpv6_Choice_Enum {
	p := new(PatternIpv6PatternIpv6_Choice_Enum)
	*p = x
	return p
}

func (x PatternIpv6PatternIpv6_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternIpv6PatternIpv6_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_sanity_proto_enumTypes[6].Descriptor()
}

func (PatternIpv6PatternIpv6_Choice_Enum) Type() protoreflect.EnumType {
	return &file_sanity_proto_enumTypes[6]
}

func (x PatternIpv6PatternIpv6_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternIpv6PatternIpv6_Choice_Enum.Descriptor instead.
func (PatternIpv6PatternIpv6_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{26, 0, 0}
}

type PatternMacPatternMac_Choice_Enum int32

const (
	PatternMacPatternMac_Choice_unspecified PatternMacPatternMac_Choice_Enum = 0
	PatternMacPatternMac_Choice_value       PatternMacPatternMac_Choice_Enum = 1
	PatternMacPatternMac_Choice_values      PatternMacPatternMac_Choice_Enum = 2
	PatternMacPatternMac_Choice_increment   PatternMacPatternMac_Choice_Enum = 3
	PatternMacPatternMac_Choice_decrement   PatternMacPatternMac_Choice_Enum = 4
)

// Enum value maps for PatternMacPatternMac_Choice_Enum.
var (
	PatternMacPatternMac_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "value",
		2: "values",
		3: "increment",
		4: "decrement",
	}
	PatternMacPatternMac_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       1,
		"values":      2,
		"increment":   3,
		"decrement":   4,
	}
)

func (x PatternMacPatternMac_Choice_Enum) Enum() *PatternMacPatternMac_Choice_Enum {
	p := new(PatternMacPatternMac_Choice_Enum)
	*p = x
	return p
}

func (x PatternMacPatternMac_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternMacPatternMac_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_sanity_proto_enumTypes[7].Descriptor()
}

func (PatternMacPatternMac_Choice_Enum) Type() protoreflect.EnumType {
	return &file_sanity_proto_enumTypes[7]
}

func (x PatternMacPatternMac_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternMacPatternMac_Choice_Enum.Descriptor instead.
func (PatternMacPatternMac_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{28, 0, 0}
}

type PatternIntegerPatternInteger_Choice_Enum int32

const (
	PatternIntegerPatternInteger_Choice_unspecified PatternIntegerPatternInteger_Choice_Enum = 0
	PatternIntegerPatternInteger_Choice_value       PatternIntegerPatternInteger_Choice_Enum = 1
	PatternIntegerPatternInteger_Choice_values      PatternIntegerPatternInteger_Choice_Enum = 2
	PatternIntegerPatternInteger_Choice_increment   PatternIntegerPatternInteger_Choice_Enum = 3
	PatternIntegerPatternInteger_Choice_decrement   PatternIntegerPatternInteger_Choice_Enum = 4
)

// Enum value maps for PatternIntegerPatternInteger_Choice_Enum.
var (
	PatternIntegerPatternInteger_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "value",
		2: "values",
		3: "increment",
		4: "decrement",
	}
	PatternIntegerPatternInteger_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       1,
		"values":      2,
		"increment":   3,
		"decrement":   4,
	}
)

func (x PatternIntegerPatternInteger_Choice_Enum) Enum() *PatternIntegerPatternInteger_Choice_Enum {
	p := new(PatternIntegerPatternInteger_Choice_Enum)
	*p = x
	return p
}

func (x PatternIntegerPatternInteger_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternIntegerPatternInteger_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_sanity_proto_enumTypes[8].Descriptor()
}

func (PatternIntegerPatternInteger_Choice_Enum) Type() protoreflect.EnumType {
	return &file_sanity_proto_enumTypes[8]
}

func (x PatternIntegerPatternInteger_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternIntegerPatternInteger_Choice_Enum.Descriptor instead.
func (PatternIntegerPatternInteger_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{30, 0, 0}
}

type PatternChecksumPatternChecksum_Choice_Enum int32

const (
	PatternChecksumPatternChecksum_Choice_unspecified PatternChecksumPatternChecksum_Choice_Enum = 0
	PatternChecksumPatternChecksum_Choice_generated   PatternChecksumPatternChecksum_Choice_Enum = 1
	PatternChecksumPatternChecksum_Choice_custom      PatternChecksumPatternChecksum_Choice_Enum = 2
)

// Enum value maps for PatternChecksumPatternChecksum_Choice_Enum.
var (
	PatternChecksumPatternChecksum_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "generated",
		2: "custom",
	}
	PatternChecksumPatternChecksum_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"generated":   1,
		"custom":      2,
	}
)

func (x PatternChecksumPatternChecksum_Choice_Enum) Enum() *PatternChecksumPatternChecksum_Choice_Enum {
	p := new(PatternChecksumPatternChecksum_Choice_Enum)
	*p = x
	return p
}

func (x PatternChecksumPatternChecksum_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternChecksumPatternChecksum_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_sanity_proto_enumTypes[9].Descriptor()
}

func (PatternChecksumPatternChecksum_Choice_Enum) Type() protoreflect.EnumType {
	return &file_sanity_proto_enumTypes[9]
}

func (x PatternChecksumPatternChecksum_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternChecksumPatternChecksum_Choice_Enum.Descriptor instead.
func (PatternChecksumPatternChecksum_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{31, 0, 0}
}

type PatternChecksumPatternChecksum_Generated_Enum int32

const (
	PatternChecksumPatternChecksum_Generated_unspecified PatternChecksumPatternChecksum_Generated_Enum = 0
	PatternChecksumPatternChecksum_Generated_good        PatternChecksumPatternChecksum_Generated_Enum = 1
	PatternChecksumPatternChecksum_Generated_bad         PatternChecksumPatternChecksum_Generated_Enum = 2
)

// Enum value maps for PatternChecksumPatternChecksum_Generated_Enum.
var (
	PatternChecksumPatternChecksum_Generated_Enum_name = map[int32]string{
		0: "unspecified",
		1: "good",
		2: "bad",
	}
	PatternChecksumPatternChecksum_Generated_Enum_value = map[string]int32{
		"unspecified": 0,
		"good":        1,
		"bad":         2,
	}
)

func (x PatternChecksumPatternChecksum_Generated_Enum) Enum() *PatternChecksumPatternChecksum_Generated_Enum {
	p := new(PatternChecksumPatternChecksum_Generated_Enum)
	*p = x
	return p
}

func (x PatternChecksumPatternChecksum_Generated_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternChecksumPatternChecksum_Generated_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_sanity_proto_enumTypes[10].Descriptor()
}

func (PatternChecksumPatternChecksum_Generated_Enum) Type() protoreflect.EnumType {
	return &file_sanity_proto_enumTypes[10]
}

func (x PatternChecksumPatternChecksum_Generated_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternChecksumPatternChecksum_Generated_Enum.Descriptor instead.
func (PatternChecksumPatternChecksum_Generated_Enum) EnumDescriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{31, 1, 0}
}

type OpenApiMsgOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *OpenApiMsgOpt) Reset() {
	*x = OpenApiMsgOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenApiMsgOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenApiMsgOpt) ProtoMessage() {}

func (x *OpenApiMsgOpt) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenApiMsgOpt.ProtoReflect.Descriptor instead.
func (*OpenApiMsgOpt) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{0}
}

func (x *OpenApiMsgOpt) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type OpenApiFldOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Default     string `protobuf:"bytes,10,opt,name=default,proto3" json:"default,omitempty"`
	Description string `protobuf:"bytes,20,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *OpenApiFldOpt) Reset() {
	*x = OpenApiFldOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenApiFldOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenApiFldOpt) ProtoMessage() {}

func (x *OpenApiFldOpt) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenApiFldOpt.ProtoReflect.Descriptor instead.
func (*OpenApiFldOpt) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{1}
}

func (x *OpenApiFldOpt) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *OpenApiFldOpt) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type OpenApiSvcOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *OpenApiSvcOpt) Reset() {
	*x = OpenApiSvcOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenApiSvcOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenApiSvcOpt) ProtoMessage() {}

func (x *OpenApiSvcOpt) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenApiSvcOpt.ProtoReflect.Descriptor instead.
func (*OpenApiSvcOpt) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{2}
}

func (x *OpenApiSvcOpt) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type OpenApiRpcOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *OpenApiRpcOpt) Reset() {
	*x = OpenApiRpcOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenApiRpcOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenApiRpcOpt) ProtoMessage() {}

func (x *OpenApiRpcOpt) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenApiRpcOpt.ProtoReflect.Descriptor instead.
func (*OpenApiRpcOpt) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{3}
}

func (x *OpenApiRpcOpt) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []string `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{4}
}

func (x *Error) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []string `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ErrorDetails) Reset() {
	*x = ErrorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDetails) ProtoMessage() {}

func (x *ErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDetails.ProtoReflect.Descriptor instead.
func (*ErrorDetails) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{5}
}

func (x *ErrorDetails) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type PrefixConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A               string                      `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	B               float32                     `protobuf:"fixed32,2,opt,name=b,proto3" json:"b,omitempty"`
	C               int32                       `protobuf:"varint,3,opt,name=c,proto3" json:"c,omitempty"`
	DValues         []PrefixConfig_DValues_Enum `protobuf:"varint,4,rep,packed,name=d_values,json=dValues,proto3,enum=sanity.PrefixConfig_DValues_Enum" json:"d_values,omitempty"`
	E               *EObject                    `protobuf:"bytes,5,opt,name=e,proto3,oneof" json:"e,omitempty"`
	F               *FObject                    `protobuf:"bytes,6,opt,name=f,proto3,oneof" json:"f,omitempty"`
	G               []*GObject                  `protobuf:"bytes,7,rep,name=g,proto3" json:"g,omitempty"`
	H               *bool                       `protobuf:"varint,8,opt,name=h,proto3,oneof" json:"h,omitempty"`
	I               []byte                      `protobuf:"bytes,9,opt,name=i,proto3,oneof" json:"i,omitempty"`
	J               []*JObject                  `protobuf:"bytes,10,rep,name=j,proto3" json:"j,omitempty"`
	K               *KObject                    `protobuf:"bytes,11,opt,name=k,proto3,oneof" json:"k,omitempty"`
	L               *LObject                    `protobuf:"bytes,12,opt,name=l,proto3,oneof" json:"l,omitempty"`
	Level           *LevelOne                   `protobuf:"bytes,13,opt,name=level,proto3,oneof" json:"level,omitempty"`
	Mandatory       *Mandate                    `protobuf:"bytes,14,opt,name=mandatory,proto3,oneof" json:"mandatory,omitempty"`
	Ipv4Pattern     *Ipv4Pattern                `protobuf:"bytes,15,opt,name=ipv4_pattern,json=ipv4Pattern,proto3,oneof" json:"ipv4_pattern,omitempty"`
	Ipv6Pattern     *Ipv6Pattern                `protobuf:"bytes,16,opt,name=ipv6_pattern,json=ipv6Pattern,proto3,oneof" json:"ipv6_pattern,omitempty"`
	MacPattern      *MacPattern                 `protobuf:"bytes,17,opt,name=mac_pattern,json=macPattern,proto3,oneof" json:"mac_pattern,omitempty"`
	IntegerPattern  *IntegerPattern             `protobuf:"bytes,18,opt,name=integer_pattern,json=integerPattern,proto3,oneof" json:"integer_pattern,omitempty"`
	ChecksumPattern *ChecksumPattern            `protobuf:"bytes,19,opt,name=checksum_pattern,json=checksumPattern,proto3,oneof" json:"checksum_pattern,omitempty"`
	Name            *string                     `protobuf:"bytes,20,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *PrefixConfig) Reset() {
	*x = PrefixConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefixConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixConfig) ProtoMessage() {}

func (x *PrefixConfig) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixConfig.ProtoReflect.Descriptor instead.
func (*PrefixConfig) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{6}
}

func (x *PrefixConfig) GetA() string {
	if x != nil {
		return x.A
	}
	return ""
}

func (x *PrefixConfig) GetB() float32 {
	if x != nil {
		return x.B
	}
	return 0
}

func (x *PrefixConfig) GetC() int32 {
	if x != nil {
		return x.C
	}
	return 0
}

func (x *PrefixConfig) GetDValues() []PrefixConfig_DValues_Enum {
	if x != nil {
		return x.DValues
	}
	return nil
}

func (x *PrefixConfig) GetE() *EObject {
	if x != nil {
		return x.E
	}
	return nil
}

func (x *PrefixConfig) GetF() *FObject {
	if x != nil {
		return x.F
	}
	return nil
}

func (x *PrefixConfig) GetG() []*GObject {
	if x != nil {
		return x.G
	}
	return nil
}

func (x *PrefixConfig) GetH() bool {
	if x != nil && x.H != nil {
		return *x.H
	}
	return false
}

func (x *PrefixConfig) GetI() []byte {
	if x != nil {
		return x.I
	}
	return nil
}

func (x *PrefixConfig) GetJ() []*JObject {
	if x != nil {
		return x.J
	}
	return nil
}

func (x *PrefixConfig) GetK() *KObject {
	if x != nil {
		return x.K
	}
	return nil
}

func (x *PrefixConfig) GetL() *LObject {
	if x != nil {
		return x.L
	}
	return nil
}

func (x *PrefixConfig) GetLevel() *LevelOne {
	if x != nil {
		return x.Level
	}
	return nil
}

func (x *PrefixConfig) GetMandatory() *Mandate {
	if x != nil {
		return x.Mandatory
	}
	return nil
}

func (x *PrefixConfig) GetIpv4Pattern() *Ipv4Pattern {
	if x != nil {
		return x.Ipv4Pattern
	}
	return nil
}

func (x *PrefixConfig) GetIpv6Pattern() *Ipv6Pattern {
	if x != nil {
		return x.Ipv6Pattern
	}
	return nil
}

func (x *PrefixConfig) GetMacPattern() *MacPattern {
	if x != nil {
		return x.MacPattern
	}
	return nil
}

func (x *PrefixConfig) GetIntegerPattern() *IntegerPattern {
	if x != nil {
		return x.IntegerPattern
	}
	return nil
}

func (x *PrefixConfig) GetChecksumPattern() *ChecksumPattern {
	if x != nil {
		return x.ChecksumPattern
	}
	return nil
}

func (x *PrefixConfig) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type GObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GA     *string              `protobuf:"bytes,1,opt,name=g_a,json=gA,proto3,oneof" json:"g_a,omitempty"`
	GB     *int32               `protobuf:"varint,2,opt,name=g_b,json=gB,proto3,oneof" json:"g_b,omitempty"`
	GC     *float32             `protobuf:"fixed32,3,opt,name=g_c,json=gC,proto3,oneof" json:"g_c,omitempty"`
	Choice *GObject_Choice_Enum `protobuf:"varint,4,opt,name=choice,proto3,enum=sanity.GObject_Choice_Enum,oneof" json:"choice,omitempty"`
	GD     *string              `protobuf:"bytes,5,opt,name=g_d,json=gD,proto3,oneof" json:"g_d,omitempty"`
	GE     *float64             `protobuf:"fixed64,6,opt,name=g_e,json=gE,proto3,oneof" json:"g_e,omitempty"`
	GF     *GObject_GF_Enum     `protobuf:"varint,7,opt,name=g_f,json=gF,proto3,enum=sanity.GObject_GF_Enum,oneof" json:"g_f,omitempty"`
	Name   *string              `protobuf:"bytes,8,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *GObject) Reset() {
	*x = GObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GObject) ProtoMessage() {}

func (x *GObject) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GObject.ProtoReflect.Descriptor instead.
func (*GObject) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{7}
}

func (x *GObject) GetGA() string {
	if x != nil && x.GA != nil {
		return *x.GA
	}
	return ""
}

func (x *GObject) GetGB() int32 {
	if x != nil && x.GB != nil {
		return *x.GB
	}
	return 0
}

func (x *GObject) GetGC() float32 {
	if x != nil && x.GC != nil {
		return *x.GC
	}
	return 0
}

func (x *GObject) GetChoice() GObject_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return GObject_Choice_unspecified
}

func (x *GObject) GetGD() string {
	if x != nil && x.GD != nil {
		return *x.GD
	}
	return ""
}

func (x *GObject) GetGE() float64 {
	if x != nil && x.GE != nil {
		return *x.GE
	}
	return 0
}

func (x *GObject) GetGF() GObject_GF_Enum {
	if x != nil && x.GF != nil {
		return *x.GF
	}
	return GObject_GF_unspecified
}

func (x *GObject) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type EObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EA      float32 `protobuf:"fixed32,1,opt,name=e_a,json=eA,proto3" json:"e_a,omitempty"`
	EB      float64 `protobuf:"fixed64,2,opt,name=e_b,json=eB,proto3" json:"e_b,omitempty"`
	Name    *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	MParam1 *string `protobuf:"bytes,4,opt,name=m_param1,json=mParam1,proto3,oneof" json:"m_param1,omitempty"`
	MParam2 *string `protobuf:"bytes,5,opt,name=m_param2,json=mParam2,proto3,oneof" json:"m_param2,omitempty"`
}

func (x *EObject) Reset() {
	*x = EObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EObject) ProtoMessage() {}

func (x *EObject) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EObject.ProtoReflect.Descriptor instead.
func (*EObject) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{8}
}

func (x *EObject) GetEA() float32 {
	if x != nil {
		return x.EA
	}
	return 0
}

func (x *EObject) GetEB() float64 {
	if x != nil {
		return x.EB
	}
	return 0
}

func (x *EObject) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EObject) GetMParam1() string {
	if x != nil && x.MParam1 != nil {
		return *x.MParam1
	}
	return ""
}

func (x *EObject) GetMParam2() string {
	if x != nil && x.MParam2 != nil {
		return *x.MParam2
	}
	return ""
}

type FObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Choice *FObject_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=sanity.FObject_Choice_Enum,oneof" json:"choice,omitempty"`
	FA     *string              `protobuf:"bytes,2,opt,name=f_a,json=fA,proto3,oneof" json:"f_a,omitempty"`
	FB     *float64             `protobuf:"fixed64,3,opt,name=f_b,json=fB,proto3,oneof" json:"f_b,omitempty"`
}

func (x *FObject) Reset() {
	*x = FObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FObject) ProtoMessage() {}

func (x *FObject) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FObject.ProtoReflect.Descriptor instead.
func (*FObject) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{9}
}

func (x *FObject) GetChoice() FObject_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return FObject_Choice_unspecified
}

func (x *FObject) GetFA() string {
	if x != nil && x.FA != nil {
		return *x.FA
	}
	return ""
}

func (x *FObject) GetFB() float64 {
	if x != nil && x.FB != nil {
		return *x.FB
	}
	return 0
}

type JObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Choice *JObject_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=sanity.JObject_Choice_Enum,oneof" json:"choice,omitempty"`
	JA     *EObject             `protobuf:"bytes,2,opt,name=j_a,json=jA,proto3,oneof" json:"j_a,omitempty"`
	JB     *FObject             `protobuf:"bytes,3,opt,name=j_b,json=jB,proto3,oneof" json:"j_b,omitempty"`
}

func (x *JObject) Reset() {
	*x = JObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JObject) ProtoMessage() {}

func (x *JObject) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JObject.ProtoReflect.Descriptor instead.
func (*JObject) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{10}
}

func (x *JObject) GetChoice() JObject_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return JObject_Choice_unspecified
}

func (x *JObject) GetJA() *EObject {
	if x != nil {
		return x.JA
	}
	return nil
}

func (x *JObject) GetJB() *FObject {
	if x != nil {
		return x.JB
	}
	return nil
}

type KObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EObject *EObject `protobuf:"bytes,1,opt,name=e_object,json=eObject,proto3,oneof" json:"e_object,omitempty"`
	FObject *FObject `protobuf:"bytes,2,opt,name=f_object,json=fObject,proto3,oneof" json:"f_object,omitempty"`
}

func (x *KObject) Reset() {
	*x = KObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KObject) ProtoMessage() {}

func (x *KObject) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KObject.ProtoReflect.Descriptor instead.
func (*KObject) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{11}
}

func (x *KObject) GetEObject() *EObject {
	if x != nil {
		return x.EObject
	}
	return nil
}

func (x *KObject) GetFObject() *FObject {
	if x != nil {
		return x.FObject
	}
	return nil
}

type LObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String_ *string  `protobuf:"bytes,1,opt,name=string,proto3,oneof" json:"string,omitempty"`
	Integer *int32   `protobuf:"varint,2,opt,name=integer,proto3,oneof" json:"integer,omitempty"`
	Float   *float32 `protobuf:"fixed32,3,opt,name=float,proto3,oneof" json:"float,omitempty"`
	Double  *float64 `protobuf:"fixed64,4,opt,name=double,proto3,oneof" json:"double,omitempty"`
	Mac     *string  `protobuf:"bytes,5,opt,name=mac,proto3,oneof" json:"mac,omitempty"`
	Ipv4    *string  `protobuf:"bytes,6,opt,name=ipv4,proto3,oneof" json:"ipv4,omitempty"`
	Ipv6    *string  `protobuf:"bytes,7,opt,name=ipv6,proto3,oneof" json:"ipv6,omitempty"`
	Hex     *string  `protobuf:"bytes,8,opt,name=hex,proto3,oneof" json:"hex,omitempty"`
}

func (x *LObject) Reset() {
	*x = LObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LObject) ProtoMessage() {}

func (x *LObject) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LObject.ProtoReflect.Descriptor instead.
func (*LObject) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{12}
}

func (x *LObject) GetString_() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

func (x *LObject) GetInteger() int32 {
	if x != nil && x.Integer != nil {
		return *x.Integer
	}
	return 0
}

func (x *LObject) GetFloat() float32 {
	if x != nil && x.Float != nil {
		return *x.Float
	}
	return 0
}

func (x *LObject) GetDouble() float64 {
	if x != nil && x.Double != nil {
		return *x.Double
	}
	return 0
}

func (x *LObject) GetMac() string {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return ""
}

func (x *LObject) GetIpv4() string {
	if x != nil && x.Ipv4 != nil {
		return *x.Ipv4
	}
	return ""
}

func (x *LObject) GetIpv6() string {
	if x != nil && x.Ipv6 != nil {
		return *x.Ipv6
	}
	return ""
}

func (x *LObject) GetHex() string {
	if x != nil && x.Hex != nil {
		return *x.Hex
	}
	return ""
}

type Mandate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiredParam string `protobuf:"bytes,1,opt,name=required_param,json=requiredParam,proto3" json:"required_param,omitempty"`
}

func (x *Mandate) Reset() {
	*x = Mandate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mandate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mandate) ProtoMessage() {}

func (x *Mandate) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mandate.ProtoReflect.Descriptor instead.
func (*Mandate) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{13}
}

func (x *Mandate) GetRequiredParam() string {
	if x != nil {
		return x.RequiredParam
	}
	return ""
}

type LevelOne struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L1P1 *LevelTwo  `protobuf:"bytes,1,opt,name=l1_p1,json=l1P1,proto3,oneof" json:"l1_p1,omitempty"`
	L1P2 *LevelFour `protobuf:"bytes,2,opt,name=l1_p2,json=l1P2,proto3,oneof" json:"l1_p2,omitempty"`
}

func (x *LevelOne) Reset() {
	*x = LevelOne{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LevelOne) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LevelOne) ProtoMessage() {}

func (x *LevelOne) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LevelOne.ProtoReflect.Descriptor instead.
func (*LevelOne) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{14}
}

func (x *LevelOne) GetL1P1() *LevelTwo {
	if x != nil {
		return x.L1P1
	}
	return nil
}

func (x *LevelOne) GetL1P2() *LevelFour {
	if x != nil {
		return x.L1P2
	}
	return nil
}

type LevelTwo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L2P1 *LevelThree `protobuf:"bytes,1,opt,name=l2_p1,json=l2P1,proto3,oneof" json:"l2_p1,omitempty"`
}

func (x *LevelTwo) Reset() {
	*x = LevelTwo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LevelTwo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LevelTwo) ProtoMessage() {}

func (x *LevelTwo) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LevelTwo.ProtoReflect.Descriptor instead.
func (*LevelTwo) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{15}
}

func (x *LevelTwo) GetL2P1() *LevelThree {
	if x != nil {
		return x.L2P1
	}
	return nil
}

type LevelThree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L3P1 *string `protobuf:"bytes,1,opt,name=l3_p1,json=l3P1,proto3,oneof" json:"l3_p1,omitempty"`
}

func (x *LevelThree) Reset() {
	*x = LevelThree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LevelThree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LevelThree) ProtoMessage() {}

func (x *LevelThree) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LevelThree.ProtoReflect.Descriptor instead.
func (*LevelThree) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{16}
}

func (x *LevelThree) GetL3P1() string {
	if x != nil && x.L3P1 != nil {
		return *x.L3P1
	}
	return ""
}

type LevelFour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L4P1 *LevelOne `protobuf:"bytes,1,opt,name=l4_p1,json=l4P1,proto3,oneof" json:"l4_p1,omitempty"`
}

func (x *LevelFour) Reset() {
	*x = LevelFour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LevelFour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LevelFour) ProtoMessage() {}

func (x *LevelFour) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LevelFour.ProtoReflect.Descriptor instead.
func (*LevelFour) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{17}
}

func (x *LevelFour) GetL4P1() *LevelOne {
	if x != nil {
		return x.L4P1
	}
	return nil
}

type Ipv4Pattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4 *PatternIpv4PatternIpv4 `protobuf:"bytes,1,opt,name=ipv4,proto3,oneof" json:"ipv4,omitempty"`
}

func (x *Ipv4Pattern) Reset() {
	*x = Ipv4Pattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv4Pattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv4Pattern) ProtoMessage() {}

func (x *Ipv4Pattern) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv4Pattern.ProtoReflect.Descriptor instead.
func (*Ipv4Pattern) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{18}
}

func (x *Ipv4Pattern) GetIpv4() *PatternIpv4PatternIpv4 {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

type Ipv6Pattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv6 *PatternIpv6PatternIpv6 `protobuf:"bytes,1,opt,name=ipv6,proto3,oneof" json:"ipv6,omitempty"`
}

func (x *Ipv6Pattern) Reset() {
	*x = Ipv6Pattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6Pattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6Pattern) ProtoMessage() {}

func (x *Ipv6Pattern) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6Pattern.ProtoReflect.Descriptor instead.
func (*Ipv6Pattern) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{19}
}

func (x *Ipv6Pattern) GetIpv6() *PatternIpv6PatternIpv6 {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

type MacPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mac *PatternMacPatternMac `protobuf:"bytes,1,opt,name=mac,proto3,oneof" json:"mac,omitempty"`
}

func (x *MacPattern) Reset() {
	*x = MacPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacPattern) ProtoMessage() {}

func (x *MacPattern) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacPattern.ProtoReflect.Descriptor instead.
func (*MacPattern) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{20}
}

func (x *MacPattern) GetMac() *PatternMacPatternMac {
	if x != nil {
		return x.Mac
	}
	return nil
}

type IntegerPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Integer *PatternIntegerPatternInteger `protobuf:"bytes,1,opt,name=integer,proto3,oneof" json:"integer,omitempty"`
}

func (x *IntegerPattern) Reset() {
	*x = IntegerPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegerPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegerPattern) ProtoMessage() {}

func (x *IntegerPattern) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegerPattern.ProtoReflect.Descriptor instead.
func (*IntegerPattern) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{21}
}

func (x *IntegerPattern) GetInteger() *PatternIntegerPatternInteger {
	if x != nil {
		return x.Integer
	}
	return nil
}

type ChecksumPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checksum *PatternChecksumPatternChecksum `protobuf:"bytes,1,opt,name=checksum,proto3,oneof" json:"checksum,omitempty"`
}

func (x *ChecksumPattern) Reset() {
	*x = ChecksumPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChecksumPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChecksumPattern) ProtoMessage() {}

func (x *ChecksumPattern) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChecksumPattern.ProtoReflect.Descriptor instead.
func (*ChecksumPattern) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{22}
}

func (x *ChecksumPattern) GetChecksum() *PatternChecksumPatternChecksum {
	if x != nil {
		return x.Checksum
	}
	return nil
}

type PatternIpv4PatternIpv4Counter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *string `protobuf:"bytes,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	Step  *string `protobuf:"bytes,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	Count *int32  `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternIpv4PatternIpv4Counter) Reset() {
	*x = PatternIpv4PatternIpv4Counter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternIpv4PatternIpv4Counter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternIpv4PatternIpv4Counter) ProtoMessage() {}

func (x *PatternIpv4PatternIpv4Counter) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternIpv4PatternIpv4Counter.ProtoReflect.Descriptor instead.
func (*PatternIpv4PatternIpv4Counter) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{23}
}

func (x *PatternIpv4PatternIpv4Counter) GetStart() string {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return ""
}

func (x *PatternIpv4PatternIpv4Counter) GetStep() string {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return ""
}

func (x *PatternIpv4PatternIpv4Counter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type PatternIpv4PatternIpv4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Choice    *PatternIpv4PatternIpv4_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=sanity.PatternIpv4PatternIpv4_Choice_Enum,oneof" json:"choice,omitempty"`
	Value     *string                             `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	Values    []string                            `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	Increment *PatternIpv4PatternIpv4Counter      `protobuf:"bytes,4,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	Decrement *PatternIpv4PatternIpv4Counter      `protobuf:"bytes,5,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternIpv4PatternIpv4) Reset() {
	*x = PatternIpv4PatternIpv4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternIpv4PatternIpv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternIpv4PatternIpv4) ProtoMessage() {}

func (x *PatternIpv4PatternIpv4) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternIpv4PatternIpv4.ProtoReflect.Descriptor instead.
func (*PatternIpv4PatternIpv4) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{24}
}

func (x *PatternIpv4PatternIpv4) GetChoice() PatternIpv4PatternIpv4_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternIpv4PatternIpv4_Choice_unspecified
}

func (x *PatternIpv4PatternIpv4) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *PatternIpv4PatternIpv4) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternIpv4PatternIpv4) GetIncrement() *PatternIpv4PatternIpv4Counter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternIpv4PatternIpv4) GetDecrement() *PatternIpv4PatternIpv4Counter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

type PatternIpv6PatternIpv6Counter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *string `protobuf:"bytes,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	Step  *string `protobuf:"bytes,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	Count *int32  `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternIpv6PatternIpv6Counter) Reset() {
	*x = PatternIpv6PatternIpv6Counter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternIpv6PatternIpv6Counter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternIpv6PatternIpv6Counter) ProtoMessage() {}

func (x *PatternIpv6PatternIpv6Counter) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternIpv6PatternIpv6Counter.ProtoReflect.Descriptor instead.
func (*PatternIpv6PatternIpv6Counter) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{25}
}

func (x *PatternIpv6PatternIpv6Counter) GetStart() string {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return ""
}

func (x *PatternIpv6PatternIpv6Counter) GetStep() string {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return ""
}

func (x *PatternIpv6PatternIpv6Counter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type PatternIpv6PatternIpv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Choice    *PatternIpv6PatternIpv6_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=sanity.PatternIpv6PatternIpv6_Choice_Enum,oneof" json:"choice,omitempty"`
	Value     *string                             `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	Values    []string                            `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	Increment *PatternIpv6PatternIpv6Counter      `protobuf:"bytes,4,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	Decrement *PatternIpv6PatternIpv6Counter      `protobuf:"bytes,5,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternIpv6PatternIpv6) Reset() {
	*x = PatternIpv6PatternIpv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternIpv6PatternIpv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternIpv6PatternIpv6) ProtoMessage() {}

func (x *PatternIpv6PatternIpv6) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternIpv6PatternIpv6.ProtoReflect.Descriptor instead.
func (*PatternIpv6PatternIpv6) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{26}
}

func (x *PatternIpv6PatternIpv6) GetChoice() PatternIpv6PatternIpv6_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternIpv6PatternIpv6_Choice_unspecified
}

func (x *PatternIpv6PatternIpv6) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *PatternIpv6PatternIpv6) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternIpv6PatternIpv6) GetIncrement() *PatternIpv6PatternIpv6Counter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternIpv6PatternIpv6) GetDecrement() *PatternIpv6PatternIpv6Counter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

type PatternMacPatternMacCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *string `protobuf:"bytes,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	Step  *string `protobuf:"bytes,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	Count *int32  `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternMacPatternMacCounter) Reset() {
	*x = PatternMacPatternMacCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternMacPatternMacCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternMacPatternMacCounter) ProtoMessage() {}

func (x *PatternMacPatternMacCounter) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternMacPatternMacCounter.ProtoReflect.Descriptor instead.
func (*PatternMacPatternMacCounter) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{27}
}

func (x *PatternMacPatternMacCounter) GetStart() string {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return ""
}

func (x *PatternMacPatternMacCounter) GetStep() string {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return ""
}

func (x *PatternMacPatternMacCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type PatternMacPatternMac struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Choice    *PatternMacPatternMac_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=sanity.PatternMacPatternMac_Choice_Enum,oneof" json:"choice,omitempty"`
	Value     *string                           `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	Values    []string                          `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	Increment *PatternMacPatternMacCounter      `protobuf:"bytes,4,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	Decrement *PatternMacPatternMacCounter      `protobuf:"bytes,5,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternMacPatternMac) Reset() {
	*x = PatternMacPatternMac{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternMacPatternMac) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternMacPatternMac) ProtoMessage() {}

func (x *PatternMacPatternMac) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternMacPatternMac.ProtoReflect.Descriptor instead.
func (*PatternMacPatternMac) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{28}
}

func (x *PatternMacPatternMac) GetChoice() PatternMacPatternMac_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternMacPatternMac_Choice_unspecified
}

func (x *PatternMacPatternMac) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *PatternMacPatternMac) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternMacPatternMac) GetIncrement() *PatternMacPatternMacCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternMacPatternMac) GetDecrement() *PatternMacPatternMacCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

type PatternIntegerPatternIntegerCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	Step  *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternIntegerPatternIntegerCounter) Reset() {
	*x = PatternIntegerPatternIntegerCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternIntegerPatternIntegerCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternIntegerPatternIntegerCounter) ProtoMessage() {}

func (x *PatternIntegerPatternIntegerCounter) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternIntegerPatternIntegerCounter.ProtoReflect.Descriptor instead.
func (*PatternIntegerPatternIntegerCounter) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{29}
}

func (x *PatternIntegerPatternIntegerCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternIntegerPatternIntegerCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternIntegerPatternIntegerCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type PatternIntegerPatternInteger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Choice    *PatternIntegerPatternInteger_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=sanity.PatternIntegerPatternInteger_Choice_Enum,oneof" json:"choice,omitempty"`
	Value     *int32                                    `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	Values    []int32                                   `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	Increment *PatternIntegerPatternIntegerCounter      `protobuf:"bytes,4,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	Decrement *PatternIntegerPatternIntegerCounter      `protobuf:"bytes,5,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternIntegerPatternInteger) Reset() {
	*x = PatternIntegerPatternInteger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternIntegerPatternInteger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternIntegerPatternInteger) ProtoMessage() {}

func (x *PatternIntegerPatternInteger) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternIntegerPatternInteger.ProtoReflect.Descriptor instead.
func (*PatternIntegerPatternInteger) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{30}
}

func (x *PatternIntegerPatternInteger) GetChoice() PatternIntegerPatternInteger_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternIntegerPatternInteger_Choice_unspecified
}

func (x *PatternIntegerPatternInteger) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternIntegerPatternInteger) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternIntegerPatternInteger) GetIncrement() *PatternIntegerPatternIntegerCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternIntegerPatternInteger) GetDecrement() *PatternIntegerPatternIntegerCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

type PatternChecksumPatternChecksum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Choice    PatternChecksumPatternChecksum_Choice_Enum     `protobuf:"varint,1,opt,name=choice,proto3,enum=sanity.PatternChecksumPatternChecksum_Choice_Enum" json:"choice,omitempty"`
	Generated *PatternChecksumPatternChecksum_Generated_Enum `protobuf:"varint,2,opt,name=generated,proto3,enum=sanity.PatternChecksumPatternChecksum_Generated_Enum,oneof" json:"generated,omitempty"`
	Custom    *int32                                         `protobuf:"varint,3,opt,name=custom,proto3,oneof" json:"custom,omitempty"`
}

func (x *PatternChecksumPatternChecksum) Reset() {
	*x = PatternChecksumPatternChecksum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternChecksumPatternChecksum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternChecksumPatternChecksum) ProtoMessage() {}

func (x *PatternChecksumPatternChecksum) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternChecksumPatternChecksum.ProtoReflect.Descriptor instead.
func (*PatternChecksumPatternChecksum) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{31}
}

func (x *PatternChecksumPatternChecksum) GetChoice() PatternChecksumPatternChecksum_Choice_Enum {
	if x != nil {
		return x.Choice
	}
	return PatternChecksumPatternChecksum_Choice_unspecified
}

func (x *PatternChecksumPatternChecksum) GetGenerated() PatternChecksumPatternChecksum_Generated_Enum {
	if x != nil && x.Generated != nil {
		return *x.Generated
	}
	return PatternChecksumPatternChecksum_Generated_unspecified
}

func (x *PatternChecksumPatternChecksum) GetCustom() int32 {
	if x != nil && x.Custom != nil {
		return *x.Custom
	}
	return 0
}

type SetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixConfig *PrefixConfig `protobuf:"bytes,1,opt,name=prefix_config,json=prefixConfig,proto3" json:"prefix_config,omitempty"`
}

func (x *SetConfigRequest) Reset() {
	*x = SetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigRequest) ProtoMessage() {}

func (x *SetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigRequest.ProtoReflect.Descriptor instead.
func (*SetConfigRequest) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{32}
}

func (x *SetConfigRequest) GetPrefixConfig() *PrefixConfig {
	if x != nil {
		return x.PrefixConfig
	}
	return nil
}

type SetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Statuscode:
	//	*SetConfigResponse_StatusCode_200
	//	*SetConfigResponse_StatusCode_400
	//	*SetConfigResponse_StatusCode_500
	Statuscode isSetConfigResponse_Statuscode `protobuf_oneof:"statuscode"`
}

func (x *SetConfigResponse) Reset() {
	*x = SetConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigResponse) ProtoMessage() {}

func (x *SetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigResponse.ProtoReflect.Descriptor instead.
func (*SetConfigResponse) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{33}
}

func (m *SetConfigResponse) GetStatuscode() isSetConfigResponse_Statuscode {
	if m != nil {
		return m.Statuscode
	}
	return nil
}

func (x *SetConfigResponse) GetStatusCode_200() *SetConfigResponse_StatusCode200 {
	if x, ok := x.GetStatuscode().(*SetConfigResponse_StatusCode_200); ok {
		return x.StatusCode_200
	}
	return nil
}

func (x *SetConfigResponse) GetStatusCode_400() *SetConfigResponse_StatusCode400 {
	if x, ok := x.GetStatuscode().(*SetConfigResponse_StatusCode_400); ok {
		return x.StatusCode_400
	}
	return nil
}

func (x *SetConfigResponse) GetStatusCode_500() *SetConfigResponse_StatusCode500 {
	if x, ok := x.GetStatuscode().(*SetConfigResponse_StatusCode_500); ok {
		return x.StatusCode_500
	}
	return nil
}

type isSetConfigResponse_Statuscode interface {
	isSetConfigResponse_Statuscode()
}

type SetConfigResponse_StatusCode_200 struct {
	StatusCode_200 *SetConfigResponse_StatusCode200 `protobuf:"bytes,1,opt,name=status_code_200,json=statusCode200,proto3,oneof"`
}

type SetConfigResponse_StatusCode_400 struct {
	StatusCode_400 *SetConfigResponse_StatusCode400 `protobuf:"bytes,2,opt,name=status_code_400,json=statusCode400,proto3,oneof"`
}

type SetConfigResponse_StatusCode_500 struct {
	StatusCode_500 *SetConfigResponse_StatusCode500 `protobuf:"bytes,3,opt,name=status_code_500,json=statusCode500,proto3,oneof"`
}

func (*SetConfigResponse_StatusCode_200) isSetConfigResponse_Statuscode() {}

func (*SetConfigResponse_StatusCode_400) isSetConfigResponse_Statuscode() {}

func (*SetConfigResponse_StatusCode_500) isSetConfigResponse_Statuscode() {}

type GetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Statuscode:
	//	*GetConfigResponse_StatusCode_200
	Statuscode isGetConfigResponse_Statuscode `protobuf_oneof:"statuscode"`
}

func (x *GetConfigResponse) Reset() {
	*x = GetConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigResponse) ProtoMessage() {}

func (x *GetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigResponse.ProtoReflect.Descriptor instead.
func (*GetConfigResponse) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{34}
}

func (m *GetConfigResponse) GetStatuscode() isGetConfigResponse_Statuscode {
	if m != nil {
		return m.Statuscode
	}
	return nil
}

func (x *GetConfigResponse) GetStatusCode_200() *GetConfigResponse_StatusCode200 {
	if x, ok := x.GetStatuscode().(*GetConfigResponse_StatusCode_200); ok {
		return x.StatusCode_200
	}
	return nil
}

type isGetConfigResponse_Statuscode interface {
	isGetConfigResponse_Statuscode()
}

type GetConfigResponse_StatusCode_200 struct {
	StatusCode_200 *GetConfigResponse_StatusCode200 `protobuf:"bytes,1,opt,name=status_code_200,json=statusCode200,proto3,oneof"`
}

func (*GetConfigResponse_StatusCode_200) isGetConfigResponse_Statuscode() {}

type PrefixConfig_DValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PrefixConfig_DValues) Reset() {
	*x = PrefixConfig_DValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefixConfig_DValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixConfig_DValues) ProtoMessage() {}

func (x *PrefixConfig_DValues) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixConfig_DValues.ProtoReflect.Descriptor instead.
func (*PrefixConfig_DValues) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{6, 0}
}

type GObject_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GObject_Choice) Reset() {
	*x = GObject_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GObject_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GObject_Choice) ProtoMessage() {}

func (x *GObject_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GObject_Choice.ProtoReflect.Descriptor instead.
func (*GObject_Choice) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{7, 0}
}

type GObject_GF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GObject_GF) Reset() {
	*x = GObject_GF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GObject_GF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GObject_GF) ProtoMessage() {}

func (x *GObject_GF) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GObject_GF.ProtoReflect.Descriptor instead.
func (*GObject_GF) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{7, 1}
}

type FObject_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FObject_Choice) Reset() {
	*x = FObject_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FObject_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FObject_Choice) ProtoMessage() {}

func (x *FObject_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FObject_Choice.ProtoReflect.Descriptor instead.
func (*FObject_Choice) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{9, 0}
}

type JObject_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JObject_Choice) Reset() {
	*x = JObject_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JObject_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JObject_Choice) ProtoMessage() {}

func (x *JObject_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JObject_Choice.ProtoReflect.Descriptor instead.
func (*JObject_Choice) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{10, 0}
}

type PatternIpv4PatternIpv4_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternIpv4PatternIpv4_Choice) Reset() {
	*x = PatternIpv4PatternIpv4_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternIpv4PatternIpv4_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternIpv4PatternIpv4_Choice) ProtoMessage() {}

func (x *PatternIpv4PatternIpv4_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternIpv4PatternIpv4_Choice.ProtoReflect.Descriptor instead.
func (*PatternIpv4PatternIpv4_Choice) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{24, 0}
}

type PatternIpv6PatternIpv6_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternIpv6PatternIpv6_Choice) Reset() {
	*x = PatternIpv6PatternIpv6_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternIpv6PatternIpv6_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternIpv6PatternIpv6_Choice) ProtoMessage() {}

func (x *PatternIpv6PatternIpv6_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternIpv6PatternIpv6_Choice.ProtoReflect.Descriptor instead.
func (*PatternIpv6PatternIpv6_Choice) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{26, 0}
}

type PatternMacPatternMac_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternMacPatternMac_Choice) Reset() {
	*x = PatternMacPatternMac_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternMacPatternMac_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternMacPatternMac_Choice) ProtoMessage() {}

func (x *PatternMacPatternMac_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternMacPatternMac_Choice.ProtoReflect.Descriptor instead.
func (*PatternMacPatternMac_Choice) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{28, 0}
}

type PatternIntegerPatternInteger_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternIntegerPatternInteger_Choice) Reset() {
	*x = PatternIntegerPatternInteger_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternIntegerPatternInteger_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternIntegerPatternInteger_Choice) ProtoMessage() {}

func (x *PatternIntegerPatternInteger_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternIntegerPatternInteger_Choice.ProtoReflect.Descriptor instead.
func (*PatternIntegerPatternInteger_Choice) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{30, 0}
}

type PatternChecksumPatternChecksum_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternChecksumPatternChecksum_Choice) Reset() {
	*x = PatternChecksumPatternChecksum_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternChecksumPatternChecksum_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternChecksumPatternChecksum_Choice) ProtoMessage() {}

func (x *PatternChecksumPatternChecksum_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternChecksumPatternChecksum_Choice.ProtoReflect.Descriptor instead.
func (*PatternChecksumPatternChecksum_Choice) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{31, 0}
}

type PatternChecksumPatternChecksum_Generated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternChecksumPatternChecksum_Generated) Reset() {
	*x = PatternChecksumPatternChecksum_Generated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternChecksumPatternChecksum_Generated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternChecksumPatternChecksum_Generated) ProtoMessage() {}

func (x *PatternChecksumPatternChecksum_Generated) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternChecksumPatternChecksum_Generated.ProtoReflect.Descriptor instead.
func (*PatternChecksumPatternChecksum_Generated) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{31, 1}
}

type SetConfigResponse_StatusCode200 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *SetConfigResponse_StatusCode200) Reset() {
	*x = SetConfigResponse_StatusCode200{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConfigResponse_StatusCode200) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigResponse_StatusCode200) ProtoMessage() {}

func (x *SetConfigResponse_StatusCode200) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigResponse_StatusCode200.ProtoReflect.Descriptor instead.
func (*SetConfigResponse_StatusCode200) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{33, 0}
}

func (x *SetConfigResponse_StatusCode200) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type SetConfigResponse_StatusCode400 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorDetails *ErrorDetails `protobuf:"bytes,1,opt,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty"`
}

func (x *SetConfigResponse_StatusCode400) Reset() {
	*x = SetConfigResponse_StatusCode400{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConfigResponse_StatusCode400) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigResponse_StatusCode400) ProtoMessage() {}

func (x *SetConfigResponse_StatusCode400) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigResponse_StatusCode400.ProtoReflect.Descriptor instead.
func (*SetConfigResponse_StatusCode400) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{33, 1}
}

func (x *SetConfigResponse_StatusCode400) GetErrorDetails() *ErrorDetails {
	if x != nil {
		return x.ErrorDetails
	}
	return nil
}

type SetConfigResponse_StatusCode500 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SetConfigResponse_StatusCode500) Reset() {
	*x = SetConfigResponse_StatusCode500{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConfigResponse_StatusCode500) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigResponse_StatusCode500) ProtoMessage() {}

func (x *SetConfigResponse_StatusCode500) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigResponse_StatusCode500.ProtoReflect.Descriptor instead.
func (*SetConfigResponse_StatusCode500) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{33, 2}
}

func (x *SetConfigResponse_StatusCode500) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetConfigResponse_StatusCode200 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixConfig *PrefixConfig `protobuf:"bytes,1,opt,name=prefix_config,json=prefixConfig,proto3" json:"prefix_config,omitempty"`
}

func (x *GetConfigResponse_StatusCode200) Reset() {
	*x = GetConfigResponse_StatusCode200{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sanity_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigResponse_StatusCode200) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigResponse_StatusCode200) ProtoMessage() {}

func (x *GetConfigResponse_StatusCode200) ProtoReflect() protoreflect.Message {
	mi := &file_sanity_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigResponse_StatusCode200.ProtoReflect.Descriptor instead.
func (*GetConfigResponse_StatusCode200) Descriptor() ([]byte, []int) {
	return file_sanity_proto_rawDescGZIP(), []int{34, 0}
}

func (x *GetConfigResponse_StatusCode200) GetPrefixConfig() *PrefixConfig {
	if x != nil {
		return x.PrefixConfig
	}
	return nil
}

var file_sanity_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptor.MessageOptions)(nil),
		ExtensionType: (*OpenApiMsgOpt)(nil),
		Field:         50001,
		Name:          "sanity.msg_meta",
		Tag:           "bytes,50001,opt,name=msg_meta",
		Filename:      "sanity.proto",
	},
	{
		ExtendedType:  (*descriptor.FieldOptions)(nil),
		ExtensionType: (*OpenApiFldOpt)(nil),
		Field:         50002,
		Name:          "sanity.fld_meta",
		Tag:           "bytes,50002,opt,name=fld_meta",
		Filename:      "sanity.proto",
	},
	{
		ExtendedType:  (*descriptor.ServiceOptions)(nil),
		ExtensionType: (*OpenApiSvcOpt)(nil),
		Field:         50003,
		Name:          "sanity.svc_meta",
		Tag:           "bytes,50003,opt,name=svc_meta",
		Filename:      "sanity.proto",
	},
	{
		ExtendedType:  (*descriptor.MethodOptions)(nil),
		ExtensionType: (*OpenApiRpcOpt)(nil),
		Field:         50004,
		Name:          "sanity.rpc_meta",
		Tag:           "bytes,50004,opt,name=rpc_meta",
		Filename:      "sanity.proto",
	},
}

// Extension fields to descriptor.MessageOptions.
var (
	// optional sanity.OpenApiMsgOpt msg_meta = 50001;
	E_MsgMeta = &file_sanity_proto_extTypes[0]
)

// Extension fields to descriptor.FieldOptions.
var (
	// optional sanity.OpenApiFldOpt fld_meta = 50002;
	E_FldMeta = &file_sanity_proto_extTypes[1]
)

// Extension fields to descriptor.ServiceOptions.
var (
	// optional sanity.OpenApiSvcOpt svc_meta = 50003;
	E_SvcMeta = &file_sanity_proto_extTypes[2]
)

// Extension fields to descriptor.MethodOptions.
var (
	// optional sanity.OpenApiRpcOpt rpc_meta = 50004;
	E_RpcMeta = &file_sanity_proto_extTypes[3]
)

var File_sanity_proto protoreflect.FileDescriptor

var file_sanity_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x31, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x70, 0x69,
	0x4d, 0x73, 0x67, 0x4f, 0x70, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e,
	0x41, 0x70, 0x69, 0x46, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x70, 0x69,
	0x53, 0x76, 0x63, 0x4f, 0x70, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e,
	0x41, 0x70, 0x69, 0x52, 0x70, 0x63, 0x4f, 0x70, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6a, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x3a, 0x23, 0x8a, 0xb5, 0x18, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e,
	0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0x71, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x3a, 0x23, 0x8a, 0xb5, 0x18, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0xe3, 0x0e, 0x0a, 0x0c, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c, 0x0a, 0x01, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0xb5, 0x18, 0x06, 0x52, 0x04, 0x61, 0x73,
	0x64, 0x66, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x20, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x01, 0x61, 0x12, 0x5b, 0x0a, 0x01, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x42, 0x4d, 0x92, 0xb5, 0x18, 0x06, 0x52, 0x04, 0x36, 0x35, 0x2e, 0x30,
	0x92, 0xb5, 0x18, 0x3f, 0xa2, 0x01, 0x3c, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x2d, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x6c, 0x69, 0x6e, 0x65,
	0x20, 0x69, 0x73, 0x20, 0x68, 0x65, 0x72, 0x65, 0x0a, 0x54, 0x68, 0x69, 0x72, 0x64, 0x20, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x01, 0x62, 0x12, 0x3a, 0x0a, 0x01, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x2c, 0x92, 0xb5, 0x18, 0x04, 0x52, 0x02, 0x33, 0x33, 0x92, 0xb5, 0x18, 0x20, 0xa2,
	0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52,
	0x01, 0x63, 0x12, 0x5a, 0x0a, 0x08, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x1c, 0x92, 0xb5, 0x18, 0x18, 0xa2, 0x01, 0x15,
	0x41, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x6e, 0x75, 0x6d, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x07, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x39,
	0x0a, 0x01, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61, 0x6e, 0x69,
	0x74, 0x79, 0x2e, 0x45, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x15, 0x92, 0xb5, 0x18, 0x11,
	0xa2, 0x01, 0x0e, 0x41, 0x20, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x01, 0x65, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x01, 0x66, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x46, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x41, 0x6e,
	0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6f, 0x6e, 0x6c,
	0x79, 0x20, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x28, 0x73, 0x29, 0x48, 0x01, 0x52, 0x01, 0x66,
	0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x01, 0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x47, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42,
	0x33, 0x92, 0xb5, 0x18, 0x2f, 0xa2, 0x01, 0x2c, 0x41, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x01, 0x67, 0x12, 0x33, 0x0a, 0x01, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x20, 0x92, 0xb5, 0x18, 0x06, 0x52, 0x04, 0x54, 0x72, 0x75, 0x65, 0x92, 0xb5,
	0x18, 0x12, 0xa2, 0x01, 0x0f, 0x41, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x01, 0x68, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x01,
	0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x14, 0x92, 0xb5, 0x18, 0x10, 0xa2, 0x01, 0x0d,
	0x41, 0x20, 0x62, 0x79, 0x74, 0x65, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x03, 0x52,
	0x01, 0x69, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x01, 0x6a, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x4a, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x42, 0x29, 0x92, 0xb5, 0x18, 0x25, 0xa2, 0x01, 0x22, 0x41, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x01, 0x6a, 0x12,
	0x6a, 0x0a, 0x01, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61, 0x6e,
	0x69, 0x74, 0x79, 0x2e, 0x4b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x46, 0x92, 0xb5, 0x18,
	0x42, 0xa2, 0x01, 0x3f, 0x41, 0x20, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e,
	0x65, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68,
	0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x48, 0x04, 0x52, 0x01, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x01, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e,
	0x4c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x05, 0x52,
	0x01, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x06, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61,
	0x6e, 0x69, 0x74, 0x79, 0x2e, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x42, 0x24, 0x92, 0xb5,
	0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x48, 0x07, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x61, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x24, 0x92,
	0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x48, 0x08, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x61, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x61,
	0x6e, 0x69, 0x74, 0x79, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x4d, 0x61, 0x63, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e,
	0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x0a, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2,
	0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48,
	0x0b, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x6d, 0x0a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x0c, 0x52,
	0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e,
	0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x0d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x1a, 0x37, 0x0a, 0x07, 0x44, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x2c, 0x0a,
	0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x61, 0x10, 0x01, 0x12, 0x05, 0x0a,
	0x01, 0x62, 0x10, 0x02, 0x12, 0x05, 0x0a, 0x01, 0x63, 0x10, 0x03, 0x3a, 0x23, 0x8a, 0xb5, 0x18,
	0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x42, 0x04, 0x0a, 0x02, 0x5f, 0x65, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x66, 0x42, 0x04, 0x0a, 0x02,
	0x5f, 0x68, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x69, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x6b, 0x42, 0x04,
	0x0a, 0x02, 0x5f, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x5f,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xe4, 0x06, 0x0a, 0x07, 0x47, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x03,
	0x67, 0x5f, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0xb5, 0x18, 0x06, 0x52,
	0x04, 0x61, 0x73, 0x64, 0x66, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20,
	0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x02, 0x67, 0x41, 0x88,
	0x01, 0x01, 0x12, 0x41, 0x0a, 0x03, 0x67, 0x5f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x2b, 0x92, 0xb5, 0x18, 0x03, 0x52, 0x01, 0x36, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x02,
	0x67, 0x42, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x03, 0x67, 0x5f, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x42, 0x2e, 0x92, 0xb5, 0x18, 0x06, 0x52, 0x04, 0x37, 0x37, 0x2e, 0x37, 0x92, 0xb5,
	0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x48, 0x02, 0x52, 0x02, 0x67, 0x43, 0x88, 0x01, 0x01, 0x12, 0x73, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x61,
	0x6e, 0x69, 0x74, 0x79, 0x2e, 0x47, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x39, 0x92, 0xb5, 0x18, 0x11, 0x52, 0x0f,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x67, 0x5f, 0x64, 0x92,
	0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x48, 0x03, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x4b, 0x0a, 0x03, 0x67, 0x5f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92,
	0xb5, 0x18, 0x0d, 0x52, 0x0b, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x48, 0x04, 0x52, 0x02, 0x67, 0x44, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a,
	0x03, 0x67, 0x5f, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x42, 0x2d, 0x92, 0xb5, 0x18, 0x05,
	0x52, 0x03, 0x33, 0x2e, 0x30, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20,
	0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x05, 0x52, 0x02, 0x67, 0x45, 0x88,
	0x01, 0x01, 0x12, 0x72, 0x0a, 0x03, 0x67, 0x5f, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x47, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x47, 0x46, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x43, 0x92, 0xb5, 0x18, 0x0b, 0x52, 0x09,
	0x47, 0x46, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x61, 0x92, 0xb5, 0x18, 0x30, 0xa2, 0x01, 0x2d,
	0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x65, 0x6e, 0x75, 0x6d, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x65, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x62, 0x75, 0x66, 0x20, 0x65, 0x6e, 0x75,
	0x6d, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x48, 0x06, 0x52,
	0x02, 0x67, 0x46, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x07, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x33, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22,
	0x29, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x67, 0x5f, 0x64, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x67, 0x5f, 0x65, 0x10, 0x02, 0x1a, 0x32, 0x0a, 0x02, 0x47, 0x46,
	0x22, 0x2c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x61, 0x10, 0x01,
	0x12, 0x05, 0x0a, 0x01, 0x62, 0x10, 0x02, 0x12, 0x05, 0x0a, 0x01, 0x63, 0x10, 0x03, 0x3a, 0x23,
	0x8a, 0xb5, 0x18, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x5f, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x67, 0x5f, 0x62, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x5f, 0x63, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x5f, 0x64, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x67, 0x5f, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x5f, 0x66, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9c, 0x03, 0x0a, 0x07, 0x45, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x3e, 0x0a, 0x03, 0x65, 0x5f, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x2d, 0x92, 0xb5, 0x18, 0x05, 0x52, 0x03, 0x31, 0x2e, 0x30, 0x92, 0xb5, 0x18, 0x20, 0xa2,
	0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52,
	0x02, 0x65, 0x41, 0x12, 0x3e, 0x0a, 0x03, 0x65, 0x5f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x2d, 0x92, 0xb5, 0x18, 0x05, 0x52, 0x03, 0x32, 0x2e, 0x30, 0x92, 0xb5, 0x18, 0x20, 0xa2,
	0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52,
	0x02, 0x65, 0x42, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e,
	0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x44, 0x0a, 0x08, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x31, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x08, 0x6d, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20,
	0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x48, 0x02, 0x52, 0x07, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x88, 0x01, 0x01, 0x3a, 0x23,
	0x8a, 0xb5, 0x18, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x22, 0x85, 0x03, 0x0a, 0x07, 0x46, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x73, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x46, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42,
	0x39, 0x92, 0xb5, 0x18, 0x11, 0x52, 0x0f, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x2e, 0x66, 0x5f, 0x61, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x03, 0x66, 0x5f, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0xb5, 0x18, 0x0d, 0x52, 0x0b, 0x73, 0x6f, 0x6d, 0x65,
	0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x02, 0x66,
	0x41, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x03, 0x66, 0x5f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x2d, 0x92, 0xb5, 0x18, 0x05, 0x52, 0x03, 0x33, 0x2e, 0x30, 0x92, 0xb5, 0x18, 0x20,
	0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x48, 0x02, 0x52, 0x02, 0x66, 0x42, 0x88, 0x01, 0x01, 0x1a, 0x33, 0x0a, 0x06, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x22, 0x29, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x66, 0x5f, 0x61, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x66, 0x5f, 0x62, 0x10, 0x02, 0x3a, 0x23,
	0x8a, 0xb5, 0x18, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x66, 0x5f, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x66, 0x5f, 0x62, 0x22, 0x8d,
	0x03, 0x0a, 0x07, 0x4a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x73, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x61, 0x6e,
	0x69, 0x74, 0x79, 0x2e, 0x4a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x39, 0x92, 0xb5, 0x18, 0x11, 0x52, 0x0f, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x6a, 0x5f, 0x61, 0x92, 0xb5,
	0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x4b, 0x0a, 0x03, 0x6a, 0x5f, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73,
	0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x45, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x24, 0x92,
	0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x02, 0x6a, 0x41, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x03,
	0x6a, 0x5f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61, 0x6e, 0x69,
	0x74, 0x79, 0x2e, 0x46, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20,
	0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x48, 0x02, 0x52, 0x02, 0x6a, 0x42, 0x88, 0x01, 0x01, 0x1a, 0x33, 0x0a, 0x06, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x22, 0x29, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x6a, 0x5f, 0x61, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x6a, 0x5f, 0x62, 0x10, 0x02, 0x3a, 0x23,
	0x8a, 0xb5, 0x18, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x6a, 0x5f, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6a, 0x5f, 0x62, 0x22, 0xf6,
	0x01, 0x0a, 0x07, 0x4b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x55, 0x0a, 0x08, 0x65, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73,
	0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x45, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x24, 0x92,
	0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x07, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x55, 0x0a, 0x08, 0x66, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x46, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x07, 0x66, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x3a, 0x23, 0x8a, 0xb5, 0x18, 0x1f, 0x52, 0x1d,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xfb, 0x04, 0x0a, 0x07, 0x4c, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20,
	0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x01, 0x52,
	0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x05, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20,
	0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x48, 0x02, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x06,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x24, 0x92, 0xb5,
	0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x48, 0x03, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3b, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0xb5,
	0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x48, 0x04, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x04,
	0x69, 0x70, 0x76, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20,
	0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x48, 0x05, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x04, 0x69,
	0x70, 0x76, 0x36, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2,
	0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48,
	0x06, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x03, 0x68, 0x65,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x07, 0x52,
	0x03, 0x68, 0x65, 0x78, 0x88, 0x01, 0x01, 0x3a, 0x1e, 0x8a, 0xb5, 0x18, 0x1a, 0x52, 0x18, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61, 0x63, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x68, 0x65, 0x78, 0x22, 0x7f, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x4b, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01,
	0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x27, 0x8a,
	0xb5, 0x18, 0x23, 0x52, 0x21, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x54,
	0x65, 0x73, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0xd2, 0x01, 0x0a, 0x08, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x4f, 0x6e, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x6c, 0x31, 0x5f, 0x70, 0x31, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x54, 0x77, 0x6f, 0x42, 0x10, 0x92, 0xb5, 0x18, 0x0c, 0xa2, 0x01, 0x09, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x20, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x31, 0x50, 0x31, 0x88, 0x01,
	0x01, 0x12, 0x45, 0x0a, 0x05, 0x6c, 0x31, 0x5f, 0x70, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46,
	0x6f, 0x75, 0x72, 0x42, 0x18, 0x92, 0xb5, 0x18, 0x14, 0xa2, 0x01, 0x11, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x6f, 0x75, 0x72, 0x48, 0x01, 0x52,
	0x04, 0x6c, 0x31, 0x50, 0x32, 0x88, 0x01, 0x01, 0x3a, 0x2d, 0x8a, 0xb5, 0x18, 0x29, 0x52, 0x27,
	0x54, 0x6f, 0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x20, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x31, 0x5f, 0x70,
	0x31, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x31, 0x5f, 0x70, 0x32, 0x22, 0x68, 0x0a, 0x08, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x54, 0x77, 0x6f, 0x12, 0x3e, 0x0a, 0x05, 0x6c, 0x32, 0x5f, 0x70, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x65, 0x42, 0x10, 0x92, 0xb5, 0x18, 0x0c,
	0xa2, 0x01, 0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x54, 0x77, 0x6f, 0x48, 0x00, 0x52, 0x04,
	0x6c, 0x32, 0x50, 0x31, 0x88, 0x01, 0x01, 0x3a, 0x12, 0x8a, 0xb5, 0x18, 0x0e, 0x52, 0x0c, 0x54,
	0x65, 0x73, 0x74, 0x20, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x32, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x6c, 0x32, 0x5f, 0x70, 0x31, 0x22, 0x60, 0x0a, 0x0a, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x68,
	0x72, 0x65, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x6c, 0x33, 0x5f, 0x70, 0x31, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1b, 0x92, 0xb5, 0x18, 0x17, 0xa2, 0x01, 0x14, 0x53, 0x65, 0x74, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x74, 0x20, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x33, 0x48,
	0x00, 0x52, 0x04, 0x6c, 0x33, 0x50, 0x31, 0x88, 0x01, 0x01, 0x3a, 0x11, 0x8a, 0xb5, 0x18, 0x0d,
	0x52, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x20, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x6c, 0x33, 0x5f, 0x70, 0x31, 0x22, 0x85, 0x01, 0x0a, 0x09, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x46, 0x6f, 0x75, 0x72, 0x12, 0x44, 0x0a, 0x05, 0x6c, 0x34, 0x5f, 0x70, 0x31, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x42, 0x18, 0x92, 0xb5, 0x18, 0x14, 0xa2, 0x01, 0x11, 0x6c,
	0x6f, 0x6f, 0x70, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x31,
	0x48, 0x00, 0x52, 0x04, 0x6c, 0x34, 0x50, 0x31, 0x88, 0x01, 0x01, 0x3a, 0x28, 0x8a, 0xb5, 0x18,
	0x24, 0x52, 0x22, 0x54, 0x65, 0x73, 0x74, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x34, 0x20, 0x72,
	0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x20, 0x6a, 0x75, 0x6e, 0x6b, 0x20, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x34, 0x5f, 0x70, 0x31, 0x22,
	0x8e, 0x01, 0x0a, 0x0b, 0x49, 0x70, 0x76, 0x34, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x5d, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x70,
	0x76, 0x34, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x42, 0x24, 0x92,
	0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x88, 0x01, 0x01, 0x3a, 0x17,
	0x8a, 0xb5, 0x18, 0x13, 0x52, 0x11, 0x54, 0x65, 0x73, 0x74, 0x20, 0x69, 0x70, 0x76, 0x34, 0x20,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x22, 0x8e, 0x01, 0x0a, 0x0b, 0x49, 0x70, 0x76, 0x36, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x12, 0x5d, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49,
	0x70, 0x76, 0x36, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x42, 0x24,
	0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x88, 0x01, 0x01, 0x3a,
	0x17, 0x8a, 0xb5, 0x18, 0x13, 0x52, 0x11, 0x54, 0x65, 0x73, 0x74, 0x20, 0x69, 0x70, 0x76, 0x36,
	0x20, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x70, 0x76,
	0x36, 0x22, 0x87, 0x01, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x12, 0x59, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4d, 0x61,
	0x63, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4d, 0x61, 0x63, 0x42, 0x24, 0x92, 0xb5, 0x18,
	0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x88, 0x01, 0x01, 0x3a, 0x16, 0x8a, 0xb5, 0x18,
	0x12, 0x52, 0x10, 0x54, 0x65, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x63, 0x20, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61, 0x63, 0x22, 0xa3, 0x01, 0x0a, 0x0e,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x69,
	0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x07, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x88, 0x01, 0x01, 0x3a, 0x1a, 0x8a, 0xb5, 0x18, 0x16, 0x52,
	0x14, 0x54, 0x65, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x22, 0xaa, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x6d, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x42,
	0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x88, 0x01, 0x01, 0x3a, 0x1b, 0x8a, 0xb5, 0x18, 0x17, 0x52, 0x15, 0x54, 0x65, 0x73, 0x74,
	0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x20, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0xba,
	0x02, 0x0a, 0x1d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x4c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x31, 0x92, 0xb5, 0x18, 0x09, 0x52, 0x07, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x92, 0xb5,
	0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4a,
	0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0xb5,
	0x18, 0x09, 0x52, 0x07, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x92, 0xb5, 0x18, 0x20, 0xa2,
	0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48,
	0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2b, 0x92, 0xb5, 0x18, 0x03, 0x52,
	0x01, 0x31, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x3a, 0x1a, 0x8a, 0xb5, 0x18, 0x16, 0x52, 0x14, 0x69, 0x70, 0x76, 0x34, 0x20, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb0, 0x05, 0x0a, 0x16,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x12, 0x84, 0x01, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x42, 0x3b, 0x92, 0xb5, 0x18, 0x13, 0x52, 0x11, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x92, 0xb5, 0x18, 0x20,
	0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0xb5,
	0x18, 0x09, 0x52, 0x07, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x92, 0xb5, 0x18, 0x20, 0xa2,
	0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x35, 0x92, 0xb5, 0x18,
	0x0d, 0x52, 0x0b, 0x5b, 0x27, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x27, 0x5d, 0x92, 0xb5,
	0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x70,
	0x76, 0x34, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x02, 0x52, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x6e, 0x0a, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x70,
	0x76, 0x34, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x03, 0x52, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x04, 0x3a, 0x09, 0x8a, 0xb5, 0x18, 0x05, 0x52, 0x03, 0x54, 0x42, 0x44, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb1,
	0x02, 0x0a, 0x1d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x47, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2c, 0x92, 0xb5, 0x18, 0x04, 0x52, 0x02, 0x3a, 0x3a, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0xb5, 0x18, 0x05, 0x52, 0x03, 0x3a,
	0x3a, 0x31, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x46, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x2b, 0x92, 0xb5, 0x18, 0x03, 0x52, 0x01, 0x31, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x02, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x3a, 0x1a, 0x8a, 0xb5, 0x18, 0x16, 0x52,
	0x14, 0x69, 0x70, 0x76, 0x36, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xa6, 0x05, 0x0a, 0x16, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x70,
	0x76, 0x36, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x12, 0x84, 0x01,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49,
	0x70, 0x76, 0x36, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x2e, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x3b, 0x92, 0xb5, 0x18, 0x13,
	0x52, 0x11, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e,
	0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0xb5, 0x18, 0x04, 0x52, 0x02, 0x3a, 0x3a, 0x92, 0xb5, 0x18,
	0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x30, 0x92,
	0xb5, 0x18, 0x08, 0x52, 0x06, 0x5b, 0x27, 0x3a, 0x3a, 0x27, 0x5d, 0x92, 0xb5, 0x18, 0x20, 0xa2,
	0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x61, 0x6e,
	0x69, 0x74, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e,
	0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x02, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x6e, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x61, 0x6e,
	0x69, 0x74, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e,
	0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x03, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x3a,
	0x09, 0x8a, 0xb5, 0x18, 0x05, 0x52, 0x03, 0x54, 0x42, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xcb, 0x02, 0x0a, 0x1b,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4d, 0x61, 0x63, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x4d, 0x61, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0xb5, 0x18, 0x13,
	0x52, 0x11, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30,
	0x3a, 0x30, 0x30, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e,
	0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3b, 0x92, 0xb5, 0x18, 0x13, 0x52, 0x11, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30,
	0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x31, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01,
	0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x01,
	0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2b, 0x92, 0xb5, 0x18, 0x03, 0x52, 0x01,
	0x31, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x3a, 0x19, 0x8a, 0xb5, 0x18, 0x15, 0x52, 0x13, 0x6d, 0x61, 0x63, 0x20, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x20, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbc, 0x05, 0x0a, 0x14, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x4d, 0x61, 0x63, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4d,
	0x61, 0x63, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x4d, 0x61, 0x63, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4d, 0x61,
	0x63, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x3b, 0x92,
	0xb5, 0x18, 0x13, 0x52, 0x11, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0xb5, 0x18, 0x13, 0x52, 0x11, 0x30, 0x30,
	0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x92,
	0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x57, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x3f, 0x92, 0xb5, 0x18, 0x17, 0x52, 0x15, 0x5b, 0x27, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30,
	0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x27, 0x5d, 0x92, 0xb5, 0x18, 0x20,
	0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x6c, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x61,
	0x6e, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4d, 0x61, 0x63, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4d, 0x61, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x02, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x6c, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x61, 0x6e, 0x69,
	0x74, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4d, 0x61, 0x63, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x4d, 0x61, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x24,
	0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x48, 0x03, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x3a, 0x09, 0x8a, 0xb5,
	0x18, 0x05, 0x52, 0x03, 0x54, 0x42, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb7, 0x02, 0x0a, 0x23, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x46, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x2b, 0x92, 0xb5, 0x18, 0x03, 0x52, 0x01, 0x30, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2b, 0x92, 0xb5, 0x18, 0x03, 0x52, 0x01, 0x31, 0x92,
	0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x46,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2b, 0x92,
	0xb5, 0x18, 0x03, 0x52, 0x01, 0x31, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x3a, 0x1d, 0x8a, 0xb5, 0x18, 0x19, 0x52, 0x17, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xba, 0x05, 0x0a, 0x1c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x12, 0x8a, 0x01, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x3b, 0x92, 0xb5, 0x18, 0x13, 0x52, 0x11, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x92,
	0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x2b, 0x92, 0xb5, 0x18, 0x03, 0x52, 0x01, 0x30, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x42, 0x2d, 0x92, 0xb5, 0x18, 0x05, 0x52, 0x03,
	0x5b, 0x30, 0x5d, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e,
	0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x74, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42,
	0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x02, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x74, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x24, 0x92, 0xb5, 0x18, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x03, 0x52, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a,
	0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x04, 0x3a, 0x09, 0x8a, 0xb5, 0x18, 0x05, 0x52, 0x03, 0x54, 0x42, 0x44, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x9b, 0x04, 0x0a, 0x1e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x75, 0x6d, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x2e, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x36, 0x92, 0xb5, 0x18, 0x17, 0x52, 0x15, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x92, 0xb5, 0x18, 0x17, 0xa2, 0x01, 0x14, 0x54, 0x68, 0x65, 0x20, 0x74,
	0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x52,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x73, 0x61,
	0x6e, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x42, 0x41, 0x92, 0xb5, 0x18, 0x15, 0x52, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x92, 0xb5, 0x18,
	0x24, 0xa2, 0x01, 0x21, 0x41, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1e, 0x92, 0xb5, 0x18, 0x1a, 0xa2, 0x01, 0x17, 0x41, 0x20,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x88,
	0x01, 0x01, 0x1a, 0x3c, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x32, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x02,
	0x1a, 0x37, 0x0a, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x22, 0x2a, 0x0a,
	0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x67, 0x6f, 0x6f, 0x64, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x62, 0x61, 0x64, 0x10, 0x02, 0x3a, 0x09, 0x8a, 0xb5, 0x18, 0x05, 0x52,
	0x03, 0x54, 0x42, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x22, 0x4d, 0x0a,
	0x10, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xc3, 0x03, 0x0a,
	0x11, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x51, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x32, 0x30, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x61,
	0x6e, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x32, 0x30, 0x30, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x32, 0x30, 0x30, 0x12, 0x51, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x34, 0x30, 0x30, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x34, 0x30, 0x30, 0x12, 0x51, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x35, 0x30, 0x30, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x35, 0x30, 0x30, 0x1a, 0x25, 0x0a, 0x0d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x30, 0x30, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x1a, 0x4a, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x34, 0x30, 0x30, 0x12, 0x39, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x61, 0x6e,
	0x69, 0x74, 0x79, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x34,
	0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x35, 0x30, 0x30, 0x12,
	0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x30, 0x30, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x30, 0x30, 0x1a, 0x4a, 0x0a, 0x0d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x30, 0x30, 0x12, 0x39, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0c, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x80, 0x02, 0x0a, 0x07, 0x4f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x12, 0x67, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18,
	0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x23, 0xa2, 0xb5, 0x18, 0x1f, 0x52, 0x1d, 0x53, 0x65, 0x74, 0x73, 0x20,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x30, 0x01, 0x12, 0x67, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x19, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0xa2, 0xb5, 0x18, 0x23,
	0x52, 0x21, 0x47, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x1a, 0x23, 0x9a, 0xb5, 0x18, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69,
	0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x3a, 0x56, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd1, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x70, 0x69, 0x4d, 0x73,
	0x67, 0x4f, 0x70, 0x74, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x3a, 0x54, 0x0a, 0x08, 0x66, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd2, 0x86, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x41, 0x70, 0x69, 0x46, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x52, 0x07, 0x66, 0x6c, 0x64, 0x4d,
	0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x3a, 0x56, 0x0a, 0x08, 0x73, 0x76, 0x63, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xd3, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61,
	0x6e, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x70, 0x69, 0x53, 0x76, 0x63, 0x4f,
	0x70, 0x74, 0x52, 0x07, 0x73, 0x76, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x3a, 0x55,
	0x0a, 0x08, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd4, 0x86, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x41, 0x70, 0x69, 0x52, 0x70, 0x63, 0x4f, 0x70, 0x74, 0x52, 0x07, 0x72, 0x70, 0x63, 0x4d, 0x65,
	0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x61, 0x72, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sanity_proto_rawDescOnce sync.Once
	file_sanity_proto_rawDescData = file_sanity_proto_rawDesc
)

func file_sanity_proto_rawDescGZIP() []byte {
	file_sanity_proto_rawDescOnce.Do(func() {
		file_sanity_proto_rawDescData = protoimpl.X.CompressGZIP(file_sanity_proto_rawDescData)
	})
	return file_sanity_proto_rawDescData
}

var file_sanity_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_sanity_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_sanity_proto_goTypes = []interface{}{
	(PrefixConfig_DValues_Enum)(0),                     // 0: sanity.PrefixConfig.DValues.Enum
	(GObject_Choice_Enum)(0),                           // 1: sanity.GObject.Choice.Enum
	(GObject_GF_Enum)(0),                               // 2: sanity.GObject.GF.Enum
	(FObject_Choice_Enum)(0),                           // 3: sanity.FObject.Choice.Enum
	(JObject_Choice_Enum)(0),                           // 4: sanity.JObject.Choice.Enum
	(PatternIpv4PatternIpv4_Choice_Enum)(0),            // 5: sanity.PatternIpv4PatternIpv4.Choice.Enum
	(PatternIpv6PatternIpv6_Choice_Enum)(0),            // 6: sanity.PatternIpv6PatternIpv6.Choice.Enum
	(PatternMacPatternMac_Choice_Enum)(0),              // 7: sanity.PatternMacPatternMac.Choice.Enum
	(PatternIntegerPatternInteger_Choice_Enum)(0),      // 8: sanity.PatternIntegerPatternInteger.Choice.Enum
	(PatternChecksumPatternChecksum_Choice_Enum)(0),    // 9: sanity.PatternChecksumPatternChecksum.Choice.Enum
	(PatternChecksumPatternChecksum_Generated_Enum)(0), // 10: sanity.PatternChecksumPatternChecksum.Generated.Enum
	(*OpenApiMsgOpt)(nil),                              // 11: sanity.OpenApiMsgOpt
	(*OpenApiFldOpt)(nil),                              // 12: sanity.OpenApiFldOpt
	(*OpenApiSvcOpt)(nil),                              // 13: sanity.OpenApiSvcOpt
	(*OpenApiRpcOpt)(nil),                              // 14: sanity.OpenApiRpcOpt
	(*Error)(nil),                                      // 15: sanity.Error
	(*ErrorDetails)(nil),                               // 16: sanity.ErrorDetails
	(*PrefixConfig)(nil),                               // 17: sanity.PrefixConfig
	(*GObject)(nil),                                    // 18: sanity.GObject
	(*EObject)(nil),                                    // 19: sanity.EObject
	(*FObject)(nil),                                    // 20: sanity.FObject
	(*JObject)(nil),                                    // 21: sanity.JObject
	(*KObject)(nil),                                    // 22: sanity.KObject
	(*LObject)(nil),                                    // 23: sanity.LObject
	(*Mandate)(nil),                                    // 24: sanity.Mandate
	(*LevelOne)(nil),                                   // 25: sanity.LevelOne
	(*LevelTwo)(nil),                                   // 26: sanity.LevelTwo
	(*LevelThree)(nil),                                 // 27: sanity.LevelThree
	(*LevelFour)(nil),                                  // 28: sanity.LevelFour
	(*Ipv4Pattern)(nil),                                // 29: sanity.Ipv4Pattern
	(*Ipv6Pattern)(nil),                                // 30: sanity.Ipv6Pattern
	(*MacPattern)(nil),                                 // 31: sanity.MacPattern
	(*IntegerPattern)(nil),                             // 32: sanity.IntegerPattern
	(*ChecksumPattern)(nil),                            // 33: sanity.ChecksumPattern
	(*PatternIpv4PatternIpv4Counter)(nil),              // 34: sanity.PatternIpv4PatternIpv4Counter
	(*PatternIpv4PatternIpv4)(nil),                     // 35: sanity.PatternIpv4PatternIpv4
	(*PatternIpv6PatternIpv6Counter)(nil),              // 36: sanity.PatternIpv6PatternIpv6Counter
	(*PatternIpv6PatternIpv6)(nil),                     // 37: sanity.PatternIpv6PatternIpv6
	(*PatternMacPatternMacCounter)(nil),                // 38: sanity.PatternMacPatternMacCounter
	(*PatternMacPatternMac)(nil),                       // 39: sanity.PatternMacPatternMac
	(*PatternIntegerPatternIntegerCounter)(nil),        // 40: sanity.PatternIntegerPatternIntegerCounter
	(*PatternIntegerPatternInteger)(nil),               // 41: sanity.PatternIntegerPatternInteger
	(*PatternChecksumPatternChecksum)(nil),             // 42: sanity.PatternChecksumPatternChecksum
	(*SetConfigRequest)(nil),                           // 43: sanity.SetConfigRequest
	(*SetConfigResponse)(nil),                          // 44: sanity.SetConfigResponse
	(*GetConfigResponse)(nil),                          // 45: sanity.GetConfigResponse
	(*PrefixConfig_DValues)(nil),                       // 46: sanity.PrefixConfig.DValues
	(*GObject_Choice)(nil),                             // 47: sanity.GObject.Choice
	(*GObject_GF)(nil),                                 // 48: sanity.GObject.GF
	(*FObject_Choice)(nil),                             // 49: sanity.FObject.Choice
	(*JObject_Choice)(nil),                             // 50: sanity.JObject.Choice
	(*PatternIpv4PatternIpv4_Choice)(nil),              // 51: sanity.PatternIpv4PatternIpv4.Choice
	(*PatternIpv6PatternIpv6_Choice)(nil),              // 52: sanity.PatternIpv6PatternIpv6.Choice
	(*PatternMacPatternMac_Choice)(nil),                // 53: sanity.PatternMacPatternMac.Choice
	(*PatternIntegerPatternInteger_Choice)(nil),        // 54: sanity.PatternIntegerPatternInteger.Choice
	(*PatternChecksumPatternChecksum_Choice)(nil),      // 55: sanity.PatternChecksumPatternChecksum.Choice
	(*PatternChecksumPatternChecksum_Generated)(nil),   // 56: sanity.PatternChecksumPatternChecksum.Generated
	(*SetConfigResponse_StatusCode200)(nil),            // 57: sanity.SetConfigResponse.StatusCode200
	(*SetConfigResponse_StatusCode400)(nil),            // 58: sanity.SetConfigResponse.StatusCode400
	(*SetConfigResponse_StatusCode500)(nil),            // 59: sanity.SetConfigResponse.StatusCode500
	(*GetConfigResponse_StatusCode200)(nil),            // 60: sanity.GetConfigResponse.StatusCode200
	(*descriptor.MessageOptions)(nil),                  // 61: google.protobuf.MessageOptions
	(*descriptor.FieldOptions)(nil),                    // 62: google.protobuf.FieldOptions
	(*descriptor.ServiceOptions)(nil),                  // 63: google.protobuf.ServiceOptions
	(*descriptor.MethodOptions)(nil),                   // 64: google.protobuf.MethodOptions
	(*empty.Empty)(nil),                                // 65: google.protobuf.Empty
}
var file_sanity_proto_depIdxs = []int32{
	0,  // 0: sanity.PrefixConfig.d_values:type_name -> sanity.PrefixConfig.DValues.Enum
	19, // 1: sanity.PrefixConfig.e:type_name -> sanity.EObject
	20, // 2: sanity.PrefixConfig.f:type_name -> sanity.FObject
	18, // 3: sanity.PrefixConfig.g:type_name -> sanity.GObject
	21, // 4: sanity.PrefixConfig.j:type_name -> sanity.JObject
	22, // 5: sanity.PrefixConfig.k:type_name -> sanity.KObject
	23, // 6: sanity.PrefixConfig.l:type_name -> sanity.LObject
	25, // 7: sanity.PrefixConfig.level:type_name -> sanity.LevelOne
	24, // 8: sanity.PrefixConfig.mandatory:type_name -> sanity.Mandate
	29, // 9: sanity.PrefixConfig.ipv4_pattern:type_name -> sanity.Ipv4Pattern
	30, // 10: sanity.PrefixConfig.ipv6_pattern:type_name -> sanity.Ipv6Pattern
	31, // 11: sanity.PrefixConfig.mac_pattern:type_name -> sanity.MacPattern
	32, // 12: sanity.PrefixConfig.integer_pattern:type_name -> sanity.IntegerPattern
	33, // 13: sanity.PrefixConfig.checksum_pattern:type_name -> sanity.ChecksumPattern
	1,  // 14: sanity.GObject.choice:type_name -> sanity.GObject.Choice.Enum
	2,  // 15: sanity.GObject.g_f:type_name -> sanity.GObject.GF.Enum
	3,  // 16: sanity.FObject.choice:type_name -> sanity.FObject.Choice.Enum
	4,  // 17: sanity.JObject.choice:type_name -> sanity.JObject.Choice.Enum
	19, // 18: sanity.JObject.j_a:type_name -> sanity.EObject
	20, // 19: sanity.JObject.j_b:type_name -> sanity.FObject
	19, // 20: sanity.KObject.e_object:type_name -> sanity.EObject
	20, // 21: sanity.KObject.f_object:type_name -> sanity.FObject
	26, // 22: sanity.LevelOne.l1_p1:type_name -> sanity.LevelTwo
	28, // 23: sanity.LevelOne.l1_p2:type_name -> sanity.LevelFour
	27, // 24: sanity.LevelTwo.l2_p1:type_name -> sanity.LevelThree
	25, // 25: sanity.LevelFour.l4_p1:type_name -> sanity.LevelOne
	35, // 26: sanity.Ipv4Pattern.ipv4:type_name -> sanity.PatternIpv4PatternIpv4
	37, // 27: sanity.Ipv6Pattern.ipv6:type_name -> sanity.PatternIpv6PatternIpv6
	39, // 28: sanity.MacPattern.mac:type_name -> sanity.PatternMacPatternMac
	41, // 29: sanity.IntegerPattern.integer:type_name -> sanity.PatternIntegerPatternInteger
	42, // 30: sanity.ChecksumPattern.checksum:type_name -> sanity.PatternChecksumPatternChecksum
	5,  // 31: sanity.PatternIpv4PatternIpv4.choice:type_name -> sanity.PatternIpv4PatternIpv4.Choice.Enum
	34, // 32: sanity.PatternIpv4PatternIpv4.increment:type_name -> sanity.PatternIpv4PatternIpv4Counter
	34, // 33: sanity.PatternIpv4PatternIpv4.decrement:type_name -> sanity.PatternIpv4PatternIpv4Counter
	6,  // 34: sanity.PatternIpv6PatternIpv6.choice:type_name -> sanity.PatternIpv6PatternIpv6.Choice.Enum
	36, // 35: sanity.PatternIpv6PatternIpv6.increment:type_name -> sanity.PatternIpv6PatternIpv6Counter
	36, // 36: sanity.PatternIpv6PatternIpv6.decrement:type_name -> sanity.PatternIpv6PatternIpv6Counter
	7,  // 37: sanity.PatternMacPatternMac.choice:type_name -> sanity.PatternMacPatternMac.Choice.Enum
	38, // 38: sanity.PatternMacPatternMac.increment:type_name -> sanity.PatternMacPatternMacCounter
	38, // 39: sanity.PatternMacPatternMac.decrement:type_name -> sanity.PatternMacPatternMacCounter
	8,  // 40: sanity.PatternIntegerPatternInteger.choice:type_name -> sanity.PatternIntegerPatternInteger.Choice.Enum
	40, // 41: sanity.PatternIntegerPatternInteger.increment:type_name -> sanity.PatternIntegerPatternIntegerCounter
	40, // 42: sanity.PatternIntegerPatternInteger.decrement:type_name -> sanity.PatternIntegerPatternIntegerCounter
	9,  // 43: sanity.PatternChecksumPatternChecksum.choice:type_name -> sanity.PatternChecksumPatternChecksum.Choice.Enum
	10, // 44: sanity.PatternChecksumPatternChecksum.generated:type_name -> sanity.PatternChecksumPatternChecksum.Generated.Enum
	17, // 45: sanity.SetConfigRequest.prefix_config:type_name -> sanity.PrefixConfig
	57, // 46: sanity.SetConfigResponse.status_code_200:type_name -> sanity.SetConfigResponse.StatusCode200
	58, // 47: sanity.SetConfigResponse.status_code_400:type_name -> sanity.SetConfigResponse.StatusCode400
	59, // 48: sanity.SetConfigResponse.status_code_500:type_name -> sanity.SetConfigResponse.StatusCode500
	60, // 49: sanity.GetConfigResponse.status_code_200:type_name -> sanity.GetConfigResponse.StatusCode200
	16, // 50: sanity.SetConfigResponse.StatusCode400.error_details:type_name -> sanity.ErrorDetails
	15, // 51: sanity.SetConfigResponse.StatusCode500.error:type_name -> sanity.Error
	17, // 52: sanity.GetConfigResponse.StatusCode200.prefix_config:type_name -> sanity.PrefixConfig
	61, // 53: sanity.msg_meta:extendee -> google.protobuf.MessageOptions
	62, // 54: sanity.fld_meta:extendee -> google.protobuf.FieldOptions
	63, // 55: sanity.svc_meta:extendee -> google.protobuf.ServiceOptions
	64, // 56: sanity.rpc_meta:extendee -> google.protobuf.MethodOptions
	11, // 57: sanity.msg_meta:type_name -> sanity.OpenApiMsgOpt
	12, // 58: sanity.fld_meta:type_name -> sanity.OpenApiFldOpt
	13, // 59: sanity.svc_meta:type_name -> sanity.OpenApiSvcOpt
	14, // 60: sanity.rpc_meta:type_name -> sanity.OpenApiRpcOpt
	43, // 61: sanity.Openapi.SetConfig:input_type -> sanity.SetConfigRequest
	65, // 62: sanity.Openapi.GetConfig:input_type -> google.protobuf.Empty
	44, // 63: sanity.Openapi.SetConfig:output_type -> sanity.SetConfigResponse
	45, // 64: sanity.Openapi.GetConfig:output_type -> sanity.GetConfigResponse
	63, // [63:65] is the sub-list for method output_type
	61, // [61:63] is the sub-list for method input_type
	57, // [57:61] is the sub-list for extension type_name
	53, // [53:57] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_sanity_proto_init() }
func file_sanity_proto_init() {
	if File_sanity_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sanity_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenApiMsgOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenApiFldOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenApiSvcOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenApiRpcOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrefixConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mandate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LevelOne); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LevelTwo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LevelThree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LevelFour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv4Pattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6Pattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegerPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChecksumPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternIpv4PatternIpv4Counter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternIpv4PatternIpv4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternIpv6PatternIpv6Counter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternIpv6PatternIpv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternMacPatternMacCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternMacPatternMac); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternIntegerPatternIntegerCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternIntegerPatternInteger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternChecksumPatternChecksum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrefixConfig_DValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GObject_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GObject_GF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FObject_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JObject_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternIpv4PatternIpv4_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternIpv6PatternIpv6_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternMacPatternMac_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternIntegerPatternInteger_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternChecksumPatternChecksum_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternChecksumPatternChecksum_Generated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConfigResponse_StatusCode200); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConfigResponse_StatusCode400); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConfigResponse_StatusCode500); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sanity_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigResponse_StatusCode200); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sanity_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_sanity_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_sanity_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_sanity_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_sanity_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_sanity_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_sanity_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_sanity_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_sanity_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_sanity_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_sanity_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_sanity_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_sanity_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_sanity_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_sanity_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_sanity_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_sanity_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_sanity_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_sanity_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_sanity_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_sanity_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_sanity_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_sanity_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_sanity_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_sanity_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_sanity_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*SetConfigResponse_StatusCode_200)(nil),
		(*SetConfigResponse_StatusCode_400)(nil),
		(*SetConfigResponse_StatusCode_500)(nil),
	}
	file_sanity_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*GetConfigResponse_StatusCode_200)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sanity_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   50,
			NumExtensions: 4,
			NumServices:   1,
		},
		GoTypes:           file_sanity_proto_goTypes,
		DependencyIndexes: file_sanity_proto_depIdxs,
		EnumInfos:         file_sanity_proto_enumTypes,
		MessageInfos:      file_sanity_proto_msgTypes,
		ExtensionInfos:    file_sanity_proto_extTypes,
	}.Build()
	File_sanity_proto = out.File
	file_sanity_proto_rawDesc = nil
	file_sanity_proto_goTypes = nil
	file_sanity_proto_depIdxs = nil
}
