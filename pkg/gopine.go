/* Pine Flag Implementation API 0.0.1
 * Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/)
 * or HTML.
 * License: MIT */

package gopine

import (
	"bytes"
	"context"
	"crypto/tls"
	"encoding/xml"
	"fmt"
	"io"
	"net"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/ghodss/yaml"
	otg "github.com/open-traffic-generator/openapiart/pkg/otg"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/emptypb"
)

type versionMeta struct {
	checkVersion  bool
	localVersion  Version
	remoteVersion Version
	checkError    error
}
type gopineApi struct {
	api
	grpcClient  otg.OpenapiClient
	httpClient  httpClient
	versionMeta *versionMeta
}

// grpcConnect builds up a grpc connection
func (api *gopineApi) grpcConnect() error {
	if api.grpcClient == nil {
		if api.grpc.clientConnection == nil {
			ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.dialTimeout)
			defer cancelFunc()
			conn, err := grpc.DialContext(ctx, api.grpc.location, grpc.WithTransportCredentials(insecure.NewCredentials()))
			if err != nil {
				return err
			}
			api.grpcClient = otg.NewOpenapiClient(conn)
			api.grpc.clientConnection = conn
		} else {
			api.grpcClient = otg.NewOpenapiClient(api.grpc.clientConnection)
		}
	}
	return nil
}

func (api *gopineApi) grpcClose() error {
	if api.grpc != nil {
		if api.grpc.clientConnection != nil {
			err := api.grpc.clientConnection.Close()
			if err != nil {
				return err
			}
		}
	}
	api.grpcClient = nil
	api.grpc = nil
	return nil
}

func (api *gopineApi) Close() error {
	if api.hasGrpcTransport() {
		err := api.grpcClose()
		return err
	}
	if api.hasHttpTransport() {
		err := api.http.conn.(*net.TCPConn).SetLinger(0)
		api.http.conn.Close()
		api.http.conn = nil
		api.http = nil
		api.httpClient.client = nil
		return err
	}
	return nil
}

// NewApi returns a new instance of the top level interface hierarchy
func NewApi() GopineApi {
	api := gopineApi{}
	api.versionMeta = &versionMeta{checkVersion: false}
	return &api
}

// httpConnect builds up a http connection
func (api *gopineApi) httpConnect() error {
	if api.httpClient.client == nil {
		tr := http.Transport{
			DialTLSContext: func(ctx context.Context, network, addr string) (net.Conn, error) {
				tcpConn, err := (&net.Dialer{}).DialContext(ctx, network, addr)
				if err != nil {
					return nil, err
				}
				tlsConn := tls.Client(tcpConn, &tls.Config{InsecureSkipVerify: !api.http.verify})
				err = tlsConn.Handshake()
				if err != nil {
					return nil, err
				}
				api.http.conn = tcpConn
				return tlsConn, nil
			},
			DialContext: func(ctx context.Context, network, addr string) (net.Conn, error) {
				tcpConn, err := (&net.Dialer{}).DialContext(ctx, network, addr)
				if err != nil {
					return nil, err
				}
				api.http.conn = tcpConn
				return tcpConn, nil
			},
		}
		client := httpClient{
			client: &http.Client{
				Transport: &tr,
			},
			ctx: context.Background(),
		}
		api.httpClient = client
	}
	return nil
}

func (api *gopineApi) httpSendRecv(urlPath string, jsonBody string, method string) (*http.Response, error) {
	err := api.httpConnect()
	if err != nil {
		return nil, err
	}
	httpClient := api.httpClient
	var bodyReader = bytes.NewReader([]byte(jsonBody))
	queryUrl, err := url.Parse(api.http.location)
	if err != nil {
		return nil, err
	}
	queryUrl, _ = queryUrl.Parse(urlPath)
	req, _ := http.NewRequest(method, queryUrl.String(), bodyReader)
	req.Header.Set("Content-Type", "application/json")
	req = req.WithContext(httpClient.ctx)
	response, err := httpClient.client.Do(req)
	return response, err
}

// GopineApi optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
type GopineApi interface {
	Api
	// RequestSetTcpPort is description is TBD
	// NewRequestSetTcpPort returns a new instance of RequestSetTcpPort.
	NewRequestSetTcpPort() RequestSetTcpPort
	// RequestInitRequest is description is TBD
	// NewRequestInitRequest returns a new instance of RequestInitRequest.
	NewRequestInitRequest() RequestInitRequest
	// RequestStartDebugSession is description is TBD
	// NewRequestStartDebugSession returns a new instance of RequestStartDebugSession.
	NewRequestStartDebugSession() RequestStartDebugSession
	// RequestStopDebugSession is description is TBD
	// NewRequestStopDebugSession returns a new instance of RequestStopDebugSession.
	NewRequestStopDebugSession() RequestStopDebugSession
	// RequestFeatureRequest is description is TBD
	// NewRequestFeatureRequest returns a new instance of RequestFeatureRequest.
	NewRequestFeatureRequest() RequestFeatureRequest
	// RequestSetUserInfo is description is TBD
	// NewRequestSetUserInfo returns a new instance of RequestSetUserInfo.
	NewRequestSetUserInfo() RequestSetUserInfo
	// RequestTakeOwnership is description is TBD
	// NewRequestTakeOwnership returns a new instance of RequestTakeOwnership.
	NewRequestTakeOwnership() RequestTakeOwnership
	// RequestClearOwnership is description is TBD
	// NewRequestClearOwnership returns a new instance of RequestClearOwnership.
	NewRequestClearOwnership() RequestClearOwnership
	// RequestSubscribeEvent is description is TBD
	// NewRequestSubscribeEvent returns a new instance of RequestSubscribeEvent.
	NewRequestSubscribeEvent() RequestSubscribeEvent
	// RequestUnsubscribeEvent is description is TBD
	// NewRequestUnsubscribeEvent returns a new instance of RequestUnsubscribeEvent.
	NewRequestUnsubscribeEvent() RequestUnsubscribeEvent
	// RequestConfigurePort is description is TBD
	// NewRequestConfigurePort returns a new instance of RequestConfigurePort.
	NewRequestConfigurePort() RequestConfigurePort
	// RequestConfigurePortBasic is description is TBD
	// NewRequestConfigurePortBasic returns a new instance of RequestConfigurePortBasic.
	NewRequestConfigurePortBasic() RequestConfigurePortBasic
	// RequestPrepareForStartTx is description is TBD
	// NewRequestPrepareForStartTx returns a new instance of RequestPrepareForStartTx.
	NewRequestPrepareForStartTx() RequestPrepareForStartTx
	// RequestConfigureCapture is description is TBD
	// NewRequestConfigureCapture returns a new instance of RequestConfigureCapture.
	NewRequestConfigureCapture() RequestConfigureCapture
	// RequestStartCapture is description is TBD
	// NewRequestStartCapture returns a new instance of RequestStartCapture.
	NewRequestStartCapture() RequestStartCapture
	// RequestStopCapture is description is TBD
	// NewRequestStopCapture returns a new instance of RequestStopCapture.
	NewRequestStopCapture() RequestStopCapture
	// RequestGetCapturePacketCount is description is TBD
	// NewRequestGetCapturePacketCount returns a new instance of RequestGetCapturePacketCount.
	NewRequestGetCapturePacketCount() RequestGetCapturePacketCount
	// RequestGetCaptureStatus is description is TBD
	// NewRequestGetCaptureStatus returns a new instance of RequestGetCaptureStatus.
	NewRequestGetCaptureStatus() RequestGetCaptureStatus
	// RequestRetrieveCapture is description is TBD
	// NewRequestRetrieveCapture returns a new instance of RequestRetrieveCapture.
	NewRequestRetrieveCapture() RequestRetrieveCapture
	// RequestStartLatency is description is TBD
	// NewRequestStartLatency returns a new instance of RequestStartLatency.
	NewRequestStartLatency() RequestStartLatency
	// RequestStopLatency is description is TBD
	// NewRequestStopLatency returns a new instance of RequestStopLatency.
	NewRequestStopLatency() RequestStopLatency
	// RequestClearLatency is description is TBD
	// NewRequestClearLatency returns a new instance of RequestClearLatency.
	NewRequestClearLatency() RequestClearLatency
	// RequestClearLatencyForSelectedPGIDs is description is TBD
	// NewRequestClearLatencyForSelectedPGIDs returns a new instance of RequestClearLatencyForSelectedPGIDs.
	NewRequestClearLatencyForSelectedPGIDs() RequestClearLatencyForSelectedPGIDs
	// RequestClearTimestamp is description is TBD
	// NewRequestClearTimestamp returns a new instance of RequestClearTimestamp.
	NewRequestClearTimestamp() RequestClearTimestamp
	// RequestSetRxLatency is description is TBD
	// NewRequestSetRxLatency returns a new instance of RequestSetRxLatency.
	NewRequestSetRxLatency() RequestSetRxLatency
	// RequestSetTxRxSyncInterval is description is TBD
	// NewRequestSetTxRxSyncInterval returns a new instance of RequestSetTxRxSyncInterval.
	NewRequestSetTxRxSyncInterval() RequestSetTxRxSyncInterval
	// RequestConfigurePCPUFilters is description is TBD
	// NewRequestConfigurePCPUFilters returns a new instance of RequestConfigurePCPUFilters.
	NewRequestConfigurePCPUFilters() RequestConfigurePCPUFilters
	// RequestsetNTPMasterOnNTPClient is description is TBD
	// NewRequestsetNTPMasterOnNTPClient returns a new instance of RequestsetNTPMasterOnNTPClient.
	NewRequestsetNTPMasterOnNTPClient() RequestsetNTPMasterOnNTPClient
	// RequestArmPulse is description is TBD
	// NewRequestArmPulse returns a new instance of RequestArmPulse.
	NewRequestArmPulse() RequestArmPulse
	// RequestUnlockPulse is description is TBD
	// NewRequestUnlockPulse returns a new instance of RequestUnlockPulse.
	NewRequestUnlockPulse() RequestUnlockPulse
	// RequestGetTimedActionTimestamp is description is TBD
	// NewRequestGetTimedActionTimestamp returns a new instance of RequestGetTimedActionTimestamp.
	NewRequestGetTimedActionTimestamp() RequestGetTimedActionTimestamp
	// RequestScheduleTimedActions is description is TBD
	// NewRequestScheduleTimedActions returns a new instance of RequestScheduleTimedActions.
	NewRequestScheduleTimedActions() RequestScheduleTimedActions
	// RequestStartTx is description is TBD
	// NewRequestStartTx returns a new instance of RequestStartTx.
	NewRequestStartTx() RequestStartTx
	// RequestStopTx is description is TBD
	// NewRequestStopTx returns a new instance of RequestStopTx.
	NewRequestStopTx() RequestStopTx
	// RequestConfigureStreams is description is TBD
	// NewRequestConfigureStreams returns a new instance of RequestConfigureStreams.
	NewRequestConfigureStreams() RequestConfigureStreams
	// RequestConfigureUpdateStreams is description is TBD
	// NewRequestConfigureUpdateStreams returns a new instance of RequestConfigureUpdateStreams.
	NewRequestConfigureUpdateStreams() RequestConfigureUpdateStreams
	// RequestConfigureStreamsDataBegin is description is TBD
	// NewRequestConfigureStreamsDataBegin returns a new instance of RequestConfigureStreamsDataBegin.
	NewRequestConfigureStreamsDataBegin() RequestConfigureStreamsDataBegin
	// RequestConfigureStreamsDataWrite is description is TBD
	// NewRequestConfigureStreamsDataWrite returns a new instance of RequestConfigureStreamsDataWrite.
	NewRequestConfigureStreamsDataWrite() RequestConfigureStreamsDataWrite
	// RequestRefreshValueList is description is TBD
	// NewRequestRefreshValueList returns a new instance of RequestRefreshValueList.
	NewRequestRefreshValueList() RequestRefreshValueList
	// RequestTxMacSecArmTriggerTimer is description is TBD
	// NewRequestTxMacSecArmTriggerTimer returns a new instance of RequestTxMacSecArmTriggerTimer.
	NewRequestTxMacSecArmTriggerTimer() RequestTxMacSecArmTriggerTimer
	// RequestConfigureMacSecPortControl is description is TBD
	// NewRequestConfigureMacSecPortControl returns a new instance of RequestConfigureMacSecPortControl.
	NewRequestConfigureMacSecPortControl() RequestConfigureMacSecPortControl
	// RequestConfigureMacSecScControl is description is TBD
	// NewRequestConfigureMacSecScControl returns a new instance of RequestConfigureMacSecScControl.
	NewRequestConfigureMacSecScControl() RequestConfigureMacSecScControl
	// RequestUpdateMacSecStreams is description is TBD
	// NewRequestUpdateMacSecStreams returns a new instance of RequestUpdateMacSecStreams.
	NewRequestUpdateMacSecStreams() RequestUpdateMacSecStreams
	// RequestConfigureMacSecSaKeys is description is TBD
	// NewRequestConfigureMacSecSaKeys returns a new instance of RequestConfigureMacSecSaKeys.
	NewRequestConfigureMacSecSaKeys() RequestConfigureMacSecSaKeys
	// RequestToggleMacSecSaKeys is description is TBD
	// NewRequestToggleMacSecSaKeys returns a new instance of RequestToggleMacSecSaKeys.
	NewRequestToggleMacSecSaKeys() RequestToggleMacSecSaKeys
	// RequestResetMacSecScs is description is TBD
	// NewRequestResetMacSecScs returns a new instance of RequestResetMacSecScs.
	NewRequestResetMacSecScs() RequestResetMacSecScs
	// RequestSetMacSecSaKeyState is description is TBD
	// NewRequestSetMacSecSaKeyState returns a new instance of RequestSetMacSecSaKeyState.
	NewRequestSetMacSecSaKeyState() RequestSetMacSecSaKeyState
	// RequestGetMacSecSaKeyStatus is description is TBD
	// NewRequestGetMacSecSaKeyStatus returns a new instance of RequestGetMacSecSaKeyStatus.
	NewRequestGetMacSecSaKeyStatus() RequestGetMacSecSaKeyStatus
	// RequestConfigureMacSecUDS is description is TBD
	// NewRequestConfigureMacSecUDS returns a new instance of RequestConfigureMacSecUDS.
	NewRequestConfigureMacSecUDS() RequestConfigureMacSecUDS
	// RequestGetStatCatalog is description is TBD
	// NewRequestGetStatCatalog returns a new instance of RequestGetStatCatalog.
	NewRequestGetStatCatalog() RequestGetStatCatalog
	// RequestClearStats is description is TBD
	// NewRequestClearStats returns a new instance of RequestClearStats.
	NewRequestClearStats() RequestClearStats
	// RequestClearPerStreamTxStats is description is TBD
	// NewRequestClearPerStreamTxStats returns a new instance of RequestClearPerStreamTxStats.
	NewRequestClearPerStreamTxStats() RequestClearPerStreamTxStats
	// RequestVMAcquire is description is TBD
	// NewRequestVMAcquire returns a new instance of RequestVMAcquire.
	NewRequestVMAcquire() RequestVMAcquire
	// RequestVMAddPort is description is TBD
	// NewRequestVMAddPort returns a new instance of RequestVMAddPort.
	NewRequestVMAddPort() RequestVMAddPort
	// RequestVMRemovePort is description is TBD
	// NewRequestVMRemovePort returns a new instance of RequestVMRemovePort.
	NewRequestVMRemovePort() RequestVMRemovePort
	// SetTcpPortResponse is description is TBD
	// NewSetTcpPortResponse returns a new instance of SetTcpPortResponse.
	NewSetTcpPortResponse() SetTcpPortResponse
	// InitRequestResponse is description is TBD
	// NewInitRequestResponse returns a new instance of InitRequestResponse.
	NewInitRequestResponse() InitRequestResponse
	// RestartResponse is description is TBD
	// NewRestartResponse returns a new instance of RestartResponse.
	NewRestartResponse() RestartResponse
	// StartDebugSessionResponse is description is TBD
	// NewStartDebugSessionResponse returns a new instance of StartDebugSessionResponse.
	NewStartDebugSessionResponse() StartDebugSessionResponse
	// StopDebugSessionResponse is description is TBD
	// NewStopDebugSessionResponse returns a new instance of StopDebugSessionResponse.
	NewStopDebugSessionResponse() StopDebugSessionResponse
	// FeatureRequestResponse is description is TBD
	// NewFeatureRequestResponse returns a new instance of FeatureRequestResponse.
	NewFeatureRequestResponse() FeatureRequestResponse
	// SetUserInfoResponse is description is TBD
	// NewSetUserInfoResponse returns a new instance of SetUserInfoResponse.
	NewSetUserInfoResponse() SetUserInfoResponse
	// GetOwnerResponse is description is TBD
	// NewGetOwnerResponse returns a new instance of GetOwnerResponse.
	NewGetOwnerResponse() GetOwnerResponse
	// TakeOwnershipResponse is description is TBD
	// NewTakeOwnershipResponse returns a new instance of TakeOwnershipResponse.
	NewTakeOwnershipResponse() TakeOwnershipResponse
	// ClearOwnershipResponse is description is TBD
	// NewClearOwnershipResponse returns a new instance of ClearOwnershipResponse.
	NewClearOwnershipResponse() ClearOwnershipResponse
	// SubscribeEventResponse is description is TBD
	// NewSubscribeEventResponse returns a new instance of SubscribeEventResponse.
	NewSubscribeEventResponse() SubscribeEventResponse
	// UnsubscribeEventResponse is description is TBD
	// NewUnsubscribeEventResponse returns a new instance of UnsubscribeEventResponse.
	NewUnsubscribeEventResponse() UnsubscribeEventResponse
	// ConfigurePortResponse is description is TBD
	// NewConfigurePortResponse returns a new instance of ConfigurePortResponse.
	NewConfigurePortResponse() ConfigurePortResponse
	// ConfigurePortBasicResponse is description is TBD
	// NewConfigurePortBasicResponse returns a new instance of ConfigurePortBasicResponse.
	NewConfigurePortBasicResponse() ConfigurePortBasicResponse
	// PrepareForStartTxResponse is description is TBD
	// NewPrepareForStartTxResponse returns a new instance of PrepareForStartTxResponse.
	NewPrepareForStartTxResponse() PrepareForStartTxResponse
	// ConfigureCaptureResponse is description is TBD
	// NewConfigureCaptureResponse returns a new instance of ConfigureCaptureResponse.
	NewConfigureCaptureResponse() ConfigureCaptureResponse
	// StartCaptureResponse is description is TBD
	// NewStartCaptureResponse returns a new instance of StartCaptureResponse.
	NewStartCaptureResponse() StartCaptureResponse
	// StopCaptureResponse is description is TBD
	// NewStopCaptureResponse returns a new instance of StopCaptureResponse.
	NewStopCaptureResponse() StopCaptureResponse
	// GetCapturePacketCountResponse is description is TBD
	// NewGetCapturePacketCountResponse returns a new instance of GetCapturePacketCountResponse.
	NewGetCapturePacketCountResponse() GetCapturePacketCountResponse
	// GetCaptureStatusResponse is description is TBD
	// NewGetCaptureStatusResponse returns a new instance of GetCaptureStatusResponse.
	NewGetCaptureStatusResponse() GetCaptureStatusResponse
	// RetrieveCaptureResponse is description is TBD
	// NewRetrieveCaptureResponse returns a new instance of RetrieveCaptureResponse.
	NewRetrieveCaptureResponse() RetrieveCaptureResponse
	// StartLatencyResponse is description is TBD
	// NewStartLatencyResponse returns a new instance of StartLatencyResponse.
	NewStartLatencyResponse() StartLatencyResponse
	// StopLatencyResponse is description is TBD
	// NewStopLatencyResponse returns a new instance of StopLatencyResponse.
	NewStopLatencyResponse() StopLatencyResponse
	// ClearLatencyResponse is description is TBD
	// NewClearLatencyResponse returns a new instance of ClearLatencyResponse.
	NewClearLatencyResponse() ClearLatencyResponse
	// ClearLatencyForSelectedPgiDsResponse is description is TBD
	// NewClearLatencyForSelectedPgiDsResponse returns a new instance of ClearLatencyForSelectedPgiDsResponse.
	NewClearLatencyForSelectedPgiDsResponse() ClearLatencyForSelectedPgiDsResponse
	// ClearTimestampResponse is description is TBD
	// NewClearTimestampResponse returns a new instance of ClearTimestampResponse.
	NewClearTimestampResponse() ClearTimestampResponse
	// SetRxLatencyResponse is description is TBD
	// NewSetRxLatencyResponse returns a new instance of SetRxLatencyResponse.
	NewSetRxLatencyResponse() SetRxLatencyResponse
	// SetTxRxSyncIntervalResponse is description is TBD
	// NewSetTxRxSyncIntervalResponse returns a new instance of SetTxRxSyncIntervalResponse.
	NewSetTxRxSyncIntervalResponse() SetTxRxSyncIntervalResponse
	// ConfigurePcpuFiltersResponse is description is TBD
	// NewConfigurePcpuFiltersResponse returns a new instance of ConfigurePcpuFiltersResponse.
	NewConfigurePcpuFiltersResponse() ConfigurePcpuFiltersResponse
	// GetCurrentServerTimeResponse is description is TBD
	// NewGetCurrentServerTimeResponse returns a new instance of GetCurrentServerTimeResponse.
	NewGetCurrentServerTimeResponse() GetCurrentServerTimeResponse
	// GetNtpStateResponse is description is TBD
	// NewGetNtpStateResponse returns a new instance of GetNtpStateResponse.
	NewGetNtpStateResponse() GetNtpStateResponse
	// SetNtpMasterOnNtpClientResponse is description is TBD
	// NewSetNtpMasterOnNtpClientResponse returns a new instance of SetNtpMasterOnNtpClientResponse.
	NewSetNtpMasterOnNtpClientResponse() SetNtpMasterOnNtpClientResponse
	// SetNtpMasterAsSelfResponse is description is TBD
	// NewSetNtpMasterAsSelfResponse returns a new instance of SetNtpMasterAsSelfResponse.
	NewSetNtpMasterAsSelfResponse() SetNtpMasterAsSelfResponse
	// LockPulseResponse is description is TBD
	// NewLockPulseResponse returns a new instance of LockPulseResponse.
	NewLockPulseResponse() LockPulseResponse
	// ArmPulseResponse is description is TBD
	// NewArmPulseResponse returns a new instance of ArmPulseResponse.
	NewArmPulseResponse() ArmPulseResponse
	// UnlockPulseResponse is description is TBD
	// NewUnlockPulseResponse returns a new instance of UnlockPulseResponse.
	NewUnlockPulseResponse() UnlockPulseResponse
	// GetTimedActionTimestampResponse is description is TBD
	// NewGetTimedActionTimestampResponse returns a new instance of GetTimedActionTimestampResponse.
	NewGetTimedActionTimestampResponse() GetTimedActionTimestampResponse
	// ScheduleTimedActionsResponse is description is TBD
	// NewScheduleTimedActionsResponse returns a new instance of ScheduleTimedActionsResponse.
	NewScheduleTimedActionsResponse() ScheduleTimedActionsResponse
	// StartTxResponse is description is TBD
	// NewStartTxResponse returns a new instance of StartTxResponse.
	NewStartTxResponse() StartTxResponse
	// StopTxResponse is description is TBD
	// NewStopTxResponse returns a new instance of StopTxResponse.
	NewStopTxResponse() StopTxResponse
	// ConfigureStreamsResponse is description is TBD
	// NewConfigureStreamsResponse returns a new instance of ConfigureStreamsResponse.
	NewConfigureStreamsResponse() ConfigureStreamsResponse
	// ConfigureUpdateStreamsResponse is description is TBD
	// NewConfigureUpdateStreamsResponse returns a new instance of ConfigureUpdateStreamsResponse.
	NewConfigureUpdateStreamsResponse() ConfigureUpdateStreamsResponse
	// ConfigureStreamsDataBeginResponse is description is TBD
	// NewConfigureStreamsDataBeginResponse returns a new instance of ConfigureStreamsDataBeginResponse.
	NewConfigureStreamsDataBeginResponse() ConfigureStreamsDataBeginResponse
	// ConfigureStreamsDataWriteResponse is description is TBD
	// NewConfigureStreamsDataWriteResponse returns a new instance of ConfigureStreamsDataWriteResponse.
	NewConfigureStreamsDataWriteResponse() ConfigureStreamsDataWriteResponse
	// RefreshValueListResponse is description is TBD
	// NewRefreshValueListResponse returns a new instance of RefreshValueListResponse.
	NewRefreshValueListResponse() RefreshValueListResponse
	// TxMacSecArmTriggerTimerResponse is description is TBD
	// NewTxMacSecArmTriggerTimerResponse returns a new instance of TxMacSecArmTriggerTimerResponse.
	NewTxMacSecArmTriggerTimerResponse() TxMacSecArmTriggerTimerResponse
	// ConfigureMacSecPortControlResponse is description is TBD
	// NewConfigureMacSecPortControlResponse returns a new instance of ConfigureMacSecPortControlResponse.
	NewConfigureMacSecPortControlResponse() ConfigureMacSecPortControlResponse
	// ConfigureMacSecScControlResponse is description is TBD
	// NewConfigureMacSecScControlResponse returns a new instance of ConfigureMacSecScControlResponse.
	NewConfigureMacSecScControlResponse() ConfigureMacSecScControlResponse
	// UpdateMacSecStreamsResponse is description is TBD
	// NewUpdateMacSecStreamsResponse returns a new instance of UpdateMacSecStreamsResponse.
	NewUpdateMacSecStreamsResponse() UpdateMacSecStreamsResponse
	// ConfigureMacSecSaKeysResponse is description is TBD
	// NewConfigureMacSecSaKeysResponse returns a new instance of ConfigureMacSecSaKeysResponse.
	NewConfigureMacSecSaKeysResponse() ConfigureMacSecSaKeysResponse
	// ToggleMacSecSaKeysResponse is description is TBD
	// NewToggleMacSecSaKeysResponse returns a new instance of ToggleMacSecSaKeysResponse.
	NewToggleMacSecSaKeysResponse() ToggleMacSecSaKeysResponse
	// ResetMacSecScsResponse is description is TBD
	// NewResetMacSecScsResponse returns a new instance of ResetMacSecScsResponse.
	NewResetMacSecScsResponse() ResetMacSecScsResponse
	// SetMacSecSaKeyStateResponse is description is TBD
	// NewSetMacSecSaKeyStateResponse returns a new instance of SetMacSecSaKeyStateResponse.
	NewSetMacSecSaKeyStateResponse() SetMacSecSaKeyStateResponse
	// GetMacSecSaKeyStatusResponse is description is TBD
	// NewGetMacSecSaKeyStatusResponse returns a new instance of GetMacSecSaKeyStatusResponse.
	NewGetMacSecSaKeyStatusResponse() GetMacSecSaKeyStatusResponse
	// ConfigureMacSecUdsResponse is description is TBD
	// NewConfigureMacSecUdsResponse returns a new instance of ConfigureMacSecUdsResponse.
	NewConfigureMacSecUdsResponse() ConfigureMacSecUdsResponse
	// GetStatCatalogResponse is description is TBD
	// NewGetStatCatalogResponse returns a new instance of GetStatCatalogResponse.
	NewGetStatCatalogResponse() GetStatCatalogResponse
	// ClearStatsResponse is description is TBD
	// NewClearStatsResponse returns a new instance of ClearStatsResponse.
	NewClearStatsResponse() ClearStatsResponse
	// ClearPerStreamTxStatsResponse is description is TBD
	// NewClearPerStreamTxStatsResponse returns a new instance of ClearPerStreamTxStatsResponse.
	NewClearPerStreamTxStatsResponse() ClearPerStreamTxStatsResponse
	// VmAcquireResponse is description is TBD
	// NewVmAcquireResponse returns a new instance of VmAcquireResponse.
	NewVmAcquireResponse() VmAcquireResponse
	// VmAddPortResponse is description is TBD
	// NewVmAddPortResponse returns a new instance of VmAddPortResponse.
	NewVmAddPortResponse() VmAddPortResponse
	// VmRemovePortResponse is description is TBD
	// NewVmRemovePortResponse returns a new instance of VmRemovePortResponse.
	NewVmRemovePortResponse() VmRemovePortResponse
	// VmReleaseResponse is description is TBD
	// NewVmReleaseResponse returns a new instance of VmReleaseResponse.
	NewVmReleaseResponse() VmReleaseResponse
	// GetVersionResponse is description is TBD
	// NewGetVersionResponse returns a new instance of GetVersionResponse.
	NewGetVersionResponse() GetVersionResponse
	// SetTcpPort for test purpose only the TcpPort is passed in. This is only used for the   DummyPort app.
	SetTcpPort(requestSetTcpPort RequestSetTcpPort) (Warning, error)
	// InitRequest the InitRequest() method must be called by the client for each new connection, and tells the server which version of the interface the client is expecting to use. The server will reply with the version of the interface it is providing.
	InitRequest(requestInitRequest RequestInitRequest) (ResponseInitRequest, error)
	// Restart on PF IxVM, it allows the client to restart ixvm.
	Restart() (Warning, error)
	// StartDebugSession userName :IxNewtork session username which identifies IxNetwork process which is trying to use PFDebug Interceptor. Depending on the running mode of interceptor, second IxNetwork connections to same interceptor might be discarded; PortListInfo: Sends a list of unique port ids and corresponding topology/connection info to be used by PFDebug interceptor. If a config will be sent to a port id  on which StartDebugSession was  not called, that config will not be forwarded to the appropriate  port. PortListInfoWithUniqueId: List containing all the ports from PortListInfo, but for every port in PortListInfo there is also a unique identifier attached, which need to be used  further in stream configuration APIs. InterceptorInfo: Structure containing :  -running mode of Interceptor;  -a string containing username(s) that is/are currently using the Interceptor. In case multiple clients are using Interceptor,  it will return all users that are connected to Interceptor, separated by ";".
	StartDebugSession(requestStartDebugSession RequestStartDebugSession) (ResponseStartDebugSession, error)
	// StopDebugSession userName :IxNewtork session username to identify IxNetwork process which is trying to use PFDebug Interceptor. Depending on the running mode of interceptor, second IxNetwork connections to same interceptor might be discarded; PortIdList: Sends a list of unique port ids to be removed from PFDebug Interceptor. If a config will be sent to a port on which StopDebugSession was called, that config will not be forwarded to the appropriate  port. InterceptorInfo: Structure containing :  -running mode of Interceptor;  -a string containing username(s) that is/are currently using the Interceptor. In case multiple clients are using Interceptor,  it will return all users that are connected to Interceptor, separated by ";".
	StopDebugSession(requestStopDebugSession RequestStopDebugSession) (ResponseStopDebugSession, error)
	// FeatureRequest the FeatureRequest() method allows the client to query the features supported by the application. The response will always include the features that are applicable to the entire card, in addition to the features for the specific ports. The method replies with a JSON-formatted string representing the features.
	FeatureRequest(requestFeatureRequest RequestFeatureRequest) (ResponseFeatureRequest, error)
	// SetUserInfo sets the user information for this session.
	SetUserInfo(requestSetUserInfo RequestSetUserInfo) (Warning, error)
	// GetOwner returns the current owner of the port. Owner is empty if port is not in use.
	GetOwner() (ResponseGetOwner, error)
	// TakeOwnership takes ownership of the port. Ownership can only be taken if not already owned by a different user, unless force is set, in which case ownership can be taken away.
	TakeOwnership(requestTakeOwnership RequestTakeOwnership) (Warning, error)
	// ClearOwnership clear ownership of the port. Ownership can only be cleared if it was previously taken by the same user. If force is set, no check will be performed.
	ClearOwnership(requestClearOwnership RequestClearOwnership) (Warning, error)
	// SubscribeEvent the SubscribeEvent() method can be called by the client to subscribe to event notifications from the server regarding the ports in PortIdList, and thus implement the Observer pattern.
	SubscribeEvent(requestSubscribeEvent RequestSubscribeEvent) (Warning, error)
	// UnsubscribeEvent the UnsubscribeEvent() method can be called by the client to unsubscribe from event notifications from the server, and thus implement the Observer pattern.
	UnsubscribeEvent(requestUnsubscribeEvent RequestUnsubscribeEvent) (Warning, error)
	// ConfigurePort the ConfigurePort() method can be called by the client to configure the physical receive and transmit characteristics of the port. For a TX traffic implementation, please use ConfigurePortBasic instead which passes stripped down stream-centric data parameters. Use either ConfigurePort or ConfigurePortBasic for the port -- Do not use both.
	ConfigurePort(requestConfigurePort RequestConfigurePort) (Warning, error)
	// ConfigurePortBasic the ConfigurePortBasic() method can be called by the client to configure the physical characteristics of the port. The  ConfigurePortBasic method is a Streams-centric subset of the  ConfigurePort method and should be used INSTEAD of ConfigurePort if the PCPU is solely being used for TX traffic configuration.
	ConfigurePortBasic(requestConfigurePortBasic RequestConfigurePortBasic) (Warning, error)
	// PrepareForStartTx the PrepareForStartTx() method must be called prior to starting traffic and tells the port to make final preparations. Set IsTransmitting to true when port is already transmitting and PrepareForStartTx() is called just prior to ClearStats()
	PrepareForStartTx(requestPrepareForStartTx RequestPrepareForStartTx) (Warning, error)
	// ConfigureCapture the ConfigureCapture() method allows the client to configure the port to capture packets. This method must only be called when capture is not running. Once configured, capture may be started by calling StartCapture(). The client application can configure capture for RX/TX or both. CaptureConfigurationList can contain up to 2 elements (when the settings for RX differ from those of TX) or just one configuration if only one direction is configured (RX or TX) or if both directions use the same configuration.
	ConfigureCapture(requestConfigureCapture RequestConfigureCapture) (Warning, error)
	// StartCapture once the capture subsystem is configured, StartCapture() method triggers the subsystem to begin capturing packets.
	StartCapture(requestStartCapture RequestStartCapture) (Warning, error)
	// StopCapture once the capture subsystem has started capturing packets, the StopCapture() method triggers the subsystem to stop capturing packets. Captured packets may be retrieved once capture is stopped.
	StopCapture(requestStopCapture RequestStopCapture) (Warning, error)
	// GetCapturePacketCount the GetCapturePacketCount() method returns the number of packets captured. Depending on the   direction chosen (Rx/Tx/both) a list of PacketCount structs will be returned: a list of one   element for kRx/kTx direction and a list of two elements when kBoth is chosen for direction.
	GetCapturePacketCount(requestGetCapturePacketCount RequestGetCapturePacketCount) (ResponseGetCapturePacketCount, error)
	// GetCaptureStatus the GetCaptureStatus() method returns information about the capture. Depending on the   direction chosen (Rx/Tx/both) a list of status structs will be returned: a list of one   element for kRx/kTx direction and a list of two elements when kBoth is chosen for direction.
	GetCaptureStatus(requestGetCaptureStatus RequestGetCaptureStatus) (ResponseGetCaptureStatus, error)
	// RetrieveCapture the RetrieveCapture() method allows the client to fetch the packets captured on a particular port. The method will return the retrieved packets, but the server will return no more than the specified number of records beginning at the specified captured startIndex. The format of the packets retrieved will be based on the retrival options: pcap/raw, micro/nano second precision. It is entirely possible that the server will return far less data than is requested to avoid consuming too many CPU cycles or network bandwidth. The method will never return more than 1MB of data at a time.
	RetrieveCapture(requestRetrieveCapture RequestRetrieveCapture) (ResponseRetrieveCapture, error)
	// StartLatency triggers the subsystem to begin latency measurements.
	StartLatency(requestStartLatency RequestStartLatency) (Warning, error)
	// StopLatency stops latency measurements.
	StopLatency(requestStopLatency RequestStopLatency) (Warning, error)
	// ClearLatency clears latency measurements.
	ClearLatency(requestClearLatency RequestClearLatency) (Warning, error)
	// ClearLatencyForSelectedPgiDs clears latency measurements for a set of PGIDs.
	ClearLatencyForSelectedPgiDs(requestClearLatencyForSelectedPGIDs RequestClearLatencyForSelectedPGIDs) (Warning, error)
	// ClearTimestamp clears First/Last Time Stamp in DRAM statistics.
	ClearTimestamp(requestClearTimestamp RequestClearTimestamp) (Warning, error)
	// SetRxLatency config the packet group engine.
	SetRxLatency(requestSetRxLatency RequestSetRxLatency) (Warning, error)
	// SetTxRxSyncInterval configure interval of TxRxSync engine only.
	SetTxRxSyncInterval(requestSetTxRxSyncInterval RequestSetTxRxSyncInterval) (Warning, error)
	// ConfigurePcpuFilters configure the PCPU filters.
	ConfigurePcpuFilters(requestConfigurePCPUFilters RequestConfigurePCPUFilters) (Warning, error)
	// GetCurrentServerTime get the current time (on master port). Clients must then calculate a future time for pulsing based on it.
	GetCurrentServerTime() (ResponseGetCurrentServerTime, error)
	// GetNtpState get the current state of the NTP server.
	GetNtpState() (ResponseGetNTPState, error)
	// SetNtpMasterOnNtpClient configures the NTP client to use the specified NTP server for time synchronization.
	SetNtpMasterOnNtpClient(requestsetNTPMasterOnNTPClient RequestsetNTPMasterOnNTPClient) (Warning, error)
	// SetNtpMasterAsSelf configures a machine to act as the NTP server used by others for time synchronization.
	SetNtpMasterAsSelf() (Warning, error)
	// LockPulse lock the pulse generating mechanism in preparation for arming and sending pulses. Clients must call this before arming any of the features for synchronisation.
	LockPulse() (Warning, error)
	// ArmPulse arm the pulse system to carry out the list of actions when the next pulse is received.
	ArmPulse(requestArmPulse RequestArmPulse) (Warning, error)
	// UnlockPulse atomically unlock the pulse generating mechanism, and optionally send a pulse no later than the specified UTCTime. Implementations which are synchronised to UTC will send the pulse at the specified time, whereas implementations that are not synchronised to UTC are permitted to send the pulse as soon as possible. The client can send zero for At to indicate that the action should be performed immediately. The client must take care to synchronise with all ports after issuing ArmPulse(), but before issuing UnlockPulse().
	UnlockPulse(requestUnlockPulse RequestUnlockPulse) (Warning, error)
	// GetTimedActionTimestamp get the current timestamp (in nanoseconds after timestamps were cleared). Client then uses it to schedule future actions.
	GetTimedActionTimestamp(requestGetTimedActionTimestamp RequestGetTimedActionTimestamp) (ResponseGetTimedActionTimestamp, error)
	// ScheduleTimedActions schedule the given list of actions.  If any of them cannot be scheduled (typically because the scheduled time is not far enough in the future), return an error message.
	ScheduleTimedActions(requestScheduleTimedActions RequestScheduleTimedActions) (ResponseScheduleTimedActions, error)
	// StartTx start sending packets.
	StartTx(requestStartTx RequestStartTx) (Warning, error)
	// StopTx stop sending packets.
	StopTx(requestStopTx RequestStopTx) (Warning, error)
	// ConfigureStreams tBD
	ConfigureStreams(requestConfigureStreams RequestConfigureStreams) (Warning, error)
	// ConfigureUpdateStreams tBD
	ConfigureUpdateStreams(requestConfigureUpdateStreams RequestConfigureUpdateStreams) (ResponseConfigureUpdateStreams, error)
	// ConfigureStreamsDataBegin tBD
	ConfigureStreamsDataBegin(requestConfigureStreamsDataBegin RequestConfigureStreamsDataBegin) (Warning, error)
	// ConfigureStreamsDataWrite tBD
	ConfigureStreamsDataWrite(requestConfigureStreamsDataWrite RequestConfigureStreamsDataWrite) (Warning, error)
	// RefreshValueList tBD
	RefreshValueList(requestRefreshValueList RequestRefreshValueList) (ResponseRefreshValueList, error)
	// TxMacSecArmTriggerTimer calling this API will start the trigger timer for Rekey.
	TxMacSecArmTriggerTimer(requestTxMacSecArmTriggerTimer RequestTxMacSecArmTriggerTimer) (Warning, error)
	// ConfigureMacSecPortControl calling this API is mandetory for MACSEC. This will configure all fields of  Tx and Rx Port Control
	ConfigureMacSecPortControl(requestConfigureMacSecPortControl RequestConfigureMacSecPortControl) (Warning, error)
	// ConfigureMacSecScControl calling this API is mandetory for MACSEC traffic. This will configure all Tx and Rx SA related configurations.
	ConfigureMacSecScControl(requestConfigureMacSecScControl RequestConfigureMacSecScControl) (Warning, error)
	// UpdateMacSecStreams we expect this method to be called before start transmit and at on the fly changes. Therefore, this API should be called before start MACSEC streams.
	UpdateMacSecStreams(requestUpdateMacSecStreams RequestUpdateMacSecStreams) (Warning, error)
	// ConfigureMacSecSaKeys this API can be used for key update or configure operations.
	ConfigureMacSecSaKeys(requestConfigureMacSecSaKeys RequestConfigureMacSecSaKeys) (Warning, error)
	// ToggleMacSecSaKeys key will not be part of this message. This API will help to toggle the keys of mentioned SAs.
	ToggleMacSecSaKeys(requestToggleMacSecSaKeys RequestToggleMacSecSaKeys) (Warning, error)
	// ResetMacSecScs this API will Reset mentioned SCs.
	ResetMacSecScs(requestResetMacSecScs RequestResetMacSecScs) (Warning, error)
	// SetMacSecSaKeyState this API will Set State of Rx or Tx SA Keys
	SetMacSecSaKeyState(requestSetMacSecSaKeyState RequestSetMacSecSaKeyState) (Warning, error)
	// GetMacSecSaKeyStatus tBD
	GetMacSecSaKeyStatus(requestGetMacSecSaKeyStatus RequestGetMacSecSaKeyStatus) (ResponseGetMacSecSaKeyStatus, error)
	// ConfigureMacSecUds tBD
	ConfigureMacSecUds(requestConfigureMacSecUDS RequestConfigureMacSecUDS) (Warning, error)
	// GetStatCatalog retrieve the current stat catalog. This method can be called anytime, after  the client succeded to connect. If the application calls this method multiple times without any change in port mode(or other actions that can alterate the  stat catalog), the results should be identical. If the port mode is changed, the result may or may not be the same before and after the port mode change. Currently, client has no limitation related to the number of times this method can be called or when can be called. It should be called after  every port mode change to be sure that SV register for the proper stats.
	GetStatCatalog(requestGetStatCatalog RequestGetStatCatalog) (ResponseGetStatCatalog, error)
	// ClearStats clears stat measurements.The client calls this to reset all the port measurements. These include measurements like framesSent, framesReceived, bytesSent, bytesReceived,etc.  The reset value for a measurement will depend on the underlying quantity being measured, but will generally be zero. This method can be called anytime to clear the stat measurements. Can be used on demand whenever the client wants to reset stats measurements values. The effect  is visible only if stat measurements are being updated or had been updated and currenlty have a  value different than default.
	ClearStats(requestClearStats RequestClearStats) (Warning, error)
	// ClearPerStreamTxStats clears per stream tx stat measurements.The client calls this to reset all the per stream tx measurements. These include measurements like framesSent, bytes sent, frameCountSizeBin, etc.
	ClearPerStreamTxStats(requestClearPerStreamTxStats RequestClearPerStreamTxStats) (Warning, error)
	// VmAcquire tBD
	VmAcquire(requestVMAcquire RequestVMAcquire) (Warning, error)
	// VmAddPort tBD
	VmAddPort(requestVMAddPort RequestVMAddPort) (Warning, error)
	// VmRemovePort tBD
	VmRemovePort(requestVMRemovePort RequestVMRemovePort) (Warning, error)
	// VmRelease tBD
	VmRelease() (Warning, error)
	// GetVersion description is TBD
	GetVersion() (Version, error)
	// GetLocalVersion provides version details of local client
	GetLocalVersion() Version
	// GetRemoteVersion provides version details received from remote server
	GetRemoteVersion() (Version, error)
	// SetVersionCompatibilityCheck allows enabling or disabling automatic version
	// compatibility check between client and server API spec version upon API call
	SetVersionCompatibilityCheck(bool)
	// CheckVersionCompatibility compares API spec version for local client and remote server,
	// and returns an error if they are not compatible according to Semantic Versioning 2.0.0
	CheckVersionCompatibility() error
}

func (api *gopineApi) NewRequestSetTcpPort() RequestSetTcpPort {
	return NewRequestSetTcpPort()
}

func (api *gopineApi) NewRequestInitRequest() RequestInitRequest {
	return NewRequestInitRequest()
}

func (api *gopineApi) NewRequestStartDebugSession() RequestStartDebugSession {
	return NewRequestStartDebugSession()
}

func (api *gopineApi) NewRequestStopDebugSession() RequestStopDebugSession {
	return NewRequestStopDebugSession()
}

func (api *gopineApi) NewRequestFeatureRequest() RequestFeatureRequest {
	return NewRequestFeatureRequest()
}

func (api *gopineApi) NewRequestSetUserInfo() RequestSetUserInfo {
	return NewRequestSetUserInfo()
}

func (api *gopineApi) NewRequestTakeOwnership() RequestTakeOwnership {
	return NewRequestTakeOwnership()
}

func (api *gopineApi) NewRequestClearOwnership() RequestClearOwnership {
	return NewRequestClearOwnership()
}

func (api *gopineApi) NewRequestSubscribeEvent() RequestSubscribeEvent {
	return NewRequestSubscribeEvent()
}

func (api *gopineApi) NewRequestUnsubscribeEvent() RequestUnsubscribeEvent {
	return NewRequestUnsubscribeEvent()
}

func (api *gopineApi) NewRequestConfigurePort() RequestConfigurePort {
	return NewRequestConfigurePort()
}

func (api *gopineApi) NewRequestConfigurePortBasic() RequestConfigurePortBasic {
	return NewRequestConfigurePortBasic()
}

func (api *gopineApi) NewRequestPrepareForStartTx() RequestPrepareForStartTx {
	return NewRequestPrepareForStartTx()
}

func (api *gopineApi) NewRequestConfigureCapture() RequestConfigureCapture {
	return NewRequestConfigureCapture()
}

func (api *gopineApi) NewRequestStartCapture() RequestStartCapture {
	return NewRequestStartCapture()
}

func (api *gopineApi) NewRequestStopCapture() RequestStopCapture {
	return NewRequestStopCapture()
}

func (api *gopineApi) NewRequestGetCapturePacketCount() RequestGetCapturePacketCount {
	return NewRequestGetCapturePacketCount()
}

func (api *gopineApi) NewRequestGetCaptureStatus() RequestGetCaptureStatus {
	return NewRequestGetCaptureStatus()
}

func (api *gopineApi) NewRequestRetrieveCapture() RequestRetrieveCapture {
	return NewRequestRetrieveCapture()
}

func (api *gopineApi) NewRequestStartLatency() RequestStartLatency {
	return NewRequestStartLatency()
}

func (api *gopineApi) NewRequestStopLatency() RequestStopLatency {
	return NewRequestStopLatency()
}

func (api *gopineApi) NewRequestClearLatency() RequestClearLatency {
	return NewRequestClearLatency()
}

func (api *gopineApi) NewRequestClearLatencyForSelectedPGIDs() RequestClearLatencyForSelectedPGIDs {
	return NewRequestClearLatencyForSelectedPGIDs()
}

func (api *gopineApi) NewRequestClearTimestamp() RequestClearTimestamp {
	return NewRequestClearTimestamp()
}

func (api *gopineApi) NewRequestSetRxLatency() RequestSetRxLatency {
	return NewRequestSetRxLatency()
}

func (api *gopineApi) NewRequestSetTxRxSyncInterval() RequestSetTxRxSyncInterval {
	return NewRequestSetTxRxSyncInterval()
}

func (api *gopineApi) NewRequestConfigurePCPUFilters() RequestConfigurePCPUFilters {
	return NewRequestConfigurePCPUFilters()
}

func (api *gopineApi) NewRequestsetNTPMasterOnNTPClient() RequestsetNTPMasterOnNTPClient {
	return NewRequestsetNTPMasterOnNTPClient()
}

func (api *gopineApi) NewRequestArmPulse() RequestArmPulse {
	return NewRequestArmPulse()
}

func (api *gopineApi) NewRequestUnlockPulse() RequestUnlockPulse {
	return NewRequestUnlockPulse()
}

func (api *gopineApi) NewRequestGetTimedActionTimestamp() RequestGetTimedActionTimestamp {
	return NewRequestGetTimedActionTimestamp()
}

func (api *gopineApi) NewRequestScheduleTimedActions() RequestScheduleTimedActions {
	return NewRequestScheduleTimedActions()
}

func (api *gopineApi) NewRequestStartTx() RequestStartTx {
	return NewRequestStartTx()
}

func (api *gopineApi) NewRequestStopTx() RequestStopTx {
	return NewRequestStopTx()
}

func (api *gopineApi) NewRequestConfigureStreams() RequestConfigureStreams {
	return NewRequestConfigureStreams()
}

func (api *gopineApi) NewRequestConfigureUpdateStreams() RequestConfigureUpdateStreams {
	return NewRequestConfigureUpdateStreams()
}

func (api *gopineApi) NewRequestConfigureStreamsDataBegin() RequestConfigureStreamsDataBegin {
	return NewRequestConfigureStreamsDataBegin()
}

func (api *gopineApi) NewRequestConfigureStreamsDataWrite() RequestConfigureStreamsDataWrite {
	return NewRequestConfigureStreamsDataWrite()
}

func (api *gopineApi) NewRequestRefreshValueList() RequestRefreshValueList {
	return NewRequestRefreshValueList()
}

func (api *gopineApi) NewRequestTxMacSecArmTriggerTimer() RequestTxMacSecArmTriggerTimer {
	return NewRequestTxMacSecArmTriggerTimer()
}

func (api *gopineApi) NewRequestConfigureMacSecPortControl() RequestConfigureMacSecPortControl {
	return NewRequestConfigureMacSecPortControl()
}

func (api *gopineApi) NewRequestConfigureMacSecScControl() RequestConfigureMacSecScControl {
	return NewRequestConfigureMacSecScControl()
}

func (api *gopineApi) NewRequestUpdateMacSecStreams() RequestUpdateMacSecStreams {
	return NewRequestUpdateMacSecStreams()
}

func (api *gopineApi) NewRequestConfigureMacSecSaKeys() RequestConfigureMacSecSaKeys {
	return NewRequestConfigureMacSecSaKeys()
}

func (api *gopineApi) NewRequestToggleMacSecSaKeys() RequestToggleMacSecSaKeys {
	return NewRequestToggleMacSecSaKeys()
}

func (api *gopineApi) NewRequestResetMacSecScs() RequestResetMacSecScs {
	return NewRequestResetMacSecScs()
}

func (api *gopineApi) NewRequestSetMacSecSaKeyState() RequestSetMacSecSaKeyState {
	return NewRequestSetMacSecSaKeyState()
}

func (api *gopineApi) NewRequestGetMacSecSaKeyStatus() RequestGetMacSecSaKeyStatus {
	return NewRequestGetMacSecSaKeyStatus()
}

func (api *gopineApi) NewRequestConfigureMacSecUDS() RequestConfigureMacSecUDS {
	return NewRequestConfigureMacSecUDS()
}

func (api *gopineApi) NewRequestGetStatCatalog() RequestGetStatCatalog {
	return NewRequestGetStatCatalog()
}

func (api *gopineApi) NewRequestClearStats() RequestClearStats {
	return NewRequestClearStats()
}

func (api *gopineApi) NewRequestClearPerStreamTxStats() RequestClearPerStreamTxStats {
	return NewRequestClearPerStreamTxStats()
}

func (api *gopineApi) NewRequestVMAcquire() RequestVMAcquire {
	return NewRequestVMAcquire()
}

func (api *gopineApi) NewRequestVMAddPort() RequestVMAddPort {
	return NewRequestVMAddPort()
}

func (api *gopineApi) NewRequestVMRemovePort() RequestVMRemovePort {
	return NewRequestVMRemovePort()
}

func (api *gopineApi) NewSetTcpPortResponse() SetTcpPortResponse {
	return NewSetTcpPortResponse()
}

func (api *gopineApi) NewInitRequestResponse() InitRequestResponse {
	return NewInitRequestResponse()
}

func (api *gopineApi) NewRestartResponse() RestartResponse {
	return NewRestartResponse()
}

func (api *gopineApi) NewStartDebugSessionResponse() StartDebugSessionResponse {
	return NewStartDebugSessionResponse()
}

func (api *gopineApi) NewStopDebugSessionResponse() StopDebugSessionResponse {
	return NewStopDebugSessionResponse()
}

func (api *gopineApi) NewFeatureRequestResponse() FeatureRequestResponse {
	return NewFeatureRequestResponse()
}

func (api *gopineApi) NewSetUserInfoResponse() SetUserInfoResponse {
	return NewSetUserInfoResponse()
}

func (api *gopineApi) NewGetOwnerResponse() GetOwnerResponse {
	return NewGetOwnerResponse()
}

func (api *gopineApi) NewTakeOwnershipResponse() TakeOwnershipResponse {
	return NewTakeOwnershipResponse()
}

func (api *gopineApi) NewClearOwnershipResponse() ClearOwnershipResponse {
	return NewClearOwnershipResponse()
}

func (api *gopineApi) NewSubscribeEventResponse() SubscribeEventResponse {
	return NewSubscribeEventResponse()
}

func (api *gopineApi) NewUnsubscribeEventResponse() UnsubscribeEventResponse {
	return NewUnsubscribeEventResponse()
}

func (api *gopineApi) NewConfigurePortResponse() ConfigurePortResponse {
	return NewConfigurePortResponse()
}

func (api *gopineApi) NewConfigurePortBasicResponse() ConfigurePortBasicResponse {
	return NewConfigurePortBasicResponse()
}

func (api *gopineApi) NewPrepareForStartTxResponse() PrepareForStartTxResponse {
	return NewPrepareForStartTxResponse()
}

func (api *gopineApi) NewConfigureCaptureResponse() ConfigureCaptureResponse {
	return NewConfigureCaptureResponse()
}

func (api *gopineApi) NewStartCaptureResponse() StartCaptureResponse {
	return NewStartCaptureResponse()
}

func (api *gopineApi) NewStopCaptureResponse() StopCaptureResponse {
	return NewStopCaptureResponse()
}

func (api *gopineApi) NewGetCapturePacketCountResponse() GetCapturePacketCountResponse {
	return NewGetCapturePacketCountResponse()
}

func (api *gopineApi) NewGetCaptureStatusResponse() GetCaptureStatusResponse {
	return NewGetCaptureStatusResponse()
}

func (api *gopineApi) NewRetrieveCaptureResponse() RetrieveCaptureResponse {
	return NewRetrieveCaptureResponse()
}

func (api *gopineApi) NewStartLatencyResponse() StartLatencyResponse {
	return NewStartLatencyResponse()
}

func (api *gopineApi) NewStopLatencyResponse() StopLatencyResponse {
	return NewStopLatencyResponse()
}

func (api *gopineApi) NewClearLatencyResponse() ClearLatencyResponse {
	return NewClearLatencyResponse()
}

func (api *gopineApi) NewClearLatencyForSelectedPgiDsResponse() ClearLatencyForSelectedPgiDsResponse {
	return NewClearLatencyForSelectedPgiDsResponse()
}

func (api *gopineApi) NewClearTimestampResponse() ClearTimestampResponse {
	return NewClearTimestampResponse()
}

func (api *gopineApi) NewSetRxLatencyResponse() SetRxLatencyResponse {
	return NewSetRxLatencyResponse()
}

func (api *gopineApi) NewSetTxRxSyncIntervalResponse() SetTxRxSyncIntervalResponse {
	return NewSetTxRxSyncIntervalResponse()
}

func (api *gopineApi) NewConfigurePcpuFiltersResponse() ConfigurePcpuFiltersResponse {
	return NewConfigurePcpuFiltersResponse()
}

func (api *gopineApi) NewGetCurrentServerTimeResponse() GetCurrentServerTimeResponse {
	return NewGetCurrentServerTimeResponse()
}

func (api *gopineApi) NewGetNtpStateResponse() GetNtpStateResponse {
	return NewGetNtpStateResponse()
}

func (api *gopineApi) NewSetNtpMasterOnNtpClientResponse() SetNtpMasterOnNtpClientResponse {
	return NewSetNtpMasterOnNtpClientResponse()
}

func (api *gopineApi) NewSetNtpMasterAsSelfResponse() SetNtpMasterAsSelfResponse {
	return NewSetNtpMasterAsSelfResponse()
}

func (api *gopineApi) NewLockPulseResponse() LockPulseResponse {
	return NewLockPulseResponse()
}

func (api *gopineApi) NewArmPulseResponse() ArmPulseResponse {
	return NewArmPulseResponse()
}

func (api *gopineApi) NewUnlockPulseResponse() UnlockPulseResponse {
	return NewUnlockPulseResponse()
}

func (api *gopineApi) NewGetTimedActionTimestampResponse() GetTimedActionTimestampResponse {
	return NewGetTimedActionTimestampResponse()
}

func (api *gopineApi) NewScheduleTimedActionsResponse() ScheduleTimedActionsResponse {
	return NewScheduleTimedActionsResponse()
}

func (api *gopineApi) NewStartTxResponse() StartTxResponse {
	return NewStartTxResponse()
}

func (api *gopineApi) NewStopTxResponse() StopTxResponse {
	return NewStopTxResponse()
}

func (api *gopineApi) NewConfigureStreamsResponse() ConfigureStreamsResponse {
	return NewConfigureStreamsResponse()
}

func (api *gopineApi) NewConfigureUpdateStreamsResponse() ConfigureUpdateStreamsResponse {
	return NewConfigureUpdateStreamsResponse()
}

func (api *gopineApi) NewConfigureStreamsDataBeginResponse() ConfigureStreamsDataBeginResponse {
	return NewConfigureStreamsDataBeginResponse()
}

func (api *gopineApi) NewConfigureStreamsDataWriteResponse() ConfigureStreamsDataWriteResponse {
	return NewConfigureStreamsDataWriteResponse()
}

func (api *gopineApi) NewRefreshValueListResponse() RefreshValueListResponse {
	return NewRefreshValueListResponse()
}

func (api *gopineApi) NewTxMacSecArmTriggerTimerResponse() TxMacSecArmTriggerTimerResponse {
	return NewTxMacSecArmTriggerTimerResponse()
}

func (api *gopineApi) NewConfigureMacSecPortControlResponse() ConfigureMacSecPortControlResponse {
	return NewConfigureMacSecPortControlResponse()
}

func (api *gopineApi) NewConfigureMacSecScControlResponse() ConfigureMacSecScControlResponse {
	return NewConfigureMacSecScControlResponse()
}

func (api *gopineApi) NewUpdateMacSecStreamsResponse() UpdateMacSecStreamsResponse {
	return NewUpdateMacSecStreamsResponse()
}

func (api *gopineApi) NewConfigureMacSecSaKeysResponse() ConfigureMacSecSaKeysResponse {
	return NewConfigureMacSecSaKeysResponse()
}

func (api *gopineApi) NewToggleMacSecSaKeysResponse() ToggleMacSecSaKeysResponse {
	return NewToggleMacSecSaKeysResponse()
}

func (api *gopineApi) NewResetMacSecScsResponse() ResetMacSecScsResponse {
	return NewResetMacSecScsResponse()
}

func (api *gopineApi) NewSetMacSecSaKeyStateResponse() SetMacSecSaKeyStateResponse {
	return NewSetMacSecSaKeyStateResponse()
}

func (api *gopineApi) NewGetMacSecSaKeyStatusResponse() GetMacSecSaKeyStatusResponse {
	return NewGetMacSecSaKeyStatusResponse()
}

func (api *gopineApi) NewConfigureMacSecUdsResponse() ConfigureMacSecUdsResponse {
	return NewConfigureMacSecUdsResponse()
}

func (api *gopineApi) NewGetStatCatalogResponse() GetStatCatalogResponse {
	return NewGetStatCatalogResponse()
}

func (api *gopineApi) NewClearStatsResponse() ClearStatsResponse {
	return NewClearStatsResponse()
}

func (api *gopineApi) NewClearPerStreamTxStatsResponse() ClearPerStreamTxStatsResponse {
	return NewClearPerStreamTxStatsResponse()
}

func (api *gopineApi) NewVmAcquireResponse() VmAcquireResponse {
	return NewVmAcquireResponse()
}

func (api *gopineApi) NewVmAddPortResponse() VmAddPortResponse {
	return NewVmAddPortResponse()
}

func (api *gopineApi) NewVmRemovePortResponse() VmRemovePortResponse {
	return NewVmRemovePortResponse()
}

func (api *gopineApi) NewVmReleaseResponse() VmReleaseResponse {
	return NewVmReleaseResponse()
}

func (api *gopineApi) NewGetVersionResponse() GetVersionResponse {
	return NewGetVersionResponse()
}

func (api *gopineApi) GetLocalVersion() Version {
	if api.versionMeta.localVersion == nil {
		api.versionMeta.localVersion = NewVersion().SetApiSpecVersion("0.0.1").SetSdkVersion("0.0.1")
	}

	return api.versionMeta.localVersion
}

func (api *gopineApi) GetRemoteVersion() (Version, error) {
	if api.versionMeta.remoteVersion == nil {
		v, err := api.GetVersion()
		if err != nil {
			return nil, fmt.Errorf("could not fetch remote version: %v", err)
		}

		api.versionMeta.remoteVersion = v
	}

	return api.versionMeta.remoteVersion, nil
}

func (api *gopineApi) SetVersionCompatibilityCheck(v bool) {
	api.versionMeta.checkVersion = v
}

func (api *gopineApi) checkLocalRemoteVersionCompatibility() (error, error) {
	localVer := api.GetLocalVersion()
	remoteVer, err := api.GetRemoteVersion()
	if err != nil {
		return nil, err
	}
	err = checkClientServerVersionCompatibility(localVer.ApiSpecVersion(), remoteVer.ApiSpecVersion(), "API spec")
	if err != nil {
		return fmt.Errorf(
			"client SDK version '%s' is not compatible with server SDK version '%s': %v",
			localVer.SdkVersion(), remoteVer.SdkVersion(), err,
		), nil
	}

	return nil, nil
}

func (api *gopineApi) checkLocalRemoteVersionCompatibilityOnce() error {
	if !api.versionMeta.checkVersion {
		return nil
	}

	if api.versionMeta.checkError != nil {
		return api.versionMeta.checkError
	}

	compatErr, apiErr := api.checkLocalRemoteVersionCompatibility()
	if compatErr != nil {
		api.versionMeta.checkError = compatErr
		return compatErr
	}
	if apiErr != nil {
		api.versionMeta.checkError = nil
		return apiErr
	}

	api.versionMeta.checkVersion = false
	api.versionMeta.checkError = nil
	return nil
}

func (api *gopineApi) CheckVersionCompatibility() error {
	compatErr, apiErr := api.checkLocalRemoteVersionCompatibility()
	if compatErr != nil {
		return fmt.Errorf("version error: %v", compatErr)
	}
	if apiErr != nil {
		return apiErr
	}

	return nil
}

func (api *gopineApi) SetTcpPort(requestSetTcpPort RequestSetTcpPort) (Warning, error) {

	if err := requestSetTcpPort.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpSetTcpPort(requestSetTcpPort)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.SetTcpPortRequest{RequestSetTcpPort: requestSetTcpPort.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.SetTcpPort(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) InitRequest(requestInitRequest RequestInitRequest) (ResponseInitRequest, error) {

	if err := requestInitRequest.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpInitRequest(requestInitRequest)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.InitRequestRequest{RequestInitRequest: requestInitRequest.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.InitRequest(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewResponseInitRequest()
	if resp.GetResponseInitRequest() != nil {
		return ret.SetMsg(resp.GetResponseInitRequest()), nil
	}

	return ret, nil
}

func (api *gopineApi) Restart() (Warning, error) {

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpRestart()
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := emptypb.Empty{}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.Restart(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) StartDebugSession(requestStartDebugSession RequestStartDebugSession) (ResponseStartDebugSession, error) {

	if err := requestStartDebugSession.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpStartDebugSession(requestStartDebugSession)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.StartDebugSessionRequest{RequestStartDebugSession: requestStartDebugSession.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.StartDebugSession(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewResponseStartDebugSession()
	if resp.GetResponseStartDebugSession() != nil {
		return ret.SetMsg(resp.GetResponseStartDebugSession()), nil
	}

	return ret, nil
}

func (api *gopineApi) StopDebugSession(requestStopDebugSession RequestStopDebugSession) (ResponseStopDebugSession, error) {

	if err := requestStopDebugSession.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpStopDebugSession(requestStopDebugSession)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.StopDebugSessionRequest{RequestStopDebugSession: requestStopDebugSession.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.StopDebugSession(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewResponseStopDebugSession()
	if resp.GetResponseStopDebugSession() != nil {
		return ret.SetMsg(resp.GetResponseStopDebugSession()), nil
	}

	return ret, nil
}

func (api *gopineApi) FeatureRequest(requestFeatureRequest RequestFeatureRequest) (ResponseFeatureRequest, error) {

	if err := requestFeatureRequest.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpFeatureRequest(requestFeatureRequest)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.FeatureRequestRequest{RequestFeatureRequest: requestFeatureRequest.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.FeatureRequest(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewResponseFeatureRequest()
	if resp.GetResponseFeatureRequest() != nil {
		return ret.SetMsg(resp.GetResponseFeatureRequest()), nil
	}

	return ret, nil
}

func (api *gopineApi) SetUserInfo(requestSetUserInfo RequestSetUserInfo) (Warning, error) {

	if err := requestSetUserInfo.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpSetUserInfo(requestSetUserInfo)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.SetUserInfoRequest{RequestSetUserInfo: requestSetUserInfo.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.SetUserInfo(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) GetOwner() (ResponseGetOwner, error) {

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpGetOwner()
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := emptypb.Empty{}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.GetOwner(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewResponseGetOwner()
	if resp.GetResponseGetOwner() != nil {
		return ret.SetMsg(resp.GetResponseGetOwner()), nil
	}

	return ret, nil
}

func (api *gopineApi) TakeOwnership(requestTakeOwnership RequestTakeOwnership) (Warning, error) {

	if err := requestTakeOwnership.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpTakeOwnership(requestTakeOwnership)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.TakeOwnershipRequest{RequestTakeOwnership: requestTakeOwnership.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.TakeOwnership(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) ClearOwnership(requestClearOwnership RequestClearOwnership) (Warning, error) {

	if err := requestClearOwnership.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpClearOwnership(requestClearOwnership)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.ClearOwnershipRequest{RequestClearOwnership: requestClearOwnership.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.ClearOwnership(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) SubscribeEvent(requestSubscribeEvent RequestSubscribeEvent) (Warning, error) {

	if err := requestSubscribeEvent.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpSubscribeEvent(requestSubscribeEvent)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.SubscribeEventRequest{RequestSubscribeEvent: requestSubscribeEvent.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.SubscribeEvent(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) UnsubscribeEvent(requestUnsubscribeEvent RequestUnsubscribeEvent) (Warning, error) {

	if err := requestUnsubscribeEvent.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpUnsubscribeEvent(requestUnsubscribeEvent)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.UnsubscribeEventRequest{RequestUnsubscribeEvent: requestUnsubscribeEvent.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.UnsubscribeEvent(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) ConfigurePort(requestConfigurePort RequestConfigurePort) (Warning, error) {

	if err := requestConfigurePort.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpConfigurePort(requestConfigurePort)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.ConfigurePortRequest{RequestConfigurePort: requestConfigurePort.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.ConfigurePort(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) ConfigurePortBasic(requestConfigurePortBasic RequestConfigurePortBasic) (Warning, error) {

	if err := requestConfigurePortBasic.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpConfigurePortBasic(requestConfigurePortBasic)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.ConfigurePortBasicRequest{RequestConfigurePortBasic: requestConfigurePortBasic.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.ConfigurePortBasic(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) PrepareForStartTx(requestPrepareForStartTx RequestPrepareForStartTx) (Warning, error) {

	if err := requestPrepareForStartTx.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpPrepareForStartTx(requestPrepareForStartTx)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.PrepareForStartTxRequest{RequestPrepareForStartTx: requestPrepareForStartTx.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.PrepareForStartTx(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) ConfigureCapture(requestConfigureCapture RequestConfigureCapture) (Warning, error) {

	if err := requestConfigureCapture.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpConfigureCapture(requestConfigureCapture)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.ConfigureCaptureRequest{RequestConfigureCapture: requestConfigureCapture.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.ConfigureCapture(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) StartCapture(requestStartCapture RequestStartCapture) (Warning, error) {

	if err := requestStartCapture.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpStartCapture(requestStartCapture)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.StartCaptureRequest{RequestStartCapture: requestStartCapture.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.StartCapture(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) StopCapture(requestStopCapture RequestStopCapture) (Warning, error) {

	if err := requestStopCapture.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpStopCapture(requestStopCapture)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.StopCaptureRequest{RequestStopCapture: requestStopCapture.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.StopCapture(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) GetCapturePacketCount(requestGetCapturePacketCount RequestGetCapturePacketCount) (ResponseGetCapturePacketCount, error) {

	if err := requestGetCapturePacketCount.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpGetCapturePacketCount(requestGetCapturePacketCount)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.GetCapturePacketCountRequest{RequestGetCapturePacketCount: requestGetCapturePacketCount.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.GetCapturePacketCount(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewResponseGetCapturePacketCount()
	if resp.GetResponseGetCapturePacketCount() != nil {
		return ret.SetMsg(resp.GetResponseGetCapturePacketCount()), nil
	}

	return ret, nil
}

func (api *gopineApi) GetCaptureStatus(requestGetCaptureStatus RequestGetCaptureStatus) (ResponseGetCaptureStatus, error) {

	if err := requestGetCaptureStatus.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpGetCaptureStatus(requestGetCaptureStatus)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.GetCaptureStatusRequest{RequestGetCaptureStatus: requestGetCaptureStatus.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.GetCaptureStatus(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewResponseGetCaptureStatus()
	if resp.GetResponseGetCaptureStatus() != nil {
		return ret.SetMsg(resp.GetResponseGetCaptureStatus()), nil
	}

	return ret, nil
}

func (api *gopineApi) RetrieveCapture(requestRetrieveCapture RequestRetrieveCapture) (ResponseRetrieveCapture, error) {

	if err := requestRetrieveCapture.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpRetrieveCapture(requestRetrieveCapture)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.RetrieveCaptureRequest{RequestRetrieveCapture: requestRetrieveCapture.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.RetrieveCapture(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewResponseRetrieveCapture()
	if resp.GetResponseRetrieveCapture() != nil {
		return ret.SetMsg(resp.GetResponseRetrieveCapture()), nil
	}

	return ret, nil
}

func (api *gopineApi) StartLatency(requestStartLatency RequestStartLatency) (Warning, error) {

	if err := requestStartLatency.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpStartLatency(requestStartLatency)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.StartLatencyRequest{RequestStartLatency: requestStartLatency.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.StartLatency(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) StopLatency(requestStopLatency RequestStopLatency) (Warning, error) {

	if err := requestStopLatency.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpStopLatency(requestStopLatency)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.StopLatencyRequest{RequestStopLatency: requestStopLatency.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.StopLatency(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) ClearLatency(requestClearLatency RequestClearLatency) (Warning, error) {

	if err := requestClearLatency.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpClearLatency(requestClearLatency)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.ClearLatencyRequest{RequestClearLatency: requestClearLatency.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.ClearLatency(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) ClearLatencyForSelectedPgiDs(requestClearLatencyForSelectedPGIDs RequestClearLatencyForSelectedPGIDs) (Warning, error) {

	if err := requestClearLatencyForSelectedPGIDs.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpClearLatencyForSelectedPgiDs(requestClearLatencyForSelectedPGIDs)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.ClearLatencyForSelectedPgiDsRequest{RequestClearLatencyForSelectedPgids: requestClearLatencyForSelectedPGIDs.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.ClearLatencyForSelectedPgiDs(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) ClearTimestamp(requestClearTimestamp RequestClearTimestamp) (Warning, error) {

	if err := requestClearTimestamp.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpClearTimestamp(requestClearTimestamp)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.ClearTimestampRequest{RequestClearTimestamp: requestClearTimestamp.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.ClearTimestamp(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) SetRxLatency(requestSetRxLatency RequestSetRxLatency) (Warning, error) {

	if err := requestSetRxLatency.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpSetRxLatency(requestSetRxLatency)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.SetRxLatencyRequest{RequestSetRxLatency: requestSetRxLatency.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.SetRxLatency(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) SetTxRxSyncInterval(requestSetTxRxSyncInterval RequestSetTxRxSyncInterval) (Warning, error) {

	if err := requestSetTxRxSyncInterval.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpSetTxRxSyncInterval(requestSetTxRxSyncInterval)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.SetTxRxSyncIntervalRequest{RequestSetTxRxSyncInterval: requestSetTxRxSyncInterval.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.SetTxRxSyncInterval(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) ConfigurePcpuFilters(requestConfigurePCPUFilters RequestConfigurePCPUFilters) (Warning, error) {

	if err := requestConfigurePCPUFilters.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpConfigurePcpuFilters(requestConfigurePCPUFilters)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.ConfigurePcpuFiltersRequest{RequestConfigurePcpufilters: requestConfigurePCPUFilters.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.ConfigurePcpuFilters(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) GetCurrentServerTime() (ResponseGetCurrentServerTime, error) {

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpGetCurrentServerTime()
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := emptypb.Empty{}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.GetCurrentServerTime(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewResponseGetCurrentServerTime()
	if resp.GetResponseGetCurrentServerTime() != nil {
		return ret.SetMsg(resp.GetResponseGetCurrentServerTime()), nil
	}

	return ret, nil
}

func (api *gopineApi) GetNtpState() (ResponseGetNTPState, error) {

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpGetNtpState()
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := emptypb.Empty{}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.GetNtpState(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewResponseGetNTPState()
	if resp.GetResponseGetNtpstate() != nil {
		return ret.SetMsg(resp.GetResponseGetNtpstate()), nil
	}

	return ret, nil
}

func (api *gopineApi) SetNtpMasterOnNtpClient(requestsetNTPMasterOnNTPClient RequestsetNTPMasterOnNTPClient) (Warning, error) {

	if err := requestsetNTPMasterOnNTPClient.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpSetNtpMasterOnNtpClient(requestsetNTPMasterOnNTPClient)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.SetNtpMasterOnNtpClientRequest{RequestsetNtpmasterOnNtpclient: requestsetNTPMasterOnNTPClient.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.SetNtpMasterOnNtpClient(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) SetNtpMasterAsSelf() (Warning, error) {

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpSetNtpMasterAsSelf()
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := emptypb.Empty{}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.SetNtpMasterAsSelf(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) LockPulse() (Warning, error) {

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpLockPulse()
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := emptypb.Empty{}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.LockPulse(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) ArmPulse(requestArmPulse RequestArmPulse) (Warning, error) {

	if err := requestArmPulse.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpArmPulse(requestArmPulse)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.ArmPulseRequest{RequestArmPulse: requestArmPulse.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.ArmPulse(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) UnlockPulse(requestUnlockPulse RequestUnlockPulse) (Warning, error) {

	if err := requestUnlockPulse.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpUnlockPulse(requestUnlockPulse)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.UnlockPulseRequest{RequestUnlockPulse: requestUnlockPulse.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.UnlockPulse(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) GetTimedActionTimestamp(requestGetTimedActionTimestamp RequestGetTimedActionTimestamp) (ResponseGetTimedActionTimestamp, error) {

	if err := requestGetTimedActionTimestamp.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpGetTimedActionTimestamp(requestGetTimedActionTimestamp)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.GetTimedActionTimestampRequest{RequestGetTimedActionTimestamp: requestGetTimedActionTimestamp.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.GetTimedActionTimestamp(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewResponseGetTimedActionTimestamp()
	if resp.GetResponseGetTimedActionTimestamp() != nil {
		return ret.SetMsg(resp.GetResponseGetTimedActionTimestamp()), nil
	}

	return ret, nil
}

func (api *gopineApi) ScheduleTimedActions(requestScheduleTimedActions RequestScheduleTimedActions) (ResponseScheduleTimedActions, error) {

	if err := requestScheduleTimedActions.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpScheduleTimedActions(requestScheduleTimedActions)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.ScheduleTimedActionsRequest{RequestScheduleTimedActions: requestScheduleTimedActions.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.ScheduleTimedActions(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewResponseScheduleTimedActions()
	if resp.GetResponseScheduleTimedActions() != nil {
		return ret.SetMsg(resp.GetResponseScheduleTimedActions()), nil
	}

	return ret, nil
}

func (api *gopineApi) StartTx(requestStartTx RequestStartTx) (Warning, error) {

	if err := requestStartTx.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpStartTx(requestStartTx)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.StartTxRequest{RequestStartTx: requestStartTx.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.StartTx(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) StopTx(requestStopTx RequestStopTx) (Warning, error) {

	if err := requestStopTx.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpStopTx(requestStopTx)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.StopTxRequest{RequestStopTx: requestStopTx.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.StopTx(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) ConfigureStreams(requestConfigureStreams RequestConfigureStreams) (Warning, error) {

	if err := requestConfigureStreams.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpConfigureStreams(requestConfigureStreams)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.ConfigureStreamsRequest{RequestConfigureStreams: requestConfigureStreams.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.ConfigureStreams(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) ConfigureUpdateStreams(requestConfigureUpdateStreams RequestConfigureUpdateStreams) (ResponseConfigureUpdateStreams, error) {

	if err := requestConfigureUpdateStreams.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpConfigureUpdateStreams(requestConfigureUpdateStreams)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.ConfigureUpdateStreamsRequest{RequestConfigureUpdateStreams: requestConfigureUpdateStreams.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.ConfigureUpdateStreams(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewResponseConfigureUpdateStreams()
	if resp.GetResponseConfigureUpdateStreams() != nil {
		return ret.SetMsg(resp.GetResponseConfigureUpdateStreams()), nil
	}

	return ret, nil
}

func (api *gopineApi) ConfigureStreamsDataBegin(requestConfigureStreamsDataBegin RequestConfigureStreamsDataBegin) (Warning, error) {

	if err := requestConfigureStreamsDataBegin.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpConfigureStreamsDataBegin(requestConfigureStreamsDataBegin)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.ConfigureStreamsDataBeginRequest{RequestConfigureStreamsDataBegin: requestConfigureStreamsDataBegin.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.ConfigureStreamsDataBegin(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) ConfigureStreamsDataWrite(requestConfigureStreamsDataWrite RequestConfigureStreamsDataWrite) (Warning, error) {

	if err := requestConfigureStreamsDataWrite.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpConfigureStreamsDataWrite(requestConfigureStreamsDataWrite)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.ConfigureStreamsDataWriteRequest{RequestConfigureStreamsDataWrite: requestConfigureStreamsDataWrite.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.ConfigureStreamsDataWrite(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) RefreshValueList(requestRefreshValueList RequestRefreshValueList) (ResponseRefreshValueList, error) {

	if err := requestRefreshValueList.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpRefreshValueList(requestRefreshValueList)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.RefreshValueListRequest{RequestRefreshValueList: requestRefreshValueList.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.RefreshValueList(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewResponseRefreshValueList()
	if resp.GetResponseRefreshValueList() != nil {
		return ret.SetMsg(resp.GetResponseRefreshValueList()), nil
	}

	return ret, nil
}

func (api *gopineApi) TxMacSecArmTriggerTimer(requestTxMacSecArmTriggerTimer RequestTxMacSecArmTriggerTimer) (Warning, error) {

	if err := requestTxMacSecArmTriggerTimer.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpTxMacSecArmTriggerTimer(requestTxMacSecArmTriggerTimer)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.TxMacSecArmTriggerTimerRequest{RequestTxMacSecArmTriggerTimer: requestTxMacSecArmTriggerTimer.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.TxMacSecArmTriggerTimer(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) ConfigureMacSecPortControl(requestConfigureMacSecPortControl RequestConfigureMacSecPortControl) (Warning, error) {

	if err := requestConfigureMacSecPortControl.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpConfigureMacSecPortControl(requestConfigureMacSecPortControl)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.ConfigureMacSecPortControlRequest{RequestConfigureMacSecPortControl: requestConfigureMacSecPortControl.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.ConfigureMacSecPortControl(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) ConfigureMacSecScControl(requestConfigureMacSecScControl RequestConfigureMacSecScControl) (Warning, error) {

	if err := requestConfigureMacSecScControl.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpConfigureMacSecScControl(requestConfigureMacSecScControl)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.ConfigureMacSecScControlRequest{RequestConfigureMacSecScControl: requestConfigureMacSecScControl.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.ConfigureMacSecScControl(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) UpdateMacSecStreams(requestUpdateMacSecStreams RequestUpdateMacSecStreams) (Warning, error) {

	if err := requestUpdateMacSecStreams.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpUpdateMacSecStreams(requestUpdateMacSecStreams)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.UpdateMacSecStreamsRequest{RequestUpdateMacSecStreams: requestUpdateMacSecStreams.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.UpdateMacSecStreams(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) ConfigureMacSecSaKeys(requestConfigureMacSecSaKeys RequestConfigureMacSecSaKeys) (Warning, error) {

	if err := requestConfigureMacSecSaKeys.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpConfigureMacSecSaKeys(requestConfigureMacSecSaKeys)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.ConfigureMacSecSaKeysRequest{RequestConfigureMacSecSaKeys: requestConfigureMacSecSaKeys.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.ConfigureMacSecSaKeys(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) ToggleMacSecSaKeys(requestToggleMacSecSaKeys RequestToggleMacSecSaKeys) (Warning, error) {

	if err := requestToggleMacSecSaKeys.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpToggleMacSecSaKeys(requestToggleMacSecSaKeys)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.ToggleMacSecSaKeysRequest{RequestToggleMacSecSaKeys: requestToggleMacSecSaKeys.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.ToggleMacSecSaKeys(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) ResetMacSecScs(requestResetMacSecScs RequestResetMacSecScs) (Warning, error) {

	if err := requestResetMacSecScs.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpResetMacSecScs(requestResetMacSecScs)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.ResetMacSecScsRequest{RequestResetMacSecScs: requestResetMacSecScs.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.ResetMacSecScs(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) SetMacSecSaKeyState(requestSetMacSecSaKeyState RequestSetMacSecSaKeyState) (Warning, error) {

	if err := requestSetMacSecSaKeyState.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpSetMacSecSaKeyState(requestSetMacSecSaKeyState)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.SetMacSecSaKeyStateRequest{RequestSetMacSecSaKeyState: requestSetMacSecSaKeyState.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.SetMacSecSaKeyState(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) GetMacSecSaKeyStatus(requestGetMacSecSaKeyStatus RequestGetMacSecSaKeyStatus) (ResponseGetMacSecSaKeyStatus, error) {

	if err := requestGetMacSecSaKeyStatus.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpGetMacSecSaKeyStatus(requestGetMacSecSaKeyStatus)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.GetMacSecSaKeyStatusRequest{RequestGetMacSecSaKeyStatus: requestGetMacSecSaKeyStatus.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.GetMacSecSaKeyStatus(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewResponseGetMacSecSaKeyStatus()
	if resp.GetResponseGetMacSecSaKeyStatus() != nil {
		return ret.SetMsg(resp.GetResponseGetMacSecSaKeyStatus()), nil
	}

	return ret, nil
}

func (api *gopineApi) ConfigureMacSecUds(requestConfigureMacSecUDS RequestConfigureMacSecUDS) (Warning, error) {

	if err := requestConfigureMacSecUDS.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpConfigureMacSecUds(requestConfigureMacSecUDS)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.ConfigureMacSecUdsRequest{RequestConfigureMacSecUds: requestConfigureMacSecUDS.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.ConfigureMacSecUds(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) GetStatCatalog(requestGetStatCatalog RequestGetStatCatalog) (ResponseGetStatCatalog, error) {

	if err := requestGetStatCatalog.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpGetStatCatalog(requestGetStatCatalog)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.GetStatCatalogRequest{RequestGetStatCatalog: requestGetStatCatalog.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.GetStatCatalog(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewResponseGetStatCatalog()
	if resp.GetResponseGetStatCatalog() != nil {
		return ret.SetMsg(resp.GetResponseGetStatCatalog()), nil
	}

	return ret, nil
}

func (api *gopineApi) ClearStats(requestClearStats RequestClearStats) (Warning, error) {

	if err := requestClearStats.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpClearStats(requestClearStats)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.ClearStatsRequest{RequestClearStats: requestClearStats.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.ClearStats(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) ClearPerStreamTxStats(requestClearPerStreamTxStats RequestClearPerStreamTxStats) (Warning, error) {

	if err := requestClearPerStreamTxStats.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpClearPerStreamTxStats(requestClearPerStreamTxStats)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.ClearPerStreamTxStatsRequest{RequestClearPerStreamTxStats: requestClearPerStreamTxStats.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.ClearPerStreamTxStats(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) VmAcquire(requestVMAcquire RequestVMAcquire) (Warning, error) {

	if err := requestVMAcquire.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpVmAcquire(requestVMAcquire)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.VmAcquireRequest{RequestVmacquire: requestVMAcquire.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.VmAcquire(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) VmAddPort(requestVMAddPort RequestVMAddPort) (Warning, error) {

	if err := requestVMAddPort.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpVmAddPort(requestVMAddPort)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.VmAddPortRequest{RequestVmaddPort: requestVMAddPort.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.VmAddPort(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) VmRemovePort(requestVMRemovePort RequestVMRemovePort) (Warning, error) {

	if err := requestVMRemovePort.Validate(); err != nil {
		return nil, err
	}

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpVmRemovePort(requestVMRemovePort)
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := otg.VmRemovePortRequest{RequestVmremovePort: requestVMRemovePort.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.VmRemovePort(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) VmRelease() (Warning, error) {

	if err := api.checkLocalRemoteVersionCompatibilityOnce(); err != nil {
		return nil, err
	}
	if api.hasHttpTransport() {
		return api.httpVmRelease()
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := emptypb.Empty{}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.VmRelease(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewWarning()
	if resp.GetWarning() != nil {
		return ret.SetMsg(resp.GetWarning()), nil
	}

	return ret, nil
}

func (api *gopineApi) GetVersion() (Version, error) {

	if api.hasHttpTransport() {
		return api.httpGetVersion()
	}
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := emptypb.Empty{}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.GetVersion(ctx, &request)
	if err != nil {
		if er, ok := api.fromGrpcError(err); ok {
			return nil, er
		}
		return nil, err
	}
	ret := NewVersion()
	if resp.GetVersion() != nil {
		return ret.SetMsg(resp.GetVersion()), nil
	}

	return ret, nil
}

func (api *gopineApi) httpSetTcpPort(requestSetTcpPort RequestSetTcpPort) (Warning, error) {
	requestSetTcpPortJson, err := requestSetTcpPort.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("set_tcp_port", requestSetTcpPortJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewSetTcpPortResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpInitRequest(requestInitRequest RequestInitRequest) (ResponseInitRequest, error) {
	requestInitRequestJson, err := requestInitRequest.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("init_request", requestInitRequestJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewInitRequestResponse().ResponseInitRequest()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpRestart() (Warning, error) {
	resp, err := api.httpSendRecv("restart", "", "POST")
	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewRestartResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpStartDebugSession(requestStartDebugSession RequestStartDebugSession) (ResponseStartDebugSession, error) {
	requestStartDebugSessionJson, err := requestStartDebugSession.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("start_debug_session", requestStartDebugSessionJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewStartDebugSessionResponse().ResponseStartDebugSession()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpStopDebugSession(requestStopDebugSession RequestStopDebugSession) (ResponseStopDebugSession, error) {
	requestStopDebugSessionJson, err := requestStopDebugSession.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("stop_debug_session", requestStopDebugSessionJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewStopDebugSessionResponse().ResponseStopDebugSession()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpFeatureRequest(requestFeatureRequest RequestFeatureRequest) (ResponseFeatureRequest, error) {
	requestFeatureRequestJson, err := requestFeatureRequest.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("feature_request", requestFeatureRequestJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewFeatureRequestResponse().ResponseFeatureRequest()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpSetUserInfo(requestSetUserInfo RequestSetUserInfo) (Warning, error) {
	requestSetUserInfoJson, err := requestSetUserInfo.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("set_user_info", requestSetUserInfoJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewSetUserInfoResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpGetOwner() (ResponseGetOwner, error) {
	resp, err := api.httpSendRecv("get_owner", "", "GET")
	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewGetOwnerResponse().ResponseGetOwner()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpTakeOwnership(requestTakeOwnership RequestTakeOwnership) (Warning, error) {
	requestTakeOwnershipJson, err := requestTakeOwnership.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("take_ownership", requestTakeOwnershipJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewTakeOwnershipResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpClearOwnership(requestClearOwnership RequestClearOwnership) (Warning, error) {
	requestClearOwnershipJson, err := requestClearOwnership.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("clear_ownership", requestClearOwnershipJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewClearOwnershipResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpSubscribeEvent(requestSubscribeEvent RequestSubscribeEvent) (Warning, error) {
	requestSubscribeEventJson, err := requestSubscribeEvent.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("subscribe_event", requestSubscribeEventJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewSubscribeEventResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpUnsubscribeEvent(requestUnsubscribeEvent RequestUnsubscribeEvent) (Warning, error) {
	requestUnsubscribeEventJson, err := requestUnsubscribeEvent.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("unsubscribe_event", requestUnsubscribeEventJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewUnsubscribeEventResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpConfigurePort(requestConfigurePort RequestConfigurePort) (Warning, error) {
	requestConfigurePortJson, err := requestConfigurePort.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("configure_port", requestConfigurePortJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewConfigurePortResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpConfigurePortBasic(requestConfigurePortBasic RequestConfigurePortBasic) (Warning, error) {
	requestConfigurePortBasicJson, err := requestConfigurePortBasic.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("configure_port_basic", requestConfigurePortBasicJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewConfigurePortBasicResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpPrepareForStartTx(requestPrepareForStartTx RequestPrepareForStartTx) (Warning, error) {
	requestPrepareForStartTxJson, err := requestPrepareForStartTx.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("prepare_for_start_tx", requestPrepareForStartTxJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewPrepareForStartTxResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpConfigureCapture(requestConfigureCapture RequestConfigureCapture) (Warning, error) {
	requestConfigureCaptureJson, err := requestConfigureCapture.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("configure_capture", requestConfigureCaptureJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewConfigureCaptureResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpStartCapture(requestStartCapture RequestStartCapture) (Warning, error) {
	requestStartCaptureJson, err := requestStartCapture.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("start_capture", requestStartCaptureJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewStartCaptureResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpStopCapture(requestStopCapture RequestStopCapture) (Warning, error) {
	requestStopCaptureJson, err := requestStopCapture.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("stop_capture", requestStopCaptureJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewStopCaptureResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpGetCapturePacketCount(requestGetCapturePacketCount RequestGetCapturePacketCount) (ResponseGetCapturePacketCount, error) {
	requestGetCapturePacketCountJson, err := requestGetCapturePacketCount.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("get_capture_packet_count", requestGetCapturePacketCountJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewGetCapturePacketCountResponse().ResponseGetCapturePacketCount()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpGetCaptureStatus(requestGetCaptureStatus RequestGetCaptureStatus) (ResponseGetCaptureStatus, error) {
	requestGetCaptureStatusJson, err := requestGetCaptureStatus.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("get_capture_status", requestGetCaptureStatusJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewGetCaptureStatusResponse().ResponseGetCaptureStatus()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpRetrieveCapture(requestRetrieveCapture RequestRetrieveCapture) (ResponseRetrieveCapture, error) {
	requestRetrieveCaptureJson, err := requestRetrieveCapture.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("retrieve_capture", requestRetrieveCaptureJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewRetrieveCaptureResponse().ResponseRetrieveCapture()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpStartLatency(requestStartLatency RequestStartLatency) (Warning, error) {
	requestStartLatencyJson, err := requestStartLatency.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("start_latency", requestStartLatencyJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewStartLatencyResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpStopLatency(requestStopLatency RequestStopLatency) (Warning, error) {
	requestStopLatencyJson, err := requestStopLatency.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("stop_latency", requestStopLatencyJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewStopLatencyResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpClearLatency(requestClearLatency RequestClearLatency) (Warning, error) {
	requestClearLatencyJson, err := requestClearLatency.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("clear_latency", requestClearLatencyJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewClearLatencyResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpClearLatencyForSelectedPgiDs(requestClearLatencyForSelectedPGIDs RequestClearLatencyForSelectedPGIDs) (Warning, error) {
	requestClearLatencyForSelectedPGIDsJson, err := requestClearLatencyForSelectedPGIDs.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("clear_latency_for_selected_pgi_ds", requestClearLatencyForSelectedPGIDsJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewClearLatencyForSelectedPgiDsResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpClearTimestamp(requestClearTimestamp RequestClearTimestamp) (Warning, error) {
	requestClearTimestampJson, err := requestClearTimestamp.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("clear_timestamp", requestClearTimestampJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewClearTimestampResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpSetRxLatency(requestSetRxLatency RequestSetRxLatency) (Warning, error) {
	requestSetRxLatencyJson, err := requestSetRxLatency.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("set_rx_latency", requestSetRxLatencyJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewSetRxLatencyResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpSetTxRxSyncInterval(requestSetTxRxSyncInterval RequestSetTxRxSyncInterval) (Warning, error) {
	requestSetTxRxSyncIntervalJson, err := requestSetTxRxSyncInterval.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("set_tx_rx_sync_interval", requestSetTxRxSyncIntervalJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewSetTxRxSyncIntervalResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpConfigurePcpuFilters(requestConfigurePCPUFilters RequestConfigurePCPUFilters) (Warning, error) {
	requestConfigurePCPUFiltersJson, err := requestConfigurePCPUFilters.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("configure_pcpu_filters", requestConfigurePCPUFiltersJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewConfigurePcpuFiltersResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpGetCurrentServerTime() (ResponseGetCurrentServerTime, error) {
	resp, err := api.httpSendRecv("get_current_server_time", "", "GET")
	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewGetCurrentServerTimeResponse().ResponseGetCurrentServerTime()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpGetNtpState() (ResponseGetNTPState, error) {
	resp, err := api.httpSendRecv("get_ntp_state", "", "GET")
	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewGetNtpStateResponse().ResponseGetNTPState()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpSetNtpMasterOnNtpClient(requestsetNTPMasterOnNTPClient RequestsetNTPMasterOnNTPClient) (Warning, error) {
	requestsetNTPMasterOnNTPClientJson, err := requestsetNTPMasterOnNTPClient.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("set_ntp_master_on_ntp_client", requestsetNTPMasterOnNTPClientJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewSetNtpMasterOnNtpClientResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpSetNtpMasterAsSelf() (Warning, error) {
	resp, err := api.httpSendRecv("set_ntp_master_as_self", "", "POST")
	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewSetNtpMasterAsSelfResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpLockPulse() (Warning, error) {
	resp, err := api.httpSendRecv("lock_pulse", "", "POST")
	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewLockPulseResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpArmPulse(requestArmPulse RequestArmPulse) (Warning, error) {
	requestArmPulseJson, err := requestArmPulse.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("arm_pulse", requestArmPulseJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewArmPulseResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpUnlockPulse(requestUnlockPulse RequestUnlockPulse) (Warning, error) {
	requestUnlockPulseJson, err := requestUnlockPulse.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("unlock_pulse", requestUnlockPulseJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewUnlockPulseResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpGetTimedActionTimestamp(requestGetTimedActionTimestamp RequestGetTimedActionTimestamp) (ResponseGetTimedActionTimestamp, error) {
	requestGetTimedActionTimestampJson, err := requestGetTimedActionTimestamp.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("get_timed_action_timestamp", requestGetTimedActionTimestampJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewGetTimedActionTimestampResponse().ResponseGetTimedActionTimestamp()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpScheduleTimedActions(requestScheduleTimedActions RequestScheduleTimedActions) (ResponseScheduleTimedActions, error) {
	requestScheduleTimedActionsJson, err := requestScheduleTimedActions.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("schedule_timed_actions", requestScheduleTimedActionsJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewScheduleTimedActionsResponse().ResponseScheduleTimedActions()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpStartTx(requestStartTx RequestStartTx) (Warning, error) {
	requestStartTxJson, err := requestStartTx.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("start_tx", requestStartTxJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewStartTxResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpStopTx(requestStopTx RequestStopTx) (Warning, error) {
	requestStopTxJson, err := requestStopTx.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("stop_tx", requestStopTxJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewStopTxResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpConfigureStreams(requestConfigureStreams RequestConfigureStreams) (Warning, error) {
	requestConfigureStreamsJson, err := requestConfigureStreams.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("configure_streams", requestConfigureStreamsJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewConfigureStreamsResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpConfigureUpdateStreams(requestConfigureUpdateStreams RequestConfigureUpdateStreams) (ResponseConfigureUpdateStreams, error) {
	requestConfigureUpdateStreamsJson, err := requestConfigureUpdateStreams.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("configure_update_streams", requestConfigureUpdateStreamsJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewConfigureUpdateStreamsResponse().ResponseConfigureUpdateStreams()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpConfigureStreamsDataBegin(requestConfigureStreamsDataBegin RequestConfigureStreamsDataBegin) (Warning, error) {
	requestConfigureStreamsDataBeginJson, err := requestConfigureStreamsDataBegin.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("configure_streams_data_begin", requestConfigureStreamsDataBeginJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewConfigureStreamsDataBeginResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpConfigureStreamsDataWrite(requestConfigureStreamsDataWrite RequestConfigureStreamsDataWrite) (Warning, error) {
	requestConfigureStreamsDataWriteJson, err := requestConfigureStreamsDataWrite.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("configure_streams_data_write", requestConfigureStreamsDataWriteJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewConfigureStreamsDataWriteResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpRefreshValueList(requestRefreshValueList RequestRefreshValueList) (ResponseRefreshValueList, error) {
	requestRefreshValueListJson, err := requestRefreshValueList.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("refresh_value_list", requestRefreshValueListJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewRefreshValueListResponse().ResponseRefreshValueList()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpTxMacSecArmTriggerTimer(requestTxMacSecArmTriggerTimer RequestTxMacSecArmTriggerTimer) (Warning, error) {
	requestTxMacSecArmTriggerTimerJson, err := requestTxMacSecArmTriggerTimer.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("tx_mac_sec_arm_trigger_timer", requestTxMacSecArmTriggerTimerJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewTxMacSecArmTriggerTimerResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpConfigureMacSecPortControl(requestConfigureMacSecPortControl RequestConfigureMacSecPortControl) (Warning, error) {
	requestConfigureMacSecPortControlJson, err := requestConfigureMacSecPortControl.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("configure_mac_sec_port_control", requestConfigureMacSecPortControlJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewConfigureMacSecPortControlResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpConfigureMacSecScControl(requestConfigureMacSecScControl RequestConfigureMacSecScControl) (Warning, error) {
	requestConfigureMacSecScControlJson, err := requestConfigureMacSecScControl.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("configure_mac_sec_sc_control", requestConfigureMacSecScControlJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewConfigureMacSecScControlResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpUpdateMacSecStreams(requestUpdateMacSecStreams RequestUpdateMacSecStreams) (Warning, error) {
	requestUpdateMacSecStreamsJson, err := requestUpdateMacSecStreams.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("update_mac_sec_streams", requestUpdateMacSecStreamsJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewUpdateMacSecStreamsResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpConfigureMacSecSaKeys(requestConfigureMacSecSaKeys RequestConfigureMacSecSaKeys) (Warning, error) {
	requestConfigureMacSecSaKeysJson, err := requestConfigureMacSecSaKeys.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("configure_mac_sec_sa_keys", requestConfigureMacSecSaKeysJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewConfigureMacSecSaKeysResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpToggleMacSecSaKeys(requestToggleMacSecSaKeys RequestToggleMacSecSaKeys) (Warning, error) {
	requestToggleMacSecSaKeysJson, err := requestToggleMacSecSaKeys.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("toggle_mac_sec_sa_keys", requestToggleMacSecSaKeysJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewToggleMacSecSaKeysResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpResetMacSecScs(requestResetMacSecScs RequestResetMacSecScs) (Warning, error) {
	requestResetMacSecScsJson, err := requestResetMacSecScs.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("reset_mac_sec_scs", requestResetMacSecScsJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewResetMacSecScsResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpSetMacSecSaKeyState(requestSetMacSecSaKeyState RequestSetMacSecSaKeyState) (Warning, error) {
	requestSetMacSecSaKeyStateJson, err := requestSetMacSecSaKeyState.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("set_mac_sec_sa_key_state", requestSetMacSecSaKeyStateJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewSetMacSecSaKeyStateResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpGetMacSecSaKeyStatus(requestGetMacSecSaKeyStatus RequestGetMacSecSaKeyStatus) (ResponseGetMacSecSaKeyStatus, error) {
	requestGetMacSecSaKeyStatusJson, err := requestGetMacSecSaKeyStatus.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("get_mac_sec_sa_key_status", requestGetMacSecSaKeyStatusJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewGetMacSecSaKeyStatusResponse().ResponseGetMacSecSaKeyStatus()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpConfigureMacSecUds(requestConfigureMacSecUDS RequestConfigureMacSecUDS) (Warning, error) {
	requestConfigureMacSecUDSJson, err := requestConfigureMacSecUDS.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("configure_mac_sec_uds", requestConfigureMacSecUDSJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewConfigureMacSecUdsResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpGetStatCatalog(requestGetStatCatalog RequestGetStatCatalog) (ResponseGetStatCatalog, error) {
	requestGetStatCatalogJson, err := requestGetStatCatalog.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("get_stat_catalog", requestGetStatCatalogJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewGetStatCatalogResponse().ResponseGetStatCatalog()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpClearStats(requestClearStats RequestClearStats) (Warning, error) {
	requestClearStatsJson, err := requestClearStats.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("clear_stats", requestClearStatsJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewClearStatsResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpClearPerStreamTxStats(requestClearPerStreamTxStats RequestClearPerStreamTxStats) (Warning, error) {
	requestClearPerStreamTxStatsJson, err := requestClearPerStreamTxStats.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("clear_per_stream_tx_stats", requestClearPerStreamTxStatsJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewClearPerStreamTxStatsResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpVmAcquire(requestVMAcquire RequestVMAcquire) (Warning, error) {
	requestVMAcquireJson, err := requestVMAcquire.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("vm_acquire", requestVMAcquireJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewVmAcquireResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpVmAddPort(requestVMAddPort RequestVMAddPort) (Warning, error) {
	requestVMAddPortJson, err := requestVMAddPort.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("vm_add_port", requestVMAddPortJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewVmAddPortResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpVmRemovePort(requestVMRemovePort RequestVMRemovePort) (Warning, error) {
	requestVMRemovePortJson, err := requestVMRemovePort.ToJson()
	if err != nil {
		return nil, err
	}
	resp, err := api.httpSendRecv("vm_remove_port", requestVMRemovePortJson, "POST")

	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewVmRemovePortResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpVmRelease() (Warning, error) {
	resp, err := api.httpSendRecv("vm_release", "", "POST")
	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewVmReleaseResponse().Warning()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

func (api *gopineApi) httpGetVersion() (Version, error) {
	resp, err := api.httpSendRecv("capabilities/version", "", "GET")
	if err != nil {
		return nil, err
	}
	bodyBytes, err := io.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewGetVersionResponse().Version()
		if err := obj.FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		return obj, nil
	} else {
		return nil, api.fromHttpError(resp.StatusCode, bodyBytes)
	}
}

// ***** RequestSetTcpPort *****
type requestSetTcpPort struct {
	validation
	obj *otg.RequestSetTcpPort
}

func NewRequestSetTcpPort() RequestSetTcpPort {
	obj := requestSetTcpPort{obj: &otg.RequestSetTcpPort{}}
	obj.setDefault()
	return &obj
}

func (obj *requestSetTcpPort) Msg() *otg.RequestSetTcpPort {
	return obj.obj
}

func (obj *requestSetTcpPort) SetMsg(msg *otg.RequestSetTcpPort) RequestSetTcpPort {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestSetTcpPort) ToProto() (*otg.RequestSetTcpPort, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestSetTcpPort) FromProto(msg *otg.RequestSetTcpPort) (RequestSetTcpPort, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestSetTcpPort) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestSetTcpPort) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestSetTcpPort) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestSetTcpPort) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestSetTcpPort) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestSetTcpPort) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestSetTcpPort) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestSetTcpPort) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestSetTcpPort) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestSetTcpPort) Clone() (RequestSetTcpPort, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestSetTcpPort()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestSetTcpPort) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

// RequestSetTcpPort is description is TBD
type RequestSetTcpPort interface {
	Validation
	// Msg marshals RequestSetTcpPort to protobuf object *otg.RequestSetTcpPort
	// and doesn't set defaults
	Msg() *otg.RequestSetTcpPort
	// SetMsg unmarshals RequestSetTcpPort from protobuf object *otg.RequestSetTcpPort
	// and doesn't set defaults
	SetMsg(*otg.RequestSetTcpPort) RequestSetTcpPort
	// ToProto marshals RequestSetTcpPort to protobuf object *otg.RequestSetTcpPort
	ToProto() (*otg.RequestSetTcpPort, error)
	// ToPbText marshals RequestSetTcpPort to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestSetTcpPort to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestSetTcpPort to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestSetTcpPort from protobuf object *otg.RequestSetTcpPort
	FromProto(msg *otg.RequestSetTcpPort) (RequestSetTcpPort, error)
	// FromPbText unmarshals RequestSetTcpPort from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestSetTcpPort from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestSetTcpPort from JSON text
	FromJson(value string) error
	// Validate validates RequestSetTcpPort
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestSetTcpPort, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// TcpPort returns int32, set in RequestSetTcpPort.
	TcpPort() int32
	// SetTcpPort assigns int32 provided by user to RequestSetTcpPort
	SetTcpPort(value int32) RequestSetTcpPort
	// HasTcpPort checks if TcpPort has been set in RequestSetTcpPort
	HasTcpPort() bool
}

func (obj *requestSetTcpPort) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "SetTcpPort"
	args := []Argument{}

	if obj.HasTcpPort() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "TcpPort",
			Type:      "int32",
			Value:     strconv.FormatInt(int64(obj.TcpPort()), 10),
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestSetTcpPort) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// TcpPort returns a int32
func (obj *requestSetTcpPort) TcpPort() int32 {

	return *obj.obj.TcpPort

}

// description is TBD
// TcpPort returns a int32
func (obj *requestSetTcpPort) HasTcpPort() bool {
	return obj.obj.TcpPort != nil
}

// description is TBD
// SetTcpPort sets the int32 value in the RequestSetTcpPort object
func (obj *requestSetTcpPort) SetTcpPort(value int32) RequestSetTcpPort {

	obj.obj.TcpPort = &value
	return obj
}

func (obj *requestSetTcpPort) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *requestSetTcpPort) setDefault() {

}

// ***** RequestInitRequest *****
type requestInitRequest struct {
	validation
	obj                    *otg.RequestInitRequest
	requestedVersionHolder PFTypeVersionType
}

func NewRequestInitRequest() RequestInitRequest {
	obj := requestInitRequest{obj: &otg.RequestInitRequest{}}
	obj.setDefault()
	return &obj
}

func (obj *requestInitRequest) Msg() *otg.RequestInitRequest {
	return obj.obj
}

func (obj *requestInitRequest) SetMsg(msg *otg.RequestInitRequest) RequestInitRequest {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestInitRequest) ToProto() (*otg.RequestInitRequest, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestInitRequest) FromProto(msg *otg.RequestInitRequest) (RequestInitRequest, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestInitRequest) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestInitRequest) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestInitRequest) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestInitRequest) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestInitRequest) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestInitRequest) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestInitRequest) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestInitRequest) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestInitRequest) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestInitRequest) Clone() (RequestInitRequest, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestInitRequest()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestInitRequest) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestInitRequest) setNil() {
	obj.requestedVersionHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestInitRequest is description is TBD
type RequestInitRequest interface {
	Validation
	// Msg marshals RequestInitRequest to protobuf object *otg.RequestInitRequest
	// and doesn't set defaults
	Msg() *otg.RequestInitRequest
	// SetMsg unmarshals RequestInitRequest from protobuf object *otg.RequestInitRequest
	// and doesn't set defaults
	SetMsg(*otg.RequestInitRequest) RequestInitRequest
	// ToProto marshals RequestInitRequest to protobuf object *otg.RequestInitRequest
	ToProto() (*otg.RequestInitRequest, error)
	// ToPbText marshals RequestInitRequest to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestInitRequest to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestInitRequest to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestInitRequest from protobuf object *otg.RequestInitRequest
	FromProto(msg *otg.RequestInitRequest) (RequestInitRequest, error)
	// FromPbText unmarshals RequestInitRequest from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestInitRequest from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestInitRequest from JSON text
	FromJson(value string) error
	// Validate validates RequestInitRequest
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestInitRequest, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// RequestedVersion returns PFTypeVersionType, set in RequestInitRequest.
	// PFTypeVersionType is model the version used to identify the API. The release number components (Major.Minor release number) identifies the maturity of the API. A client compiled with release (A.B) can use a server providing release (C.D) iff A equals C and B less than or equal to D. In other words, an "old client" can use a "new server". The revision number components (Branch.Build revision number) identifies the particular revision of the API conforming to the API release number.
	RequestedVersion() PFTypeVersionType
	// SetRequestedVersion assigns PFTypeVersionType provided by user to RequestInitRequest.
	// PFTypeVersionType is model the version used to identify the API. The release number components (Major.Minor release number) identifies the maturity of the API. A client compiled with release (A.B) can use a server providing release (C.D) iff A equals C and B less than or equal to D. In other words, an "old client" can use a "new server". The revision number components (Branch.Build revision number) identifies the particular revision of the API conforming to the API release number.
	SetRequestedVersion(value PFTypeVersionType) RequestInitRequest
	// HasRequestedVersion checks if RequestedVersion has been set in RequestInitRequest
	HasRequestedVersion() bool
	setNil()
}

func (obj *requestInitRequest) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "InitRequest"
	args := []Argument{}

	if obj.HasRequestedVersion() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "RequestedVersion",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.PFType+VersionType",
		}

		err := obj.RequestedVersion().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	argProvidedVersion := Argument{
		Direction: ArgumentDirectionOut,
		Name:      "ProvidedVersion",
		Type:      "Ixia.IxOS.RPC.PCPU.RPF.PFType+VersionType",
	}
	args = append(args, argProvidedVersion)
	xObj.Argument = args
	return nil
}

func (obj *requestInitRequest) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// RequestedVersion returns a PFTypeVersionType
func (obj *requestInitRequest) RequestedVersion() PFTypeVersionType {
	if obj.obj.RequestedVersion == nil {
		obj.obj.RequestedVersion = NewPFTypeVersionType().Msg()
	}
	if obj.requestedVersionHolder == nil {
		obj.requestedVersionHolder = &pFTypeVersionType{obj: obj.obj.RequestedVersion}
	}
	return obj.requestedVersionHolder
}

// description is TBD
// RequestedVersion returns a PFTypeVersionType
func (obj *requestInitRequest) HasRequestedVersion() bool {
	return obj.obj.RequestedVersion != nil
}

// description is TBD
// SetRequestedVersion sets the PFTypeVersionType value in the RequestInitRequest object
func (obj *requestInitRequest) SetRequestedVersion(value PFTypeVersionType) RequestInitRequest {

	obj.requestedVersionHolder = nil
	obj.obj.RequestedVersion = value.Msg()

	return obj
}

func (obj *requestInitRequest) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.RequestedVersion != nil {

		obj.RequestedVersion().validateObj(vObj, set_default)
	}

}

func (obj *requestInitRequest) setDefault() {

}

// ***** RequestStartDebugSession *****
type requestStartDebugSession struct {
	validation
	obj                *otg.RequestStartDebugSession
	portListInfoHolder DebugTopologyDebugPortInfoList
}

func NewRequestStartDebugSession() RequestStartDebugSession {
	obj := requestStartDebugSession{obj: &otg.RequestStartDebugSession{}}
	obj.setDefault()
	return &obj
}

func (obj *requestStartDebugSession) Msg() *otg.RequestStartDebugSession {
	return obj.obj
}

func (obj *requestStartDebugSession) SetMsg(msg *otg.RequestStartDebugSession) RequestStartDebugSession {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestStartDebugSession) ToProto() (*otg.RequestStartDebugSession, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestStartDebugSession) FromProto(msg *otg.RequestStartDebugSession) (RequestStartDebugSession, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestStartDebugSession) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestStartDebugSession) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestStartDebugSession) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestStartDebugSession) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestStartDebugSession) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestStartDebugSession) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestStartDebugSession) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestStartDebugSession) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestStartDebugSession) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestStartDebugSession) Clone() (RequestStartDebugSession, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestStartDebugSession()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestStartDebugSession) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestStartDebugSession) setNil() {
	obj.portListInfoHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestStartDebugSession is description is TBD
type RequestStartDebugSession interface {
	Validation
	// Msg marshals RequestStartDebugSession to protobuf object *otg.RequestStartDebugSession
	// and doesn't set defaults
	Msg() *otg.RequestStartDebugSession
	// SetMsg unmarshals RequestStartDebugSession from protobuf object *otg.RequestStartDebugSession
	// and doesn't set defaults
	SetMsg(*otg.RequestStartDebugSession) RequestStartDebugSession
	// ToProto marshals RequestStartDebugSession to protobuf object *otg.RequestStartDebugSession
	ToProto() (*otg.RequestStartDebugSession, error)
	// ToPbText marshals RequestStartDebugSession to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestStartDebugSession to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestStartDebugSession to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestStartDebugSession from protobuf object *otg.RequestStartDebugSession
	FromProto(msg *otg.RequestStartDebugSession) (RequestStartDebugSession, error)
	// FromPbText unmarshals RequestStartDebugSession from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestStartDebugSession from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestStartDebugSession from JSON text
	FromJson(value string) error
	// Validate validates RequestStartDebugSession
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestStartDebugSession, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// UserName returns string, set in RequestStartDebugSession.
	UserName() string
	// SetUserName assigns string provided by user to RequestStartDebugSession
	SetUserName(value string) RequestStartDebugSession
	// HasUserName checks if UserName has been set in RequestStartDebugSession
	HasUserName() bool
	// PortListInfo returns DebugTopologyDebugPortInfoList, set in RequestStartDebugSession.
	// DebugTopologyDebugPortInfoList is tBD
	PortListInfo() DebugTopologyDebugPortInfoList
	// SetPortListInfo assigns DebugTopologyDebugPortInfoList provided by user to RequestStartDebugSession.
	// DebugTopologyDebugPortInfoList is tBD
	SetPortListInfo(value DebugTopologyDebugPortInfoList) RequestStartDebugSession
	// HasPortListInfo checks if PortListInfo has been set in RequestStartDebugSession
	HasPortListInfo() bool
	setNil()
}

func (obj *requestStartDebugSession) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "StartDebugSession"
	args := []Argument{}

	if obj.HasUserName() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "UserName",
			Type:      "string",
			Value:     obj.UserName(),
		}

		args = append(args, arg)
	}

	if obj.HasPortListInfo() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortListInfo",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.DebugTopology+DebugPortInfoList",
		}

		err := obj.PortListInfo().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	argPortListInfoWithUniqueId := Argument{
		Direction: ArgumentDirectionOut,
		Name:      "PortListInfoWithUniqueId",
		Type:      "Ixia.IxOS.RPC.PCPU.RPF.DebugTopology+DebugPortInfoWithUniqueIdList",
	}
	args = append(args, argPortListInfoWithUniqueId)

	argInterceptorInfo := Argument{
		Direction: ArgumentDirectionOut,
		Name:      "InterceptorInfo",
		Type:      "Ixia.IxOS.RPC.PCPU.RPF.DebugTopology+InterceptorInfo",
	}
	args = append(args, argInterceptorInfo)
	xObj.Argument = args
	return nil
}

func (obj *requestStartDebugSession) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// UserName returns a string
func (obj *requestStartDebugSession) UserName() string {

	return *obj.obj.UserName

}

// description is TBD
// UserName returns a string
func (obj *requestStartDebugSession) HasUserName() bool {
	return obj.obj.UserName != nil
}

// description is TBD
// SetUserName sets the string value in the RequestStartDebugSession object
func (obj *requestStartDebugSession) SetUserName(value string) RequestStartDebugSession {

	obj.obj.UserName = &value
	return obj
}

// description is TBD
// PortListInfo returns a DebugTopologyDebugPortInfoList
func (obj *requestStartDebugSession) PortListInfo() DebugTopologyDebugPortInfoList {
	if obj.obj.PortListInfo == nil {
		obj.obj.PortListInfo = NewDebugTopologyDebugPortInfoList().Msg()
	}
	if obj.portListInfoHolder == nil {
		obj.portListInfoHolder = &debugTopologyDebugPortInfoList{obj: obj.obj.PortListInfo}
	}
	return obj.portListInfoHolder
}

// description is TBD
// PortListInfo returns a DebugTopologyDebugPortInfoList
func (obj *requestStartDebugSession) HasPortListInfo() bool {
	return obj.obj.PortListInfo != nil
}

// description is TBD
// SetPortListInfo sets the DebugTopologyDebugPortInfoList value in the RequestStartDebugSession object
func (obj *requestStartDebugSession) SetPortListInfo(value DebugTopologyDebugPortInfoList) RequestStartDebugSession {

	obj.portListInfoHolder = nil
	obj.obj.PortListInfo = value.Msg()

	return obj
}

func (obj *requestStartDebugSession) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortListInfo != nil {

		obj.PortListInfo().validateObj(vObj, set_default)
	}

}

func (obj *requestStartDebugSession) setDefault() {

}

// ***** RequestStopDebugSession *****
type requestStopDebugSession struct {
	validation
	obj              *otg.RequestStopDebugSession
	portIdListHolder DebugTopologyDebugPortIdList
}

func NewRequestStopDebugSession() RequestStopDebugSession {
	obj := requestStopDebugSession{obj: &otg.RequestStopDebugSession{}}
	obj.setDefault()
	return &obj
}

func (obj *requestStopDebugSession) Msg() *otg.RequestStopDebugSession {
	return obj.obj
}

func (obj *requestStopDebugSession) SetMsg(msg *otg.RequestStopDebugSession) RequestStopDebugSession {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestStopDebugSession) ToProto() (*otg.RequestStopDebugSession, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestStopDebugSession) FromProto(msg *otg.RequestStopDebugSession) (RequestStopDebugSession, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestStopDebugSession) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestStopDebugSession) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestStopDebugSession) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestStopDebugSession) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestStopDebugSession) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestStopDebugSession) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestStopDebugSession) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestStopDebugSession) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestStopDebugSession) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestStopDebugSession) Clone() (RequestStopDebugSession, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestStopDebugSession()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestStopDebugSession) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestStopDebugSession) setNil() {
	obj.portIdListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestStopDebugSession is description is TBD
type RequestStopDebugSession interface {
	Validation
	// Msg marshals RequestStopDebugSession to protobuf object *otg.RequestStopDebugSession
	// and doesn't set defaults
	Msg() *otg.RequestStopDebugSession
	// SetMsg unmarshals RequestStopDebugSession from protobuf object *otg.RequestStopDebugSession
	// and doesn't set defaults
	SetMsg(*otg.RequestStopDebugSession) RequestStopDebugSession
	// ToProto marshals RequestStopDebugSession to protobuf object *otg.RequestStopDebugSession
	ToProto() (*otg.RequestStopDebugSession, error)
	// ToPbText marshals RequestStopDebugSession to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestStopDebugSession to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestStopDebugSession to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestStopDebugSession from protobuf object *otg.RequestStopDebugSession
	FromProto(msg *otg.RequestStopDebugSession) (RequestStopDebugSession, error)
	// FromPbText unmarshals RequestStopDebugSession from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestStopDebugSession from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestStopDebugSession from JSON text
	FromJson(value string) error
	// Validate validates RequestStopDebugSession
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestStopDebugSession, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// UserName returns string, set in RequestStopDebugSession.
	UserName() string
	// SetUserName assigns string provided by user to RequestStopDebugSession
	SetUserName(value string) RequestStopDebugSession
	// HasUserName checks if UserName has been set in RequestStopDebugSession
	HasUserName() bool
	// PortIdList returns DebugTopologyDebugPortIdList, set in RequestStopDebugSession.
	// DebugTopologyDebugPortIdList is tBD
	PortIdList() DebugTopologyDebugPortIdList
	// SetPortIdList assigns DebugTopologyDebugPortIdList provided by user to RequestStopDebugSession.
	// DebugTopologyDebugPortIdList is tBD
	SetPortIdList(value DebugTopologyDebugPortIdList) RequestStopDebugSession
	// HasPortIdList checks if PortIdList has been set in RequestStopDebugSession
	HasPortIdList() bool
	setNil()
}

func (obj *requestStopDebugSession) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "StopDebugSession"
	args := []Argument{}

	if obj.HasUserName() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "UserName",
			Type:      "string",
			Value:     obj.UserName(),
		}

		args = append(args, arg)
	}

	if obj.HasPortIdList() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortIdList",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.DebugTopology+DebugPortIdList",
		}

		err := obj.PortIdList().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	argInterceptorInfo := Argument{
		Direction: ArgumentDirectionOut,
		Name:      "InterceptorInfo",
		Type:      "Ixia.IxOS.RPC.PCPU.RPF.DebugTopology+InterceptorInfo",
	}
	args = append(args, argInterceptorInfo)
	xObj.Argument = args
	return nil
}

func (obj *requestStopDebugSession) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// UserName returns a string
func (obj *requestStopDebugSession) UserName() string {

	return *obj.obj.UserName

}

// description is TBD
// UserName returns a string
func (obj *requestStopDebugSession) HasUserName() bool {
	return obj.obj.UserName != nil
}

// description is TBD
// SetUserName sets the string value in the RequestStopDebugSession object
func (obj *requestStopDebugSession) SetUserName(value string) RequestStopDebugSession {

	obj.obj.UserName = &value
	return obj
}

// description is TBD
// PortIdList returns a DebugTopologyDebugPortIdList
func (obj *requestStopDebugSession) PortIdList() DebugTopologyDebugPortIdList {
	if obj.obj.PortIdList == nil {
		obj.obj.PortIdList = NewDebugTopologyDebugPortIdList().Msg()
	}
	if obj.portIdListHolder == nil {
		obj.portIdListHolder = &debugTopologyDebugPortIdList{obj: obj.obj.PortIdList}
	}
	return obj.portIdListHolder
}

// description is TBD
// PortIdList returns a DebugTopologyDebugPortIdList
func (obj *requestStopDebugSession) HasPortIdList() bool {
	return obj.obj.PortIdList != nil
}

// description is TBD
// SetPortIdList sets the DebugTopologyDebugPortIdList value in the RequestStopDebugSession object
func (obj *requestStopDebugSession) SetPortIdList(value DebugTopologyDebugPortIdList) RequestStopDebugSession {

	obj.portIdListHolder = nil
	obj.obj.PortIdList = value.Msg()

	return obj
}

func (obj *requestStopDebugSession) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortIdList != nil {

		obj.PortIdList().validateObj(vObj, set_default)
	}

}

func (obj *requestStopDebugSession) setDefault() {

}

// ***** RequestFeatureRequest *****
type requestFeatureRequest struct {
	validation
	obj *otg.RequestFeatureRequest
}

func NewRequestFeatureRequest() RequestFeatureRequest {
	obj := requestFeatureRequest{obj: &otg.RequestFeatureRequest{}}
	obj.setDefault()
	return &obj
}

func (obj *requestFeatureRequest) Msg() *otg.RequestFeatureRequest {
	return obj.obj
}

func (obj *requestFeatureRequest) SetMsg(msg *otg.RequestFeatureRequest) RequestFeatureRequest {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestFeatureRequest) ToProto() (*otg.RequestFeatureRequest, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestFeatureRequest) FromProto(msg *otg.RequestFeatureRequest) (RequestFeatureRequest, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestFeatureRequest) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestFeatureRequest) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestFeatureRequest) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestFeatureRequest) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestFeatureRequest) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestFeatureRequest) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestFeatureRequest) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestFeatureRequest) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestFeatureRequest) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestFeatureRequest) Clone() (RequestFeatureRequest, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestFeatureRequest()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestFeatureRequest) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

// RequestFeatureRequest is description is TBD
type RequestFeatureRequest interface {
	Validation
	// Msg marshals RequestFeatureRequest to protobuf object *otg.RequestFeatureRequest
	// and doesn't set defaults
	Msg() *otg.RequestFeatureRequest
	// SetMsg unmarshals RequestFeatureRequest from protobuf object *otg.RequestFeatureRequest
	// and doesn't set defaults
	SetMsg(*otg.RequestFeatureRequest) RequestFeatureRequest
	// ToProto marshals RequestFeatureRequest to protobuf object *otg.RequestFeatureRequest
	ToProto() (*otg.RequestFeatureRequest, error)
	// ToPbText marshals RequestFeatureRequest to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestFeatureRequest to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestFeatureRequest to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestFeatureRequest from protobuf object *otg.RequestFeatureRequest
	FromProto(msg *otg.RequestFeatureRequest) (RequestFeatureRequest, error)
	// FromPbText unmarshals RequestFeatureRequest from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestFeatureRequest from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestFeatureRequest from JSON text
	FromJson(value string) error
	// Validate validates RequestFeatureRequest
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestFeatureRequest, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// Subtree returns string, set in RequestFeatureRequest.
	Subtree() string
	// SetSubtree assigns string provided by user to RequestFeatureRequest
	SetSubtree(value string) RequestFeatureRequest
	// HasSubtree checks if Subtree has been set in RequestFeatureRequest
	HasSubtree() bool
}

func (obj *requestFeatureRequest) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "FeatureRequest"
	args := []Argument{}

	if obj.HasSubtree() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "Subtree",
			Type:      "string",
			Value:     obj.Subtree(),
		}

		args = append(args, arg)
	}

	argFeatures := Argument{
		Direction: ArgumentDirectionOut,
		Name:      "Features",
		Type:      "string",
	}
	args = append(args, argFeatures)
	xObj.Argument = args
	return nil
}

func (obj *requestFeatureRequest) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Subtree returns a string
func (obj *requestFeatureRequest) Subtree() string {

	return *obj.obj.Subtree

}

// description is TBD
// Subtree returns a string
func (obj *requestFeatureRequest) HasSubtree() bool {
	return obj.obj.Subtree != nil
}

// description is TBD
// SetSubtree sets the string value in the RequestFeatureRequest object
func (obj *requestFeatureRequest) SetSubtree(value string) RequestFeatureRequest {

	obj.obj.Subtree = &value
	return obj
}

func (obj *requestFeatureRequest) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *requestFeatureRequest) setDefault() {

}

// ***** RequestSetUserInfo *****
type requestSetUserInfo struct {
	validation
	obj        *otg.RequestSetUserInfo
	userHolder ServerUserInfo
}

func NewRequestSetUserInfo() RequestSetUserInfo {
	obj := requestSetUserInfo{obj: &otg.RequestSetUserInfo{}}
	obj.setDefault()
	return &obj
}

func (obj *requestSetUserInfo) Msg() *otg.RequestSetUserInfo {
	return obj.obj
}

func (obj *requestSetUserInfo) SetMsg(msg *otg.RequestSetUserInfo) RequestSetUserInfo {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestSetUserInfo) ToProto() (*otg.RequestSetUserInfo, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestSetUserInfo) FromProto(msg *otg.RequestSetUserInfo) (RequestSetUserInfo, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestSetUserInfo) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestSetUserInfo) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestSetUserInfo) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestSetUserInfo) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestSetUserInfo) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestSetUserInfo) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestSetUserInfo) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestSetUserInfo) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestSetUserInfo) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestSetUserInfo) Clone() (RequestSetUserInfo, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestSetUserInfo()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestSetUserInfo) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestSetUserInfo) setNil() {
	obj.userHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestSetUserInfo is description is TBD
type RequestSetUserInfo interface {
	Validation
	// Msg marshals RequestSetUserInfo to protobuf object *otg.RequestSetUserInfo
	// and doesn't set defaults
	Msg() *otg.RequestSetUserInfo
	// SetMsg unmarshals RequestSetUserInfo from protobuf object *otg.RequestSetUserInfo
	// and doesn't set defaults
	SetMsg(*otg.RequestSetUserInfo) RequestSetUserInfo
	// ToProto marshals RequestSetUserInfo to protobuf object *otg.RequestSetUserInfo
	ToProto() (*otg.RequestSetUserInfo, error)
	// ToPbText marshals RequestSetUserInfo to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestSetUserInfo to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestSetUserInfo to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestSetUserInfo from protobuf object *otg.RequestSetUserInfo
	FromProto(msg *otg.RequestSetUserInfo) (RequestSetUserInfo, error)
	// FromPbText unmarshals RequestSetUserInfo from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestSetUserInfo from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestSetUserInfo from JSON text
	FromJson(value string) error
	// Validate validates RequestSetUserInfo
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestSetUserInfo, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// User returns ServerUserInfo, set in RequestSetUserInfo.
	// ServerUserInfo is owner, the current owner, empty if not owned description, provided at the time ownership
	User() ServerUserInfo
	// SetUser assigns ServerUserInfo provided by user to RequestSetUserInfo.
	// ServerUserInfo is owner, the current owner, empty if not owned description, provided at the time ownership
	SetUser(value ServerUserInfo) RequestSetUserInfo
	// HasUser checks if User has been set in RequestSetUserInfo
	HasUser() bool
	setNil()
}

func (obj *requestSetUserInfo) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "SetUserInfo"
	args := []Argument{}

	if obj.HasUser() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "User",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Server+UserInfo",
		}

		err := obj.User().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestSetUserInfo) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// User returns a ServerUserInfo
func (obj *requestSetUserInfo) User() ServerUserInfo {
	if obj.obj.User == nil {
		obj.obj.User = NewServerUserInfo().Msg()
	}
	if obj.userHolder == nil {
		obj.userHolder = &serverUserInfo{obj: obj.obj.User}
	}
	return obj.userHolder
}

// description is TBD
// User returns a ServerUserInfo
func (obj *requestSetUserInfo) HasUser() bool {
	return obj.obj.User != nil
}

// description is TBD
// SetUser sets the ServerUserInfo value in the RequestSetUserInfo object
func (obj *requestSetUserInfo) SetUser(value ServerUserInfo) RequestSetUserInfo {

	obj.userHolder = nil
	obj.obj.User = value.Msg()

	return obj
}

func (obj *requestSetUserInfo) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.User != nil {

		obj.User().validateObj(vObj, set_default)
	}

}

func (obj *requestSetUserInfo) setDefault() {

}

// ***** RequestTakeOwnership *****
type requestTakeOwnership struct {
	validation
	obj *otg.RequestTakeOwnership
}

func NewRequestTakeOwnership() RequestTakeOwnership {
	obj := requestTakeOwnership{obj: &otg.RequestTakeOwnership{}}
	obj.setDefault()
	return &obj
}

func (obj *requestTakeOwnership) Msg() *otg.RequestTakeOwnership {
	return obj.obj
}

func (obj *requestTakeOwnership) SetMsg(msg *otg.RequestTakeOwnership) RequestTakeOwnership {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestTakeOwnership) ToProto() (*otg.RequestTakeOwnership, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestTakeOwnership) FromProto(msg *otg.RequestTakeOwnership) (RequestTakeOwnership, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestTakeOwnership) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestTakeOwnership) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestTakeOwnership) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestTakeOwnership) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestTakeOwnership) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestTakeOwnership) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestTakeOwnership) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestTakeOwnership) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestTakeOwnership) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestTakeOwnership) Clone() (RequestTakeOwnership, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestTakeOwnership()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestTakeOwnership) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

// RequestTakeOwnership is description is TBD
type RequestTakeOwnership interface {
	Validation
	// Msg marshals RequestTakeOwnership to protobuf object *otg.RequestTakeOwnership
	// and doesn't set defaults
	Msg() *otg.RequestTakeOwnership
	// SetMsg unmarshals RequestTakeOwnership from protobuf object *otg.RequestTakeOwnership
	// and doesn't set defaults
	SetMsg(*otg.RequestTakeOwnership) RequestTakeOwnership
	// ToProto marshals RequestTakeOwnership to protobuf object *otg.RequestTakeOwnership
	ToProto() (*otg.RequestTakeOwnership, error)
	// ToPbText marshals RequestTakeOwnership to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestTakeOwnership to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestTakeOwnership to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestTakeOwnership from protobuf object *otg.RequestTakeOwnership
	FromProto(msg *otg.RequestTakeOwnership) (RequestTakeOwnership, error)
	// FromPbText unmarshals RequestTakeOwnership from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestTakeOwnership from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestTakeOwnership from JSON text
	FromJson(value string) error
	// Validate validates RequestTakeOwnership
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestTakeOwnership, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// Force returns bool, set in RequestTakeOwnership.
	Force() bool
	// SetForce assigns bool provided by user to RequestTakeOwnership
	SetForce(value bool) RequestTakeOwnership
	// HasForce checks if Force has been set in RequestTakeOwnership
	HasForce() bool
}

func (obj *requestTakeOwnership) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "TakeOwnership"
	args := []Argument{}

	if obj.HasForce() {
		var value string
		if obj.Force() {
			value = "1"
		} else {
			value = "0"
		}

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "Force",
			Type:      "bool",
			Value:     value,
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestTakeOwnership) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Force returns a bool
func (obj *requestTakeOwnership) Force() bool {

	return *obj.obj.Force

}

// description is TBD
// Force returns a bool
func (obj *requestTakeOwnership) HasForce() bool {
	return obj.obj.Force != nil
}

// description is TBD
// SetForce sets the bool value in the RequestTakeOwnership object
func (obj *requestTakeOwnership) SetForce(value bool) RequestTakeOwnership {

	obj.obj.Force = &value
	return obj
}

func (obj *requestTakeOwnership) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *requestTakeOwnership) setDefault() {

}

// ***** RequestClearOwnership *****
type requestClearOwnership struct {
	validation
	obj *otg.RequestClearOwnership
}

func NewRequestClearOwnership() RequestClearOwnership {
	obj := requestClearOwnership{obj: &otg.RequestClearOwnership{}}
	obj.setDefault()
	return &obj
}

func (obj *requestClearOwnership) Msg() *otg.RequestClearOwnership {
	return obj.obj
}

func (obj *requestClearOwnership) SetMsg(msg *otg.RequestClearOwnership) RequestClearOwnership {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestClearOwnership) ToProto() (*otg.RequestClearOwnership, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestClearOwnership) FromProto(msg *otg.RequestClearOwnership) (RequestClearOwnership, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestClearOwnership) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestClearOwnership) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestClearOwnership) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestClearOwnership) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestClearOwnership) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestClearOwnership) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestClearOwnership) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestClearOwnership) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestClearOwnership) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestClearOwnership) Clone() (RequestClearOwnership, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestClearOwnership()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestClearOwnership) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

// RequestClearOwnership is description is TBD
type RequestClearOwnership interface {
	Validation
	// Msg marshals RequestClearOwnership to protobuf object *otg.RequestClearOwnership
	// and doesn't set defaults
	Msg() *otg.RequestClearOwnership
	// SetMsg unmarshals RequestClearOwnership from protobuf object *otg.RequestClearOwnership
	// and doesn't set defaults
	SetMsg(*otg.RequestClearOwnership) RequestClearOwnership
	// ToProto marshals RequestClearOwnership to protobuf object *otg.RequestClearOwnership
	ToProto() (*otg.RequestClearOwnership, error)
	// ToPbText marshals RequestClearOwnership to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestClearOwnership to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestClearOwnership to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestClearOwnership from protobuf object *otg.RequestClearOwnership
	FromProto(msg *otg.RequestClearOwnership) (RequestClearOwnership, error)
	// FromPbText unmarshals RequestClearOwnership from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestClearOwnership from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestClearOwnership from JSON text
	FromJson(value string) error
	// Validate validates RequestClearOwnership
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestClearOwnership, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// Force returns bool, set in RequestClearOwnership.
	Force() bool
	// SetForce assigns bool provided by user to RequestClearOwnership
	SetForce(value bool) RequestClearOwnership
	// HasForce checks if Force has been set in RequestClearOwnership
	HasForce() bool
}

func (obj *requestClearOwnership) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "ClearOwnership"
	args := []Argument{}

	if obj.HasForce() {
		var value string
		if obj.Force() {
			value = "1"
		} else {
			value = "0"
		}

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "Force",
			Type:      "bool",
			Value:     value,
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestClearOwnership) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Force returns a bool
func (obj *requestClearOwnership) Force() bool {

	return *obj.obj.Force

}

// description is TBD
// Force returns a bool
func (obj *requestClearOwnership) HasForce() bool {
	return obj.obj.Force != nil
}

// description is TBD
// SetForce sets the bool value in the RequestClearOwnership object
func (obj *requestClearOwnership) SetForce(value bool) RequestClearOwnership {

	obj.obj.Force = &value
	return obj
}

func (obj *requestClearOwnership) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *requestClearOwnership) setDefault() {

}

// ***** RequestSubscribeEvent *****
type requestSubscribeEvent struct {
	validation
	obj              *otg.RequestSubscribeEvent
	portIdListHolder IdTypePortIdList
	eventsHolder     ServerEventSubscribeList
}

func NewRequestSubscribeEvent() RequestSubscribeEvent {
	obj := requestSubscribeEvent{obj: &otg.RequestSubscribeEvent{}}
	obj.setDefault()
	return &obj
}

func (obj *requestSubscribeEvent) Msg() *otg.RequestSubscribeEvent {
	return obj.obj
}

func (obj *requestSubscribeEvent) SetMsg(msg *otg.RequestSubscribeEvent) RequestSubscribeEvent {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestSubscribeEvent) ToProto() (*otg.RequestSubscribeEvent, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestSubscribeEvent) FromProto(msg *otg.RequestSubscribeEvent) (RequestSubscribeEvent, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestSubscribeEvent) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestSubscribeEvent) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestSubscribeEvent) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestSubscribeEvent) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestSubscribeEvent) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestSubscribeEvent) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestSubscribeEvent) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestSubscribeEvent) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestSubscribeEvent) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestSubscribeEvent) Clone() (RequestSubscribeEvent, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestSubscribeEvent()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestSubscribeEvent) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestSubscribeEvent) setNil() {
	obj.portIdListHolder = nil
	obj.eventsHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestSubscribeEvent is description is TBD
type RequestSubscribeEvent interface {
	Validation
	// Msg marshals RequestSubscribeEvent to protobuf object *otg.RequestSubscribeEvent
	// and doesn't set defaults
	Msg() *otg.RequestSubscribeEvent
	// SetMsg unmarshals RequestSubscribeEvent from protobuf object *otg.RequestSubscribeEvent
	// and doesn't set defaults
	SetMsg(*otg.RequestSubscribeEvent) RequestSubscribeEvent
	// ToProto marshals RequestSubscribeEvent to protobuf object *otg.RequestSubscribeEvent
	ToProto() (*otg.RequestSubscribeEvent, error)
	// ToPbText marshals RequestSubscribeEvent to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestSubscribeEvent to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestSubscribeEvent to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestSubscribeEvent from protobuf object *otg.RequestSubscribeEvent
	FromProto(msg *otg.RequestSubscribeEvent) (RequestSubscribeEvent, error)
	// FromPbText unmarshals RequestSubscribeEvent from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestSubscribeEvent from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestSubscribeEvent from JSON text
	FromJson(value string) error
	// Validate validates RequestSubscribeEvent
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestSubscribeEvent, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortIdList returns IdTypePortIdList, set in RequestSubscribeEvent.
	// IdTypePortIdList is tBD
	PortIdList() IdTypePortIdList
	// SetPortIdList assigns IdTypePortIdList provided by user to RequestSubscribeEvent.
	// IdTypePortIdList is tBD
	SetPortIdList(value IdTypePortIdList) RequestSubscribeEvent
	// HasPortIdList checks if PortIdList has been set in RequestSubscribeEvent
	HasPortIdList() bool
	// Events returns ServerEventSubscribeList, set in RequestSubscribeEvent.
	// ServerEventSubscribeList is tBD
	Events() ServerEventSubscribeList
	// SetEvents assigns ServerEventSubscribeList provided by user to RequestSubscribeEvent.
	// ServerEventSubscribeList is tBD
	SetEvents(value ServerEventSubscribeList) RequestSubscribeEvent
	// HasEvents checks if Events has been set in RequestSubscribeEvent
	HasEvents() bool
	setNil()
}

func (obj *requestSubscribeEvent) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "SubscribeEvent"
	args := []Argument{}

	if obj.HasPortIdList() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortIdList",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortIdList",
		}

		err := obj.PortIdList().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasEvents() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "Events",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Server+EventSubscribeList",
		}

		err := obj.Events().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestSubscribeEvent) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortIdList returns a IdTypePortIdList
func (obj *requestSubscribeEvent) PortIdList() IdTypePortIdList {
	if obj.obj.PortIdList == nil {
		obj.obj.PortIdList = NewIdTypePortIdList().Msg()
	}
	if obj.portIdListHolder == nil {
		obj.portIdListHolder = &idTypePortIdList{obj: obj.obj.PortIdList}
	}
	return obj.portIdListHolder
}

// description is TBD
// PortIdList returns a IdTypePortIdList
func (obj *requestSubscribeEvent) HasPortIdList() bool {
	return obj.obj.PortIdList != nil
}

// description is TBD
// SetPortIdList sets the IdTypePortIdList value in the RequestSubscribeEvent object
func (obj *requestSubscribeEvent) SetPortIdList(value IdTypePortIdList) RequestSubscribeEvent {

	obj.portIdListHolder = nil
	obj.obj.PortIdList = value.Msg()

	return obj
}

// description is TBD
// Events returns a ServerEventSubscribeList
func (obj *requestSubscribeEvent) Events() ServerEventSubscribeList {
	if obj.obj.Events == nil {
		obj.obj.Events = NewServerEventSubscribeList().Msg()
	}
	if obj.eventsHolder == nil {
		obj.eventsHolder = &serverEventSubscribeList{obj: obj.obj.Events}
	}
	return obj.eventsHolder
}

// description is TBD
// Events returns a ServerEventSubscribeList
func (obj *requestSubscribeEvent) HasEvents() bool {
	return obj.obj.Events != nil
}

// description is TBD
// SetEvents sets the ServerEventSubscribeList value in the RequestSubscribeEvent object
func (obj *requestSubscribeEvent) SetEvents(value ServerEventSubscribeList) RequestSubscribeEvent {

	obj.eventsHolder = nil
	obj.obj.Events = value.Msg()

	return obj
}

func (obj *requestSubscribeEvent) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortIdList != nil {

		obj.PortIdList().validateObj(vObj, set_default)
	}

	if obj.obj.Events != nil {

		obj.Events().validateObj(vObj, set_default)
	}

}

func (obj *requestSubscribeEvent) setDefault() {

}

// ***** RequestUnsubscribeEvent *****
type requestUnsubscribeEvent struct {
	validation
	obj              *otg.RequestUnsubscribeEvent
	portIdListHolder IdTypePortIdList
	eventsHolder     ServerEventSubscribeList
}

func NewRequestUnsubscribeEvent() RequestUnsubscribeEvent {
	obj := requestUnsubscribeEvent{obj: &otg.RequestUnsubscribeEvent{}}
	obj.setDefault()
	return &obj
}

func (obj *requestUnsubscribeEvent) Msg() *otg.RequestUnsubscribeEvent {
	return obj.obj
}

func (obj *requestUnsubscribeEvent) SetMsg(msg *otg.RequestUnsubscribeEvent) RequestUnsubscribeEvent {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestUnsubscribeEvent) ToProto() (*otg.RequestUnsubscribeEvent, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestUnsubscribeEvent) FromProto(msg *otg.RequestUnsubscribeEvent) (RequestUnsubscribeEvent, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestUnsubscribeEvent) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestUnsubscribeEvent) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestUnsubscribeEvent) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestUnsubscribeEvent) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestUnsubscribeEvent) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestUnsubscribeEvent) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestUnsubscribeEvent) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestUnsubscribeEvent) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestUnsubscribeEvent) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestUnsubscribeEvent) Clone() (RequestUnsubscribeEvent, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestUnsubscribeEvent()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestUnsubscribeEvent) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestUnsubscribeEvent) setNil() {
	obj.portIdListHolder = nil
	obj.eventsHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestUnsubscribeEvent is description is TBD
type RequestUnsubscribeEvent interface {
	Validation
	// Msg marshals RequestUnsubscribeEvent to protobuf object *otg.RequestUnsubscribeEvent
	// and doesn't set defaults
	Msg() *otg.RequestUnsubscribeEvent
	// SetMsg unmarshals RequestUnsubscribeEvent from protobuf object *otg.RequestUnsubscribeEvent
	// and doesn't set defaults
	SetMsg(*otg.RequestUnsubscribeEvent) RequestUnsubscribeEvent
	// ToProto marshals RequestUnsubscribeEvent to protobuf object *otg.RequestUnsubscribeEvent
	ToProto() (*otg.RequestUnsubscribeEvent, error)
	// ToPbText marshals RequestUnsubscribeEvent to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestUnsubscribeEvent to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestUnsubscribeEvent to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestUnsubscribeEvent from protobuf object *otg.RequestUnsubscribeEvent
	FromProto(msg *otg.RequestUnsubscribeEvent) (RequestUnsubscribeEvent, error)
	// FromPbText unmarshals RequestUnsubscribeEvent from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestUnsubscribeEvent from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestUnsubscribeEvent from JSON text
	FromJson(value string) error
	// Validate validates RequestUnsubscribeEvent
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestUnsubscribeEvent, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortIdList returns IdTypePortIdList, set in RequestUnsubscribeEvent.
	// IdTypePortIdList is tBD
	PortIdList() IdTypePortIdList
	// SetPortIdList assigns IdTypePortIdList provided by user to RequestUnsubscribeEvent.
	// IdTypePortIdList is tBD
	SetPortIdList(value IdTypePortIdList) RequestUnsubscribeEvent
	// HasPortIdList checks if PortIdList has been set in RequestUnsubscribeEvent
	HasPortIdList() bool
	// Events returns ServerEventSubscribeList, set in RequestUnsubscribeEvent.
	// ServerEventSubscribeList is tBD
	Events() ServerEventSubscribeList
	// SetEvents assigns ServerEventSubscribeList provided by user to RequestUnsubscribeEvent.
	// ServerEventSubscribeList is tBD
	SetEvents(value ServerEventSubscribeList) RequestUnsubscribeEvent
	// HasEvents checks if Events has been set in RequestUnsubscribeEvent
	HasEvents() bool
	setNil()
}

func (obj *requestUnsubscribeEvent) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "UnsubscribeEvent"
	args := []Argument{}

	if obj.HasPortIdList() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortIdList",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortIdList",
		}

		err := obj.PortIdList().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasEvents() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "Events",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Server+EventSubscribeList",
		}

		err := obj.Events().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestUnsubscribeEvent) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortIdList returns a IdTypePortIdList
func (obj *requestUnsubscribeEvent) PortIdList() IdTypePortIdList {
	if obj.obj.PortIdList == nil {
		obj.obj.PortIdList = NewIdTypePortIdList().Msg()
	}
	if obj.portIdListHolder == nil {
		obj.portIdListHolder = &idTypePortIdList{obj: obj.obj.PortIdList}
	}
	return obj.portIdListHolder
}

// description is TBD
// PortIdList returns a IdTypePortIdList
func (obj *requestUnsubscribeEvent) HasPortIdList() bool {
	return obj.obj.PortIdList != nil
}

// description is TBD
// SetPortIdList sets the IdTypePortIdList value in the RequestUnsubscribeEvent object
func (obj *requestUnsubscribeEvent) SetPortIdList(value IdTypePortIdList) RequestUnsubscribeEvent {

	obj.portIdListHolder = nil
	obj.obj.PortIdList = value.Msg()

	return obj
}

// description is TBD
// Events returns a ServerEventSubscribeList
func (obj *requestUnsubscribeEvent) Events() ServerEventSubscribeList {
	if obj.obj.Events == nil {
		obj.obj.Events = NewServerEventSubscribeList().Msg()
	}
	if obj.eventsHolder == nil {
		obj.eventsHolder = &serverEventSubscribeList{obj: obj.obj.Events}
	}
	return obj.eventsHolder
}

// description is TBD
// Events returns a ServerEventSubscribeList
func (obj *requestUnsubscribeEvent) HasEvents() bool {
	return obj.obj.Events != nil
}

// description is TBD
// SetEvents sets the ServerEventSubscribeList value in the RequestUnsubscribeEvent object
func (obj *requestUnsubscribeEvent) SetEvents(value ServerEventSubscribeList) RequestUnsubscribeEvent {

	obj.eventsHolder = nil
	obj.obj.Events = value.Msg()

	return obj
}

func (obj *requestUnsubscribeEvent) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortIdList != nil {

		obj.PortIdList().validateObj(vObj, set_default)
	}

	if obj.obj.Events != nil {

		obj.Events().validateObj(vObj, set_default)
	}

}

func (obj *requestUnsubscribeEvent) setDefault() {

}

// ***** RequestConfigurePort *****
type requestConfigurePort struct {
	validation
	obj                 *otg.RequestConfigurePort
	portIdHolder        IdTypePortId
	configurationHolder PortPortConfigurationType
}

func NewRequestConfigurePort() RequestConfigurePort {
	obj := requestConfigurePort{obj: &otg.RequestConfigurePort{}}
	obj.setDefault()
	return &obj
}

func (obj *requestConfigurePort) Msg() *otg.RequestConfigurePort {
	return obj.obj
}

func (obj *requestConfigurePort) SetMsg(msg *otg.RequestConfigurePort) RequestConfigurePort {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestConfigurePort) ToProto() (*otg.RequestConfigurePort, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestConfigurePort) FromProto(msg *otg.RequestConfigurePort) (RequestConfigurePort, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestConfigurePort) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestConfigurePort) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestConfigurePort) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestConfigurePort) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestConfigurePort) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestConfigurePort) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestConfigurePort) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestConfigurePort) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestConfigurePort) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestConfigurePort) Clone() (RequestConfigurePort, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestConfigurePort()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestConfigurePort) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestConfigurePort) setNil() {
	obj.portIdHolder = nil
	obj.configurationHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestConfigurePort is description is TBD
type RequestConfigurePort interface {
	Validation
	// Msg marshals RequestConfigurePort to protobuf object *otg.RequestConfigurePort
	// and doesn't set defaults
	Msg() *otg.RequestConfigurePort
	// SetMsg unmarshals RequestConfigurePort from protobuf object *otg.RequestConfigurePort
	// and doesn't set defaults
	SetMsg(*otg.RequestConfigurePort) RequestConfigurePort
	// ToProto marshals RequestConfigurePort to protobuf object *otg.RequestConfigurePort
	ToProto() (*otg.RequestConfigurePort, error)
	// ToPbText marshals RequestConfigurePort to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestConfigurePort to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestConfigurePort to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestConfigurePort from protobuf object *otg.RequestConfigurePort
	FromProto(msg *otg.RequestConfigurePort) (RequestConfigurePort, error)
	// FromPbText unmarshals RequestConfigurePort from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestConfigurePort from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestConfigurePort from JSON text
	FromJson(value string) error
	// Validate validates RequestConfigurePort
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestConfigurePort, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestConfigurePort.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestConfigurePort.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestConfigurePort
	// HasPortId checks if PortId has been set in RequestConfigurePort
	HasPortId() bool
	// Configuration returns PortPortConfigurationType, set in RequestConfigurePort.
	// PortPortConfigurationType is tBD
	Configuration() PortPortConfigurationType
	// SetConfiguration assigns PortPortConfigurationType provided by user to RequestConfigurePort.
	// PortPortConfigurationType is tBD
	SetConfiguration(value PortPortConfigurationType) RequestConfigurePort
	// HasConfiguration checks if Configuration has been set in RequestConfigurePort
	HasConfiguration() bool
	setNil()
}

func (obj *requestConfigurePort) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "ConfigurePort"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasConfiguration() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "Configuration",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Port+PortConfigurationType",
		}

		err := obj.Configuration().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestConfigurePort) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestConfigurePort) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestConfigurePort) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestConfigurePort object
func (obj *requestConfigurePort) SetPortId(value IdTypePortId) RequestConfigurePort {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// Configuration returns a PortPortConfigurationType
func (obj *requestConfigurePort) Configuration() PortPortConfigurationType {
	if obj.obj.Configuration == nil {
		obj.obj.Configuration = NewPortPortConfigurationType().Msg()
	}
	if obj.configurationHolder == nil {
		obj.configurationHolder = &portPortConfigurationType{obj: obj.obj.Configuration}
	}
	return obj.configurationHolder
}

// description is TBD
// Configuration returns a PortPortConfigurationType
func (obj *requestConfigurePort) HasConfiguration() bool {
	return obj.obj.Configuration != nil
}

// description is TBD
// SetConfiguration sets the PortPortConfigurationType value in the RequestConfigurePort object
func (obj *requestConfigurePort) SetConfiguration(value PortPortConfigurationType) RequestConfigurePort {

	obj.configurationHolder = nil
	obj.obj.Configuration = value.Msg()

	return obj
}

func (obj *requestConfigurePort) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.Configuration != nil {

		obj.Configuration().validateObj(vObj, set_default)
	}

}

func (obj *requestConfigurePort) setDefault() {

}

// ***** RequestConfigurePortBasic *****
type requestConfigurePortBasic struct {
	validation
	obj                 *otg.RequestConfigurePortBasic
	portIdHolder        IdTypePortId
	configurationHolder PortPortConfigurationStreamsType
}

func NewRequestConfigurePortBasic() RequestConfigurePortBasic {
	obj := requestConfigurePortBasic{obj: &otg.RequestConfigurePortBasic{}}
	obj.setDefault()
	return &obj
}

func (obj *requestConfigurePortBasic) Msg() *otg.RequestConfigurePortBasic {
	return obj.obj
}

func (obj *requestConfigurePortBasic) SetMsg(msg *otg.RequestConfigurePortBasic) RequestConfigurePortBasic {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestConfigurePortBasic) ToProto() (*otg.RequestConfigurePortBasic, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestConfigurePortBasic) FromProto(msg *otg.RequestConfigurePortBasic) (RequestConfigurePortBasic, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestConfigurePortBasic) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestConfigurePortBasic) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestConfigurePortBasic) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestConfigurePortBasic) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestConfigurePortBasic) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestConfigurePortBasic) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestConfigurePortBasic) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestConfigurePortBasic) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestConfigurePortBasic) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestConfigurePortBasic) Clone() (RequestConfigurePortBasic, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestConfigurePortBasic()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestConfigurePortBasic) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestConfigurePortBasic) setNil() {
	obj.portIdHolder = nil
	obj.configurationHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestConfigurePortBasic is description is TBD
type RequestConfigurePortBasic interface {
	Validation
	// Msg marshals RequestConfigurePortBasic to protobuf object *otg.RequestConfigurePortBasic
	// and doesn't set defaults
	Msg() *otg.RequestConfigurePortBasic
	// SetMsg unmarshals RequestConfigurePortBasic from protobuf object *otg.RequestConfigurePortBasic
	// and doesn't set defaults
	SetMsg(*otg.RequestConfigurePortBasic) RequestConfigurePortBasic
	// ToProto marshals RequestConfigurePortBasic to protobuf object *otg.RequestConfigurePortBasic
	ToProto() (*otg.RequestConfigurePortBasic, error)
	// ToPbText marshals RequestConfigurePortBasic to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestConfigurePortBasic to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestConfigurePortBasic to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestConfigurePortBasic from protobuf object *otg.RequestConfigurePortBasic
	FromProto(msg *otg.RequestConfigurePortBasic) (RequestConfigurePortBasic, error)
	// FromPbText unmarshals RequestConfigurePortBasic from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestConfigurePortBasic from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestConfigurePortBasic from JSON text
	FromJson(value string) error
	// Validate validates RequestConfigurePortBasic
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestConfigurePortBasic, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestConfigurePortBasic.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestConfigurePortBasic.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestConfigurePortBasic
	// HasPortId checks if PortId has been set in RequestConfigurePortBasic
	HasPortId() bool
	// Configuration returns PortPortConfigurationStreamsType, set in RequestConfigurePortBasic.
	// PortPortConfigurationStreamsType is tBD
	Configuration() PortPortConfigurationStreamsType
	// SetConfiguration assigns PortPortConfigurationStreamsType provided by user to RequestConfigurePortBasic.
	// PortPortConfigurationStreamsType is tBD
	SetConfiguration(value PortPortConfigurationStreamsType) RequestConfigurePortBasic
	// HasConfiguration checks if Configuration has been set in RequestConfigurePortBasic
	HasConfiguration() bool
	setNil()
}

func (obj *requestConfigurePortBasic) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "ConfigurePortBasic"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasConfiguration() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "Configuration",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Port+PortConfigurationStreamsType",
		}

		err := obj.Configuration().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestConfigurePortBasic) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestConfigurePortBasic) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestConfigurePortBasic) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestConfigurePortBasic object
func (obj *requestConfigurePortBasic) SetPortId(value IdTypePortId) RequestConfigurePortBasic {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// Configuration returns a PortPortConfigurationStreamsType
func (obj *requestConfigurePortBasic) Configuration() PortPortConfigurationStreamsType {
	if obj.obj.Configuration == nil {
		obj.obj.Configuration = NewPortPortConfigurationStreamsType().Msg()
	}
	if obj.configurationHolder == nil {
		obj.configurationHolder = &portPortConfigurationStreamsType{obj: obj.obj.Configuration}
	}
	return obj.configurationHolder
}

// description is TBD
// Configuration returns a PortPortConfigurationStreamsType
func (obj *requestConfigurePortBasic) HasConfiguration() bool {
	return obj.obj.Configuration != nil
}

// description is TBD
// SetConfiguration sets the PortPortConfigurationStreamsType value in the RequestConfigurePortBasic object
func (obj *requestConfigurePortBasic) SetConfiguration(value PortPortConfigurationStreamsType) RequestConfigurePortBasic {

	obj.configurationHolder = nil
	obj.obj.Configuration = value.Msg()

	return obj
}

func (obj *requestConfigurePortBasic) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.Configuration != nil {

		obj.Configuration().validateObj(vObj, set_default)
	}

}

func (obj *requestConfigurePortBasic) setDefault() {

}

// ***** RequestPrepareForStartTx *****
type requestPrepareForStartTx struct {
	validation
	obj          *otg.RequestPrepareForStartTx
	portIdHolder IdTypePortId
}

func NewRequestPrepareForStartTx() RequestPrepareForStartTx {
	obj := requestPrepareForStartTx{obj: &otg.RequestPrepareForStartTx{}}
	obj.setDefault()
	return &obj
}

func (obj *requestPrepareForStartTx) Msg() *otg.RequestPrepareForStartTx {
	return obj.obj
}

func (obj *requestPrepareForStartTx) SetMsg(msg *otg.RequestPrepareForStartTx) RequestPrepareForStartTx {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestPrepareForStartTx) ToProto() (*otg.RequestPrepareForStartTx, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestPrepareForStartTx) FromProto(msg *otg.RequestPrepareForStartTx) (RequestPrepareForStartTx, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestPrepareForStartTx) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestPrepareForStartTx) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestPrepareForStartTx) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestPrepareForStartTx) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestPrepareForStartTx) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestPrepareForStartTx) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestPrepareForStartTx) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestPrepareForStartTx) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestPrepareForStartTx) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestPrepareForStartTx) Clone() (RequestPrepareForStartTx, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestPrepareForStartTx()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestPrepareForStartTx) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestPrepareForStartTx) setNil() {
	obj.portIdHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestPrepareForStartTx is description is TBD
type RequestPrepareForStartTx interface {
	Validation
	// Msg marshals RequestPrepareForStartTx to protobuf object *otg.RequestPrepareForStartTx
	// and doesn't set defaults
	Msg() *otg.RequestPrepareForStartTx
	// SetMsg unmarshals RequestPrepareForStartTx from protobuf object *otg.RequestPrepareForStartTx
	// and doesn't set defaults
	SetMsg(*otg.RequestPrepareForStartTx) RequestPrepareForStartTx
	// ToProto marshals RequestPrepareForStartTx to protobuf object *otg.RequestPrepareForStartTx
	ToProto() (*otg.RequestPrepareForStartTx, error)
	// ToPbText marshals RequestPrepareForStartTx to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestPrepareForStartTx to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestPrepareForStartTx to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestPrepareForStartTx from protobuf object *otg.RequestPrepareForStartTx
	FromProto(msg *otg.RequestPrepareForStartTx) (RequestPrepareForStartTx, error)
	// FromPbText unmarshals RequestPrepareForStartTx from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestPrepareForStartTx from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestPrepareForStartTx from JSON text
	FromJson(value string) error
	// Validate validates RequestPrepareForStartTx
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestPrepareForStartTx, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestPrepareForStartTx.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestPrepareForStartTx.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestPrepareForStartTx
	// HasPortId checks if PortId has been set in RequestPrepareForStartTx
	HasPortId() bool
	// IsTransmitting returns bool, set in RequestPrepareForStartTx.
	IsTransmitting() bool
	// SetIsTransmitting assigns bool provided by user to RequestPrepareForStartTx
	SetIsTransmitting(value bool) RequestPrepareForStartTx
	// HasIsTransmitting checks if IsTransmitting has been set in RequestPrepareForStartTx
	HasIsTransmitting() bool
	setNil()
}

func (obj *requestPrepareForStartTx) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "PrepareForStartTx"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasIsTransmitting() {
		var value string
		if obj.IsTransmitting() {
			value = "1"
		} else {
			value = "0"
		}

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "IsTransmitting",
			Type:      "bool",
			Value:     value,
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestPrepareForStartTx) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestPrepareForStartTx) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestPrepareForStartTx) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestPrepareForStartTx object
func (obj *requestPrepareForStartTx) SetPortId(value IdTypePortId) RequestPrepareForStartTx {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// IsTransmitting returns a bool
func (obj *requestPrepareForStartTx) IsTransmitting() bool {

	return *obj.obj.IsTransmitting

}

// description is TBD
// IsTransmitting returns a bool
func (obj *requestPrepareForStartTx) HasIsTransmitting() bool {
	return obj.obj.IsTransmitting != nil
}

// description is TBD
// SetIsTransmitting sets the bool value in the RequestPrepareForStartTx object
func (obj *requestPrepareForStartTx) SetIsTransmitting(value bool) RequestPrepareForStartTx {

	obj.obj.IsTransmitting = &value
	return obj
}

func (obj *requestPrepareForStartTx) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

}

func (obj *requestPrepareForStartTx) setDefault() {

}

// ***** RequestConfigureCapture *****
type requestConfigureCapture struct {
	validation
	obj                            *otg.RequestConfigureCapture
	portIdHolder                   IdTypePortId
	captureConfigurationListHolder CaptureConfigurationList
}

func NewRequestConfigureCapture() RequestConfigureCapture {
	obj := requestConfigureCapture{obj: &otg.RequestConfigureCapture{}}
	obj.setDefault()
	return &obj
}

func (obj *requestConfigureCapture) Msg() *otg.RequestConfigureCapture {
	return obj.obj
}

func (obj *requestConfigureCapture) SetMsg(msg *otg.RequestConfigureCapture) RequestConfigureCapture {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestConfigureCapture) ToProto() (*otg.RequestConfigureCapture, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestConfigureCapture) FromProto(msg *otg.RequestConfigureCapture) (RequestConfigureCapture, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestConfigureCapture) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestConfigureCapture) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestConfigureCapture) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestConfigureCapture) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestConfigureCapture) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestConfigureCapture) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestConfigureCapture) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestConfigureCapture) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestConfigureCapture) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestConfigureCapture) Clone() (RequestConfigureCapture, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestConfigureCapture()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestConfigureCapture) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestConfigureCapture) setNil() {
	obj.portIdHolder = nil
	obj.captureConfigurationListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestConfigureCapture is description is TBD
type RequestConfigureCapture interface {
	Validation
	// Msg marshals RequestConfigureCapture to protobuf object *otg.RequestConfigureCapture
	// and doesn't set defaults
	Msg() *otg.RequestConfigureCapture
	// SetMsg unmarshals RequestConfigureCapture from protobuf object *otg.RequestConfigureCapture
	// and doesn't set defaults
	SetMsg(*otg.RequestConfigureCapture) RequestConfigureCapture
	// ToProto marshals RequestConfigureCapture to protobuf object *otg.RequestConfigureCapture
	ToProto() (*otg.RequestConfigureCapture, error)
	// ToPbText marshals RequestConfigureCapture to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestConfigureCapture to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestConfigureCapture to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestConfigureCapture from protobuf object *otg.RequestConfigureCapture
	FromProto(msg *otg.RequestConfigureCapture) (RequestConfigureCapture, error)
	// FromPbText unmarshals RequestConfigureCapture from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestConfigureCapture from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestConfigureCapture from JSON text
	FromJson(value string) error
	// Validate validates RequestConfigureCapture
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestConfigureCapture, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestConfigureCapture.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestConfigureCapture.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestConfigureCapture
	// HasPortId checks if PortId has been set in RequestConfigureCapture
	HasPortId() bool
	// CaptureConfigurationList returns CaptureConfigurationList, set in RequestConfigureCapture.
	// CaptureConfigurationList is tBD
	CaptureConfigurationList() CaptureConfigurationList
	// SetCaptureConfigurationList assigns CaptureConfigurationList provided by user to RequestConfigureCapture.
	// CaptureConfigurationList is tBD
	SetCaptureConfigurationList(value CaptureConfigurationList) RequestConfigureCapture
	// HasCaptureConfigurationList checks if CaptureConfigurationList has been set in RequestConfigureCapture
	HasCaptureConfigurationList() bool
	setNil()
}

func (obj *requestConfigureCapture) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "ConfigureCapture"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasCaptureConfigurationList() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "CaptureConfigurationList",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Capture+ConfigurationList",
		}

		err := obj.CaptureConfigurationList().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestConfigureCapture) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestConfigureCapture) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestConfigureCapture) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestConfigureCapture object
func (obj *requestConfigureCapture) SetPortId(value IdTypePortId) RequestConfigureCapture {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// CaptureConfigurationList returns a CaptureConfigurationList
func (obj *requestConfigureCapture) CaptureConfigurationList() CaptureConfigurationList {
	if obj.obj.CaptureConfigurationList == nil {
		obj.obj.CaptureConfigurationList = NewCaptureConfigurationList().Msg()
	}
	if obj.captureConfigurationListHolder == nil {
		obj.captureConfigurationListHolder = &captureConfigurationList{obj: obj.obj.CaptureConfigurationList}
	}
	return obj.captureConfigurationListHolder
}

// description is TBD
// CaptureConfigurationList returns a CaptureConfigurationList
func (obj *requestConfigureCapture) HasCaptureConfigurationList() bool {
	return obj.obj.CaptureConfigurationList != nil
}

// description is TBD
// SetCaptureConfigurationList sets the CaptureConfigurationList value in the RequestConfigureCapture object
func (obj *requestConfigureCapture) SetCaptureConfigurationList(value CaptureConfigurationList) RequestConfigureCapture {

	obj.captureConfigurationListHolder = nil
	obj.obj.CaptureConfigurationList = value.Msg()

	return obj
}

func (obj *requestConfigureCapture) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.CaptureConfigurationList != nil {

		obj.CaptureConfigurationList().validateObj(vObj, set_default)
	}

}

func (obj *requestConfigureCapture) setDefault() {

}

// ***** RequestStartCapture *****
type requestStartCapture struct {
	validation
	obj             *otg.RequestStartCapture
	portIdHolder    IdTypePortId
	directionHolder CaptureeDirection
}

func NewRequestStartCapture() RequestStartCapture {
	obj := requestStartCapture{obj: &otg.RequestStartCapture{}}
	obj.setDefault()
	return &obj
}

func (obj *requestStartCapture) Msg() *otg.RequestStartCapture {
	return obj.obj
}

func (obj *requestStartCapture) SetMsg(msg *otg.RequestStartCapture) RequestStartCapture {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestStartCapture) ToProto() (*otg.RequestStartCapture, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestStartCapture) FromProto(msg *otg.RequestStartCapture) (RequestStartCapture, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestStartCapture) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestStartCapture) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestStartCapture) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestStartCapture) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestStartCapture) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestStartCapture) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestStartCapture) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestStartCapture) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestStartCapture) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestStartCapture) Clone() (RequestStartCapture, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestStartCapture()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestStartCapture) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestStartCapture) setNil() {
	obj.portIdHolder = nil
	obj.directionHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestStartCapture is description is TBD
type RequestStartCapture interface {
	Validation
	// Msg marshals RequestStartCapture to protobuf object *otg.RequestStartCapture
	// and doesn't set defaults
	Msg() *otg.RequestStartCapture
	// SetMsg unmarshals RequestStartCapture from protobuf object *otg.RequestStartCapture
	// and doesn't set defaults
	SetMsg(*otg.RequestStartCapture) RequestStartCapture
	// ToProto marshals RequestStartCapture to protobuf object *otg.RequestStartCapture
	ToProto() (*otg.RequestStartCapture, error)
	// ToPbText marshals RequestStartCapture to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestStartCapture to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestStartCapture to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestStartCapture from protobuf object *otg.RequestStartCapture
	FromProto(msg *otg.RequestStartCapture) (RequestStartCapture, error)
	// FromPbText unmarshals RequestStartCapture from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestStartCapture from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestStartCapture from JSON text
	FromJson(value string) error
	// Validate validates RequestStartCapture
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestStartCapture, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestStartCapture.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestStartCapture.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestStartCapture
	// HasPortId checks if PortId has been set in RequestStartCapture
	HasPortId() bool
	// Direction returns CaptureeDirection, set in RequestStartCapture.
	// CaptureeDirection is description is TBD
	Direction() CaptureeDirection
	// SetDirection assigns CaptureeDirection provided by user to RequestStartCapture.
	// CaptureeDirection is description is TBD
	SetDirection(value CaptureeDirection) RequestStartCapture
	// HasDirection checks if Direction has been set in RequestStartCapture
	HasDirection() bool
	setNil()
}

func (obj *requestStartCapture) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "StartCapture"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasDirection() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "Direction",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Capture+eDirection",
		}

		err := obj.Direction().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestStartCapture) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestStartCapture) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestStartCapture) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestStartCapture object
func (obj *requestStartCapture) SetPortId(value IdTypePortId) RequestStartCapture {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// Direction returns a CaptureeDirection
func (obj *requestStartCapture) Direction() CaptureeDirection {
	if obj.obj.Direction == nil {
		obj.obj.Direction = NewCaptureeDirection().Msg()
	}
	if obj.directionHolder == nil {
		obj.directionHolder = &captureeDirection{obj: obj.obj.Direction}
	}
	return obj.directionHolder
}

// description is TBD
// Direction returns a CaptureeDirection
func (obj *requestStartCapture) HasDirection() bool {
	return obj.obj.Direction != nil
}

// description is TBD
// SetDirection sets the CaptureeDirection value in the RequestStartCapture object
func (obj *requestStartCapture) SetDirection(value CaptureeDirection) RequestStartCapture {

	obj.directionHolder = nil
	obj.obj.Direction = value.Msg()

	return obj
}

func (obj *requestStartCapture) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.Direction != nil {

		obj.Direction().validateObj(vObj, set_default)
	}

}

func (obj *requestStartCapture) setDefault() {

}

// ***** RequestStopCapture *****
type requestStopCapture struct {
	validation
	obj             *otg.RequestStopCapture
	portIdHolder    IdTypePortId
	directionHolder CaptureeDirection
}

func NewRequestStopCapture() RequestStopCapture {
	obj := requestStopCapture{obj: &otg.RequestStopCapture{}}
	obj.setDefault()
	return &obj
}

func (obj *requestStopCapture) Msg() *otg.RequestStopCapture {
	return obj.obj
}

func (obj *requestStopCapture) SetMsg(msg *otg.RequestStopCapture) RequestStopCapture {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestStopCapture) ToProto() (*otg.RequestStopCapture, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestStopCapture) FromProto(msg *otg.RequestStopCapture) (RequestStopCapture, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestStopCapture) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestStopCapture) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestStopCapture) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestStopCapture) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestStopCapture) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestStopCapture) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestStopCapture) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestStopCapture) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestStopCapture) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestStopCapture) Clone() (RequestStopCapture, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestStopCapture()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestStopCapture) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestStopCapture) setNil() {
	obj.portIdHolder = nil
	obj.directionHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestStopCapture is description is TBD
type RequestStopCapture interface {
	Validation
	// Msg marshals RequestStopCapture to protobuf object *otg.RequestStopCapture
	// and doesn't set defaults
	Msg() *otg.RequestStopCapture
	// SetMsg unmarshals RequestStopCapture from protobuf object *otg.RequestStopCapture
	// and doesn't set defaults
	SetMsg(*otg.RequestStopCapture) RequestStopCapture
	// ToProto marshals RequestStopCapture to protobuf object *otg.RequestStopCapture
	ToProto() (*otg.RequestStopCapture, error)
	// ToPbText marshals RequestStopCapture to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestStopCapture to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestStopCapture to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestStopCapture from protobuf object *otg.RequestStopCapture
	FromProto(msg *otg.RequestStopCapture) (RequestStopCapture, error)
	// FromPbText unmarshals RequestStopCapture from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestStopCapture from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestStopCapture from JSON text
	FromJson(value string) error
	// Validate validates RequestStopCapture
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestStopCapture, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestStopCapture.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestStopCapture.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestStopCapture
	// HasPortId checks if PortId has been set in RequestStopCapture
	HasPortId() bool
	// Direction returns CaptureeDirection, set in RequestStopCapture.
	// CaptureeDirection is description is TBD
	Direction() CaptureeDirection
	// SetDirection assigns CaptureeDirection provided by user to RequestStopCapture.
	// CaptureeDirection is description is TBD
	SetDirection(value CaptureeDirection) RequestStopCapture
	// HasDirection checks if Direction has been set in RequestStopCapture
	HasDirection() bool
	setNil()
}

func (obj *requestStopCapture) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "StopCapture"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasDirection() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "Direction",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Capture+eDirection",
		}

		err := obj.Direction().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestStopCapture) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestStopCapture) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestStopCapture) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestStopCapture object
func (obj *requestStopCapture) SetPortId(value IdTypePortId) RequestStopCapture {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// Direction returns a CaptureeDirection
func (obj *requestStopCapture) Direction() CaptureeDirection {
	if obj.obj.Direction == nil {
		obj.obj.Direction = NewCaptureeDirection().Msg()
	}
	if obj.directionHolder == nil {
		obj.directionHolder = &captureeDirection{obj: obj.obj.Direction}
	}
	return obj.directionHolder
}

// description is TBD
// Direction returns a CaptureeDirection
func (obj *requestStopCapture) HasDirection() bool {
	return obj.obj.Direction != nil
}

// description is TBD
// SetDirection sets the CaptureeDirection value in the RequestStopCapture object
func (obj *requestStopCapture) SetDirection(value CaptureeDirection) RequestStopCapture {

	obj.directionHolder = nil
	obj.obj.Direction = value.Msg()

	return obj
}

func (obj *requestStopCapture) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.Direction != nil {

		obj.Direction().validateObj(vObj, set_default)
	}

}

func (obj *requestStopCapture) setDefault() {

}

// ***** RequestGetCapturePacketCount *****
type requestGetCapturePacketCount struct {
	validation
	obj             *otg.RequestGetCapturePacketCount
	portIdHolder    IdTypePortId
	directionHolder CaptureeDirection
}

func NewRequestGetCapturePacketCount() RequestGetCapturePacketCount {
	obj := requestGetCapturePacketCount{obj: &otg.RequestGetCapturePacketCount{}}
	obj.setDefault()
	return &obj
}

func (obj *requestGetCapturePacketCount) Msg() *otg.RequestGetCapturePacketCount {
	return obj.obj
}

func (obj *requestGetCapturePacketCount) SetMsg(msg *otg.RequestGetCapturePacketCount) RequestGetCapturePacketCount {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestGetCapturePacketCount) ToProto() (*otg.RequestGetCapturePacketCount, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestGetCapturePacketCount) FromProto(msg *otg.RequestGetCapturePacketCount) (RequestGetCapturePacketCount, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestGetCapturePacketCount) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestGetCapturePacketCount) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestGetCapturePacketCount) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestGetCapturePacketCount) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestGetCapturePacketCount) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestGetCapturePacketCount) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestGetCapturePacketCount) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestGetCapturePacketCount) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestGetCapturePacketCount) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestGetCapturePacketCount) Clone() (RequestGetCapturePacketCount, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestGetCapturePacketCount()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestGetCapturePacketCount) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestGetCapturePacketCount) setNil() {
	obj.portIdHolder = nil
	obj.directionHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestGetCapturePacketCount is description is TBD
type RequestGetCapturePacketCount interface {
	Validation
	// Msg marshals RequestGetCapturePacketCount to protobuf object *otg.RequestGetCapturePacketCount
	// and doesn't set defaults
	Msg() *otg.RequestGetCapturePacketCount
	// SetMsg unmarshals RequestGetCapturePacketCount from protobuf object *otg.RequestGetCapturePacketCount
	// and doesn't set defaults
	SetMsg(*otg.RequestGetCapturePacketCount) RequestGetCapturePacketCount
	// ToProto marshals RequestGetCapturePacketCount to protobuf object *otg.RequestGetCapturePacketCount
	ToProto() (*otg.RequestGetCapturePacketCount, error)
	// ToPbText marshals RequestGetCapturePacketCount to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestGetCapturePacketCount to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestGetCapturePacketCount to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestGetCapturePacketCount from protobuf object *otg.RequestGetCapturePacketCount
	FromProto(msg *otg.RequestGetCapturePacketCount) (RequestGetCapturePacketCount, error)
	// FromPbText unmarshals RequestGetCapturePacketCount from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestGetCapturePacketCount from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestGetCapturePacketCount from JSON text
	FromJson(value string) error
	// Validate validates RequestGetCapturePacketCount
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestGetCapturePacketCount, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestGetCapturePacketCount.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestGetCapturePacketCount.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestGetCapturePacketCount
	// HasPortId checks if PortId has been set in RequestGetCapturePacketCount
	HasPortId() bool
	// Direction returns CaptureeDirection, set in RequestGetCapturePacketCount.
	// CaptureeDirection is description is TBD
	Direction() CaptureeDirection
	// SetDirection assigns CaptureeDirection provided by user to RequestGetCapturePacketCount.
	// CaptureeDirection is description is TBD
	SetDirection(value CaptureeDirection) RequestGetCapturePacketCount
	// HasDirection checks if Direction has been set in RequestGetCapturePacketCount
	HasDirection() bool
	setNil()
}

func (obj *requestGetCapturePacketCount) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "GetCapturePacketCount"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasDirection() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "Direction",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Capture+eDirection",
		}

		err := obj.Direction().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	argPacketCountList := Argument{
		Direction: ArgumentDirectionOut,
		Name:      "PacketCountList",
		Type:      "Ixia.IxOS.RPC.PCPU.RPF.Capture+PacketCountList",
	}
	args = append(args, argPacketCountList)
	xObj.Argument = args
	return nil
}

func (obj *requestGetCapturePacketCount) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestGetCapturePacketCount) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestGetCapturePacketCount) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestGetCapturePacketCount object
func (obj *requestGetCapturePacketCount) SetPortId(value IdTypePortId) RequestGetCapturePacketCount {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// Direction returns a CaptureeDirection
func (obj *requestGetCapturePacketCount) Direction() CaptureeDirection {
	if obj.obj.Direction == nil {
		obj.obj.Direction = NewCaptureeDirection().Msg()
	}
	if obj.directionHolder == nil {
		obj.directionHolder = &captureeDirection{obj: obj.obj.Direction}
	}
	return obj.directionHolder
}

// description is TBD
// Direction returns a CaptureeDirection
func (obj *requestGetCapturePacketCount) HasDirection() bool {
	return obj.obj.Direction != nil
}

// description is TBD
// SetDirection sets the CaptureeDirection value in the RequestGetCapturePacketCount object
func (obj *requestGetCapturePacketCount) SetDirection(value CaptureeDirection) RequestGetCapturePacketCount {

	obj.directionHolder = nil
	obj.obj.Direction = value.Msg()

	return obj
}

func (obj *requestGetCapturePacketCount) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.Direction != nil {

		obj.Direction().validateObj(vObj, set_default)
	}

}

func (obj *requestGetCapturePacketCount) setDefault() {

}

// ***** RequestGetCaptureStatus *****
type requestGetCaptureStatus struct {
	validation
	obj             *otg.RequestGetCaptureStatus
	portIdHolder    IdTypePortId
	directionHolder CaptureeDirection
}

func NewRequestGetCaptureStatus() RequestGetCaptureStatus {
	obj := requestGetCaptureStatus{obj: &otg.RequestGetCaptureStatus{}}
	obj.setDefault()
	return &obj
}

func (obj *requestGetCaptureStatus) Msg() *otg.RequestGetCaptureStatus {
	return obj.obj
}

func (obj *requestGetCaptureStatus) SetMsg(msg *otg.RequestGetCaptureStatus) RequestGetCaptureStatus {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestGetCaptureStatus) ToProto() (*otg.RequestGetCaptureStatus, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestGetCaptureStatus) FromProto(msg *otg.RequestGetCaptureStatus) (RequestGetCaptureStatus, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestGetCaptureStatus) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestGetCaptureStatus) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestGetCaptureStatus) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestGetCaptureStatus) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestGetCaptureStatus) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestGetCaptureStatus) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestGetCaptureStatus) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestGetCaptureStatus) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestGetCaptureStatus) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestGetCaptureStatus) Clone() (RequestGetCaptureStatus, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestGetCaptureStatus()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestGetCaptureStatus) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestGetCaptureStatus) setNil() {
	obj.portIdHolder = nil
	obj.directionHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestGetCaptureStatus is description is TBD
type RequestGetCaptureStatus interface {
	Validation
	// Msg marshals RequestGetCaptureStatus to protobuf object *otg.RequestGetCaptureStatus
	// and doesn't set defaults
	Msg() *otg.RequestGetCaptureStatus
	// SetMsg unmarshals RequestGetCaptureStatus from protobuf object *otg.RequestGetCaptureStatus
	// and doesn't set defaults
	SetMsg(*otg.RequestGetCaptureStatus) RequestGetCaptureStatus
	// ToProto marshals RequestGetCaptureStatus to protobuf object *otg.RequestGetCaptureStatus
	ToProto() (*otg.RequestGetCaptureStatus, error)
	// ToPbText marshals RequestGetCaptureStatus to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestGetCaptureStatus to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestGetCaptureStatus to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestGetCaptureStatus from protobuf object *otg.RequestGetCaptureStatus
	FromProto(msg *otg.RequestGetCaptureStatus) (RequestGetCaptureStatus, error)
	// FromPbText unmarshals RequestGetCaptureStatus from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestGetCaptureStatus from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestGetCaptureStatus from JSON text
	FromJson(value string) error
	// Validate validates RequestGetCaptureStatus
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestGetCaptureStatus, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestGetCaptureStatus.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestGetCaptureStatus.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestGetCaptureStatus
	// HasPortId checks if PortId has been set in RequestGetCaptureStatus
	HasPortId() bool
	// Direction returns CaptureeDirection, set in RequestGetCaptureStatus.
	// CaptureeDirection is description is TBD
	Direction() CaptureeDirection
	// SetDirection assigns CaptureeDirection provided by user to RequestGetCaptureStatus.
	// CaptureeDirection is description is TBD
	SetDirection(value CaptureeDirection) RequestGetCaptureStatus
	// HasDirection checks if Direction has been set in RequestGetCaptureStatus
	HasDirection() bool
	setNil()
}

func (obj *requestGetCaptureStatus) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "GetCaptureStatus"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasDirection() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "Direction",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Capture+eDirection",
		}

		err := obj.Direction().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	argStatusList := Argument{
		Direction: ArgumentDirectionOut,
		Name:      "StatusList",
		Type:      "Ixia.IxOS.RPC.PCPU.RPF.Capture+StatusList",
	}
	args = append(args, argStatusList)
	xObj.Argument = args
	return nil
}

func (obj *requestGetCaptureStatus) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestGetCaptureStatus) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestGetCaptureStatus) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestGetCaptureStatus object
func (obj *requestGetCaptureStatus) SetPortId(value IdTypePortId) RequestGetCaptureStatus {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// Direction returns a CaptureeDirection
func (obj *requestGetCaptureStatus) Direction() CaptureeDirection {
	if obj.obj.Direction == nil {
		obj.obj.Direction = NewCaptureeDirection().Msg()
	}
	if obj.directionHolder == nil {
		obj.directionHolder = &captureeDirection{obj: obj.obj.Direction}
	}
	return obj.directionHolder
}

// description is TBD
// Direction returns a CaptureeDirection
func (obj *requestGetCaptureStatus) HasDirection() bool {
	return obj.obj.Direction != nil
}

// description is TBD
// SetDirection sets the CaptureeDirection value in the RequestGetCaptureStatus object
func (obj *requestGetCaptureStatus) SetDirection(value CaptureeDirection) RequestGetCaptureStatus {

	obj.directionHolder = nil
	obj.obj.Direction = value.Msg()

	return obj
}

func (obj *requestGetCaptureStatus) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.Direction != nil {

		obj.Direction().validateObj(vObj, set_default)
	}

}

func (obj *requestGetCaptureStatus) setDefault() {

}

// ***** RequestRetrieveCapture *****
type requestRetrieveCapture struct {
	validation
	obj                          *otg.RequestRetrieveCapture
	portIdHolder                 IdTypePortId
	captureRetrieveOptionsHolder CaptureRetrieveOptionsType
}

func NewRequestRetrieveCapture() RequestRetrieveCapture {
	obj := requestRetrieveCapture{obj: &otg.RequestRetrieveCapture{}}
	obj.setDefault()
	return &obj
}

func (obj *requestRetrieveCapture) Msg() *otg.RequestRetrieveCapture {
	return obj.obj
}

func (obj *requestRetrieveCapture) SetMsg(msg *otg.RequestRetrieveCapture) RequestRetrieveCapture {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestRetrieveCapture) ToProto() (*otg.RequestRetrieveCapture, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestRetrieveCapture) FromProto(msg *otg.RequestRetrieveCapture) (RequestRetrieveCapture, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestRetrieveCapture) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestRetrieveCapture) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestRetrieveCapture) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestRetrieveCapture) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestRetrieveCapture) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestRetrieveCapture) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestRetrieveCapture) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestRetrieveCapture) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestRetrieveCapture) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestRetrieveCapture) Clone() (RequestRetrieveCapture, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestRetrieveCapture()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestRetrieveCapture) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestRetrieveCapture) setNil() {
	obj.portIdHolder = nil
	obj.captureRetrieveOptionsHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestRetrieveCapture is description is TBD
type RequestRetrieveCapture interface {
	Validation
	// Msg marshals RequestRetrieveCapture to protobuf object *otg.RequestRetrieveCapture
	// and doesn't set defaults
	Msg() *otg.RequestRetrieveCapture
	// SetMsg unmarshals RequestRetrieveCapture from protobuf object *otg.RequestRetrieveCapture
	// and doesn't set defaults
	SetMsg(*otg.RequestRetrieveCapture) RequestRetrieveCapture
	// ToProto marshals RequestRetrieveCapture to protobuf object *otg.RequestRetrieveCapture
	ToProto() (*otg.RequestRetrieveCapture, error)
	// ToPbText marshals RequestRetrieveCapture to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestRetrieveCapture to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestRetrieveCapture to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestRetrieveCapture from protobuf object *otg.RequestRetrieveCapture
	FromProto(msg *otg.RequestRetrieveCapture) (RequestRetrieveCapture, error)
	// FromPbText unmarshals RequestRetrieveCapture from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestRetrieveCapture from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestRetrieveCapture from JSON text
	FromJson(value string) error
	// Validate validates RequestRetrieveCapture
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestRetrieveCapture, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestRetrieveCapture.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestRetrieveCapture.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestRetrieveCapture
	// HasPortId checks if PortId has been set in RequestRetrieveCapture
	HasPortId() bool
	// CaptureRetrieveOptions returns CaptureRetrieveOptionsType, set in RequestRetrieveCapture.
	// CaptureRetrieveOptionsType is tBD
	CaptureRetrieveOptions() CaptureRetrieveOptionsType
	// SetCaptureRetrieveOptions assigns CaptureRetrieveOptionsType provided by user to RequestRetrieveCapture.
	// CaptureRetrieveOptionsType is tBD
	SetCaptureRetrieveOptions(value CaptureRetrieveOptionsType) RequestRetrieveCapture
	// HasCaptureRetrieveOptions checks if CaptureRetrieveOptions has been set in RequestRetrieveCapture
	HasCaptureRetrieveOptions() bool
	setNil()
}

func (obj *requestRetrieveCapture) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "RetrieveCapture"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasCaptureRetrieveOptions() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "CaptureRetrieveOptions",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Capture+RetrieveOptionsType",
		}

		err := obj.CaptureRetrieveOptions().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	argRecord := Argument{
		Direction: ArgumentDirectionOut,
		Name:      "Record",
		Type:      "Ixia.IxOS.RPC.PCPU.RPF.Capture+RecordType",
	}
	args = append(args, argRecord)
	xObj.Argument = args
	return nil
}

func (obj *requestRetrieveCapture) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestRetrieveCapture) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestRetrieveCapture) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestRetrieveCapture object
func (obj *requestRetrieveCapture) SetPortId(value IdTypePortId) RequestRetrieveCapture {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// CaptureRetrieveOptions returns a CaptureRetrieveOptionsType
func (obj *requestRetrieveCapture) CaptureRetrieveOptions() CaptureRetrieveOptionsType {
	if obj.obj.CaptureRetrieveOptions == nil {
		obj.obj.CaptureRetrieveOptions = NewCaptureRetrieveOptionsType().Msg()
	}
	if obj.captureRetrieveOptionsHolder == nil {
		obj.captureRetrieveOptionsHolder = &captureRetrieveOptionsType{obj: obj.obj.CaptureRetrieveOptions}
	}
	return obj.captureRetrieveOptionsHolder
}

// description is TBD
// CaptureRetrieveOptions returns a CaptureRetrieveOptionsType
func (obj *requestRetrieveCapture) HasCaptureRetrieveOptions() bool {
	return obj.obj.CaptureRetrieveOptions != nil
}

// description is TBD
// SetCaptureRetrieveOptions sets the CaptureRetrieveOptionsType value in the RequestRetrieveCapture object
func (obj *requestRetrieveCapture) SetCaptureRetrieveOptions(value CaptureRetrieveOptionsType) RequestRetrieveCapture {

	obj.captureRetrieveOptionsHolder = nil
	obj.obj.CaptureRetrieveOptions = value.Msg()

	return obj
}

func (obj *requestRetrieveCapture) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.CaptureRetrieveOptions != nil {

		obj.CaptureRetrieveOptions().validateObj(vObj, set_default)
	}

}

func (obj *requestRetrieveCapture) setDefault() {

}

// ***** RequestStartLatency *****
type requestStartLatency struct {
	validation
	obj          *otg.RequestStartLatency
	portIdHolder IdTypePortId
}

func NewRequestStartLatency() RequestStartLatency {
	obj := requestStartLatency{obj: &otg.RequestStartLatency{}}
	obj.setDefault()
	return &obj
}

func (obj *requestStartLatency) Msg() *otg.RequestStartLatency {
	return obj.obj
}

func (obj *requestStartLatency) SetMsg(msg *otg.RequestStartLatency) RequestStartLatency {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestStartLatency) ToProto() (*otg.RequestStartLatency, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestStartLatency) FromProto(msg *otg.RequestStartLatency) (RequestStartLatency, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestStartLatency) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestStartLatency) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestStartLatency) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestStartLatency) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestStartLatency) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestStartLatency) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestStartLatency) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestStartLatency) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestStartLatency) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestStartLatency) Clone() (RequestStartLatency, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestStartLatency()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestStartLatency) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestStartLatency) setNil() {
	obj.portIdHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestStartLatency is description is TBD
type RequestStartLatency interface {
	Validation
	// Msg marshals RequestStartLatency to protobuf object *otg.RequestStartLatency
	// and doesn't set defaults
	Msg() *otg.RequestStartLatency
	// SetMsg unmarshals RequestStartLatency from protobuf object *otg.RequestStartLatency
	// and doesn't set defaults
	SetMsg(*otg.RequestStartLatency) RequestStartLatency
	// ToProto marshals RequestStartLatency to protobuf object *otg.RequestStartLatency
	ToProto() (*otg.RequestStartLatency, error)
	// ToPbText marshals RequestStartLatency to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestStartLatency to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestStartLatency to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestStartLatency from protobuf object *otg.RequestStartLatency
	FromProto(msg *otg.RequestStartLatency) (RequestStartLatency, error)
	// FromPbText unmarshals RequestStartLatency from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestStartLatency from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestStartLatency from JSON text
	FromJson(value string) error
	// Validate validates RequestStartLatency
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestStartLatency, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestStartLatency.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestStartLatency.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestStartLatency
	// HasPortId checks if PortId has been set in RequestStartLatency
	HasPortId() bool
	setNil()
}

func (obj *requestStartLatency) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "StartLatency"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestStartLatency) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestStartLatency) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestStartLatency) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestStartLatency object
func (obj *requestStartLatency) SetPortId(value IdTypePortId) RequestStartLatency {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

func (obj *requestStartLatency) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

}

func (obj *requestStartLatency) setDefault() {

}

// ***** RequestStopLatency *****
type requestStopLatency struct {
	validation
	obj          *otg.RequestStopLatency
	portIdHolder IdTypePortId
}

func NewRequestStopLatency() RequestStopLatency {
	obj := requestStopLatency{obj: &otg.RequestStopLatency{}}
	obj.setDefault()
	return &obj
}

func (obj *requestStopLatency) Msg() *otg.RequestStopLatency {
	return obj.obj
}

func (obj *requestStopLatency) SetMsg(msg *otg.RequestStopLatency) RequestStopLatency {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestStopLatency) ToProto() (*otg.RequestStopLatency, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestStopLatency) FromProto(msg *otg.RequestStopLatency) (RequestStopLatency, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestStopLatency) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestStopLatency) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestStopLatency) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestStopLatency) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestStopLatency) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestStopLatency) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestStopLatency) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestStopLatency) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestStopLatency) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestStopLatency) Clone() (RequestStopLatency, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestStopLatency()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestStopLatency) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestStopLatency) setNil() {
	obj.portIdHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestStopLatency is description is TBD
type RequestStopLatency interface {
	Validation
	// Msg marshals RequestStopLatency to protobuf object *otg.RequestStopLatency
	// and doesn't set defaults
	Msg() *otg.RequestStopLatency
	// SetMsg unmarshals RequestStopLatency from protobuf object *otg.RequestStopLatency
	// and doesn't set defaults
	SetMsg(*otg.RequestStopLatency) RequestStopLatency
	// ToProto marshals RequestStopLatency to protobuf object *otg.RequestStopLatency
	ToProto() (*otg.RequestStopLatency, error)
	// ToPbText marshals RequestStopLatency to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestStopLatency to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestStopLatency to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestStopLatency from protobuf object *otg.RequestStopLatency
	FromProto(msg *otg.RequestStopLatency) (RequestStopLatency, error)
	// FromPbText unmarshals RequestStopLatency from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestStopLatency from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestStopLatency from JSON text
	FromJson(value string) error
	// Validate validates RequestStopLatency
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestStopLatency, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestStopLatency.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestStopLatency.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestStopLatency
	// HasPortId checks if PortId has been set in RequestStopLatency
	HasPortId() bool
	setNil()
}

func (obj *requestStopLatency) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "StopLatency"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestStopLatency) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestStopLatency) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestStopLatency) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestStopLatency object
func (obj *requestStopLatency) SetPortId(value IdTypePortId) RequestStopLatency {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

func (obj *requestStopLatency) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

}

func (obj *requestStopLatency) setDefault() {

}

// ***** RequestClearLatency *****
type requestClearLatency struct {
	validation
	obj          *otg.RequestClearLatency
	portIdHolder IdTypePortId
}

func NewRequestClearLatency() RequestClearLatency {
	obj := requestClearLatency{obj: &otg.RequestClearLatency{}}
	obj.setDefault()
	return &obj
}

func (obj *requestClearLatency) Msg() *otg.RequestClearLatency {
	return obj.obj
}

func (obj *requestClearLatency) SetMsg(msg *otg.RequestClearLatency) RequestClearLatency {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestClearLatency) ToProto() (*otg.RequestClearLatency, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestClearLatency) FromProto(msg *otg.RequestClearLatency) (RequestClearLatency, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestClearLatency) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestClearLatency) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestClearLatency) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestClearLatency) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestClearLatency) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestClearLatency) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestClearLatency) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestClearLatency) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestClearLatency) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestClearLatency) Clone() (RequestClearLatency, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestClearLatency()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestClearLatency) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestClearLatency) setNil() {
	obj.portIdHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestClearLatency is description is TBD
type RequestClearLatency interface {
	Validation
	// Msg marshals RequestClearLatency to protobuf object *otg.RequestClearLatency
	// and doesn't set defaults
	Msg() *otg.RequestClearLatency
	// SetMsg unmarshals RequestClearLatency from protobuf object *otg.RequestClearLatency
	// and doesn't set defaults
	SetMsg(*otg.RequestClearLatency) RequestClearLatency
	// ToProto marshals RequestClearLatency to protobuf object *otg.RequestClearLatency
	ToProto() (*otg.RequestClearLatency, error)
	// ToPbText marshals RequestClearLatency to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestClearLatency to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestClearLatency to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestClearLatency from protobuf object *otg.RequestClearLatency
	FromProto(msg *otg.RequestClearLatency) (RequestClearLatency, error)
	// FromPbText unmarshals RequestClearLatency from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestClearLatency from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestClearLatency from JSON text
	FromJson(value string) error
	// Validate validates RequestClearLatency
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestClearLatency, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestClearLatency.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestClearLatency.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestClearLatency
	// HasPortId checks if PortId has been set in RequestClearLatency
	HasPortId() bool
	// EnableTxRxSync returns bool, set in RequestClearLatency.
	EnableTxRxSync() bool
	// SetEnableTxRxSync assigns bool provided by user to RequestClearLatency
	SetEnableTxRxSync(value bool) RequestClearLatency
	// HasEnableTxRxSync checks if EnableTxRxSync has been set in RequestClearLatency
	HasEnableTxRxSync() bool
	setNil()
}

func (obj *requestClearLatency) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "ClearLatency"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasEnableTxRxSync() {
		var value string
		if obj.EnableTxRxSync() {
			value = "1"
		} else {
			value = "0"
		}

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "EnableTxRxSync",
			Type:      "bool",
			Value:     value,
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestClearLatency) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestClearLatency) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestClearLatency) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestClearLatency object
func (obj *requestClearLatency) SetPortId(value IdTypePortId) RequestClearLatency {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// EnableTxRxSync returns a bool
func (obj *requestClearLatency) EnableTxRxSync() bool {

	return *obj.obj.EnableTxRxSync

}

// description is TBD
// EnableTxRxSync returns a bool
func (obj *requestClearLatency) HasEnableTxRxSync() bool {
	return obj.obj.EnableTxRxSync != nil
}

// description is TBD
// SetEnableTxRxSync sets the bool value in the RequestClearLatency object
func (obj *requestClearLatency) SetEnableTxRxSync(value bool) RequestClearLatency {

	obj.obj.EnableTxRxSync = &value
	return obj
}

func (obj *requestClearLatency) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

}

func (obj *requestClearLatency) setDefault() {

}

// ***** RequestClearLatencyForSelectedPGIDs *****
type requestClearLatencyForSelectedPGIDs struct {
	validation
	obj              *otg.RequestClearLatencyForSelectedPGIDs
	portIdHolder     IdTypePortId
	pgidRangesHolder PacketGroupPGIDRangeList
}

func NewRequestClearLatencyForSelectedPGIDs() RequestClearLatencyForSelectedPGIDs {
	obj := requestClearLatencyForSelectedPGIDs{obj: &otg.RequestClearLatencyForSelectedPGIDs{}}
	obj.setDefault()
	return &obj
}

func (obj *requestClearLatencyForSelectedPGIDs) Msg() *otg.RequestClearLatencyForSelectedPGIDs {
	return obj.obj
}

func (obj *requestClearLatencyForSelectedPGIDs) SetMsg(msg *otg.RequestClearLatencyForSelectedPGIDs) RequestClearLatencyForSelectedPGIDs {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestClearLatencyForSelectedPGIDs) ToProto() (*otg.RequestClearLatencyForSelectedPGIDs, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestClearLatencyForSelectedPGIDs) FromProto(msg *otg.RequestClearLatencyForSelectedPGIDs) (RequestClearLatencyForSelectedPGIDs, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestClearLatencyForSelectedPGIDs) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestClearLatencyForSelectedPGIDs) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestClearLatencyForSelectedPGIDs) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestClearLatencyForSelectedPGIDs) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestClearLatencyForSelectedPGIDs) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestClearLatencyForSelectedPGIDs) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestClearLatencyForSelectedPGIDs) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestClearLatencyForSelectedPGIDs) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestClearLatencyForSelectedPGIDs) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestClearLatencyForSelectedPGIDs) Clone() (RequestClearLatencyForSelectedPGIDs, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestClearLatencyForSelectedPGIDs()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestClearLatencyForSelectedPGIDs) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestClearLatencyForSelectedPGIDs) setNil() {
	obj.portIdHolder = nil
	obj.pgidRangesHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestClearLatencyForSelectedPGIDs is description is TBD
type RequestClearLatencyForSelectedPGIDs interface {
	Validation
	// Msg marshals RequestClearLatencyForSelectedPGIDs to protobuf object *otg.RequestClearLatencyForSelectedPGIDs
	// and doesn't set defaults
	Msg() *otg.RequestClearLatencyForSelectedPGIDs
	// SetMsg unmarshals RequestClearLatencyForSelectedPGIDs from protobuf object *otg.RequestClearLatencyForSelectedPGIDs
	// and doesn't set defaults
	SetMsg(*otg.RequestClearLatencyForSelectedPGIDs) RequestClearLatencyForSelectedPGIDs
	// ToProto marshals RequestClearLatencyForSelectedPGIDs to protobuf object *otg.RequestClearLatencyForSelectedPGIDs
	ToProto() (*otg.RequestClearLatencyForSelectedPGIDs, error)
	// ToPbText marshals RequestClearLatencyForSelectedPGIDs to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestClearLatencyForSelectedPGIDs to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestClearLatencyForSelectedPGIDs to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestClearLatencyForSelectedPGIDs from protobuf object *otg.RequestClearLatencyForSelectedPGIDs
	FromProto(msg *otg.RequestClearLatencyForSelectedPGIDs) (RequestClearLatencyForSelectedPGIDs, error)
	// FromPbText unmarshals RequestClearLatencyForSelectedPGIDs from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestClearLatencyForSelectedPGIDs from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestClearLatencyForSelectedPGIDs from JSON text
	FromJson(value string) error
	// Validate validates RequestClearLatencyForSelectedPGIDs
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestClearLatencyForSelectedPGIDs, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestClearLatencyForSelectedPGIDs.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestClearLatencyForSelectedPGIDs.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestClearLatencyForSelectedPGIDs
	// HasPortId checks if PortId has been set in RequestClearLatencyForSelectedPGIDs
	HasPortId() bool
	// PgidRanges returns PacketGroupPGIDRangeList, set in RequestClearLatencyForSelectedPGIDs.
	// PacketGroupPGIDRangeList is tBD
	PgidRanges() PacketGroupPGIDRangeList
	// SetPgidRanges assigns PacketGroupPGIDRangeList provided by user to RequestClearLatencyForSelectedPGIDs.
	// PacketGroupPGIDRangeList is tBD
	SetPgidRanges(value PacketGroupPGIDRangeList) RequestClearLatencyForSelectedPGIDs
	// HasPgidRanges checks if PgidRanges has been set in RequestClearLatencyForSelectedPGIDs
	HasPgidRanges() bool
	// EnableTxRxSync returns bool, set in RequestClearLatencyForSelectedPGIDs.
	EnableTxRxSync() bool
	// SetEnableTxRxSync assigns bool provided by user to RequestClearLatencyForSelectedPGIDs
	SetEnableTxRxSync(value bool) RequestClearLatencyForSelectedPGIDs
	// HasEnableTxRxSync checks if EnableTxRxSync has been set in RequestClearLatencyForSelectedPGIDs
	HasEnableTxRxSync() bool
	setNil()
}

func (obj *requestClearLatencyForSelectedPGIDs) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "ClearLatencyForSelectedPGIDs"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasPgidRanges() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PgidRanges",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.PacketGroup+PGIDRangeList",
		}

		err := obj.PgidRanges().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasEnableTxRxSync() {
		var value string
		if obj.EnableTxRxSync() {
			value = "1"
		} else {
			value = "0"
		}

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "EnableTxRxSync",
			Type:      "bool",
			Value:     value,
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestClearLatencyForSelectedPGIDs) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestClearLatencyForSelectedPGIDs) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestClearLatencyForSelectedPGIDs) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestClearLatencyForSelectedPGIDs object
func (obj *requestClearLatencyForSelectedPGIDs) SetPortId(value IdTypePortId) RequestClearLatencyForSelectedPGIDs {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// PgidRanges returns a PacketGroupPGIDRangeList
func (obj *requestClearLatencyForSelectedPGIDs) PgidRanges() PacketGroupPGIDRangeList {
	if obj.obj.PgidRanges == nil {
		obj.obj.PgidRanges = NewPacketGroupPGIDRangeList().Msg()
	}
	if obj.pgidRangesHolder == nil {
		obj.pgidRangesHolder = &packetGroupPGIDRangeList{obj: obj.obj.PgidRanges}
	}
	return obj.pgidRangesHolder
}

// description is TBD
// PgidRanges returns a PacketGroupPGIDRangeList
func (obj *requestClearLatencyForSelectedPGIDs) HasPgidRanges() bool {
	return obj.obj.PgidRanges != nil
}

// description is TBD
// SetPgidRanges sets the PacketGroupPGIDRangeList value in the RequestClearLatencyForSelectedPGIDs object
func (obj *requestClearLatencyForSelectedPGIDs) SetPgidRanges(value PacketGroupPGIDRangeList) RequestClearLatencyForSelectedPGIDs {

	obj.pgidRangesHolder = nil
	obj.obj.PgidRanges = value.Msg()

	return obj
}

// description is TBD
// EnableTxRxSync returns a bool
func (obj *requestClearLatencyForSelectedPGIDs) EnableTxRxSync() bool {

	return *obj.obj.EnableTxRxSync

}

// description is TBD
// EnableTxRxSync returns a bool
func (obj *requestClearLatencyForSelectedPGIDs) HasEnableTxRxSync() bool {
	return obj.obj.EnableTxRxSync != nil
}

// description is TBD
// SetEnableTxRxSync sets the bool value in the RequestClearLatencyForSelectedPGIDs object
func (obj *requestClearLatencyForSelectedPGIDs) SetEnableTxRxSync(value bool) RequestClearLatencyForSelectedPGIDs {

	obj.obj.EnableTxRxSync = &value
	return obj
}

func (obj *requestClearLatencyForSelectedPGIDs) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.PgidRanges != nil {

		obj.PgidRanges().validateObj(vObj, set_default)
	}

}

func (obj *requestClearLatencyForSelectedPGIDs) setDefault() {

}

// ***** RequestClearTimestamp *****
type requestClearTimestamp struct {
	validation
	obj          *otg.RequestClearTimestamp
	portIdHolder IdTypePortId
}

func NewRequestClearTimestamp() RequestClearTimestamp {
	obj := requestClearTimestamp{obj: &otg.RequestClearTimestamp{}}
	obj.setDefault()
	return &obj
}

func (obj *requestClearTimestamp) Msg() *otg.RequestClearTimestamp {
	return obj.obj
}

func (obj *requestClearTimestamp) SetMsg(msg *otg.RequestClearTimestamp) RequestClearTimestamp {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestClearTimestamp) ToProto() (*otg.RequestClearTimestamp, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestClearTimestamp) FromProto(msg *otg.RequestClearTimestamp) (RequestClearTimestamp, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestClearTimestamp) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestClearTimestamp) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestClearTimestamp) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestClearTimestamp) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestClearTimestamp) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestClearTimestamp) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestClearTimestamp) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestClearTimestamp) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestClearTimestamp) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestClearTimestamp) Clone() (RequestClearTimestamp, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestClearTimestamp()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestClearTimestamp) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestClearTimestamp) setNil() {
	obj.portIdHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestClearTimestamp is description is TBD
type RequestClearTimestamp interface {
	Validation
	// Msg marshals RequestClearTimestamp to protobuf object *otg.RequestClearTimestamp
	// and doesn't set defaults
	Msg() *otg.RequestClearTimestamp
	// SetMsg unmarshals RequestClearTimestamp from protobuf object *otg.RequestClearTimestamp
	// and doesn't set defaults
	SetMsg(*otg.RequestClearTimestamp) RequestClearTimestamp
	// ToProto marshals RequestClearTimestamp to protobuf object *otg.RequestClearTimestamp
	ToProto() (*otg.RequestClearTimestamp, error)
	// ToPbText marshals RequestClearTimestamp to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestClearTimestamp to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestClearTimestamp to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestClearTimestamp from protobuf object *otg.RequestClearTimestamp
	FromProto(msg *otg.RequestClearTimestamp) (RequestClearTimestamp, error)
	// FromPbText unmarshals RequestClearTimestamp from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestClearTimestamp from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestClearTimestamp from JSON text
	FromJson(value string) error
	// Validate validates RequestClearTimestamp
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestClearTimestamp, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestClearTimestamp.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestClearTimestamp.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestClearTimestamp
	// HasPortId checks if PortId has been set in RequestClearTimestamp
	HasPortId() bool
	setNil()
}

func (obj *requestClearTimestamp) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "ClearTimestamp"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestClearTimestamp) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestClearTimestamp) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestClearTimestamp) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestClearTimestamp object
func (obj *requestClearTimestamp) SetPortId(value IdTypePortId) RequestClearTimestamp {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

func (obj *requestClearTimestamp) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

}

func (obj *requestClearTimestamp) setDefault() {

}

// ***** RequestSetRxLatency *****
type requestSetRxLatency struct {
	validation
	obj                   *otg.RequestSetRxLatency
	portIdHolder          IdTypePortId
	rxLatencyConfigHolder PortReceiveConfigurationType
}

func NewRequestSetRxLatency() RequestSetRxLatency {
	obj := requestSetRxLatency{obj: &otg.RequestSetRxLatency{}}
	obj.setDefault()
	return &obj
}

func (obj *requestSetRxLatency) Msg() *otg.RequestSetRxLatency {
	return obj.obj
}

func (obj *requestSetRxLatency) SetMsg(msg *otg.RequestSetRxLatency) RequestSetRxLatency {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestSetRxLatency) ToProto() (*otg.RequestSetRxLatency, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestSetRxLatency) FromProto(msg *otg.RequestSetRxLatency) (RequestSetRxLatency, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestSetRxLatency) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestSetRxLatency) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestSetRxLatency) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestSetRxLatency) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestSetRxLatency) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestSetRxLatency) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestSetRxLatency) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestSetRxLatency) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestSetRxLatency) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestSetRxLatency) Clone() (RequestSetRxLatency, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestSetRxLatency()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestSetRxLatency) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestSetRxLatency) setNil() {
	obj.portIdHolder = nil
	obj.rxLatencyConfigHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestSetRxLatency is description is TBD
type RequestSetRxLatency interface {
	Validation
	// Msg marshals RequestSetRxLatency to protobuf object *otg.RequestSetRxLatency
	// and doesn't set defaults
	Msg() *otg.RequestSetRxLatency
	// SetMsg unmarshals RequestSetRxLatency from protobuf object *otg.RequestSetRxLatency
	// and doesn't set defaults
	SetMsg(*otg.RequestSetRxLatency) RequestSetRxLatency
	// ToProto marshals RequestSetRxLatency to protobuf object *otg.RequestSetRxLatency
	ToProto() (*otg.RequestSetRxLatency, error)
	// ToPbText marshals RequestSetRxLatency to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestSetRxLatency to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestSetRxLatency to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestSetRxLatency from protobuf object *otg.RequestSetRxLatency
	FromProto(msg *otg.RequestSetRxLatency) (RequestSetRxLatency, error)
	// FromPbText unmarshals RequestSetRxLatency from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestSetRxLatency from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestSetRxLatency from JSON text
	FromJson(value string) error
	// Validate validates RequestSetRxLatency
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestSetRxLatency, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestSetRxLatency.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestSetRxLatency.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestSetRxLatency
	// HasPortId checks if PortId has been set in RequestSetRxLatency
	HasPortId() bool
	// RxLatencyConfig returns PortReceiveConfigurationType, set in RequestSetRxLatency.
	// PortReceiveConfigurationType is tBD
	RxLatencyConfig() PortReceiveConfigurationType
	// SetRxLatencyConfig assigns PortReceiveConfigurationType provided by user to RequestSetRxLatency.
	// PortReceiveConfigurationType is tBD
	SetRxLatencyConfig(value PortReceiveConfigurationType) RequestSetRxLatency
	// HasRxLatencyConfig checks if RxLatencyConfig has been set in RequestSetRxLatency
	HasRxLatencyConfig() bool
	setNil()
}

func (obj *requestSetRxLatency) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "SetRxLatency"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasRxLatencyConfig() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "RxLatencyConfig",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Port+ReceiveConfigurationType",
		}

		err := obj.RxLatencyConfig().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestSetRxLatency) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestSetRxLatency) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestSetRxLatency) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestSetRxLatency object
func (obj *requestSetRxLatency) SetPortId(value IdTypePortId) RequestSetRxLatency {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// RxLatencyConfig returns a PortReceiveConfigurationType
func (obj *requestSetRxLatency) RxLatencyConfig() PortReceiveConfigurationType {
	if obj.obj.RxLatencyConfig == nil {
		obj.obj.RxLatencyConfig = NewPortReceiveConfigurationType().Msg()
	}
	if obj.rxLatencyConfigHolder == nil {
		obj.rxLatencyConfigHolder = &portReceiveConfigurationType{obj: obj.obj.RxLatencyConfig}
	}
	return obj.rxLatencyConfigHolder
}

// description is TBD
// RxLatencyConfig returns a PortReceiveConfigurationType
func (obj *requestSetRxLatency) HasRxLatencyConfig() bool {
	return obj.obj.RxLatencyConfig != nil
}

// description is TBD
// SetRxLatencyConfig sets the PortReceiveConfigurationType value in the RequestSetRxLatency object
func (obj *requestSetRxLatency) SetRxLatencyConfig(value PortReceiveConfigurationType) RequestSetRxLatency {

	obj.rxLatencyConfigHolder = nil
	obj.obj.RxLatencyConfig = value.Msg()

	return obj
}

func (obj *requestSetRxLatency) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.RxLatencyConfig != nil {

		obj.RxLatencyConfig().validateObj(vObj, set_default)
	}

}

func (obj *requestSetRxLatency) setDefault() {

}

// ***** RequestSetTxRxSyncInterval *****
type requestSetTxRxSyncInterval struct {
	validation
	obj                          *otg.RequestSetTxRxSyncInterval
	portIdHolder                 IdTypePortId
	txRxSyncIntervalConfigHolder PortTxRxSyncIntervalConfigurationType
}

func NewRequestSetTxRxSyncInterval() RequestSetTxRxSyncInterval {
	obj := requestSetTxRxSyncInterval{obj: &otg.RequestSetTxRxSyncInterval{}}
	obj.setDefault()
	return &obj
}

func (obj *requestSetTxRxSyncInterval) Msg() *otg.RequestSetTxRxSyncInterval {
	return obj.obj
}

func (obj *requestSetTxRxSyncInterval) SetMsg(msg *otg.RequestSetTxRxSyncInterval) RequestSetTxRxSyncInterval {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestSetTxRxSyncInterval) ToProto() (*otg.RequestSetTxRxSyncInterval, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestSetTxRxSyncInterval) FromProto(msg *otg.RequestSetTxRxSyncInterval) (RequestSetTxRxSyncInterval, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestSetTxRxSyncInterval) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestSetTxRxSyncInterval) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestSetTxRxSyncInterval) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestSetTxRxSyncInterval) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestSetTxRxSyncInterval) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestSetTxRxSyncInterval) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestSetTxRxSyncInterval) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestSetTxRxSyncInterval) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestSetTxRxSyncInterval) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestSetTxRxSyncInterval) Clone() (RequestSetTxRxSyncInterval, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestSetTxRxSyncInterval()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestSetTxRxSyncInterval) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestSetTxRxSyncInterval) setNil() {
	obj.portIdHolder = nil
	obj.txRxSyncIntervalConfigHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestSetTxRxSyncInterval is description is TBD
type RequestSetTxRxSyncInterval interface {
	Validation
	// Msg marshals RequestSetTxRxSyncInterval to protobuf object *otg.RequestSetTxRxSyncInterval
	// and doesn't set defaults
	Msg() *otg.RequestSetTxRxSyncInterval
	// SetMsg unmarshals RequestSetTxRxSyncInterval from protobuf object *otg.RequestSetTxRxSyncInterval
	// and doesn't set defaults
	SetMsg(*otg.RequestSetTxRxSyncInterval) RequestSetTxRxSyncInterval
	// ToProto marshals RequestSetTxRxSyncInterval to protobuf object *otg.RequestSetTxRxSyncInterval
	ToProto() (*otg.RequestSetTxRxSyncInterval, error)
	// ToPbText marshals RequestSetTxRxSyncInterval to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestSetTxRxSyncInterval to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestSetTxRxSyncInterval to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestSetTxRxSyncInterval from protobuf object *otg.RequestSetTxRxSyncInterval
	FromProto(msg *otg.RequestSetTxRxSyncInterval) (RequestSetTxRxSyncInterval, error)
	// FromPbText unmarshals RequestSetTxRxSyncInterval from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestSetTxRxSyncInterval from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestSetTxRxSyncInterval from JSON text
	FromJson(value string) error
	// Validate validates RequestSetTxRxSyncInterval
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestSetTxRxSyncInterval, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestSetTxRxSyncInterval.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestSetTxRxSyncInterval.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestSetTxRxSyncInterval
	// HasPortId checks if PortId has been set in RequestSetTxRxSyncInterval
	HasPortId() bool
	// TxRxSyncIntervalConfig returns PortTxRxSyncIntervalConfigurationType, set in RequestSetTxRxSyncInterval.
	// PortTxRxSyncIntervalConfigurationType is tBD
	TxRxSyncIntervalConfig() PortTxRxSyncIntervalConfigurationType
	// SetTxRxSyncIntervalConfig assigns PortTxRxSyncIntervalConfigurationType provided by user to RequestSetTxRxSyncInterval.
	// PortTxRxSyncIntervalConfigurationType is tBD
	SetTxRxSyncIntervalConfig(value PortTxRxSyncIntervalConfigurationType) RequestSetTxRxSyncInterval
	// HasTxRxSyncIntervalConfig checks if TxRxSyncIntervalConfig has been set in RequestSetTxRxSyncInterval
	HasTxRxSyncIntervalConfig() bool
	setNil()
}

func (obj *requestSetTxRxSyncInterval) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "SetTxRxSyncInterval"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasTxRxSyncIntervalConfig() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "TxRxSyncIntervalConfig",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Port+TxRxSyncIntervalConfigurationType",
		}

		err := obj.TxRxSyncIntervalConfig().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestSetTxRxSyncInterval) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestSetTxRxSyncInterval) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestSetTxRxSyncInterval) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestSetTxRxSyncInterval object
func (obj *requestSetTxRxSyncInterval) SetPortId(value IdTypePortId) RequestSetTxRxSyncInterval {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// TxRxSyncIntervalConfig returns a PortTxRxSyncIntervalConfigurationType
func (obj *requestSetTxRxSyncInterval) TxRxSyncIntervalConfig() PortTxRxSyncIntervalConfigurationType {
	if obj.obj.TxRxSyncIntervalConfig == nil {
		obj.obj.TxRxSyncIntervalConfig = NewPortTxRxSyncIntervalConfigurationType().Msg()
	}
	if obj.txRxSyncIntervalConfigHolder == nil {
		obj.txRxSyncIntervalConfigHolder = &portTxRxSyncIntervalConfigurationType{obj: obj.obj.TxRxSyncIntervalConfig}
	}
	return obj.txRxSyncIntervalConfigHolder
}

// description is TBD
// TxRxSyncIntervalConfig returns a PortTxRxSyncIntervalConfigurationType
func (obj *requestSetTxRxSyncInterval) HasTxRxSyncIntervalConfig() bool {
	return obj.obj.TxRxSyncIntervalConfig != nil
}

// description is TBD
// SetTxRxSyncIntervalConfig sets the PortTxRxSyncIntervalConfigurationType value in the RequestSetTxRxSyncInterval object
func (obj *requestSetTxRxSyncInterval) SetTxRxSyncIntervalConfig(value PortTxRxSyncIntervalConfigurationType) RequestSetTxRxSyncInterval {

	obj.txRxSyncIntervalConfigHolder = nil
	obj.obj.TxRxSyncIntervalConfig = value.Msg()

	return obj
}

func (obj *requestSetTxRxSyncInterval) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.TxRxSyncIntervalConfig != nil {

		obj.TxRxSyncIntervalConfig().validateObj(vObj, set_default)
	}

}

func (obj *requestSetTxRxSyncInterval) setDefault() {

}

// ***** RequestConfigurePCPUFilters *****
type requestConfigurePCPUFilters struct {
	validation
	obj                     *otg.RequestConfigurePCPUFilters
	portIdHolder            IdTypePortId
	pcpuFiltersConfigHolder PortPCPUFiltersConfigurationType
}

func NewRequestConfigurePCPUFilters() RequestConfigurePCPUFilters {
	obj := requestConfigurePCPUFilters{obj: &otg.RequestConfigurePCPUFilters{}}
	obj.setDefault()
	return &obj
}

func (obj *requestConfigurePCPUFilters) Msg() *otg.RequestConfigurePCPUFilters {
	return obj.obj
}

func (obj *requestConfigurePCPUFilters) SetMsg(msg *otg.RequestConfigurePCPUFilters) RequestConfigurePCPUFilters {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestConfigurePCPUFilters) ToProto() (*otg.RequestConfigurePCPUFilters, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestConfigurePCPUFilters) FromProto(msg *otg.RequestConfigurePCPUFilters) (RequestConfigurePCPUFilters, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestConfigurePCPUFilters) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestConfigurePCPUFilters) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestConfigurePCPUFilters) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestConfigurePCPUFilters) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestConfigurePCPUFilters) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestConfigurePCPUFilters) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestConfigurePCPUFilters) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestConfigurePCPUFilters) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestConfigurePCPUFilters) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestConfigurePCPUFilters) Clone() (RequestConfigurePCPUFilters, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestConfigurePCPUFilters()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestConfigurePCPUFilters) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestConfigurePCPUFilters) setNil() {
	obj.portIdHolder = nil
	obj.pcpuFiltersConfigHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestConfigurePCPUFilters is description is TBD
type RequestConfigurePCPUFilters interface {
	Validation
	// Msg marshals RequestConfigurePCPUFilters to protobuf object *otg.RequestConfigurePCPUFilters
	// and doesn't set defaults
	Msg() *otg.RequestConfigurePCPUFilters
	// SetMsg unmarshals RequestConfigurePCPUFilters from protobuf object *otg.RequestConfigurePCPUFilters
	// and doesn't set defaults
	SetMsg(*otg.RequestConfigurePCPUFilters) RequestConfigurePCPUFilters
	// ToProto marshals RequestConfigurePCPUFilters to protobuf object *otg.RequestConfigurePCPUFilters
	ToProto() (*otg.RequestConfigurePCPUFilters, error)
	// ToPbText marshals RequestConfigurePCPUFilters to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestConfigurePCPUFilters to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestConfigurePCPUFilters to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestConfigurePCPUFilters from protobuf object *otg.RequestConfigurePCPUFilters
	FromProto(msg *otg.RequestConfigurePCPUFilters) (RequestConfigurePCPUFilters, error)
	// FromPbText unmarshals RequestConfigurePCPUFilters from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestConfigurePCPUFilters from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestConfigurePCPUFilters from JSON text
	FromJson(value string) error
	// Validate validates RequestConfigurePCPUFilters
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestConfigurePCPUFilters, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestConfigurePCPUFilters.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestConfigurePCPUFilters.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestConfigurePCPUFilters
	// HasPortId checks if PortId has been set in RequestConfigurePCPUFilters
	HasPortId() bool
	// PcpuFiltersConfig returns PortPCPUFiltersConfigurationType, set in RequestConfigurePCPUFilters.
	// PortPCPUFiltersConfigurationType is tBD
	PcpuFiltersConfig() PortPCPUFiltersConfigurationType
	// SetPcpuFiltersConfig assigns PortPCPUFiltersConfigurationType provided by user to RequestConfigurePCPUFilters.
	// PortPCPUFiltersConfigurationType is tBD
	SetPcpuFiltersConfig(value PortPCPUFiltersConfigurationType) RequestConfigurePCPUFilters
	// HasPcpuFiltersConfig checks if PcpuFiltersConfig has been set in RequestConfigurePCPUFilters
	HasPcpuFiltersConfig() bool
	setNil()
}

func (obj *requestConfigurePCPUFilters) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "ConfigurePCPUFilters"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasPcpuFiltersConfig() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PcpuFiltersConfig",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Port+PCPUFiltersConfigurationType",
		}

		err := obj.PcpuFiltersConfig().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestConfigurePCPUFilters) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestConfigurePCPUFilters) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestConfigurePCPUFilters) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestConfigurePCPUFilters object
func (obj *requestConfigurePCPUFilters) SetPortId(value IdTypePortId) RequestConfigurePCPUFilters {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// PcpuFiltersConfig returns a PortPCPUFiltersConfigurationType
func (obj *requestConfigurePCPUFilters) PcpuFiltersConfig() PortPCPUFiltersConfigurationType {
	if obj.obj.PcpuFiltersConfig == nil {
		obj.obj.PcpuFiltersConfig = NewPortPCPUFiltersConfigurationType().Msg()
	}
	if obj.pcpuFiltersConfigHolder == nil {
		obj.pcpuFiltersConfigHolder = &portPCPUFiltersConfigurationType{obj: obj.obj.PcpuFiltersConfig}
	}
	return obj.pcpuFiltersConfigHolder
}

// description is TBD
// PcpuFiltersConfig returns a PortPCPUFiltersConfigurationType
func (obj *requestConfigurePCPUFilters) HasPcpuFiltersConfig() bool {
	return obj.obj.PcpuFiltersConfig != nil
}

// description is TBD
// SetPcpuFiltersConfig sets the PortPCPUFiltersConfigurationType value in the RequestConfigurePCPUFilters object
func (obj *requestConfigurePCPUFilters) SetPcpuFiltersConfig(value PortPCPUFiltersConfigurationType) RequestConfigurePCPUFilters {

	obj.pcpuFiltersConfigHolder = nil
	obj.obj.PcpuFiltersConfig = value.Msg()

	return obj
}

func (obj *requestConfigurePCPUFilters) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.PcpuFiltersConfig != nil {

		obj.PcpuFiltersConfig().validateObj(vObj, set_default)
	}

}

func (obj *requestConfigurePCPUFilters) setDefault() {

}

// ***** RequestsetNTPMasterOnNTPClient *****
type requestsetNTPMasterOnNTPClient struct {
	validation
	obj *otg.RequestsetNTPMasterOnNTPClient
}

func NewRequestsetNTPMasterOnNTPClient() RequestsetNTPMasterOnNTPClient {
	obj := requestsetNTPMasterOnNTPClient{obj: &otg.RequestsetNTPMasterOnNTPClient{}}
	obj.setDefault()
	return &obj
}

func (obj *requestsetNTPMasterOnNTPClient) Msg() *otg.RequestsetNTPMasterOnNTPClient {
	return obj.obj
}

func (obj *requestsetNTPMasterOnNTPClient) SetMsg(msg *otg.RequestsetNTPMasterOnNTPClient) RequestsetNTPMasterOnNTPClient {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestsetNTPMasterOnNTPClient) ToProto() (*otg.RequestsetNTPMasterOnNTPClient, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestsetNTPMasterOnNTPClient) FromProto(msg *otg.RequestsetNTPMasterOnNTPClient) (RequestsetNTPMasterOnNTPClient, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestsetNTPMasterOnNTPClient) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestsetNTPMasterOnNTPClient) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestsetNTPMasterOnNTPClient) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestsetNTPMasterOnNTPClient) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestsetNTPMasterOnNTPClient) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestsetNTPMasterOnNTPClient) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestsetNTPMasterOnNTPClient) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestsetNTPMasterOnNTPClient) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestsetNTPMasterOnNTPClient) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestsetNTPMasterOnNTPClient) Clone() (RequestsetNTPMasterOnNTPClient, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestsetNTPMasterOnNTPClient()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestsetNTPMasterOnNTPClient) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

// RequestsetNTPMasterOnNTPClient is description is TBD
type RequestsetNTPMasterOnNTPClient interface {
	Validation
	// Msg marshals RequestsetNTPMasterOnNTPClient to protobuf object *otg.RequestsetNTPMasterOnNTPClient
	// and doesn't set defaults
	Msg() *otg.RequestsetNTPMasterOnNTPClient
	// SetMsg unmarshals RequestsetNTPMasterOnNTPClient from protobuf object *otg.RequestsetNTPMasterOnNTPClient
	// and doesn't set defaults
	SetMsg(*otg.RequestsetNTPMasterOnNTPClient) RequestsetNTPMasterOnNTPClient
	// ToProto marshals RequestsetNTPMasterOnNTPClient to protobuf object *otg.RequestsetNTPMasterOnNTPClient
	ToProto() (*otg.RequestsetNTPMasterOnNTPClient, error)
	// ToPbText marshals RequestsetNTPMasterOnNTPClient to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestsetNTPMasterOnNTPClient to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestsetNTPMasterOnNTPClient to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestsetNTPMasterOnNTPClient from protobuf object *otg.RequestsetNTPMasterOnNTPClient
	FromProto(msg *otg.RequestsetNTPMasterOnNTPClient) (RequestsetNTPMasterOnNTPClient, error)
	// FromPbText unmarshals RequestsetNTPMasterOnNTPClient from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestsetNTPMasterOnNTPClient from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestsetNTPMasterOnNTPClient from JSON text
	FromJson(value string) error
	// Validate validates RequestsetNTPMasterOnNTPClient
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestsetNTPMasterOnNTPClient, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// NtpServer returns string, set in RequestsetNTPMasterOnNTPClient.
	NtpServer() string
	// SetNtpServer assigns string provided by user to RequestsetNTPMasterOnNTPClient
	SetNtpServer(value string) RequestsetNTPMasterOnNTPClient
	// HasNtpServer checks if NtpServer has been set in RequestsetNTPMasterOnNTPClient
	HasNtpServer() bool
}

func (obj *requestsetNTPMasterOnNTPClient) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "setNTPMasterOnNTPClient"
	args := []Argument{}

	if obj.HasNtpServer() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "NtpServer",
			Type:      "string",
			Value:     obj.NtpServer(),
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestsetNTPMasterOnNTPClient) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// NtpServer returns a string
func (obj *requestsetNTPMasterOnNTPClient) NtpServer() string {

	return *obj.obj.NtpServer

}

// description is TBD
// NtpServer returns a string
func (obj *requestsetNTPMasterOnNTPClient) HasNtpServer() bool {
	return obj.obj.NtpServer != nil
}

// description is TBD
// SetNtpServer sets the string value in the RequestsetNTPMasterOnNTPClient object
func (obj *requestsetNTPMasterOnNTPClient) SetNtpServer(value string) RequestsetNTPMasterOnNTPClient {

	obj.obj.NtpServer = &value
	return obj
}

func (obj *requestsetNTPMasterOnNTPClient) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *requestsetNTPMasterOnNTPClient) setDefault() {

}

// ***** RequestArmPulse *****
type requestArmPulse struct {
	validation
	obj                *otg.RequestArmPulse
	portIdHolder       IdTypePortId
	pulseActionsHolder ServerPulseActionList
}

func NewRequestArmPulse() RequestArmPulse {
	obj := requestArmPulse{obj: &otg.RequestArmPulse{}}
	obj.setDefault()
	return &obj
}

func (obj *requestArmPulse) Msg() *otg.RequestArmPulse {
	return obj.obj
}

func (obj *requestArmPulse) SetMsg(msg *otg.RequestArmPulse) RequestArmPulse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestArmPulse) ToProto() (*otg.RequestArmPulse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestArmPulse) FromProto(msg *otg.RequestArmPulse) (RequestArmPulse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestArmPulse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestArmPulse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestArmPulse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestArmPulse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestArmPulse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestArmPulse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestArmPulse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestArmPulse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestArmPulse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestArmPulse) Clone() (RequestArmPulse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestArmPulse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestArmPulse) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestArmPulse) setNil() {
	obj.portIdHolder = nil
	obj.pulseActionsHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestArmPulse is description is TBD
type RequestArmPulse interface {
	Validation
	// Msg marshals RequestArmPulse to protobuf object *otg.RequestArmPulse
	// and doesn't set defaults
	Msg() *otg.RequestArmPulse
	// SetMsg unmarshals RequestArmPulse from protobuf object *otg.RequestArmPulse
	// and doesn't set defaults
	SetMsg(*otg.RequestArmPulse) RequestArmPulse
	// ToProto marshals RequestArmPulse to protobuf object *otg.RequestArmPulse
	ToProto() (*otg.RequestArmPulse, error)
	// ToPbText marshals RequestArmPulse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestArmPulse to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestArmPulse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestArmPulse from protobuf object *otg.RequestArmPulse
	FromProto(msg *otg.RequestArmPulse) (RequestArmPulse, error)
	// FromPbText unmarshals RequestArmPulse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestArmPulse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestArmPulse from JSON text
	FromJson(value string) error
	// Validate validates RequestArmPulse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestArmPulse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestArmPulse.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestArmPulse.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestArmPulse
	// HasPortId checks if PortId has been set in RequestArmPulse
	HasPortId() bool
	// PulseActions returns ServerPulseActionList, set in RequestArmPulse.
	// ServerPulseActionList is tBD
	PulseActions() ServerPulseActionList
	// SetPulseActions assigns ServerPulseActionList provided by user to RequestArmPulse.
	// ServerPulseActionList is tBD
	SetPulseActions(value ServerPulseActionList) RequestArmPulse
	// HasPulseActions checks if PulseActions has been set in RequestArmPulse
	HasPulseActions() bool
	setNil()
}

func (obj *requestArmPulse) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "ArmPulse"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasPulseActions() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PulseActions",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Server+PulseActionList",
		}

		err := obj.PulseActions().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestArmPulse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestArmPulse) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestArmPulse) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestArmPulse object
func (obj *requestArmPulse) SetPortId(value IdTypePortId) RequestArmPulse {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// PulseActions returns a ServerPulseActionList
func (obj *requestArmPulse) PulseActions() ServerPulseActionList {
	if obj.obj.PulseActions == nil {
		obj.obj.PulseActions = NewServerPulseActionList().Msg()
	}
	if obj.pulseActionsHolder == nil {
		obj.pulseActionsHolder = &serverPulseActionList{obj: obj.obj.PulseActions}
	}
	return obj.pulseActionsHolder
}

// description is TBD
// PulseActions returns a ServerPulseActionList
func (obj *requestArmPulse) HasPulseActions() bool {
	return obj.obj.PulseActions != nil
}

// description is TBD
// SetPulseActions sets the ServerPulseActionList value in the RequestArmPulse object
func (obj *requestArmPulse) SetPulseActions(value ServerPulseActionList) RequestArmPulse {

	obj.pulseActionsHolder = nil
	obj.obj.PulseActions = value.Msg()

	return obj
}

func (obj *requestArmPulse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.PulseActions != nil {

		obj.PulseActions().validateObj(vObj, set_default)
	}

}

func (obj *requestArmPulse) setDefault() {

}

// ***** RequestUnlockPulse *****
type requestUnlockPulse struct {
	validation
	obj            *otg.RequestUnlockPulse
	generateHolder ServerePulseGenerator
	atHolder       PFTypeUTCTime
}

func NewRequestUnlockPulse() RequestUnlockPulse {
	obj := requestUnlockPulse{obj: &otg.RequestUnlockPulse{}}
	obj.setDefault()
	return &obj
}

func (obj *requestUnlockPulse) Msg() *otg.RequestUnlockPulse {
	return obj.obj
}

func (obj *requestUnlockPulse) SetMsg(msg *otg.RequestUnlockPulse) RequestUnlockPulse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestUnlockPulse) ToProto() (*otg.RequestUnlockPulse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestUnlockPulse) FromProto(msg *otg.RequestUnlockPulse) (RequestUnlockPulse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestUnlockPulse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestUnlockPulse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestUnlockPulse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestUnlockPulse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestUnlockPulse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestUnlockPulse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestUnlockPulse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestUnlockPulse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestUnlockPulse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestUnlockPulse) Clone() (RequestUnlockPulse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestUnlockPulse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestUnlockPulse) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestUnlockPulse) setNil() {
	obj.generateHolder = nil
	obj.atHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestUnlockPulse is description is TBD
type RequestUnlockPulse interface {
	Validation
	// Msg marshals RequestUnlockPulse to protobuf object *otg.RequestUnlockPulse
	// and doesn't set defaults
	Msg() *otg.RequestUnlockPulse
	// SetMsg unmarshals RequestUnlockPulse from protobuf object *otg.RequestUnlockPulse
	// and doesn't set defaults
	SetMsg(*otg.RequestUnlockPulse) RequestUnlockPulse
	// ToProto marshals RequestUnlockPulse to protobuf object *otg.RequestUnlockPulse
	ToProto() (*otg.RequestUnlockPulse, error)
	// ToPbText marshals RequestUnlockPulse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestUnlockPulse to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestUnlockPulse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestUnlockPulse from protobuf object *otg.RequestUnlockPulse
	FromProto(msg *otg.RequestUnlockPulse) (RequestUnlockPulse, error)
	// FromPbText unmarshals RequestUnlockPulse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestUnlockPulse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestUnlockPulse from JSON text
	FromJson(value string) error
	// Validate validates RequestUnlockPulse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestUnlockPulse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// Generate returns ServerePulseGenerator, set in RequestUnlockPulse.
	// ServerePulseGenerator is description is TBD
	Generate() ServerePulseGenerator
	// SetGenerate assigns ServerePulseGenerator provided by user to RequestUnlockPulse.
	// ServerePulseGenerator is description is TBD
	SetGenerate(value ServerePulseGenerator) RequestUnlockPulse
	// HasGenerate checks if Generate has been set in RequestUnlockPulse
	HasGenerate() bool
	// At returns PFTypeUTCTime, set in RequestUnlockPulse.
	// PFTypeUTCTime is model time using Posix Time (http://en.wikipedia.org/wiki/Unix_time) as the apparent number of seconds since 1970-01-01 00:00:00 +0000 (UTC). Note that this is unable to describe time during a leap second event. A value of zero, or a negative value, indicates an illegal time.
	At() PFTypeUTCTime
	// SetAt assigns PFTypeUTCTime provided by user to RequestUnlockPulse.
	// PFTypeUTCTime is model time using Posix Time (http://en.wikipedia.org/wiki/Unix_time) as the apparent number of seconds since 1970-01-01 00:00:00 +0000 (UTC). Note that this is unable to describe time during a leap second event. A value of zero, or a negative value, indicates an illegal time.
	SetAt(value PFTypeUTCTime) RequestUnlockPulse
	// HasAt checks if At has been set in RequestUnlockPulse
	HasAt() bool
	setNil()
}

func (obj *requestUnlockPulse) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "UnlockPulse"
	args := []Argument{}

	if obj.HasGenerate() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "Generate",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Server+ePulseGenerator",
		}

		err := obj.Generate().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasAt() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "At",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.PFType+UTCTime",
		}

		err := obj.At().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestUnlockPulse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Generate returns a ServerePulseGenerator
func (obj *requestUnlockPulse) Generate() ServerePulseGenerator {
	if obj.obj.Generate == nil {
		obj.obj.Generate = NewServerePulseGenerator().Msg()
	}
	if obj.generateHolder == nil {
		obj.generateHolder = &serverePulseGenerator{obj: obj.obj.Generate}
	}
	return obj.generateHolder
}

// description is TBD
// Generate returns a ServerePulseGenerator
func (obj *requestUnlockPulse) HasGenerate() bool {
	return obj.obj.Generate != nil
}

// description is TBD
// SetGenerate sets the ServerePulseGenerator value in the RequestUnlockPulse object
func (obj *requestUnlockPulse) SetGenerate(value ServerePulseGenerator) RequestUnlockPulse {

	obj.generateHolder = nil
	obj.obj.Generate = value.Msg()

	return obj
}

// description is TBD
// At returns a PFTypeUTCTime
func (obj *requestUnlockPulse) At() PFTypeUTCTime {
	if obj.obj.At == nil {
		obj.obj.At = NewPFTypeUTCTime().Msg()
	}
	if obj.atHolder == nil {
		obj.atHolder = &pFTypeUTCTime{obj: obj.obj.At}
	}
	return obj.atHolder
}

// description is TBD
// At returns a PFTypeUTCTime
func (obj *requestUnlockPulse) HasAt() bool {
	return obj.obj.At != nil
}

// description is TBD
// SetAt sets the PFTypeUTCTime value in the RequestUnlockPulse object
func (obj *requestUnlockPulse) SetAt(value PFTypeUTCTime) RequestUnlockPulse {

	obj.atHolder = nil
	obj.obj.At = value.Msg()

	return obj
}

func (obj *requestUnlockPulse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Generate != nil {

		obj.Generate().validateObj(vObj, set_default)
	}

	if obj.obj.At != nil {

		obj.At().validateObj(vObj, set_default)
	}

}

func (obj *requestUnlockPulse) setDefault() {

}

// ***** RequestGetTimedActionTimestamp *****
type requestGetTimedActionTimestamp struct {
	validation
	obj          *otg.RequestGetTimedActionTimestamp
	portIdHolder IdTypePortId
}

func NewRequestGetTimedActionTimestamp() RequestGetTimedActionTimestamp {
	obj := requestGetTimedActionTimestamp{obj: &otg.RequestGetTimedActionTimestamp{}}
	obj.setDefault()
	return &obj
}

func (obj *requestGetTimedActionTimestamp) Msg() *otg.RequestGetTimedActionTimestamp {
	return obj.obj
}

func (obj *requestGetTimedActionTimestamp) SetMsg(msg *otg.RequestGetTimedActionTimestamp) RequestGetTimedActionTimestamp {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestGetTimedActionTimestamp) ToProto() (*otg.RequestGetTimedActionTimestamp, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestGetTimedActionTimestamp) FromProto(msg *otg.RequestGetTimedActionTimestamp) (RequestGetTimedActionTimestamp, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestGetTimedActionTimestamp) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestGetTimedActionTimestamp) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestGetTimedActionTimestamp) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestGetTimedActionTimestamp) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestGetTimedActionTimestamp) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestGetTimedActionTimestamp) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestGetTimedActionTimestamp) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestGetTimedActionTimestamp) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestGetTimedActionTimestamp) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestGetTimedActionTimestamp) Clone() (RequestGetTimedActionTimestamp, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestGetTimedActionTimestamp()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestGetTimedActionTimestamp) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestGetTimedActionTimestamp) setNil() {
	obj.portIdHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestGetTimedActionTimestamp is description is TBD
type RequestGetTimedActionTimestamp interface {
	Validation
	// Msg marshals RequestGetTimedActionTimestamp to protobuf object *otg.RequestGetTimedActionTimestamp
	// and doesn't set defaults
	Msg() *otg.RequestGetTimedActionTimestamp
	// SetMsg unmarshals RequestGetTimedActionTimestamp from protobuf object *otg.RequestGetTimedActionTimestamp
	// and doesn't set defaults
	SetMsg(*otg.RequestGetTimedActionTimestamp) RequestGetTimedActionTimestamp
	// ToProto marshals RequestGetTimedActionTimestamp to protobuf object *otg.RequestGetTimedActionTimestamp
	ToProto() (*otg.RequestGetTimedActionTimestamp, error)
	// ToPbText marshals RequestGetTimedActionTimestamp to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestGetTimedActionTimestamp to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestGetTimedActionTimestamp to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestGetTimedActionTimestamp from protobuf object *otg.RequestGetTimedActionTimestamp
	FromProto(msg *otg.RequestGetTimedActionTimestamp) (RequestGetTimedActionTimestamp, error)
	// FromPbText unmarshals RequestGetTimedActionTimestamp from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestGetTimedActionTimestamp from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestGetTimedActionTimestamp from JSON text
	FromJson(value string) error
	// Validate validates RequestGetTimedActionTimestamp
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestGetTimedActionTimestamp, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestGetTimedActionTimestamp.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestGetTimedActionTimestamp.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestGetTimedActionTimestamp
	// HasPortId checks if PortId has been set in RequestGetTimedActionTimestamp
	HasPortId() bool
	setNil()
}

func (obj *requestGetTimedActionTimestamp) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "GetTimedActionTimestamp"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	argValue := Argument{
		Direction: ArgumentDirectionOut,
		Name:      "Value",
		Type:      "int64",
	}
	args = append(args, argValue)
	xObj.Argument = args
	return nil
}

func (obj *requestGetTimedActionTimestamp) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestGetTimedActionTimestamp) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestGetTimedActionTimestamp) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestGetTimedActionTimestamp object
func (obj *requestGetTimedActionTimestamp) SetPortId(value IdTypePortId) RequestGetTimedActionTimestamp {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

func (obj *requestGetTimedActionTimestamp) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

}

func (obj *requestGetTimedActionTimestamp) setDefault() {

}

// ***** RequestScheduleTimedActions *****
type requestScheduleTimedActions struct {
	validation
	obj              *otg.RequestScheduleTimedActions
	portIdHolder     IdTypePortId
	actionListHolder ServerTimedActionList
}

func NewRequestScheduleTimedActions() RequestScheduleTimedActions {
	obj := requestScheduleTimedActions{obj: &otg.RequestScheduleTimedActions{}}
	obj.setDefault()
	return &obj
}

func (obj *requestScheduleTimedActions) Msg() *otg.RequestScheduleTimedActions {
	return obj.obj
}

func (obj *requestScheduleTimedActions) SetMsg(msg *otg.RequestScheduleTimedActions) RequestScheduleTimedActions {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestScheduleTimedActions) ToProto() (*otg.RequestScheduleTimedActions, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestScheduleTimedActions) FromProto(msg *otg.RequestScheduleTimedActions) (RequestScheduleTimedActions, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestScheduleTimedActions) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestScheduleTimedActions) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestScheduleTimedActions) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestScheduleTimedActions) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestScheduleTimedActions) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestScheduleTimedActions) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestScheduleTimedActions) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestScheduleTimedActions) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestScheduleTimedActions) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestScheduleTimedActions) Clone() (RequestScheduleTimedActions, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestScheduleTimedActions()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestScheduleTimedActions) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestScheduleTimedActions) setNil() {
	obj.portIdHolder = nil
	obj.actionListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestScheduleTimedActions is description is TBD
type RequestScheduleTimedActions interface {
	Validation
	// Msg marshals RequestScheduleTimedActions to protobuf object *otg.RequestScheduleTimedActions
	// and doesn't set defaults
	Msg() *otg.RequestScheduleTimedActions
	// SetMsg unmarshals RequestScheduleTimedActions from protobuf object *otg.RequestScheduleTimedActions
	// and doesn't set defaults
	SetMsg(*otg.RequestScheduleTimedActions) RequestScheduleTimedActions
	// ToProto marshals RequestScheduleTimedActions to protobuf object *otg.RequestScheduleTimedActions
	ToProto() (*otg.RequestScheduleTimedActions, error)
	// ToPbText marshals RequestScheduleTimedActions to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestScheduleTimedActions to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestScheduleTimedActions to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestScheduleTimedActions from protobuf object *otg.RequestScheduleTimedActions
	FromProto(msg *otg.RequestScheduleTimedActions) (RequestScheduleTimedActions, error)
	// FromPbText unmarshals RequestScheduleTimedActions from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestScheduleTimedActions from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestScheduleTimedActions from JSON text
	FromJson(value string) error
	// Validate validates RequestScheduleTimedActions
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestScheduleTimedActions, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestScheduleTimedActions.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestScheduleTimedActions.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestScheduleTimedActions
	// HasPortId checks if PortId has been set in RequestScheduleTimedActions
	HasPortId() bool
	// ActionList returns ServerTimedActionList, set in RequestScheduleTimedActions.
	// ServerTimedActionList is tBD
	ActionList() ServerTimedActionList
	// SetActionList assigns ServerTimedActionList provided by user to RequestScheduleTimedActions.
	// ServerTimedActionList is tBD
	SetActionList(value ServerTimedActionList) RequestScheduleTimedActions
	// HasActionList checks if ActionList has been set in RequestScheduleTimedActions
	HasActionList() bool
	setNil()
}

func (obj *requestScheduleTimedActions) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "ScheduleTimedActions"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasActionList() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "ActionList",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Server+TimedActionList",
		}

		err := obj.ActionList().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	argError := Argument{
		Direction: ArgumentDirectionOut,
		Name:      "Error",
		Type:      "bool",
	}
	args = append(args, argError)

	argErrorMessage := Argument{
		Direction: ArgumentDirectionOut,
		Name:      "ErrorMessage",
		Type:      "string",
	}
	args = append(args, argErrorMessage)
	xObj.Argument = args
	return nil
}

func (obj *requestScheduleTimedActions) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestScheduleTimedActions) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestScheduleTimedActions) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestScheduleTimedActions object
func (obj *requestScheduleTimedActions) SetPortId(value IdTypePortId) RequestScheduleTimedActions {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// ActionList returns a ServerTimedActionList
func (obj *requestScheduleTimedActions) ActionList() ServerTimedActionList {
	if obj.obj.ActionList == nil {
		obj.obj.ActionList = NewServerTimedActionList().Msg()
	}
	if obj.actionListHolder == nil {
		obj.actionListHolder = &serverTimedActionList{obj: obj.obj.ActionList}
	}
	return obj.actionListHolder
}

// description is TBD
// ActionList returns a ServerTimedActionList
func (obj *requestScheduleTimedActions) HasActionList() bool {
	return obj.obj.ActionList != nil
}

// description is TBD
// SetActionList sets the ServerTimedActionList value in the RequestScheduleTimedActions object
func (obj *requestScheduleTimedActions) SetActionList(value ServerTimedActionList) RequestScheduleTimedActions {

	obj.actionListHolder = nil
	obj.obj.ActionList = value.Msg()

	return obj
}

func (obj *requestScheduleTimedActions) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.ActionList != nil {

		obj.ActionList().validateObj(vObj, set_default)
	}

}

func (obj *requestScheduleTimedActions) setDefault() {

}

// ***** RequestStartTx *****
type requestStartTx struct {
	validation
	obj          *otg.RequestStartTx
	portIdHolder IdTypePortId
}

func NewRequestStartTx() RequestStartTx {
	obj := requestStartTx{obj: &otg.RequestStartTx{}}
	obj.setDefault()
	return &obj
}

func (obj *requestStartTx) Msg() *otg.RequestStartTx {
	return obj.obj
}

func (obj *requestStartTx) SetMsg(msg *otg.RequestStartTx) RequestStartTx {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestStartTx) ToProto() (*otg.RequestStartTx, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestStartTx) FromProto(msg *otg.RequestStartTx) (RequestStartTx, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestStartTx) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestStartTx) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestStartTx) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestStartTx) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestStartTx) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestStartTx) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestStartTx) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestStartTx) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestStartTx) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestStartTx) Clone() (RequestStartTx, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestStartTx()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestStartTx) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestStartTx) setNil() {
	obj.portIdHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestStartTx is description is TBD
type RequestStartTx interface {
	Validation
	// Msg marshals RequestStartTx to protobuf object *otg.RequestStartTx
	// and doesn't set defaults
	Msg() *otg.RequestStartTx
	// SetMsg unmarshals RequestStartTx from protobuf object *otg.RequestStartTx
	// and doesn't set defaults
	SetMsg(*otg.RequestStartTx) RequestStartTx
	// ToProto marshals RequestStartTx to protobuf object *otg.RequestStartTx
	ToProto() (*otg.RequestStartTx, error)
	// ToPbText marshals RequestStartTx to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestStartTx to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestStartTx to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestStartTx from protobuf object *otg.RequestStartTx
	FromProto(msg *otg.RequestStartTx) (RequestStartTx, error)
	// FromPbText unmarshals RequestStartTx from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestStartTx from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestStartTx from JSON text
	FromJson(value string) error
	// Validate validates RequestStartTx
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestStartTx, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestStartTx.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestStartTx.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestStartTx
	// HasPortId checks if PortId has been set in RequestStartTx
	HasPortId() bool
	setNil()
}

func (obj *requestStartTx) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "StartTx"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestStartTx) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestStartTx) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestStartTx) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestStartTx object
func (obj *requestStartTx) SetPortId(value IdTypePortId) RequestStartTx {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

func (obj *requestStartTx) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

}

func (obj *requestStartTx) setDefault() {

}

// ***** RequestStopTx *****
type requestStopTx struct {
	validation
	obj          *otg.RequestStopTx
	portIdHolder IdTypePortId
}

func NewRequestStopTx() RequestStopTx {
	obj := requestStopTx{obj: &otg.RequestStopTx{}}
	obj.setDefault()
	return &obj
}

func (obj *requestStopTx) Msg() *otg.RequestStopTx {
	return obj.obj
}

func (obj *requestStopTx) SetMsg(msg *otg.RequestStopTx) RequestStopTx {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestStopTx) ToProto() (*otg.RequestStopTx, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestStopTx) FromProto(msg *otg.RequestStopTx) (RequestStopTx, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestStopTx) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestStopTx) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestStopTx) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestStopTx) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestStopTx) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestStopTx) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestStopTx) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestStopTx) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestStopTx) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestStopTx) Clone() (RequestStopTx, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestStopTx()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestStopTx) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestStopTx) setNil() {
	obj.portIdHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestStopTx is description is TBD
type RequestStopTx interface {
	Validation
	// Msg marshals RequestStopTx to protobuf object *otg.RequestStopTx
	// and doesn't set defaults
	Msg() *otg.RequestStopTx
	// SetMsg unmarshals RequestStopTx from protobuf object *otg.RequestStopTx
	// and doesn't set defaults
	SetMsg(*otg.RequestStopTx) RequestStopTx
	// ToProto marshals RequestStopTx to protobuf object *otg.RequestStopTx
	ToProto() (*otg.RequestStopTx, error)
	// ToPbText marshals RequestStopTx to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestStopTx to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestStopTx to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestStopTx from protobuf object *otg.RequestStopTx
	FromProto(msg *otg.RequestStopTx) (RequestStopTx, error)
	// FromPbText unmarshals RequestStopTx from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestStopTx from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestStopTx from JSON text
	FromJson(value string) error
	// Validate validates RequestStopTx
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestStopTx, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestStopTx.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestStopTx.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestStopTx
	// HasPortId checks if PortId has been set in RequestStopTx
	HasPortId() bool
	setNil()
}

func (obj *requestStopTx) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "StopTx"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestStopTx) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestStopTx) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestStopTx) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestStopTx object
func (obj *requestStopTx) SetPortId(value IdTypePortId) RequestStopTx {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

func (obj *requestStopTx) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

}

func (obj *requestStopTx) setDefault() {

}

// ***** RequestConfigureStreams *****
type requestConfigureStreams struct {
	validation
	obj                       *otg.RequestConfigureStreams
	portIdHolder              IdTypePortId
	streamConfigurationHolder StreamTrafficConfigurationType
}

func NewRequestConfigureStreams() RequestConfigureStreams {
	obj := requestConfigureStreams{obj: &otg.RequestConfigureStreams{}}
	obj.setDefault()
	return &obj
}

func (obj *requestConfigureStreams) Msg() *otg.RequestConfigureStreams {
	return obj.obj
}

func (obj *requestConfigureStreams) SetMsg(msg *otg.RequestConfigureStreams) RequestConfigureStreams {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestConfigureStreams) ToProto() (*otg.RequestConfigureStreams, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestConfigureStreams) FromProto(msg *otg.RequestConfigureStreams) (RequestConfigureStreams, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestConfigureStreams) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestConfigureStreams) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestConfigureStreams) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestConfigureStreams) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestConfigureStreams) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestConfigureStreams) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestConfigureStreams) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestConfigureStreams) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestConfigureStreams) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestConfigureStreams) Clone() (RequestConfigureStreams, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestConfigureStreams()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestConfigureStreams) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestConfigureStreams) setNil() {
	obj.portIdHolder = nil
	obj.streamConfigurationHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestConfigureStreams is description is TBD
type RequestConfigureStreams interface {
	Validation
	// Msg marshals RequestConfigureStreams to protobuf object *otg.RequestConfigureStreams
	// and doesn't set defaults
	Msg() *otg.RequestConfigureStreams
	// SetMsg unmarshals RequestConfigureStreams from protobuf object *otg.RequestConfigureStreams
	// and doesn't set defaults
	SetMsg(*otg.RequestConfigureStreams) RequestConfigureStreams
	// ToProto marshals RequestConfigureStreams to protobuf object *otg.RequestConfigureStreams
	ToProto() (*otg.RequestConfigureStreams, error)
	// ToPbText marshals RequestConfigureStreams to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestConfigureStreams to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestConfigureStreams to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestConfigureStreams from protobuf object *otg.RequestConfigureStreams
	FromProto(msg *otg.RequestConfigureStreams) (RequestConfigureStreams, error)
	// FromPbText unmarshals RequestConfigureStreams from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestConfigureStreams from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestConfigureStreams from JSON text
	FromJson(value string) error
	// Validate validates RequestConfigureStreams
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestConfigureStreams, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestConfigureStreams.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestConfigureStreams.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestConfigureStreams
	// HasPortId checks if PortId has been set in RequestConfigureStreams
	HasPortId() bool
	// StreamConfiguration returns StreamTrafficConfigurationType, set in RequestConfigureStreams.
	// StreamTrafficConfigurationType is tBD
	StreamConfiguration() StreamTrafficConfigurationType
	// SetStreamConfiguration assigns StreamTrafficConfigurationType provided by user to RequestConfigureStreams.
	// StreamTrafficConfigurationType is tBD
	SetStreamConfiguration(value StreamTrafficConfigurationType) RequestConfigureStreams
	// HasStreamConfiguration checks if StreamConfiguration has been set in RequestConfigureStreams
	HasStreamConfiguration() bool
	setNil()
}

func (obj *requestConfigureStreams) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "ConfigureStreams"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasStreamConfiguration() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "StreamConfiguration",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Stream+TrafficConfigurationType",
		}

		err := obj.StreamConfiguration().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestConfigureStreams) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestConfigureStreams) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestConfigureStreams) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestConfigureStreams object
func (obj *requestConfigureStreams) SetPortId(value IdTypePortId) RequestConfigureStreams {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// StreamConfiguration returns a StreamTrafficConfigurationType
func (obj *requestConfigureStreams) StreamConfiguration() StreamTrafficConfigurationType {
	if obj.obj.StreamConfiguration == nil {
		obj.obj.StreamConfiguration = NewStreamTrafficConfigurationType().Msg()
	}
	if obj.streamConfigurationHolder == nil {
		obj.streamConfigurationHolder = &streamTrafficConfigurationType{obj: obj.obj.StreamConfiguration}
	}
	return obj.streamConfigurationHolder
}

// description is TBD
// StreamConfiguration returns a StreamTrafficConfigurationType
func (obj *requestConfigureStreams) HasStreamConfiguration() bool {
	return obj.obj.StreamConfiguration != nil
}

// description is TBD
// SetStreamConfiguration sets the StreamTrafficConfigurationType value in the RequestConfigureStreams object
func (obj *requestConfigureStreams) SetStreamConfiguration(value StreamTrafficConfigurationType) RequestConfigureStreams {

	obj.streamConfigurationHolder = nil
	obj.obj.StreamConfiguration = value.Msg()

	return obj
}

func (obj *requestConfigureStreams) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.StreamConfiguration != nil {

		obj.StreamConfiguration().validateObj(vObj, set_default)
	}

}

func (obj *requestConfigureStreams) setDefault() {

}

// ***** RequestConfigureUpdateStreams *****
type requestConfigureUpdateStreams struct {
	validation
	obj                        *otg.RequestConfigureUpdateStreams
	portIdHolder               IdTypePortId
	streamsConfigurationHolder StreamStreamUpdateConfigurationList
}

func NewRequestConfigureUpdateStreams() RequestConfigureUpdateStreams {
	obj := requestConfigureUpdateStreams{obj: &otg.RequestConfigureUpdateStreams{}}
	obj.setDefault()
	return &obj
}

func (obj *requestConfigureUpdateStreams) Msg() *otg.RequestConfigureUpdateStreams {
	return obj.obj
}

func (obj *requestConfigureUpdateStreams) SetMsg(msg *otg.RequestConfigureUpdateStreams) RequestConfigureUpdateStreams {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestConfigureUpdateStreams) ToProto() (*otg.RequestConfigureUpdateStreams, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestConfigureUpdateStreams) FromProto(msg *otg.RequestConfigureUpdateStreams) (RequestConfigureUpdateStreams, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestConfigureUpdateStreams) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestConfigureUpdateStreams) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestConfigureUpdateStreams) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestConfigureUpdateStreams) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestConfigureUpdateStreams) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestConfigureUpdateStreams) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestConfigureUpdateStreams) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestConfigureUpdateStreams) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestConfigureUpdateStreams) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestConfigureUpdateStreams) Clone() (RequestConfigureUpdateStreams, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestConfigureUpdateStreams()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestConfigureUpdateStreams) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestConfigureUpdateStreams) setNil() {
	obj.portIdHolder = nil
	obj.streamsConfigurationHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestConfigureUpdateStreams is description is TBD
type RequestConfigureUpdateStreams interface {
	Validation
	// Msg marshals RequestConfigureUpdateStreams to protobuf object *otg.RequestConfigureUpdateStreams
	// and doesn't set defaults
	Msg() *otg.RequestConfigureUpdateStreams
	// SetMsg unmarshals RequestConfigureUpdateStreams from protobuf object *otg.RequestConfigureUpdateStreams
	// and doesn't set defaults
	SetMsg(*otg.RequestConfigureUpdateStreams) RequestConfigureUpdateStreams
	// ToProto marshals RequestConfigureUpdateStreams to protobuf object *otg.RequestConfigureUpdateStreams
	ToProto() (*otg.RequestConfigureUpdateStreams, error)
	// ToPbText marshals RequestConfigureUpdateStreams to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestConfigureUpdateStreams to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestConfigureUpdateStreams to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestConfigureUpdateStreams from protobuf object *otg.RequestConfigureUpdateStreams
	FromProto(msg *otg.RequestConfigureUpdateStreams) (RequestConfigureUpdateStreams, error)
	// FromPbText unmarshals RequestConfigureUpdateStreams from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestConfigureUpdateStreams from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestConfigureUpdateStreams from JSON text
	FromJson(value string) error
	// Validate validates RequestConfigureUpdateStreams
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestConfigureUpdateStreams, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestConfigureUpdateStreams.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestConfigureUpdateStreams.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestConfigureUpdateStreams
	// HasPortId checks if PortId has been set in RequestConfigureUpdateStreams
	HasPortId() bool
	// StreamsConfiguration returns StreamStreamUpdateConfigurationList, set in RequestConfigureUpdateStreams.
	// StreamStreamUpdateConfigurationList is tBD
	StreamsConfiguration() StreamStreamUpdateConfigurationList
	// SetStreamsConfiguration assigns StreamStreamUpdateConfigurationList provided by user to RequestConfigureUpdateStreams.
	// StreamStreamUpdateConfigurationList is tBD
	SetStreamsConfiguration(value StreamStreamUpdateConfigurationList) RequestConfigureUpdateStreams
	// HasStreamsConfiguration checks if StreamsConfiguration has been set in RequestConfigureUpdateStreams
	HasStreamsConfiguration() bool
	// IsAdjusting returns bool, set in RequestConfigureUpdateStreams.
	IsAdjusting() bool
	// SetIsAdjusting assigns bool provided by user to RequestConfigureUpdateStreams
	SetIsAdjusting(value bool) RequestConfigureUpdateStreams
	// HasIsAdjusting checks if IsAdjusting has been set in RequestConfigureUpdateStreams
	HasIsAdjusting() bool
	setNil()
}

func (obj *requestConfigureUpdateStreams) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "ConfigureUpdateStreams"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasStreamsConfiguration() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "StreamsConfiguration",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Stream+StreamUpdateConfigurationList",
		}

		err := obj.StreamsConfiguration().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasIsAdjusting() {
		var value string
		if obj.IsAdjusting() {
			value = "1"
		} else {
			value = "0"
		}

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "IsAdjusting",
			Type:      "bool",
			Value:     value,
		}

		args = append(args, arg)
	}

	argTimestamp := Argument{
		Direction: ArgumentDirectionOut,
		Name:      "Timestamp",
		Type:      "int64",
	}
	args = append(args, argTimestamp)
	xObj.Argument = args
	return nil
}

func (obj *requestConfigureUpdateStreams) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestConfigureUpdateStreams) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestConfigureUpdateStreams) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestConfigureUpdateStreams object
func (obj *requestConfigureUpdateStreams) SetPortId(value IdTypePortId) RequestConfigureUpdateStreams {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// StreamsConfiguration returns a StreamStreamUpdateConfigurationList
func (obj *requestConfigureUpdateStreams) StreamsConfiguration() StreamStreamUpdateConfigurationList {
	if obj.obj.StreamsConfiguration == nil {
		obj.obj.StreamsConfiguration = NewStreamStreamUpdateConfigurationList().Msg()
	}
	if obj.streamsConfigurationHolder == nil {
		obj.streamsConfigurationHolder = &streamStreamUpdateConfigurationList{obj: obj.obj.StreamsConfiguration}
	}
	return obj.streamsConfigurationHolder
}

// description is TBD
// StreamsConfiguration returns a StreamStreamUpdateConfigurationList
func (obj *requestConfigureUpdateStreams) HasStreamsConfiguration() bool {
	return obj.obj.StreamsConfiguration != nil
}

// description is TBD
// SetStreamsConfiguration sets the StreamStreamUpdateConfigurationList value in the RequestConfigureUpdateStreams object
func (obj *requestConfigureUpdateStreams) SetStreamsConfiguration(value StreamStreamUpdateConfigurationList) RequestConfigureUpdateStreams {

	obj.streamsConfigurationHolder = nil
	obj.obj.StreamsConfiguration = value.Msg()

	return obj
}

// description is TBD
// IsAdjusting returns a bool
func (obj *requestConfigureUpdateStreams) IsAdjusting() bool {

	return *obj.obj.IsAdjusting

}

// description is TBD
// IsAdjusting returns a bool
func (obj *requestConfigureUpdateStreams) HasIsAdjusting() bool {
	return obj.obj.IsAdjusting != nil
}

// description is TBD
// SetIsAdjusting sets the bool value in the RequestConfigureUpdateStreams object
func (obj *requestConfigureUpdateStreams) SetIsAdjusting(value bool) RequestConfigureUpdateStreams {

	obj.obj.IsAdjusting = &value
	return obj
}

func (obj *requestConfigureUpdateStreams) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.StreamsConfiguration != nil {

		obj.StreamsConfiguration().validateObj(vObj, set_default)
	}

}

func (obj *requestConfigureUpdateStreams) setDefault() {

}

// ***** RequestConfigureStreamsDataBegin *****
type requestConfigureStreamsDataBegin struct {
	validation
	obj                  *otg.RequestConfigureStreamsDataBegin
	portIdHolder         IdTypePortId
	backgroundDataHolder StreamBackgroundDataConfigurationType
	valueListHolder      StreamValueListConfigurationType
	rangeListHolder      StreamRangeListConfigurationType
	killBitListHolder    StreamKillBitListConfigurationType
	tableUdfHolder       StreamStreamTableUdfDataTypeList
}

func NewRequestConfigureStreamsDataBegin() RequestConfigureStreamsDataBegin {
	obj := requestConfigureStreamsDataBegin{obj: &otg.RequestConfigureStreamsDataBegin{}}
	obj.setDefault()
	return &obj
}

func (obj *requestConfigureStreamsDataBegin) Msg() *otg.RequestConfigureStreamsDataBegin {
	return obj.obj
}

func (obj *requestConfigureStreamsDataBegin) SetMsg(msg *otg.RequestConfigureStreamsDataBegin) RequestConfigureStreamsDataBegin {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestConfigureStreamsDataBegin) ToProto() (*otg.RequestConfigureStreamsDataBegin, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestConfigureStreamsDataBegin) FromProto(msg *otg.RequestConfigureStreamsDataBegin) (RequestConfigureStreamsDataBegin, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestConfigureStreamsDataBegin) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestConfigureStreamsDataBegin) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestConfigureStreamsDataBegin) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestConfigureStreamsDataBegin) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestConfigureStreamsDataBegin) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestConfigureStreamsDataBegin) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestConfigureStreamsDataBegin) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestConfigureStreamsDataBegin) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestConfigureStreamsDataBegin) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestConfigureStreamsDataBegin) Clone() (RequestConfigureStreamsDataBegin, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestConfigureStreamsDataBegin()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestConfigureStreamsDataBegin) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestConfigureStreamsDataBegin) setNil() {
	obj.portIdHolder = nil
	obj.backgroundDataHolder = nil
	obj.valueListHolder = nil
	obj.rangeListHolder = nil
	obj.killBitListHolder = nil
	obj.tableUdfHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestConfigureStreamsDataBegin is description is TBD
type RequestConfigureStreamsDataBegin interface {
	Validation
	// Msg marshals RequestConfigureStreamsDataBegin to protobuf object *otg.RequestConfigureStreamsDataBegin
	// and doesn't set defaults
	Msg() *otg.RequestConfigureStreamsDataBegin
	// SetMsg unmarshals RequestConfigureStreamsDataBegin from protobuf object *otg.RequestConfigureStreamsDataBegin
	// and doesn't set defaults
	SetMsg(*otg.RequestConfigureStreamsDataBegin) RequestConfigureStreamsDataBegin
	// ToProto marshals RequestConfigureStreamsDataBegin to protobuf object *otg.RequestConfigureStreamsDataBegin
	ToProto() (*otg.RequestConfigureStreamsDataBegin, error)
	// ToPbText marshals RequestConfigureStreamsDataBegin to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestConfigureStreamsDataBegin to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestConfigureStreamsDataBegin to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestConfigureStreamsDataBegin from protobuf object *otg.RequestConfigureStreamsDataBegin
	FromProto(msg *otg.RequestConfigureStreamsDataBegin) (RequestConfigureStreamsDataBegin, error)
	// FromPbText unmarshals RequestConfigureStreamsDataBegin from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestConfigureStreamsDataBegin from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestConfigureStreamsDataBegin from JSON text
	FromJson(value string) error
	// Validate validates RequestConfigureStreamsDataBegin
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestConfigureStreamsDataBegin, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestConfigureStreamsDataBegin.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestConfigureStreamsDataBegin.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestConfigureStreamsDataBegin
	// HasPortId checks if PortId has been set in RequestConfigureStreamsDataBegin
	HasPortId() bool
	// BackgroundData returns StreamBackgroundDataConfigurationType, set in RequestConfigureStreamsDataBegin.
	// StreamBackgroundDataConfigurationType is tBD
	BackgroundData() StreamBackgroundDataConfigurationType
	// SetBackgroundData assigns StreamBackgroundDataConfigurationType provided by user to RequestConfigureStreamsDataBegin.
	// StreamBackgroundDataConfigurationType is tBD
	SetBackgroundData(value StreamBackgroundDataConfigurationType) RequestConfigureStreamsDataBegin
	// HasBackgroundData checks if BackgroundData has been set in RequestConfigureStreamsDataBegin
	HasBackgroundData() bool
	// ValueList returns StreamValueListConfigurationType, set in RequestConfigureStreamsDataBegin.
	// StreamValueListConfigurationType is tBD
	ValueList() StreamValueListConfigurationType
	// SetValueList assigns StreamValueListConfigurationType provided by user to RequestConfigureStreamsDataBegin.
	// StreamValueListConfigurationType is tBD
	SetValueList(value StreamValueListConfigurationType) RequestConfigureStreamsDataBegin
	// HasValueList checks if ValueList has been set in RequestConfigureStreamsDataBegin
	HasValueList() bool
	// RangeList returns StreamRangeListConfigurationType, set in RequestConfigureStreamsDataBegin.
	// StreamRangeListConfigurationType is tBD
	RangeList() StreamRangeListConfigurationType
	// SetRangeList assigns StreamRangeListConfigurationType provided by user to RequestConfigureStreamsDataBegin.
	// StreamRangeListConfigurationType is tBD
	SetRangeList(value StreamRangeListConfigurationType) RequestConfigureStreamsDataBegin
	// HasRangeList checks if RangeList has been set in RequestConfigureStreamsDataBegin
	HasRangeList() bool
	// KillBitList returns StreamKillBitListConfigurationType, set in RequestConfigureStreamsDataBegin.
	// StreamKillBitListConfigurationType is tBD
	KillBitList() StreamKillBitListConfigurationType
	// SetKillBitList assigns StreamKillBitListConfigurationType provided by user to RequestConfigureStreamsDataBegin.
	// StreamKillBitListConfigurationType is tBD
	SetKillBitList(value StreamKillBitListConfigurationType) RequestConfigureStreamsDataBegin
	// HasKillBitList checks if KillBitList has been set in RequestConfigureStreamsDataBegin
	HasKillBitList() bool
	// TableUdf returns StreamStreamTableUdfDataTypeList, set in RequestConfigureStreamsDataBegin.
	// StreamStreamTableUdfDataTypeList is tBD
	TableUdf() StreamStreamTableUdfDataTypeList
	// SetTableUdf assigns StreamStreamTableUdfDataTypeList provided by user to RequestConfigureStreamsDataBegin.
	// StreamStreamTableUdfDataTypeList is tBD
	SetTableUdf(value StreamStreamTableUdfDataTypeList) RequestConfigureStreamsDataBegin
	// HasTableUdf checks if TableUdf has been set in RequestConfigureStreamsDataBegin
	HasTableUdf() bool
	// IsComplete returns bool, set in RequestConfigureStreamsDataBegin.
	IsComplete() bool
	// SetIsComplete assigns bool provided by user to RequestConfigureStreamsDataBegin
	SetIsComplete(value bool) RequestConfigureStreamsDataBegin
	// HasIsComplete checks if IsComplete has been set in RequestConfigureStreamsDataBegin
	HasIsComplete() bool
	setNil()
}

func (obj *requestConfigureStreamsDataBegin) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "ConfigureStreamsDataBegin"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasBackgroundData() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "BackgroundData",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Stream+BackgroundDataConfigurationType",
		}

		err := obj.BackgroundData().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasValueList() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "ValueList",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Stream+ValueListConfigurationType",
		}

		err := obj.ValueList().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasRangeList() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "RangeList",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Stream+RangeListConfigurationType",
		}

		err := obj.RangeList().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasKillBitList() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "KillBitList",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Stream+KillBitListConfigurationType",
		}

		err := obj.KillBitList().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasTableUdf() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "TableUdf",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Stream+StreamTableUdfDataTypeList",
		}

		err := obj.TableUdf().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasIsComplete() {
		var value string
		if obj.IsComplete() {
			value = "1"
		} else {
			value = "0"
		}

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "IsComplete",
			Type:      "bool",
			Value:     value,
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestConfigureStreamsDataBegin) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestConfigureStreamsDataBegin) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestConfigureStreamsDataBegin) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestConfigureStreamsDataBegin object
func (obj *requestConfigureStreamsDataBegin) SetPortId(value IdTypePortId) RequestConfigureStreamsDataBegin {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// BackgroundData returns a StreamBackgroundDataConfigurationType
func (obj *requestConfigureStreamsDataBegin) BackgroundData() StreamBackgroundDataConfigurationType {
	if obj.obj.BackgroundData == nil {
		obj.obj.BackgroundData = NewStreamBackgroundDataConfigurationType().Msg()
	}
	if obj.backgroundDataHolder == nil {
		obj.backgroundDataHolder = &streamBackgroundDataConfigurationType{obj: obj.obj.BackgroundData}
	}
	return obj.backgroundDataHolder
}

// description is TBD
// BackgroundData returns a StreamBackgroundDataConfigurationType
func (obj *requestConfigureStreamsDataBegin) HasBackgroundData() bool {
	return obj.obj.BackgroundData != nil
}

// description is TBD
// SetBackgroundData sets the StreamBackgroundDataConfigurationType value in the RequestConfigureStreamsDataBegin object
func (obj *requestConfigureStreamsDataBegin) SetBackgroundData(value StreamBackgroundDataConfigurationType) RequestConfigureStreamsDataBegin {

	obj.backgroundDataHolder = nil
	obj.obj.BackgroundData = value.Msg()

	return obj
}

// description is TBD
// ValueList returns a StreamValueListConfigurationType
func (obj *requestConfigureStreamsDataBegin) ValueList() StreamValueListConfigurationType {
	if obj.obj.ValueList == nil {
		obj.obj.ValueList = NewStreamValueListConfigurationType().Msg()
	}
	if obj.valueListHolder == nil {
		obj.valueListHolder = &streamValueListConfigurationType{obj: obj.obj.ValueList}
	}
	return obj.valueListHolder
}

// description is TBD
// ValueList returns a StreamValueListConfigurationType
func (obj *requestConfigureStreamsDataBegin) HasValueList() bool {
	return obj.obj.ValueList != nil
}

// description is TBD
// SetValueList sets the StreamValueListConfigurationType value in the RequestConfigureStreamsDataBegin object
func (obj *requestConfigureStreamsDataBegin) SetValueList(value StreamValueListConfigurationType) RequestConfigureStreamsDataBegin {

	obj.valueListHolder = nil
	obj.obj.ValueList = value.Msg()

	return obj
}

// description is TBD
// RangeList returns a StreamRangeListConfigurationType
func (obj *requestConfigureStreamsDataBegin) RangeList() StreamRangeListConfigurationType {
	if obj.obj.RangeList == nil {
		obj.obj.RangeList = NewStreamRangeListConfigurationType().Msg()
	}
	if obj.rangeListHolder == nil {
		obj.rangeListHolder = &streamRangeListConfigurationType{obj: obj.obj.RangeList}
	}
	return obj.rangeListHolder
}

// description is TBD
// RangeList returns a StreamRangeListConfigurationType
func (obj *requestConfigureStreamsDataBegin) HasRangeList() bool {
	return obj.obj.RangeList != nil
}

// description is TBD
// SetRangeList sets the StreamRangeListConfigurationType value in the RequestConfigureStreamsDataBegin object
func (obj *requestConfigureStreamsDataBegin) SetRangeList(value StreamRangeListConfigurationType) RequestConfigureStreamsDataBegin {

	obj.rangeListHolder = nil
	obj.obj.RangeList = value.Msg()

	return obj
}

// description is TBD
// KillBitList returns a StreamKillBitListConfigurationType
func (obj *requestConfigureStreamsDataBegin) KillBitList() StreamKillBitListConfigurationType {
	if obj.obj.KillBitList == nil {
		obj.obj.KillBitList = NewStreamKillBitListConfigurationType().Msg()
	}
	if obj.killBitListHolder == nil {
		obj.killBitListHolder = &streamKillBitListConfigurationType{obj: obj.obj.KillBitList}
	}
	return obj.killBitListHolder
}

// description is TBD
// KillBitList returns a StreamKillBitListConfigurationType
func (obj *requestConfigureStreamsDataBegin) HasKillBitList() bool {
	return obj.obj.KillBitList != nil
}

// description is TBD
// SetKillBitList sets the StreamKillBitListConfigurationType value in the RequestConfigureStreamsDataBegin object
func (obj *requestConfigureStreamsDataBegin) SetKillBitList(value StreamKillBitListConfigurationType) RequestConfigureStreamsDataBegin {

	obj.killBitListHolder = nil
	obj.obj.KillBitList = value.Msg()

	return obj
}

// description is TBD
// TableUdf returns a StreamStreamTableUdfDataTypeList
func (obj *requestConfigureStreamsDataBegin) TableUdf() StreamStreamTableUdfDataTypeList {
	if obj.obj.TableUdf == nil {
		obj.obj.TableUdf = NewStreamStreamTableUdfDataTypeList().Msg()
	}
	if obj.tableUdfHolder == nil {
		obj.tableUdfHolder = &streamStreamTableUdfDataTypeList{obj: obj.obj.TableUdf}
	}
	return obj.tableUdfHolder
}

// description is TBD
// TableUdf returns a StreamStreamTableUdfDataTypeList
func (obj *requestConfigureStreamsDataBegin) HasTableUdf() bool {
	return obj.obj.TableUdf != nil
}

// description is TBD
// SetTableUdf sets the StreamStreamTableUdfDataTypeList value in the RequestConfigureStreamsDataBegin object
func (obj *requestConfigureStreamsDataBegin) SetTableUdf(value StreamStreamTableUdfDataTypeList) RequestConfigureStreamsDataBegin {

	obj.tableUdfHolder = nil
	obj.obj.TableUdf = value.Msg()

	return obj
}

// description is TBD
// IsComplete returns a bool
func (obj *requestConfigureStreamsDataBegin) IsComplete() bool {

	return *obj.obj.IsComplete

}

// description is TBD
// IsComplete returns a bool
func (obj *requestConfigureStreamsDataBegin) HasIsComplete() bool {
	return obj.obj.IsComplete != nil
}

// description is TBD
// SetIsComplete sets the bool value in the RequestConfigureStreamsDataBegin object
func (obj *requestConfigureStreamsDataBegin) SetIsComplete(value bool) RequestConfigureStreamsDataBegin {

	obj.obj.IsComplete = &value
	return obj
}

func (obj *requestConfigureStreamsDataBegin) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.BackgroundData != nil {

		obj.BackgroundData().validateObj(vObj, set_default)
	}

	if obj.obj.ValueList != nil {

		obj.ValueList().validateObj(vObj, set_default)
	}

	if obj.obj.RangeList != nil {

		obj.RangeList().validateObj(vObj, set_default)
	}

	if obj.obj.KillBitList != nil {

		obj.KillBitList().validateObj(vObj, set_default)
	}

	if obj.obj.TableUdf != nil {

		obj.TableUdf().validateObj(vObj, set_default)
	}

}

func (obj *requestConfigureStreamsDataBegin) setDefault() {

}

// ***** RequestConfigureStreamsDataWrite *****
type requestConfigureStreamsDataWrite struct {
	validation
	obj                    *otg.RequestConfigureStreamsDataWrite
	portIdHolder           IdTypePortId
	backgroundDataHolder   StreamBackgroundDataConfigurationType
	tableUdfDataHolder     StreamStreamTableUdfDataTypeList
	killBitUdfDataHolder   StreamKillBitListSettingList
	valueListUdfDataHolder StreamStreamValueListSettingList
}

func NewRequestConfigureStreamsDataWrite() RequestConfigureStreamsDataWrite {
	obj := requestConfigureStreamsDataWrite{obj: &otg.RequestConfigureStreamsDataWrite{}}
	obj.setDefault()
	return &obj
}

func (obj *requestConfigureStreamsDataWrite) Msg() *otg.RequestConfigureStreamsDataWrite {
	return obj.obj
}

func (obj *requestConfigureStreamsDataWrite) SetMsg(msg *otg.RequestConfigureStreamsDataWrite) RequestConfigureStreamsDataWrite {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestConfigureStreamsDataWrite) ToProto() (*otg.RequestConfigureStreamsDataWrite, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestConfigureStreamsDataWrite) FromProto(msg *otg.RequestConfigureStreamsDataWrite) (RequestConfigureStreamsDataWrite, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestConfigureStreamsDataWrite) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestConfigureStreamsDataWrite) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestConfigureStreamsDataWrite) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestConfigureStreamsDataWrite) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestConfigureStreamsDataWrite) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestConfigureStreamsDataWrite) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestConfigureStreamsDataWrite) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestConfigureStreamsDataWrite) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestConfigureStreamsDataWrite) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestConfigureStreamsDataWrite) Clone() (RequestConfigureStreamsDataWrite, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestConfigureStreamsDataWrite()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestConfigureStreamsDataWrite) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestConfigureStreamsDataWrite) setNil() {
	obj.portIdHolder = nil
	obj.backgroundDataHolder = nil
	obj.tableUdfDataHolder = nil
	obj.killBitUdfDataHolder = nil
	obj.valueListUdfDataHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestConfigureStreamsDataWrite is description is TBD
type RequestConfigureStreamsDataWrite interface {
	Validation
	// Msg marshals RequestConfigureStreamsDataWrite to protobuf object *otg.RequestConfigureStreamsDataWrite
	// and doesn't set defaults
	Msg() *otg.RequestConfigureStreamsDataWrite
	// SetMsg unmarshals RequestConfigureStreamsDataWrite from protobuf object *otg.RequestConfigureStreamsDataWrite
	// and doesn't set defaults
	SetMsg(*otg.RequestConfigureStreamsDataWrite) RequestConfigureStreamsDataWrite
	// ToProto marshals RequestConfigureStreamsDataWrite to protobuf object *otg.RequestConfigureStreamsDataWrite
	ToProto() (*otg.RequestConfigureStreamsDataWrite, error)
	// ToPbText marshals RequestConfigureStreamsDataWrite to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestConfigureStreamsDataWrite to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestConfigureStreamsDataWrite to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestConfigureStreamsDataWrite from protobuf object *otg.RequestConfigureStreamsDataWrite
	FromProto(msg *otg.RequestConfigureStreamsDataWrite) (RequestConfigureStreamsDataWrite, error)
	// FromPbText unmarshals RequestConfigureStreamsDataWrite from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestConfigureStreamsDataWrite from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestConfigureStreamsDataWrite from JSON text
	FromJson(value string) error
	// Validate validates RequestConfigureStreamsDataWrite
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestConfigureStreamsDataWrite, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestConfigureStreamsDataWrite.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestConfigureStreamsDataWrite.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestConfigureStreamsDataWrite
	// HasPortId checks if PortId has been set in RequestConfigureStreamsDataWrite
	HasPortId() bool
	// BackgroundData returns StreamBackgroundDataConfigurationType, set in RequestConfigureStreamsDataWrite.
	// StreamBackgroundDataConfigurationType is tBD
	BackgroundData() StreamBackgroundDataConfigurationType
	// SetBackgroundData assigns StreamBackgroundDataConfigurationType provided by user to RequestConfigureStreamsDataWrite.
	// StreamBackgroundDataConfigurationType is tBD
	SetBackgroundData(value StreamBackgroundDataConfigurationType) RequestConfigureStreamsDataWrite
	// HasBackgroundData checks if BackgroundData has been set in RequestConfigureStreamsDataWrite
	HasBackgroundData() bool
	// TableUdfData returns StreamStreamTableUdfDataTypeList, set in RequestConfigureStreamsDataWrite.
	// StreamStreamTableUdfDataTypeList is tBD
	TableUdfData() StreamStreamTableUdfDataTypeList
	// SetTableUdfData assigns StreamStreamTableUdfDataTypeList provided by user to RequestConfigureStreamsDataWrite.
	// StreamStreamTableUdfDataTypeList is tBD
	SetTableUdfData(value StreamStreamTableUdfDataTypeList) RequestConfigureStreamsDataWrite
	// HasTableUdfData checks if TableUdfData has been set in RequestConfigureStreamsDataWrite
	HasTableUdfData() bool
	// KillBitUdfData returns StreamKillBitListSettingList, set in RequestConfigureStreamsDataWrite.
	// StreamKillBitListSettingList is tBD
	KillBitUdfData() StreamKillBitListSettingList
	// SetKillBitUdfData assigns StreamKillBitListSettingList provided by user to RequestConfigureStreamsDataWrite.
	// StreamKillBitListSettingList is tBD
	SetKillBitUdfData(value StreamKillBitListSettingList) RequestConfigureStreamsDataWrite
	// HasKillBitUdfData checks if KillBitUdfData has been set in RequestConfigureStreamsDataWrite
	HasKillBitUdfData() bool
	// ValueListUdfData returns StreamStreamValueListSettingList, set in RequestConfigureStreamsDataWrite.
	// StreamStreamValueListSettingList is tBD
	ValueListUdfData() StreamStreamValueListSettingList
	// SetValueListUdfData assigns StreamStreamValueListSettingList provided by user to RequestConfigureStreamsDataWrite.
	// StreamStreamValueListSettingList is tBD
	SetValueListUdfData(value StreamStreamValueListSettingList) RequestConfigureStreamsDataWrite
	// HasValueListUdfData checks if ValueListUdfData has been set in RequestConfigureStreamsDataWrite
	HasValueListUdfData() bool
	// IsComplete returns bool, set in RequestConfigureStreamsDataWrite.
	IsComplete() bool
	// SetIsComplete assigns bool provided by user to RequestConfigureStreamsDataWrite
	SetIsComplete(value bool) RequestConfigureStreamsDataWrite
	// HasIsComplete checks if IsComplete has been set in RequestConfigureStreamsDataWrite
	HasIsComplete() bool
	setNil()
}

func (obj *requestConfigureStreamsDataWrite) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "ConfigureStreamsDataWrite"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasBackgroundData() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "BackgroundData",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Stream+BackgroundDataConfigurationType",
		}

		err := obj.BackgroundData().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasTableUdfData() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "TableUdfData",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Stream+StreamTableUdfDataTypeList",
		}

		err := obj.TableUdfData().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasKillBitUdfData() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "KillBitUdfData",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Stream+KillBitListSettingList",
		}

		err := obj.KillBitUdfData().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasValueListUdfData() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "ValueListUdfData",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Stream+StreamValueListSettingList",
		}

		err := obj.ValueListUdfData().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasIsComplete() {
		var value string
		if obj.IsComplete() {
			value = "1"
		} else {
			value = "0"
		}

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "IsComplete",
			Type:      "bool",
			Value:     value,
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestConfigureStreamsDataWrite) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestConfigureStreamsDataWrite) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestConfigureStreamsDataWrite) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestConfigureStreamsDataWrite object
func (obj *requestConfigureStreamsDataWrite) SetPortId(value IdTypePortId) RequestConfigureStreamsDataWrite {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// BackgroundData returns a StreamBackgroundDataConfigurationType
func (obj *requestConfigureStreamsDataWrite) BackgroundData() StreamBackgroundDataConfigurationType {
	if obj.obj.BackgroundData == nil {
		obj.obj.BackgroundData = NewStreamBackgroundDataConfigurationType().Msg()
	}
	if obj.backgroundDataHolder == nil {
		obj.backgroundDataHolder = &streamBackgroundDataConfigurationType{obj: obj.obj.BackgroundData}
	}
	return obj.backgroundDataHolder
}

// description is TBD
// BackgroundData returns a StreamBackgroundDataConfigurationType
func (obj *requestConfigureStreamsDataWrite) HasBackgroundData() bool {
	return obj.obj.BackgroundData != nil
}

// description is TBD
// SetBackgroundData sets the StreamBackgroundDataConfigurationType value in the RequestConfigureStreamsDataWrite object
func (obj *requestConfigureStreamsDataWrite) SetBackgroundData(value StreamBackgroundDataConfigurationType) RequestConfigureStreamsDataWrite {

	obj.backgroundDataHolder = nil
	obj.obj.BackgroundData = value.Msg()

	return obj
}

// description is TBD
// TableUdfData returns a StreamStreamTableUdfDataTypeList
func (obj *requestConfigureStreamsDataWrite) TableUdfData() StreamStreamTableUdfDataTypeList {
	if obj.obj.TableUdfData == nil {
		obj.obj.TableUdfData = NewStreamStreamTableUdfDataTypeList().Msg()
	}
	if obj.tableUdfDataHolder == nil {
		obj.tableUdfDataHolder = &streamStreamTableUdfDataTypeList{obj: obj.obj.TableUdfData}
	}
	return obj.tableUdfDataHolder
}

// description is TBD
// TableUdfData returns a StreamStreamTableUdfDataTypeList
func (obj *requestConfigureStreamsDataWrite) HasTableUdfData() bool {
	return obj.obj.TableUdfData != nil
}

// description is TBD
// SetTableUdfData sets the StreamStreamTableUdfDataTypeList value in the RequestConfigureStreamsDataWrite object
func (obj *requestConfigureStreamsDataWrite) SetTableUdfData(value StreamStreamTableUdfDataTypeList) RequestConfigureStreamsDataWrite {

	obj.tableUdfDataHolder = nil
	obj.obj.TableUdfData = value.Msg()

	return obj
}

// description is TBD
// KillBitUdfData returns a StreamKillBitListSettingList
func (obj *requestConfigureStreamsDataWrite) KillBitUdfData() StreamKillBitListSettingList {
	if obj.obj.KillBitUdfData == nil {
		obj.obj.KillBitUdfData = NewStreamKillBitListSettingList().Msg()
	}
	if obj.killBitUdfDataHolder == nil {
		obj.killBitUdfDataHolder = &streamKillBitListSettingList{obj: obj.obj.KillBitUdfData}
	}
	return obj.killBitUdfDataHolder
}

// description is TBD
// KillBitUdfData returns a StreamKillBitListSettingList
func (obj *requestConfigureStreamsDataWrite) HasKillBitUdfData() bool {
	return obj.obj.KillBitUdfData != nil
}

// description is TBD
// SetKillBitUdfData sets the StreamKillBitListSettingList value in the RequestConfigureStreamsDataWrite object
func (obj *requestConfigureStreamsDataWrite) SetKillBitUdfData(value StreamKillBitListSettingList) RequestConfigureStreamsDataWrite {

	obj.killBitUdfDataHolder = nil
	obj.obj.KillBitUdfData = value.Msg()

	return obj
}

// description is TBD
// ValueListUdfData returns a StreamStreamValueListSettingList
func (obj *requestConfigureStreamsDataWrite) ValueListUdfData() StreamStreamValueListSettingList {
	if obj.obj.ValueListUdfData == nil {
		obj.obj.ValueListUdfData = NewStreamStreamValueListSettingList().Msg()
	}
	if obj.valueListUdfDataHolder == nil {
		obj.valueListUdfDataHolder = &streamStreamValueListSettingList{obj: obj.obj.ValueListUdfData}
	}
	return obj.valueListUdfDataHolder
}

// description is TBD
// ValueListUdfData returns a StreamStreamValueListSettingList
func (obj *requestConfigureStreamsDataWrite) HasValueListUdfData() bool {
	return obj.obj.ValueListUdfData != nil
}

// description is TBD
// SetValueListUdfData sets the StreamStreamValueListSettingList value in the RequestConfigureStreamsDataWrite object
func (obj *requestConfigureStreamsDataWrite) SetValueListUdfData(value StreamStreamValueListSettingList) RequestConfigureStreamsDataWrite {

	obj.valueListUdfDataHolder = nil
	obj.obj.ValueListUdfData = value.Msg()

	return obj
}

// description is TBD
// IsComplete returns a bool
func (obj *requestConfigureStreamsDataWrite) IsComplete() bool {

	return *obj.obj.IsComplete

}

// description is TBD
// IsComplete returns a bool
func (obj *requestConfigureStreamsDataWrite) HasIsComplete() bool {
	return obj.obj.IsComplete != nil
}

// description is TBD
// SetIsComplete sets the bool value in the RequestConfigureStreamsDataWrite object
func (obj *requestConfigureStreamsDataWrite) SetIsComplete(value bool) RequestConfigureStreamsDataWrite {

	obj.obj.IsComplete = &value
	return obj
}

func (obj *requestConfigureStreamsDataWrite) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.BackgroundData != nil {

		obj.BackgroundData().validateObj(vObj, set_default)
	}

	if obj.obj.TableUdfData != nil {

		obj.TableUdfData().validateObj(vObj, set_default)
	}

	if obj.obj.KillBitUdfData != nil {

		obj.KillBitUdfData().validateObj(vObj, set_default)
	}

	if obj.obj.ValueListUdfData != nil {

		obj.ValueListUdfData().validateObj(vObj, set_default)
	}

}

func (obj *requestConfigureStreamsDataWrite) setDefault() {

}

// ***** RequestRefreshValueList *****
type requestRefreshValueList struct {
	validation
	obj          *otg.RequestRefreshValueList
	portIdHolder IdTypePortId
}

func NewRequestRefreshValueList() RequestRefreshValueList {
	obj := requestRefreshValueList{obj: &otg.RequestRefreshValueList{}}
	obj.setDefault()
	return &obj
}

func (obj *requestRefreshValueList) Msg() *otg.RequestRefreshValueList {
	return obj.obj
}

func (obj *requestRefreshValueList) SetMsg(msg *otg.RequestRefreshValueList) RequestRefreshValueList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestRefreshValueList) ToProto() (*otg.RequestRefreshValueList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestRefreshValueList) FromProto(msg *otg.RequestRefreshValueList) (RequestRefreshValueList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestRefreshValueList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestRefreshValueList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestRefreshValueList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestRefreshValueList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestRefreshValueList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestRefreshValueList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestRefreshValueList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestRefreshValueList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestRefreshValueList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestRefreshValueList) Clone() (RequestRefreshValueList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestRefreshValueList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestRefreshValueList) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestRefreshValueList) setNil() {
	obj.portIdHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestRefreshValueList is description is TBD
type RequestRefreshValueList interface {
	Validation
	// Msg marshals RequestRefreshValueList to protobuf object *otg.RequestRefreshValueList
	// and doesn't set defaults
	Msg() *otg.RequestRefreshValueList
	// SetMsg unmarshals RequestRefreshValueList from protobuf object *otg.RequestRefreshValueList
	// and doesn't set defaults
	SetMsg(*otg.RequestRefreshValueList) RequestRefreshValueList
	// ToProto marshals RequestRefreshValueList to protobuf object *otg.RequestRefreshValueList
	ToProto() (*otg.RequestRefreshValueList, error)
	// ToPbText marshals RequestRefreshValueList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestRefreshValueList to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestRefreshValueList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestRefreshValueList from protobuf object *otg.RequestRefreshValueList
	FromProto(msg *otg.RequestRefreshValueList) (RequestRefreshValueList, error)
	// FromPbText unmarshals RequestRefreshValueList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestRefreshValueList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestRefreshValueList from JSON text
	FromJson(value string) error
	// Validate validates RequestRefreshValueList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestRefreshValueList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestRefreshValueList.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestRefreshValueList.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestRefreshValueList
	// HasPortId checks if PortId has been set in RequestRefreshValueList
	HasPortId() bool
	setNil()
}

func (obj *requestRefreshValueList) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "RefreshValueList"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	argValueListUdfData := Argument{
		Direction: ArgumentDirectionOut,
		Name:      "ValueListUdfData",
		Type:      "Ixia.IxOS.RPC.PCPU.RPF.Stream+StreamValueListSettingList",
	}
	args = append(args, argValueListUdfData)
	xObj.Argument = args
	return nil
}

func (obj *requestRefreshValueList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestRefreshValueList) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestRefreshValueList) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestRefreshValueList object
func (obj *requestRefreshValueList) SetPortId(value IdTypePortId) RequestRefreshValueList {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

func (obj *requestRefreshValueList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

}

func (obj *requestRefreshValueList) setDefault() {

}

// ***** RequestTxMacSecArmTriggerTimer *****
type requestTxMacSecArmTriggerTimer struct {
	validation
	obj          *otg.RequestTxMacSecArmTriggerTimer
	portIdHolder IdTypePortId
}

func NewRequestTxMacSecArmTriggerTimer() RequestTxMacSecArmTriggerTimer {
	obj := requestTxMacSecArmTriggerTimer{obj: &otg.RequestTxMacSecArmTriggerTimer{}}
	obj.setDefault()
	return &obj
}

func (obj *requestTxMacSecArmTriggerTimer) Msg() *otg.RequestTxMacSecArmTriggerTimer {
	return obj.obj
}

func (obj *requestTxMacSecArmTriggerTimer) SetMsg(msg *otg.RequestTxMacSecArmTriggerTimer) RequestTxMacSecArmTriggerTimer {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestTxMacSecArmTriggerTimer) ToProto() (*otg.RequestTxMacSecArmTriggerTimer, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestTxMacSecArmTriggerTimer) FromProto(msg *otg.RequestTxMacSecArmTriggerTimer) (RequestTxMacSecArmTriggerTimer, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestTxMacSecArmTriggerTimer) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestTxMacSecArmTriggerTimer) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestTxMacSecArmTriggerTimer) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestTxMacSecArmTriggerTimer) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestTxMacSecArmTriggerTimer) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestTxMacSecArmTriggerTimer) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestTxMacSecArmTriggerTimer) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestTxMacSecArmTriggerTimer) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestTxMacSecArmTriggerTimer) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestTxMacSecArmTriggerTimer) Clone() (RequestTxMacSecArmTriggerTimer, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestTxMacSecArmTriggerTimer()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestTxMacSecArmTriggerTimer) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestTxMacSecArmTriggerTimer) setNil() {
	obj.portIdHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestTxMacSecArmTriggerTimer is description is TBD
type RequestTxMacSecArmTriggerTimer interface {
	Validation
	// Msg marshals RequestTxMacSecArmTriggerTimer to protobuf object *otg.RequestTxMacSecArmTriggerTimer
	// and doesn't set defaults
	Msg() *otg.RequestTxMacSecArmTriggerTimer
	// SetMsg unmarshals RequestTxMacSecArmTriggerTimer from protobuf object *otg.RequestTxMacSecArmTriggerTimer
	// and doesn't set defaults
	SetMsg(*otg.RequestTxMacSecArmTriggerTimer) RequestTxMacSecArmTriggerTimer
	// ToProto marshals RequestTxMacSecArmTriggerTimer to protobuf object *otg.RequestTxMacSecArmTriggerTimer
	ToProto() (*otg.RequestTxMacSecArmTriggerTimer, error)
	// ToPbText marshals RequestTxMacSecArmTriggerTimer to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestTxMacSecArmTriggerTimer to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestTxMacSecArmTriggerTimer to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestTxMacSecArmTriggerTimer from protobuf object *otg.RequestTxMacSecArmTriggerTimer
	FromProto(msg *otg.RequestTxMacSecArmTriggerTimer) (RequestTxMacSecArmTriggerTimer, error)
	// FromPbText unmarshals RequestTxMacSecArmTriggerTimer from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestTxMacSecArmTriggerTimer from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestTxMacSecArmTriggerTimer from JSON text
	FromJson(value string) error
	// Validate validates RequestTxMacSecArmTriggerTimer
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestTxMacSecArmTriggerTimer, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestTxMacSecArmTriggerTimer.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestTxMacSecArmTriggerTimer.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestTxMacSecArmTriggerTimer
	// HasPortId checks if PortId has been set in RequestTxMacSecArmTriggerTimer
	HasPortId() bool
	setNil()
}

func (obj *requestTxMacSecArmTriggerTimer) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "TxMacSecArmTriggerTimer"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestTxMacSecArmTriggerTimer) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestTxMacSecArmTriggerTimer) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestTxMacSecArmTriggerTimer) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestTxMacSecArmTriggerTimer object
func (obj *requestTxMacSecArmTriggerTimer) SetPortId(value IdTypePortId) RequestTxMacSecArmTriggerTimer {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

func (obj *requestTxMacSecArmTriggerTimer) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

}

func (obj *requestTxMacSecArmTriggerTimer) setDefault() {

}

// ***** RequestConfigureMacSecPortControl *****
type requestConfigureMacSecPortControl struct {
	validation
	obj                       *otg.RequestConfigureMacSecPortControl
	portIdHolder              IdTypePortId
	txMacSecPortControlHolder MacSecTxMacSecGlobalPortConfigType
	rxMacSecPortControlHolder MacSecRxMacSecGlobalPortConfigType
}

func NewRequestConfigureMacSecPortControl() RequestConfigureMacSecPortControl {
	obj := requestConfigureMacSecPortControl{obj: &otg.RequestConfigureMacSecPortControl{}}
	obj.setDefault()
	return &obj
}

func (obj *requestConfigureMacSecPortControl) Msg() *otg.RequestConfigureMacSecPortControl {
	return obj.obj
}

func (obj *requestConfigureMacSecPortControl) SetMsg(msg *otg.RequestConfigureMacSecPortControl) RequestConfigureMacSecPortControl {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestConfigureMacSecPortControl) ToProto() (*otg.RequestConfigureMacSecPortControl, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestConfigureMacSecPortControl) FromProto(msg *otg.RequestConfigureMacSecPortControl) (RequestConfigureMacSecPortControl, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestConfigureMacSecPortControl) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestConfigureMacSecPortControl) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestConfigureMacSecPortControl) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestConfigureMacSecPortControl) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestConfigureMacSecPortControl) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestConfigureMacSecPortControl) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestConfigureMacSecPortControl) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestConfigureMacSecPortControl) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestConfigureMacSecPortControl) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestConfigureMacSecPortControl) Clone() (RequestConfigureMacSecPortControl, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestConfigureMacSecPortControl()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestConfigureMacSecPortControl) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestConfigureMacSecPortControl) setNil() {
	obj.portIdHolder = nil
	obj.txMacSecPortControlHolder = nil
	obj.rxMacSecPortControlHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestConfigureMacSecPortControl is description is TBD
type RequestConfigureMacSecPortControl interface {
	Validation
	// Msg marshals RequestConfigureMacSecPortControl to protobuf object *otg.RequestConfigureMacSecPortControl
	// and doesn't set defaults
	Msg() *otg.RequestConfigureMacSecPortControl
	// SetMsg unmarshals RequestConfigureMacSecPortControl from protobuf object *otg.RequestConfigureMacSecPortControl
	// and doesn't set defaults
	SetMsg(*otg.RequestConfigureMacSecPortControl) RequestConfigureMacSecPortControl
	// ToProto marshals RequestConfigureMacSecPortControl to protobuf object *otg.RequestConfigureMacSecPortControl
	ToProto() (*otg.RequestConfigureMacSecPortControl, error)
	// ToPbText marshals RequestConfigureMacSecPortControl to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestConfigureMacSecPortControl to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestConfigureMacSecPortControl to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestConfigureMacSecPortControl from protobuf object *otg.RequestConfigureMacSecPortControl
	FromProto(msg *otg.RequestConfigureMacSecPortControl) (RequestConfigureMacSecPortControl, error)
	// FromPbText unmarshals RequestConfigureMacSecPortControl from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestConfigureMacSecPortControl from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestConfigureMacSecPortControl from JSON text
	FromJson(value string) error
	// Validate validates RequestConfigureMacSecPortControl
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestConfigureMacSecPortControl, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestConfigureMacSecPortControl.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestConfigureMacSecPortControl.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestConfigureMacSecPortControl
	// HasPortId checks if PortId has been set in RequestConfigureMacSecPortControl
	HasPortId() bool
	// TxMacSecPortControl returns MacSecTxMacSecGlobalPortConfigType, set in RequestConfigureMacSecPortControl.
	// MacSecTxMacSecGlobalPortConfigType is tBD
	TxMacSecPortControl() MacSecTxMacSecGlobalPortConfigType
	// SetTxMacSecPortControl assigns MacSecTxMacSecGlobalPortConfigType provided by user to RequestConfigureMacSecPortControl.
	// MacSecTxMacSecGlobalPortConfigType is tBD
	SetTxMacSecPortControl(value MacSecTxMacSecGlobalPortConfigType) RequestConfigureMacSecPortControl
	// HasTxMacSecPortControl checks if TxMacSecPortControl has been set in RequestConfigureMacSecPortControl
	HasTxMacSecPortControl() bool
	// RxMacSecPortControl returns MacSecRxMacSecGlobalPortConfigType, set in RequestConfigureMacSecPortControl.
	// MacSecRxMacSecGlobalPortConfigType is tBD
	RxMacSecPortControl() MacSecRxMacSecGlobalPortConfigType
	// SetRxMacSecPortControl assigns MacSecRxMacSecGlobalPortConfigType provided by user to RequestConfigureMacSecPortControl.
	// MacSecRxMacSecGlobalPortConfigType is tBD
	SetRxMacSecPortControl(value MacSecRxMacSecGlobalPortConfigType) RequestConfigureMacSecPortControl
	// HasRxMacSecPortControl checks if RxMacSecPortControl has been set in RequestConfigureMacSecPortControl
	HasRxMacSecPortControl() bool
	setNil()
}

func (obj *requestConfigureMacSecPortControl) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "ConfigureMacSecPortControl"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasTxMacSecPortControl() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "TxMacSecPortControl",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.MacSec+TxMacSecGlobalPortConfigType",
		}

		err := obj.TxMacSecPortControl().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasRxMacSecPortControl() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "RxMacSecPortControl",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.MacSec+RxMacSecGlobalPortConfigType",
		}

		err := obj.RxMacSecPortControl().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestConfigureMacSecPortControl) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestConfigureMacSecPortControl) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestConfigureMacSecPortControl) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestConfigureMacSecPortControl object
func (obj *requestConfigureMacSecPortControl) SetPortId(value IdTypePortId) RequestConfigureMacSecPortControl {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// TxMacSecPortControl returns a MacSecTxMacSecGlobalPortConfigType
func (obj *requestConfigureMacSecPortControl) TxMacSecPortControl() MacSecTxMacSecGlobalPortConfigType {
	if obj.obj.TxMacSecPortControl == nil {
		obj.obj.TxMacSecPortControl = NewMacSecTxMacSecGlobalPortConfigType().Msg()
	}
	if obj.txMacSecPortControlHolder == nil {
		obj.txMacSecPortControlHolder = &macSecTxMacSecGlobalPortConfigType{obj: obj.obj.TxMacSecPortControl}
	}
	return obj.txMacSecPortControlHolder
}

// description is TBD
// TxMacSecPortControl returns a MacSecTxMacSecGlobalPortConfigType
func (obj *requestConfigureMacSecPortControl) HasTxMacSecPortControl() bool {
	return obj.obj.TxMacSecPortControl != nil
}

// description is TBD
// SetTxMacSecPortControl sets the MacSecTxMacSecGlobalPortConfigType value in the RequestConfigureMacSecPortControl object
func (obj *requestConfigureMacSecPortControl) SetTxMacSecPortControl(value MacSecTxMacSecGlobalPortConfigType) RequestConfigureMacSecPortControl {

	obj.txMacSecPortControlHolder = nil
	obj.obj.TxMacSecPortControl = value.Msg()

	return obj
}

// description is TBD
// RxMacSecPortControl returns a MacSecRxMacSecGlobalPortConfigType
func (obj *requestConfigureMacSecPortControl) RxMacSecPortControl() MacSecRxMacSecGlobalPortConfigType {
	if obj.obj.RxMacSecPortControl == nil {
		obj.obj.RxMacSecPortControl = NewMacSecRxMacSecGlobalPortConfigType().Msg()
	}
	if obj.rxMacSecPortControlHolder == nil {
		obj.rxMacSecPortControlHolder = &macSecRxMacSecGlobalPortConfigType{obj: obj.obj.RxMacSecPortControl}
	}
	return obj.rxMacSecPortControlHolder
}

// description is TBD
// RxMacSecPortControl returns a MacSecRxMacSecGlobalPortConfigType
func (obj *requestConfigureMacSecPortControl) HasRxMacSecPortControl() bool {
	return obj.obj.RxMacSecPortControl != nil
}

// description is TBD
// SetRxMacSecPortControl sets the MacSecRxMacSecGlobalPortConfigType value in the RequestConfigureMacSecPortControl object
func (obj *requestConfigureMacSecPortControl) SetRxMacSecPortControl(value MacSecRxMacSecGlobalPortConfigType) RequestConfigureMacSecPortControl {

	obj.rxMacSecPortControlHolder = nil
	obj.obj.RxMacSecPortControl = value.Msg()

	return obj
}

func (obj *requestConfigureMacSecPortControl) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.TxMacSecPortControl != nil {

		obj.TxMacSecPortControl().validateObj(vObj, set_default)
	}

	if obj.obj.RxMacSecPortControl != nil {

		obj.RxMacSecPortControl().validateObj(vObj, set_default)
	}

}

func (obj *requestConfigureMacSecPortControl) setDefault() {

}

// ***** RequestConfigureMacSecScControl *****
type requestConfigureMacSecScControl struct {
	validation
	obj              *otg.RequestConfigureMacSecScControl
	portIdHolder     IdTypePortId
	macSecDataHolder MacSecMacSecConfigurationType
}

func NewRequestConfigureMacSecScControl() RequestConfigureMacSecScControl {
	obj := requestConfigureMacSecScControl{obj: &otg.RequestConfigureMacSecScControl{}}
	obj.setDefault()
	return &obj
}

func (obj *requestConfigureMacSecScControl) Msg() *otg.RequestConfigureMacSecScControl {
	return obj.obj
}

func (obj *requestConfigureMacSecScControl) SetMsg(msg *otg.RequestConfigureMacSecScControl) RequestConfigureMacSecScControl {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestConfigureMacSecScControl) ToProto() (*otg.RequestConfigureMacSecScControl, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestConfigureMacSecScControl) FromProto(msg *otg.RequestConfigureMacSecScControl) (RequestConfigureMacSecScControl, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestConfigureMacSecScControl) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestConfigureMacSecScControl) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestConfigureMacSecScControl) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestConfigureMacSecScControl) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestConfigureMacSecScControl) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestConfigureMacSecScControl) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestConfigureMacSecScControl) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestConfigureMacSecScControl) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestConfigureMacSecScControl) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestConfigureMacSecScControl) Clone() (RequestConfigureMacSecScControl, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestConfigureMacSecScControl()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestConfigureMacSecScControl) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestConfigureMacSecScControl) setNil() {
	obj.portIdHolder = nil
	obj.macSecDataHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestConfigureMacSecScControl is description is TBD
type RequestConfigureMacSecScControl interface {
	Validation
	// Msg marshals RequestConfigureMacSecScControl to protobuf object *otg.RequestConfigureMacSecScControl
	// and doesn't set defaults
	Msg() *otg.RequestConfigureMacSecScControl
	// SetMsg unmarshals RequestConfigureMacSecScControl from protobuf object *otg.RequestConfigureMacSecScControl
	// and doesn't set defaults
	SetMsg(*otg.RequestConfigureMacSecScControl) RequestConfigureMacSecScControl
	// ToProto marshals RequestConfigureMacSecScControl to protobuf object *otg.RequestConfigureMacSecScControl
	ToProto() (*otg.RequestConfigureMacSecScControl, error)
	// ToPbText marshals RequestConfigureMacSecScControl to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestConfigureMacSecScControl to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestConfigureMacSecScControl to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestConfigureMacSecScControl from protobuf object *otg.RequestConfigureMacSecScControl
	FromProto(msg *otg.RequestConfigureMacSecScControl) (RequestConfigureMacSecScControl, error)
	// FromPbText unmarshals RequestConfigureMacSecScControl from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestConfigureMacSecScControl from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestConfigureMacSecScControl from JSON text
	FromJson(value string) error
	// Validate validates RequestConfigureMacSecScControl
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestConfigureMacSecScControl, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestConfigureMacSecScControl.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestConfigureMacSecScControl.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestConfigureMacSecScControl
	// HasPortId checks if PortId has been set in RequestConfigureMacSecScControl
	HasPortId() bool
	// IsUpdate returns bool, set in RequestConfigureMacSecScControl.
	IsUpdate() bool
	// SetIsUpdate assigns bool provided by user to RequestConfigureMacSecScControl
	SetIsUpdate(value bool) RequestConfigureMacSecScControl
	// HasIsUpdate checks if IsUpdate has been set in RequestConfigureMacSecScControl
	HasIsUpdate() bool
	// MacSecData returns MacSecMacSecConfigurationType, set in RequestConfigureMacSecScControl.
	// MacSecMacSecConfigurationType is tBD
	MacSecData() MacSecMacSecConfigurationType
	// SetMacSecData assigns MacSecMacSecConfigurationType provided by user to RequestConfigureMacSecScControl.
	// MacSecMacSecConfigurationType is tBD
	SetMacSecData(value MacSecMacSecConfigurationType) RequestConfigureMacSecScControl
	// HasMacSecData checks if MacSecData has been set in RequestConfigureMacSecScControl
	HasMacSecData() bool
	setNil()
}

func (obj *requestConfigureMacSecScControl) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "ConfigureMacSecScControl"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasIsUpdate() {
		var value string
		if obj.IsUpdate() {
			value = "1"
		} else {
			value = "0"
		}

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "IsUpdate",
			Type:      "bool",
			Value:     value,
		}

		args = append(args, arg)
	}

	if obj.HasMacSecData() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "MacSecData",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.MacSec+MacSecConfigurationType",
		}

		err := obj.MacSecData().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestConfigureMacSecScControl) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestConfigureMacSecScControl) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestConfigureMacSecScControl) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestConfigureMacSecScControl object
func (obj *requestConfigureMacSecScControl) SetPortId(value IdTypePortId) RequestConfigureMacSecScControl {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// IsUpdate returns a bool
func (obj *requestConfigureMacSecScControl) IsUpdate() bool {

	return *obj.obj.IsUpdate

}

// description is TBD
// IsUpdate returns a bool
func (obj *requestConfigureMacSecScControl) HasIsUpdate() bool {
	return obj.obj.IsUpdate != nil
}

// description is TBD
// SetIsUpdate sets the bool value in the RequestConfigureMacSecScControl object
func (obj *requestConfigureMacSecScControl) SetIsUpdate(value bool) RequestConfigureMacSecScControl {

	obj.obj.IsUpdate = &value
	return obj
}

// description is TBD
// MacSecData returns a MacSecMacSecConfigurationType
func (obj *requestConfigureMacSecScControl) MacSecData() MacSecMacSecConfigurationType {
	if obj.obj.MacSecData == nil {
		obj.obj.MacSecData = NewMacSecMacSecConfigurationType().Msg()
	}
	if obj.macSecDataHolder == nil {
		obj.macSecDataHolder = &macSecMacSecConfigurationType{obj: obj.obj.MacSecData}
	}
	return obj.macSecDataHolder
}

// description is TBD
// MacSecData returns a MacSecMacSecConfigurationType
func (obj *requestConfigureMacSecScControl) HasMacSecData() bool {
	return obj.obj.MacSecData != nil
}

// description is TBD
// SetMacSecData sets the MacSecMacSecConfigurationType value in the RequestConfigureMacSecScControl object
func (obj *requestConfigureMacSecScControl) SetMacSecData(value MacSecMacSecConfigurationType) RequestConfigureMacSecScControl {

	obj.macSecDataHolder = nil
	obj.obj.MacSecData = value.Msg()

	return obj
}

func (obj *requestConfigureMacSecScControl) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.MacSecData != nil {

		obj.MacSecData().validateObj(vObj, set_default)
	}

}

func (obj *requestConfigureMacSecScControl) setDefault() {

}

// ***** RequestUpdateMacSecStreams *****
type requestUpdateMacSecStreams struct {
	validation
	obj          *otg.RequestUpdateMacSecStreams
	portIdHolder IdTypePortId
	macSecHolder MacSecMacSecStreamControlTypeList
}

func NewRequestUpdateMacSecStreams() RequestUpdateMacSecStreams {
	obj := requestUpdateMacSecStreams{obj: &otg.RequestUpdateMacSecStreams{}}
	obj.setDefault()
	return &obj
}

func (obj *requestUpdateMacSecStreams) Msg() *otg.RequestUpdateMacSecStreams {
	return obj.obj
}

func (obj *requestUpdateMacSecStreams) SetMsg(msg *otg.RequestUpdateMacSecStreams) RequestUpdateMacSecStreams {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestUpdateMacSecStreams) ToProto() (*otg.RequestUpdateMacSecStreams, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestUpdateMacSecStreams) FromProto(msg *otg.RequestUpdateMacSecStreams) (RequestUpdateMacSecStreams, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestUpdateMacSecStreams) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestUpdateMacSecStreams) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestUpdateMacSecStreams) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestUpdateMacSecStreams) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestUpdateMacSecStreams) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestUpdateMacSecStreams) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestUpdateMacSecStreams) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestUpdateMacSecStreams) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestUpdateMacSecStreams) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestUpdateMacSecStreams) Clone() (RequestUpdateMacSecStreams, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestUpdateMacSecStreams()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestUpdateMacSecStreams) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestUpdateMacSecStreams) setNil() {
	obj.portIdHolder = nil
	obj.macSecHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestUpdateMacSecStreams is description is TBD
type RequestUpdateMacSecStreams interface {
	Validation
	// Msg marshals RequestUpdateMacSecStreams to protobuf object *otg.RequestUpdateMacSecStreams
	// and doesn't set defaults
	Msg() *otg.RequestUpdateMacSecStreams
	// SetMsg unmarshals RequestUpdateMacSecStreams from protobuf object *otg.RequestUpdateMacSecStreams
	// and doesn't set defaults
	SetMsg(*otg.RequestUpdateMacSecStreams) RequestUpdateMacSecStreams
	// ToProto marshals RequestUpdateMacSecStreams to protobuf object *otg.RequestUpdateMacSecStreams
	ToProto() (*otg.RequestUpdateMacSecStreams, error)
	// ToPbText marshals RequestUpdateMacSecStreams to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestUpdateMacSecStreams to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestUpdateMacSecStreams to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestUpdateMacSecStreams from protobuf object *otg.RequestUpdateMacSecStreams
	FromProto(msg *otg.RequestUpdateMacSecStreams) (RequestUpdateMacSecStreams, error)
	// FromPbText unmarshals RequestUpdateMacSecStreams from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestUpdateMacSecStreams from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestUpdateMacSecStreams from JSON text
	FromJson(value string) error
	// Validate validates RequestUpdateMacSecStreams
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestUpdateMacSecStreams, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestUpdateMacSecStreams.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestUpdateMacSecStreams.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestUpdateMacSecStreams
	// HasPortId checks if PortId has been set in RequestUpdateMacSecStreams
	HasPortId() bool
	// IsUpdate returns bool, set in RequestUpdateMacSecStreams.
	IsUpdate() bool
	// SetIsUpdate assigns bool provided by user to RequestUpdateMacSecStreams
	SetIsUpdate(value bool) RequestUpdateMacSecStreams
	// HasIsUpdate checks if IsUpdate has been set in RequestUpdateMacSecStreams
	HasIsUpdate() bool
	// MacSec returns MacSecMacSecStreamControlTypeList, set in RequestUpdateMacSecStreams.
	// MacSecMacSecStreamControlTypeList is tBD
	MacSec() MacSecMacSecStreamControlTypeList
	// SetMacSec assigns MacSecMacSecStreamControlTypeList provided by user to RequestUpdateMacSecStreams.
	// MacSecMacSecStreamControlTypeList is tBD
	SetMacSec(value MacSecMacSecStreamControlTypeList) RequestUpdateMacSecStreams
	// HasMacSec checks if MacSec has been set in RequestUpdateMacSecStreams
	HasMacSec() bool
	setNil()
}

func (obj *requestUpdateMacSecStreams) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "UpdateMacSecStreams"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasIsUpdate() {
		var value string
		if obj.IsUpdate() {
			value = "1"
		} else {
			value = "0"
		}

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "IsUpdate",
			Type:      "bool",
			Value:     value,
		}

		args = append(args, arg)
	}

	if obj.HasMacSec() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "MacSec",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.MacSec+MacSecStreamControlTypeList",
		}

		err := obj.MacSec().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestUpdateMacSecStreams) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestUpdateMacSecStreams) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestUpdateMacSecStreams) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestUpdateMacSecStreams object
func (obj *requestUpdateMacSecStreams) SetPortId(value IdTypePortId) RequestUpdateMacSecStreams {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// IsUpdate returns a bool
func (obj *requestUpdateMacSecStreams) IsUpdate() bool {

	return *obj.obj.IsUpdate

}

// description is TBD
// IsUpdate returns a bool
func (obj *requestUpdateMacSecStreams) HasIsUpdate() bool {
	return obj.obj.IsUpdate != nil
}

// description is TBD
// SetIsUpdate sets the bool value in the RequestUpdateMacSecStreams object
func (obj *requestUpdateMacSecStreams) SetIsUpdate(value bool) RequestUpdateMacSecStreams {

	obj.obj.IsUpdate = &value
	return obj
}

// description is TBD
// MacSec returns a MacSecMacSecStreamControlTypeList
func (obj *requestUpdateMacSecStreams) MacSec() MacSecMacSecStreamControlTypeList {
	if obj.obj.MacSec == nil {
		obj.obj.MacSec = NewMacSecMacSecStreamControlTypeList().Msg()
	}
	if obj.macSecHolder == nil {
		obj.macSecHolder = &macSecMacSecStreamControlTypeList{obj: obj.obj.MacSec}
	}
	return obj.macSecHolder
}

// description is TBD
// MacSec returns a MacSecMacSecStreamControlTypeList
func (obj *requestUpdateMacSecStreams) HasMacSec() bool {
	return obj.obj.MacSec != nil
}

// description is TBD
// SetMacSec sets the MacSecMacSecStreamControlTypeList value in the RequestUpdateMacSecStreams object
func (obj *requestUpdateMacSecStreams) SetMacSec(value MacSecMacSecStreamControlTypeList) RequestUpdateMacSecStreams {

	obj.macSecHolder = nil
	obj.obj.MacSec = value.Msg()

	return obj
}

func (obj *requestUpdateMacSecStreams) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.MacSec != nil {

		obj.MacSec().validateObj(vObj, set_default)
	}

}

func (obj *requestUpdateMacSecStreams) setDefault() {

}

// ***** RequestConfigureMacSecSaKeys *****
type requestConfigureMacSecSaKeys struct {
	validation
	obj                  *otg.RequestConfigureMacSecSaKeys
	portIdHolder         IdTypePortId
	txSaAndKeyListHolder MacSecTxSaKeyConfigurationTypeList
	rxSaAndKeyListHolder MacSecRxSaKeyConfigurationTypeList
}

func NewRequestConfigureMacSecSaKeys() RequestConfigureMacSecSaKeys {
	obj := requestConfigureMacSecSaKeys{obj: &otg.RequestConfigureMacSecSaKeys{}}
	obj.setDefault()
	return &obj
}

func (obj *requestConfigureMacSecSaKeys) Msg() *otg.RequestConfigureMacSecSaKeys {
	return obj.obj
}

func (obj *requestConfigureMacSecSaKeys) SetMsg(msg *otg.RequestConfigureMacSecSaKeys) RequestConfigureMacSecSaKeys {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestConfigureMacSecSaKeys) ToProto() (*otg.RequestConfigureMacSecSaKeys, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestConfigureMacSecSaKeys) FromProto(msg *otg.RequestConfigureMacSecSaKeys) (RequestConfigureMacSecSaKeys, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestConfigureMacSecSaKeys) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestConfigureMacSecSaKeys) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestConfigureMacSecSaKeys) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestConfigureMacSecSaKeys) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestConfigureMacSecSaKeys) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestConfigureMacSecSaKeys) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestConfigureMacSecSaKeys) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestConfigureMacSecSaKeys) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestConfigureMacSecSaKeys) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestConfigureMacSecSaKeys) Clone() (RequestConfigureMacSecSaKeys, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestConfigureMacSecSaKeys()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestConfigureMacSecSaKeys) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestConfigureMacSecSaKeys) setNil() {
	obj.portIdHolder = nil
	obj.txSaAndKeyListHolder = nil
	obj.rxSaAndKeyListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestConfigureMacSecSaKeys is description is TBD
type RequestConfigureMacSecSaKeys interface {
	Validation
	// Msg marshals RequestConfigureMacSecSaKeys to protobuf object *otg.RequestConfigureMacSecSaKeys
	// and doesn't set defaults
	Msg() *otg.RequestConfigureMacSecSaKeys
	// SetMsg unmarshals RequestConfigureMacSecSaKeys from protobuf object *otg.RequestConfigureMacSecSaKeys
	// and doesn't set defaults
	SetMsg(*otg.RequestConfigureMacSecSaKeys) RequestConfigureMacSecSaKeys
	// ToProto marshals RequestConfigureMacSecSaKeys to protobuf object *otg.RequestConfigureMacSecSaKeys
	ToProto() (*otg.RequestConfigureMacSecSaKeys, error)
	// ToPbText marshals RequestConfigureMacSecSaKeys to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestConfigureMacSecSaKeys to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestConfigureMacSecSaKeys to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestConfigureMacSecSaKeys from protobuf object *otg.RequestConfigureMacSecSaKeys
	FromProto(msg *otg.RequestConfigureMacSecSaKeys) (RequestConfigureMacSecSaKeys, error)
	// FromPbText unmarshals RequestConfigureMacSecSaKeys from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestConfigureMacSecSaKeys from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestConfigureMacSecSaKeys from JSON text
	FromJson(value string) error
	// Validate validates RequestConfigureMacSecSaKeys
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestConfigureMacSecSaKeys, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestConfigureMacSecSaKeys.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestConfigureMacSecSaKeys.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestConfigureMacSecSaKeys
	// HasPortId checks if PortId has been set in RequestConfigureMacSecSaKeys
	HasPortId() bool
	// TxSaAndKeyList returns MacSecTxSaKeyConfigurationTypeList, set in RequestConfigureMacSecSaKeys.
	// MacSecTxSaKeyConfigurationTypeList is tBD
	TxSaAndKeyList() MacSecTxSaKeyConfigurationTypeList
	// SetTxSaAndKeyList assigns MacSecTxSaKeyConfigurationTypeList provided by user to RequestConfigureMacSecSaKeys.
	// MacSecTxSaKeyConfigurationTypeList is tBD
	SetTxSaAndKeyList(value MacSecTxSaKeyConfigurationTypeList) RequestConfigureMacSecSaKeys
	// HasTxSaAndKeyList checks if TxSaAndKeyList has been set in RequestConfigureMacSecSaKeys
	HasTxSaAndKeyList() bool
	// RxSaAndKeyList returns MacSecRxSaKeyConfigurationTypeList, set in RequestConfigureMacSecSaKeys.
	// MacSecRxSaKeyConfigurationTypeList is tBD
	RxSaAndKeyList() MacSecRxSaKeyConfigurationTypeList
	// SetRxSaAndKeyList assigns MacSecRxSaKeyConfigurationTypeList provided by user to RequestConfigureMacSecSaKeys.
	// MacSecRxSaKeyConfigurationTypeList is tBD
	SetRxSaAndKeyList(value MacSecRxSaKeyConfigurationTypeList) RequestConfigureMacSecSaKeys
	// HasRxSaAndKeyList checks if RxSaAndKeyList has been set in RequestConfigureMacSecSaKeys
	HasRxSaAndKeyList() bool
	setNil()
}

func (obj *requestConfigureMacSecSaKeys) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "ConfigureMacSecSaKeys"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasTxSaAndKeyList() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "TxSaAndKeyList",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.MacSec+TxSaKeyConfigurationTypeList",
		}

		err := obj.TxSaAndKeyList().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasRxSaAndKeyList() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "RxSaAndKeyList",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.MacSec+RxSaKeyConfigurationTypeList",
		}

		err := obj.RxSaAndKeyList().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestConfigureMacSecSaKeys) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestConfigureMacSecSaKeys) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestConfigureMacSecSaKeys) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestConfigureMacSecSaKeys object
func (obj *requestConfigureMacSecSaKeys) SetPortId(value IdTypePortId) RequestConfigureMacSecSaKeys {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// TxSaAndKeyList returns a MacSecTxSaKeyConfigurationTypeList
func (obj *requestConfigureMacSecSaKeys) TxSaAndKeyList() MacSecTxSaKeyConfigurationTypeList {
	if obj.obj.TxSaAndKeyList == nil {
		obj.obj.TxSaAndKeyList = NewMacSecTxSaKeyConfigurationTypeList().Msg()
	}
	if obj.txSaAndKeyListHolder == nil {
		obj.txSaAndKeyListHolder = &macSecTxSaKeyConfigurationTypeList{obj: obj.obj.TxSaAndKeyList}
	}
	return obj.txSaAndKeyListHolder
}

// description is TBD
// TxSaAndKeyList returns a MacSecTxSaKeyConfigurationTypeList
func (obj *requestConfigureMacSecSaKeys) HasTxSaAndKeyList() bool {
	return obj.obj.TxSaAndKeyList != nil
}

// description is TBD
// SetTxSaAndKeyList sets the MacSecTxSaKeyConfigurationTypeList value in the RequestConfigureMacSecSaKeys object
func (obj *requestConfigureMacSecSaKeys) SetTxSaAndKeyList(value MacSecTxSaKeyConfigurationTypeList) RequestConfigureMacSecSaKeys {

	obj.txSaAndKeyListHolder = nil
	obj.obj.TxSaAndKeyList = value.Msg()

	return obj
}

// description is TBD
// RxSaAndKeyList returns a MacSecRxSaKeyConfigurationTypeList
func (obj *requestConfigureMacSecSaKeys) RxSaAndKeyList() MacSecRxSaKeyConfigurationTypeList {
	if obj.obj.RxSaAndKeyList == nil {
		obj.obj.RxSaAndKeyList = NewMacSecRxSaKeyConfigurationTypeList().Msg()
	}
	if obj.rxSaAndKeyListHolder == nil {
		obj.rxSaAndKeyListHolder = &macSecRxSaKeyConfigurationTypeList{obj: obj.obj.RxSaAndKeyList}
	}
	return obj.rxSaAndKeyListHolder
}

// description is TBD
// RxSaAndKeyList returns a MacSecRxSaKeyConfigurationTypeList
func (obj *requestConfigureMacSecSaKeys) HasRxSaAndKeyList() bool {
	return obj.obj.RxSaAndKeyList != nil
}

// description is TBD
// SetRxSaAndKeyList sets the MacSecRxSaKeyConfigurationTypeList value in the RequestConfigureMacSecSaKeys object
func (obj *requestConfigureMacSecSaKeys) SetRxSaAndKeyList(value MacSecRxSaKeyConfigurationTypeList) RequestConfigureMacSecSaKeys {

	obj.rxSaAndKeyListHolder = nil
	obj.obj.RxSaAndKeyList = value.Msg()

	return obj
}

func (obj *requestConfigureMacSecSaKeys) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.TxSaAndKeyList != nil {

		obj.TxSaAndKeyList().validateObj(vObj, set_default)
	}

	if obj.obj.RxSaAndKeyList != nil {

		obj.RxSaAndKeyList().validateObj(vObj, set_default)
	}

}

func (obj *requestConfigureMacSecSaKeys) setDefault() {

}

// ***** RequestToggleMacSecSaKeys *****
type requestToggleMacSecSaKeys struct {
	validation
	obj          *otg.RequestToggleMacSecSaKeys
	portIdHolder IdTypePortId
	scListHolder ServerMacSecSaList
}

func NewRequestToggleMacSecSaKeys() RequestToggleMacSecSaKeys {
	obj := requestToggleMacSecSaKeys{obj: &otg.RequestToggleMacSecSaKeys{}}
	obj.setDefault()
	return &obj
}

func (obj *requestToggleMacSecSaKeys) Msg() *otg.RequestToggleMacSecSaKeys {
	return obj.obj
}

func (obj *requestToggleMacSecSaKeys) SetMsg(msg *otg.RequestToggleMacSecSaKeys) RequestToggleMacSecSaKeys {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestToggleMacSecSaKeys) ToProto() (*otg.RequestToggleMacSecSaKeys, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestToggleMacSecSaKeys) FromProto(msg *otg.RequestToggleMacSecSaKeys) (RequestToggleMacSecSaKeys, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestToggleMacSecSaKeys) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestToggleMacSecSaKeys) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestToggleMacSecSaKeys) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestToggleMacSecSaKeys) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestToggleMacSecSaKeys) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestToggleMacSecSaKeys) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestToggleMacSecSaKeys) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestToggleMacSecSaKeys) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestToggleMacSecSaKeys) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestToggleMacSecSaKeys) Clone() (RequestToggleMacSecSaKeys, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestToggleMacSecSaKeys()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestToggleMacSecSaKeys) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestToggleMacSecSaKeys) setNil() {
	obj.portIdHolder = nil
	obj.scListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestToggleMacSecSaKeys is description is TBD
type RequestToggleMacSecSaKeys interface {
	Validation
	// Msg marshals RequestToggleMacSecSaKeys to protobuf object *otg.RequestToggleMacSecSaKeys
	// and doesn't set defaults
	Msg() *otg.RequestToggleMacSecSaKeys
	// SetMsg unmarshals RequestToggleMacSecSaKeys from protobuf object *otg.RequestToggleMacSecSaKeys
	// and doesn't set defaults
	SetMsg(*otg.RequestToggleMacSecSaKeys) RequestToggleMacSecSaKeys
	// ToProto marshals RequestToggleMacSecSaKeys to protobuf object *otg.RequestToggleMacSecSaKeys
	ToProto() (*otg.RequestToggleMacSecSaKeys, error)
	// ToPbText marshals RequestToggleMacSecSaKeys to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestToggleMacSecSaKeys to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestToggleMacSecSaKeys to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestToggleMacSecSaKeys from protobuf object *otg.RequestToggleMacSecSaKeys
	FromProto(msg *otg.RequestToggleMacSecSaKeys) (RequestToggleMacSecSaKeys, error)
	// FromPbText unmarshals RequestToggleMacSecSaKeys from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestToggleMacSecSaKeys from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestToggleMacSecSaKeys from JSON text
	FromJson(value string) error
	// Validate validates RequestToggleMacSecSaKeys
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestToggleMacSecSaKeys, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestToggleMacSecSaKeys.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestToggleMacSecSaKeys.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestToggleMacSecSaKeys
	// HasPortId checks if PortId has been set in RequestToggleMacSecSaKeys
	HasPortId() bool
	// IsTx returns bool, set in RequestToggleMacSecSaKeys.
	IsTx() bool
	// SetIsTx assigns bool provided by user to RequestToggleMacSecSaKeys
	SetIsTx(value bool) RequestToggleMacSecSaKeys
	// HasIsTx checks if IsTx has been set in RequestToggleMacSecSaKeys
	HasIsTx() bool
	// ScList returns ServerMacSecSaList, set in RequestToggleMacSecSaKeys.
	// ServerMacSecSaList is tBD
	ScList() ServerMacSecSaList
	// SetScList assigns ServerMacSecSaList provided by user to RequestToggleMacSecSaKeys.
	// ServerMacSecSaList is tBD
	SetScList(value ServerMacSecSaList) RequestToggleMacSecSaKeys
	// HasScList checks if ScList has been set in RequestToggleMacSecSaKeys
	HasScList() bool
	setNil()
}

func (obj *requestToggleMacSecSaKeys) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "ToggleMacSecSaKeys"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasIsTx() {
		var value string
		if obj.IsTx() {
			value = "1"
		} else {
			value = "0"
		}

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "IsTx",
			Type:      "bool",
			Value:     value,
		}

		args = append(args, arg)
	}

	if obj.HasScList() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "ScList",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Server+MacSecSaList",
		}

		err := obj.ScList().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestToggleMacSecSaKeys) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestToggleMacSecSaKeys) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestToggleMacSecSaKeys) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestToggleMacSecSaKeys object
func (obj *requestToggleMacSecSaKeys) SetPortId(value IdTypePortId) RequestToggleMacSecSaKeys {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// IsTx returns a bool
func (obj *requestToggleMacSecSaKeys) IsTx() bool {

	return *obj.obj.IsTx

}

// description is TBD
// IsTx returns a bool
func (obj *requestToggleMacSecSaKeys) HasIsTx() bool {
	return obj.obj.IsTx != nil
}

// description is TBD
// SetIsTx sets the bool value in the RequestToggleMacSecSaKeys object
func (obj *requestToggleMacSecSaKeys) SetIsTx(value bool) RequestToggleMacSecSaKeys {

	obj.obj.IsTx = &value
	return obj
}

// description is TBD
// ScList returns a ServerMacSecSaList
func (obj *requestToggleMacSecSaKeys) ScList() ServerMacSecSaList {
	if obj.obj.ScList == nil {
		obj.obj.ScList = NewServerMacSecSaList().Msg()
	}
	if obj.scListHolder == nil {
		obj.scListHolder = &serverMacSecSaList{obj: obj.obj.ScList}
	}
	return obj.scListHolder
}

// description is TBD
// ScList returns a ServerMacSecSaList
func (obj *requestToggleMacSecSaKeys) HasScList() bool {
	return obj.obj.ScList != nil
}

// description is TBD
// SetScList sets the ServerMacSecSaList value in the RequestToggleMacSecSaKeys object
func (obj *requestToggleMacSecSaKeys) SetScList(value ServerMacSecSaList) RequestToggleMacSecSaKeys {

	obj.scListHolder = nil
	obj.obj.ScList = value.Msg()

	return obj
}

func (obj *requestToggleMacSecSaKeys) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.ScList != nil {

		obj.ScList().validateObj(vObj, set_default)
	}

}

func (obj *requestToggleMacSecSaKeys) setDefault() {

}

// ***** RequestResetMacSecScs *****
type requestResetMacSecScs struct {
	validation
	obj          *otg.RequestResetMacSecScs
	portIdHolder IdTypePortId
	scListHolder ServerMacSecSaList
}

func NewRequestResetMacSecScs() RequestResetMacSecScs {
	obj := requestResetMacSecScs{obj: &otg.RequestResetMacSecScs{}}
	obj.setDefault()
	return &obj
}

func (obj *requestResetMacSecScs) Msg() *otg.RequestResetMacSecScs {
	return obj.obj
}

func (obj *requestResetMacSecScs) SetMsg(msg *otg.RequestResetMacSecScs) RequestResetMacSecScs {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestResetMacSecScs) ToProto() (*otg.RequestResetMacSecScs, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestResetMacSecScs) FromProto(msg *otg.RequestResetMacSecScs) (RequestResetMacSecScs, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestResetMacSecScs) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestResetMacSecScs) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestResetMacSecScs) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestResetMacSecScs) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestResetMacSecScs) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestResetMacSecScs) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestResetMacSecScs) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestResetMacSecScs) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestResetMacSecScs) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestResetMacSecScs) Clone() (RequestResetMacSecScs, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestResetMacSecScs()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestResetMacSecScs) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestResetMacSecScs) setNil() {
	obj.portIdHolder = nil
	obj.scListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestResetMacSecScs is description is TBD
type RequestResetMacSecScs interface {
	Validation
	// Msg marshals RequestResetMacSecScs to protobuf object *otg.RequestResetMacSecScs
	// and doesn't set defaults
	Msg() *otg.RequestResetMacSecScs
	// SetMsg unmarshals RequestResetMacSecScs from protobuf object *otg.RequestResetMacSecScs
	// and doesn't set defaults
	SetMsg(*otg.RequestResetMacSecScs) RequestResetMacSecScs
	// ToProto marshals RequestResetMacSecScs to protobuf object *otg.RequestResetMacSecScs
	ToProto() (*otg.RequestResetMacSecScs, error)
	// ToPbText marshals RequestResetMacSecScs to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestResetMacSecScs to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestResetMacSecScs to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestResetMacSecScs from protobuf object *otg.RequestResetMacSecScs
	FromProto(msg *otg.RequestResetMacSecScs) (RequestResetMacSecScs, error)
	// FromPbText unmarshals RequestResetMacSecScs from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestResetMacSecScs from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestResetMacSecScs from JSON text
	FromJson(value string) error
	// Validate validates RequestResetMacSecScs
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestResetMacSecScs, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestResetMacSecScs.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestResetMacSecScs.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestResetMacSecScs
	// HasPortId checks if PortId has been set in RequestResetMacSecScs
	HasPortId() bool
	// IsTx returns bool, set in RequestResetMacSecScs.
	IsTx() bool
	// SetIsTx assigns bool provided by user to RequestResetMacSecScs
	SetIsTx(value bool) RequestResetMacSecScs
	// HasIsTx checks if IsTx has been set in RequestResetMacSecScs
	HasIsTx() bool
	// ScList returns ServerMacSecSaList, set in RequestResetMacSecScs.
	// ServerMacSecSaList is tBD
	ScList() ServerMacSecSaList
	// SetScList assigns ServerMacSecSaList provided by user to RequestResetMacSecScs.
	// ServerMacSecSaList is tBD
	SetScList(value ServerMacSecSaList) RequestResetMacSecScs
	// HasScList checks if ScList has been set in RequestResetMacSecScs
	HasScList() bool
	setNil()
}

func (obj *requestResetMacSecScs) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "ResetMacSecScs"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasIsTx() {
		var value string
		if obj.IsTx() {
			value = "1"
		} else {
			value = "0"
		}

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "IsTx",
			Type:      "bool",
			Value:     value,
		}

		args = append(args, arg)
	}

	if obj.HasScList() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "ScList",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Server+MacSecSaList",
		}

		err := obj.ScList().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestResetMacSecScs) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestResetMacSecScs) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestResetMacSecScs) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestResetMacSecScs object
func (obj *requestResetMacSecScs) SetPortId(value IdTypePortId) RequestResetMacSecScs {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// IsTx returns a bool
func (obj *requestResetMacSecScs) IsTx() bool {

	return *obj.obj.IsTx

}

// description is TBD
// IsTx returns a bool
func (obj *requestResetMacSecScs) HasIsTx() bool {
	return obj.obj.IsTx != nil
}

// description is TBD
// SetIsTx sets the bool value in the RequestResetMacSecScs object
func (obj *requestResetMacSecScs) SetIsTx(value bool) RequestResetMacSecScs {

	obj.obj.IsTx = &value
	return obj
}

// description is TBD
// ScList returns a ServerMacSecSaList
func (obj *requestResetMacSecScs) ScList() ServerMacSecSaList {
	if obj.obj.ScList == nil {
		obj.obj.ScList = NewServerMacSecSaList().Msg()
	}
	if obj.scListHolder == nil {
		obj.scListHolder = &serverMacSecSaList{obj: obj.obj.ScList}
	}
	return obj.scListHolder
}

// description is TBD
// ScList returns a ServerMacSecSaList
func (obj *requestResetMacSecScs) HasScList() bool {
	return obj.obj.ScList != nil
}

// description is TBD
// SetScList sets the ServerMacSecSaList value in the RequestResetMacSecScs object
func (obj *requestResetMacSecScs) SetScList(value ServerMacSecSaList) RequestResetMacSecScs {

	obj.scListHolder = nil
	obj.obj.ScList = value.Msg()

	return obj
}

func (obj *requestResetMacSecScs) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.ScList != nil {

		obj.ScList().validateObj(vObj, set_default)
	}

}

func (obj *requestResetMacSecScs) setDefault() {

}

// ***** RequestSetMacSecSaKeyState *****
type requestSetMacSecSaKeyState struct {
	validation
	obj               *otg.RequestSetMacSecSaKeyState
	portIdHolder      IdTypePortId
	saKeyStatesHolder MacSecSaKeyStateConfigurationList
}

func NewRequestSetMacSecSaKeyState() RequestSetMacSecSaKeyState {
	obj := requestSetMacSecSaKeyState{obj: &otg.RequestSetMacSecSaKeyState{}}
	obj.setDefault()
	return &obj
}

func (obj *requestSetMacSecSaKeyState) Msg() *otg.RequestSetMacSecSaKeyState {
	return obj.obj
}

func (obj *requestSetMacSecSaKeyState) SetMsg(msg *otg.RequestSetMacSecSaKeyState) RequestSetMacSecSaKeyState {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestSetMacSecSaKeyState) ToProto() (*otg.RequestSetMacSecSaKeyState, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestSetMacSecSaKeyState) FromProto(msg *otg.RequestSetMacSecSaKeyState) (RequestSetMacSecSaKeyState, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestSetMacSecSaKeyState) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestSetMacSecSaKeyState) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestSetMacSecSaKeyState) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestSetMacSecSaKeyState) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestSetMacSecSaKeyState) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestSetMacSecSaKeyState) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestSetMacSecSaKeyState) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestSetMacSecSaKeyState) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestSetMacSecSaKeyState) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestSetMacSecSaKeyState) Clone() (RequestSetMacSecSaKeyState, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestSetMacSecSaKeyState()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestSetMacSecSaKeyState) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestSetMacSecSaKeyState) setNil() {
	obj.portIdHolder = nil
	obj.saKeyStatesHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestSetMacSecSaKeyState is description is TBD
type RequestSetMacSecSaKeyState interface {
	Validation
	// Msg marshals RequestSetMacSecSaKeyState to protobuf object *otg.RequestSetMacSecSaKeyState
	// and doesn't set defaults
	Msg() *otg.RequestSetMacSecSaKeyState
	// SetMsg unmarshals RequestSetMacSecSaKeyState from protobuf object *otg.RequestSetMacSecSaKeyState
	// and doesn't set defaults
	SetMsg(*otg.RequestSetMacSecSaKeyState) RequestSetMacSecSaKeyState
	// ToProto marshals RequestSetMacSecSaKeyState to protobuf object *otg.RequestSetMacSecSaKeyState
	ToProto() (*otg.RequestSetMacSecSaKeyState, error)
	// ToPbText marshals RequestSetMacSecSaKeyState to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestSetMacSecSaKeyState to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestSetMacSecSaKeyState to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestSetMacSecSaKeyState from protobuf object *otg.RequestSetMacSecSaKeyState
	FromProto(msg *otg.RequestSetMacSecSaKeyState) (RequestSetMacSecSaKeyState, error)
	// FromPbText unmarshals RequestSetMacSecSaKeyState from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestSetMacSecSaKeyState from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestSetMacSecSaKeyState from JSON text
	FromJson(value string) error
	// Validate validates RequestSetMacSecSaKeyState
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestSetMacSecSaKeyState, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestSetMacSecSaKeyState.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestSetMacSecSaKeyState.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestSetMacSecSaKeyState
	// HasPortId checks if PortId has been set in RequestSetMacSecSaKeyState
	HasPortId() bool
	// IsTx returns bool, set in RequestSetMacSecSaKeyState.
	IsTx() bool
	// SetIsTx assigns bool provided by user to RequestSetMacSecSaKeyState
	SetIsTx(value bool) RequestSetMacSecSaKeyState
	// HasIsTx checks if IsTx has been set in RequestSetMacSecSaKeyState
	HasIsTx() bool
	// SaKeyStates returns MacSecSaKeyStateConfigurationList, set in RequestSetMacSecSaKeyState.
	// MacSecSaKeyStateConfigurationList is tBD
	SaKeyStates() MacSecSaKeyStateConfigurationList
	// SetSaKeyStates assigns MacSecSaKeyStateConfigurationList provided by user to RequestSetMacSecSaKeyState.
	// MacSecSaKeyStateConfigurationList is tBD
	SetSaKeyStates(value MacSecSaKeyStateConfigurationList) RequestSetMacSecSaKeyState
	// HasSaKeyStates checks if SaKeyStates has been set in RequestSetMacSecSaKeyState
	HasSaKeyStates() bool
	setNil()
}

func (obj *requestSetMacSecSaKeyState) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "SetMacSecSaKeyState"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasIsTx() {
		var value string
		if obj.IsTx() {
			value = "1"
		} else {
			value = "0"
		}

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "IsTx",
			Type:      "bool",
			Value:     value,
		}

		args = append(args, arg)
	}

	if obj.HasSaKeyStates() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "SaKeyStates",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.MacSec+SaKeyStateConfigurationList",
		}

		err := obj.SaKeyStates().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestSetMacSecSaKeyState) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestSetMacSecSaKeyState) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestSetMacSecSaKeyState) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestSetMacSecSaKeyState object
func (obj *requestSetMacSecSaKeyState) SetPortId(value IdTypePortId) RequestSetMacSecSaKeyState {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// IsTx returns a bool
func (obj *requestSetMacSecSaKeyState) IsTx() bool {

	return *obj.obj.IsTx

}

// description is TBD
// IsTx returns a bool
func (obj *requestSetMacSecSaKeyState) HasIsTx() bool {
	return obj.obj.IsTx != nil
}

// description is TBD
// SetIsTx sets the bool value in the RequestSetMacSecSaKeyState object
func (obj *requestSetMacSecSaKeyState) SetIsTx(value bool) RequestSetMacSecSaKeyState {

	obj.obj.IsTx = &value
	return obj
}

// description is TBD
// SaKeyStates returns a MacSecSaKeyStateConfigurationList
func (obj *requestSetMacSecSaKeyState) SaKeyStates() MacSecSaKeyStateConfigurationList {
	if obj.obj.SaKeyStates == nil {
		obj.obj.SaKeyStates = NewMacSecSaKeyStateConfigurationList().Msg()
	}
	if obj.saKeyStatesHolder == nil {
		obj.saKeyStatesHolder = &macSecSaKeyStateConfigurationList{obj: obj.obj.SaKeyStates}
	}
	return obj.saKeyStatesHolder
}

// description is TBD
// SaKeyStates returns a MacSecSaKeyStateConfigurationList
func (obj *requestSetMacSecSaKeyState) HasSaKeyStates() bool {
	return obj.obj.SaKeyStates != nil
}

// description is TBD
// SetSaKeyStates sets the MacSecSaKeyStateConfigurationList value in the RequestSetMacSecSaKeyState object
func (obj *requestSetMacSecSaKeyState) SetSaKeyStates(value MacSecSaKeyStateConfigurationList) RequestSetMacSecSaKeyState {

	obj.saKeyStatesHolder = nil
	obj.obj.SaKeyStates = value.Msg()

	return obj
}

func (obj *requestSetMacSecSaKeyState) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.SaKeyStates != nil {

		obj.SaKeyStates().validateObj(vObj, set_default)
	}

}

func (obj *requestSetMacSecSaKeyState) setDefault() {

}

// ***** RequestGetMacSecSaKeyStatus *****
type requestGetMacSecSaKeyStatus struct {
	validation
	obj            *otg.RequestGetMacSecSaKeyStatus
	portIdHolder   IdTypePortId
	txSaListHolder ServerMacSecSaList
	rxSaListHolder ServerMacSecSaList
}

func NewRequestGetMacSecSaKeyStatus() RequestGetMacSecSaKeyStatus {
	obj := requestGetMacSecSaKeyStatus{obj: &otg.RequestGetMacSecSaKeyStatus{}}
	obj.setDefault()
	return &obj
}

func (obj *requestGetMacSecSaKeyStatus) Msg() *otg.RequestGetMacSecSaKeyStatus {
	return obj.obj
}

func (obj *requestGetMacSecSaKeyStatus) SetMsg(msg *otg.RequestGetMacSecSaKeyStatus) RequestGetMacSecSaKeyStatus {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestGetMacSecSaKeyStatus) ToProto() (*otg.RequestGetMacSecSaKeyStatus, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestGetMacSecSaKeyStatus) FromProto(msg *otg.RequestGetMacSecSaKeyStatus) (RequestGetMacSecSaKeyStatus, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestGetMacSecSaKeyStatus) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestGetMacSecSaKeyStatus) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestGetMacSecSaKeyStatus) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestGetMacSecSaKeyStatus) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestGetMacSecSaKeyStatus) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestGetMacSecSaKeyStatus) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestGetMacSecSaKeyStatus) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestGetMacSecSaKeyStatus) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestGetMacSecSaKeyStatus) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestGetMacSecSaKeyStatus) Clone() (RequestGetMacSecSaKeyStatus, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestGetMacSecSaKeyStatus()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestGetMacSecSaKeyStatus) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestGetMacSecSaKeyStatus) setNil() {
	obj.portIdHolder = nil
	obj.txSaListHolder = nil
	obj.rxSaListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestGetMacSecSaKeyStatus is description is TBD
type RequestGetMacSecSaKeyStatus interface {
	Validation
	// Msg marshals RequestGetMacSecSaKeyStatus to protobuf object *otg.RequestGetMacSecSaKeyStatus
	// and doesn't set defaults
	Msg() *otg.RequestGetMacSecSaKeyStatus
	// SetMsg unmarshals RequestGetMacSecSaKeyStatus from protobuf object *otg.RequestGetMacSecSaKeyStatus
	// and doesn't set defaults
	SetMsg(*otg.RequestGetMacSecSaKeyStatus) RequestGetMacSecSaKeyStatus
	// ToProto marshals RequestGetMacSecSaKeyStatus to protobuf object *otg.RequestGetMacSecSaKeyStatus
	ToProto() (*otg.RequestGetMacSecSaKeyStatus, error)
	// ToPbText marshals RequestGetMacSecSaKeyStatus to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestGetMacSecSaKeyStatus to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestGetMacSecSaKeyStatus to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestGetMacSecSaKeyStatus from protobuf object *otg.RequestGetMacSecSaKeyStatus
	FromProto(msg *otg.RequestGetMacSecSaKeyStatus) (RequestGetMacSecSaKeyStatus, error)
	// FromPbText unmarshals RequestGetMacSecSaKeyStatus from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestGetMacSecSaKeyStatus from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestGetMacSecSaKeyStatus from JSON text
	FromJson(value string) error
	// Validate validates RequestGetMacSecSaKeyStatus
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestGetMacSecSaKeyStatus, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestGetMacSecSaKeyStatus.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestGetMacSecSaKeyStatus.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestGetMacSecSaKeyStatus
	// HasPortId checks if PortId has been set in RequestGetMacSecSaKeyStatus
	HasPortId() bool
	// GetTxKeyStatus returns bool, set in RequestGetMacSecSaKeyStatus.
	GetTxKeyStatus() bool
	// SetGetTxKeyStatus assigns bool provided by user to RequestGetMacSecSaKeyStatus
	SetGetTxKeyStatus(value bool) RequestGetMacSecSaKeyStatus
	// HasGetTxKeyStatus checks if GetTxKeyStatus has been set in RequestGetMacSecSaKeyStatus
	HasGetTxKeyStatus() bool
	// TxSaList returns ServerMacSecSaList, set in RequestGetMacSecSaKeyStatus.
	// ServerMacSecSaList is tBD
	TxSaList() ServerMacSecSaList
	// SetTxSaList assigns ServerMacSecSaList provided by user to RequestGetMacSecSaKeyStatus.
	// ServerMacSecSaList is tBD
	SetTxSaList(value ServerMacSecSaList) RequestGetMacSecSaKeyStatus
	// HasTxSaList checks if TxSaList has been set in RequestGetMacSecSaKeyStatus
	HasTxSaList() bool
	// GetRxKeyStatus returns bool, set in RequestGetMacSecSaKeyStatus.
	GetRxKeyStatus() bool
	// SetGetRxKeyStatus assigns bool provided by user to RequestGetMacSecSaKeyStatus
	SetGetRxKeyStatus(value bool) RequestGetMacSecSaKeyStatus
	// HasGetRxKeyStatus checks if GetRxKeyStatus has been set in RequestGetMacSecSaKeyStatus
	HasGetRxKeyStatus() bool
	// RxSaList returns ServerMacSecSaList, set in RequestGetMacSecSaKeyStatus.
	// ServerMacSecSaList is tBD
	RxSaList() ServerMacSecSaList
	// SetRxSaList assigns ServerMacSecSaList provided by user to RequestGetMacSecSaKeyStatus.
	// ServerMacSecSaList is tBD
	SetRxSaList(value ServerMacSecSaList) RequestGetMacSecSaKeyStatus
	// HasRxSaList checks if RxSaList has been set in RequestGetMacSecSaKeyStatus
	HasRxSaList() bool
	setNil()
}

func (obj *requestGetMacSecSaKeyStatus) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "GetMacSecSaKeyStatus"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasGetTxKeyStatus() {
		var value string
		if obj.GetTxKeyStatus() {
			value = "1"
		} else {
			value = "0"
		}

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "GetTxKeyStatus",
			Type:      "bool",
			Value:     value,
		}

		args = append(args, arg)
	}

	if obj.HasTxSaList() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "TxSaList",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Server+MacSecSaList",
		}

		err := obj.TxSaList().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasGetRxKeyStatus() {
		var value string
		if obj.GetRxKeyStatus() {
			value = "1"
		} else {
			value = "0"
		}

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "GetRxKeyStatus",
			Type:      "bool",
			Value:     value,
		}

		args = append(args, arg)
	}

	if obj.HasRxSaList() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "RxSaList",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Server+MacSecSaList",
		}

		err := obj.RxSaList().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	argTxMacSecSaKeyStatusList := Argument{
		Direction: ArgumentDirectionOut,
		Name:      "TxMacSecSaKeyStatusList",
		Type:      "Ixia.IxOS.RPC.PCPU.RPF.MacSec+TxMacSecSaKeyStatusTypeList",
	}
	args = append(args, argTxMacSecSaKeyStatusList)

	argRxMacSecSaKeyStatusList := Argument{
		Direction: ArgumentDirectionOut,
		Name:      "RxMacSecSaKeyStatusList",
		Type:      "Ixia.IxOS.RPC.PCPU.RPF.MacSec+RxMacSecSaKeyStatusTypeList",
	}
	args = append(args, argRxMacSecSaKeyStatusList)
	xObj.Argument = args
	return nil
}

func (obj *requestGetMacSecSaKeyStatus) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestGetMacSecSaKeyStatus) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestGetMacSecSaKeyStatus) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestGetMacSecSaKeyStatus object
func (obj *requestGetMacSecSaKeyStatus) SetPortId(value IdTypePortId) RequestGetMacSecSaKeyStatus {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// GetTxKeyStatus returns a bool
func (obj *requestGetMacSecSaKeyStatus) GetTxKeyStatus() bool {

	return *obj.obj.GetTxKeyStatus

}

// description is TBD
// GetTxKeyStatus returns a bool
func (obj *requestGetMacSecSaKeyStatus) HasGetTxKeyStatus() bool {
	return obj.obj.GetTxKeyStatus != nil
}

// description is TBD
// SetGetTxKeyStatus sets the bool value in the RequestGetMacSecSaKeyStatus object
func (obj *requestGetMacSecSaKeyStatus) SetGetTxKeyStatus(value bool) RequestGetMacSecSaKeyStatus {

	obj.obj.GetTxKeyStatus = &value
	return obj
}

// description is TBD
// TxSaList returns a ServerMacSecSaList
func (obj *requestGetMacSecSaKeyStatus) TxSaList() ServerMacSecSaList {
	if obj.obj.TxSaList == nil {
		obj.obj.TxSaList = NewServerMacSecSaList().Msg()
	}
	if obj.txSaListHolder == nil {
		obj.txSaListHolder = &serverMacSecSaList{obj: obj.obj.TxSaList}
	}
	return obj.txSaListHolder
}

// description is TBD
// TxSaList returns a ServerMacSecSaList
func (obj *requestGetMacSecSaKeyStatus) HasTxSaList() bool {
	return obj.obj.TxSaList != nil
}

// description is TBD
// SetTxSaList sets the ServerMacSecSaList value in the RequestGetMacSecSaKeyStatus object
func (obj *requestGetMacSecSaKeyStatus) SetTxSaList(value ServerMacSecSaList) RequestGetMacSecSaKeyStatus {

	obj.txSaListHolder = nil
	obj.obj.TxSaList = value.Msg()

	return obj
}

// description is TBD
// GetRxKeyStatus returns a bool
func (obj *requestGetMacSecSaKeyStatus) GetRxKeyStatus() bool {

	return *obj.obj.GetRxKeyStatus

}

// description is TBD
// GetRxKeyStatus returns a bool
func (obj *requestGetMacSecSaKeyStatus) HasGetRxKeyStatus() bool {
	return obj.obj.GetRxKeyStatus != nil
}

// description is TBD
// SetGetRxKeyStatus sets the bool value in the RequestGetMacSecSaKeyStatus object
func (obj *requestGetMacSecSaKeyStatus) SetGetRxKeyStatus(value bool) RequestGetMacSecSaKeyStatus {

	obj.obj.GetRxKeyStatus = &value
	return obj
}

// description is TBD
// RxSaList returns a ServerMacSecSaList
func (obj *requestGetMacSecSaKeyStatus) RxSaList() ServerMacSecSaList {
	if obj.obj.RxSaList == nil {
		obj.obj.RxSaList = NewServerMacSecSaList().Msg()
	}
	if obj.rxSaListHolder == nil {
		obj.rxSaListHolder = &serverMacSecSaList{obj: obj.obj.RxSaList}
	}
	return obj.rxSaListHolder
}

// description is TBD
// RxSaList returns a ServerMacSecSaList
func (obj *requestGetMacSecSaKeyStatus) HasRxSaList() bool {
	return obj.obj.RxSaList != nil
}

// description is TBD
// SetRxSaList sets the ServerMacSecSaList value in the RequestGetMacSecSaKeyStatus object
func (obj *requestGetMacSecSaKeyStatus) SetRxSaList(value ServerMacSecSaList) RequestGetMacSecSaKeyStatus {

	obj.rxSaListHolder = nil
	obj.obj.RxSaList = value.Msg()

	return obj
}

func (obj *requestGetMacSecSaKeyStatus) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.TxSaList != nil {

		obj.TxSaList().validateObj(vObj, set_default)
	}

	if obj.obj.RxSaList != nil {

		obj.RxSaList().validateObj(vObj, set_default)
	}

}

func (obj *requestGetMacSecSaKeyStatus) setDefault() {

}

// ***** RequestConfigureMacSecUDS *****
type requestConfigureMacSecUDS struct {
	validation
	obj                       *otg.RequestConfigureMacSecUDS
	portIdHolder              IdTypePortId
	macsecUdsConfigListHolder MacSecRxMacSecUDSConfigList
}

func NewRequestConfigureMacSecUDS() RequestConfigureMacSecUDS {
	obj := requestConfigureMacSecUDS{obj: &otg.RequestConfigureMacSecUDS{}}
	obj.setDefault()
	return &obj
}

func (obj *requestConfigureMacSecUDS) Msg() *otg.RequestConfigureMacSecUDS {
	return obj.obj
}

func (obj *requestConfigureMacSecUDS) SetMsg(msg *otg.RequestConfigureMacSecUDS) RequestConfigureMacSecUDS {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestConfigureMacSecUDS) ToProto() (*otg.RequestConfigureMacSecUDS, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestConfigureMacSecUDS) FromProto(msg *otg.RequestConfigureMacSecUDS) (RequestConfigureMacSecUDS, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestConfigureMacSecUDS) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestConfigureMacSecUDS) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestConfigureMacSecUDS) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestConfigureMacSecUDS) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestConfigureMacSecUDS) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestConfigureMacSecUDS) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestConfigureMacSecUDS) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestConfigureMacSecUDS) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestConfigureMacSecUDS) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestConfigureMacSecUDS) Clone() (RequestConfigureMacSecUDS, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestConfigureMacSecUDS()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestConfigureMacSecUDS) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestConfigureMacSecUDS) setNil() {
	obj.portIdHolder = nil
	obj.macsecUdsConfigListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestConfigureMacSecUDS is description is TBD
type RequestConfigureMacSecUDS interface {
	Validation
	// Msg marshals RequestConfigureMacSecUDS to protobuf object *otg.RequestConfigureMacSecUDS
	// and doesn't set defaults
	Msg() *otg.RequestConfigureMacSecUDS
	// SetMsg unmarshals RequestConfigureMacSecUDS from protobuf object *otg.RequestConfigureMacSecUDS
	// and doesn't set defaults
	SetMsg(*otg.RequestConfigureMacSecUDS) RequestConfigureMacSecUDS
	// ToProto marshals RequestConfigureMacSecUDS to protobuf object *otg.RequestConfigureMacSecUDS
	ToProto() (*otg.RequestConfigureMacSecUDS, error)
	// ToPbText marshals RequestConfigureMacSecUDS to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestConfigureMacSecUDS to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestConfigureMacSecUDS to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestConfigureMacSecUDS from protobuf object *otg.RequestConfigureMacSecUDS
	FromProto(msg *otg.RequestConfigureMacSecUDS) (RequestConfigureMacSecUDS, error)
	// FromPbText unmarshals RequestConfigureMacSecUDS from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestConfigureMacSecUDS from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestConfigureMacSecUDS from JSON text
	FromJson(value string) error
	// Validate validates RequestConfigureMacSecUDS
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestConfigureMacSecUDS, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestConfigureMacSecUDS.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestConfigureMacSecUDS.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestConfigureMacSecUDS
	// HasPortId checks if PortId has been set in RequestConfigureMacSecUDS
	HasPortId() bool
	// MacsecUdsConfigList returns MacSecRxMacSecUDSConfigList, set in RequestConfigureMacSecUDS.
	// MacSecRxMacSecUDSConfigList is tBD
	MacsecUdsConfigList() MacSecRxMacSecUDSConfigList
	// SetMacsecUdsConfigList assigns MacSecRxMacSecUDSConfigList provided by user to RequestConfigureMacSecUDS.
	// MacSecRxMacSecUDSConfigList is tBD
	SetMacsecUdsConfigList(value MacSecRxMacSecUDSConfigList) RequestConfigureMacSecUDS
	// HasMacsecUdsConfigList checks if MacsecUdsConfigList has been set in RequestConfigureMacSecUDS
	HasMacsecUdsConfigList() bool
	setNil()
}

func (obj *requestConfigureMacSecUDS) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "ConfigureMacSecUDS"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasMacsecUdsConfigList() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "MacsecUdsConfigList",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.MacSec+RxMacSecUDSConfigList",
		}

		err := obj.MacsecUdsConfigList().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestConfigureMacSecUDS) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestConfigureMacSecUDS) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestConfigureMacSecUDS) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestConfigureMacSecUDS object
func (obj *requestConfigureMacSecUDS) SetPortId(value IdTypePortId) RequestConfigureMacSecUDS {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// description is TBD
// MacsecUdsConfigList returns a MacSecRxMacSecUDSConfigList
func (obj *requestConfigureMacSecUDS) MacsecUdsConfigList() MacSecRxMacSecUDSConfigList {
	if obj.obj.MacsecUdsConfigList == nil {
		obj.obj.MacsecUdsConfigList = NewMacSecRxMacSecUDSConfigList().Msg()
	}
	if obj.macsecUdsConfigListHolder == nil {
		obj.macsecUdsConfigListHolder = &macSecRxMacSecUDSConfigList{obj: obj.obj.MacsecUdsConfigList}
	}
	return obj.macsecUdsConfigListHolder
}

// description is TBD
// MacsecUdsConfigList returns a MacSecRxMacSecUDSConfigList
func (obj *requestConfigureMacSecUDS) HasMacsecUdsConfigList() bool {
	return obj.obj.MacsecUdsConfigList != nil
}

// description is TBD
// SetMacsecUdsConfigList sets the MacSecRxMacSecUDSConfigList value in the RequestConfigureMacSecUDS object
func (obj *requestConfigureMacSecUDS) SetMacsecUdsConfigList(value MacSecRxMacSecUDSConfigList) RequestConfigureMacSecUDS {

	obj.macsecUdsConfigListHolder = nil
	obj.obj.MacsecUdsConfigList = value.Msg()

	return obj
}

func (obj *requestConfigureMacSecUDS) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.MacsecUdsConfigList != nil {

		obj.MacsecUdsConfigList().validateObj(vObj, set_default)
	}

}

func (obj *requestConfigureMacSecUDS) setDefault() {

}

// ***** RequestGetStatCatalog *****
type requestGetStatCatalog struct {
	validation
	obj          *otg.RequestGetStatCatalog
	portIdHolder IdTypePortId
}

func NewRequestGetStatCatalog() RequestGetStatCatalog {
	obj := requestGetStatCatalog{obj: &otg.RequestGetStatCatalog{}}
	obj.setDefault()
	return &obj
}

func (obj *requestGetStatCatalog) Msg() *otg.RequestGetStatCatalog {
	return obj.obj
}

func (obj *requestGetStatCatalog) SetMsg(msg *otg.RequestGetStatCatalog) RequestGetStatCatalog {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestGetStatCatalog) ToProto() (*otg.RequestGetStatCatalog, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestGetStatCatalog) FromProto(msg *otg.RequestGetStatCatalog) (RequestGetStatCatalog, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestGetStatCatalog) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestGetStatCatalog) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestGetStatCatalog) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestGetStatCatalog) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestGetStatCatalog) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestGetStatCatalog) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestGetStatCatalog) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestGetStatCatalog) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestGetStatCatalog) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestGetStatCatalog) Clone() (RequestGetStatCatalog, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestGetStatCatalog()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestGetStatCatalog) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestGetStatCatalog) setNil() {
	obj.portIdHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestGetStatCatalog is description is TBD
type RequestGetStatCatalog interface {
	Validation
	// Msg marshals RequestGetStatCatalog to protobuf object *otg.RequestGetStatCatalog
	// and doesn't set defaults
	Msg() *otg.RequestGetStatCatalog
	// SetMsg unmarshals RequestGetStatCatalog from protobuf object *otg.RequestGetStatCatalog
	// and doesn't set defaults
	SetMsg(*otg.RequestGetStatCatalog) RequestGetStatCatalog
	// ToProto marshals RequestGetStatCatalog to protobuf object *otg.RequestGetStatCatalog
	ToProto() (*otg.RequestGetStatCatalog, error)
	// ToPbText marshals RequestGetStatCatalog to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestGetStatCatalog to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestGetStatCatalog to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestGetStatCatalog from protobuf object *otg.RequestGetStatCatalog
	FromProto(msg *otg.RequestGetStatCatalog) (RequestGetStatCatalog, error)
	// FromPbText unmarshals RequestGetStatCatalog from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestGetStatCatalog from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestGetStatCatalog from JSON text
	FromJson(value string) error
	// Validate validates RequestGetStatCatalog
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestGetStatCatalog, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestGetStatCatalog.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestGetStatCatalog.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestGetStatCatalog
	// HasPortId checks if PortId has been set in RequestGetStatCatalog
	HasPortId() bool
	setNil()
}

func (obj *requestGetStatCatalog) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "GetStatCatalog"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	argCatalogItem := Argument{
		Direction: ArgumentDirectionOut,
		Name:      "CatalogItem",
		Type:      "Ixia.IxOS.RPC.PCPU.RPF.StatCatalog+StHtgCatalogItem",
	}
	args = append(args, argCatalogItem)
	xObj.Argument = args
	return nil
}

func (obj *requestGetStatCatalog) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestGetStatCatalog) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestGetStatCatalog) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestGetStatCatalog object
func (obj *requestGetStatCatalog) SetPortId(value IdTypePortId) RequestGetStatCatalog {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

func (obj *requestGetStatCatalog) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

}

func (obj *requestGetStatCatalog) setDefault() {

}

// ***** RequestClearStats *****
type requestClearStats struct {
	validation
	obj          *otg.RequestClearStats
	portIdHolder IdTypePortId
}

func NewRequestClearStats() RequestClearStats {
	obj := requestClearStats{obj: &otg.RequestClearStats{}}
	obj.setDefault()
	return &obj
}

func (obj *requestClearStats) Msg() *otg.RequestClearStats {
	return obj.obj
}

func (obj *requestClearStats) SetMsg(msg *otg.RequestClearStats) RequestClearStats {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestClearStats) ToProto() (*otg.RequestClearStats, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestClearStats) FromProto(msg *otg.RequestClearStats) (RequestClearStats, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestClearStats) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestClearStats) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestClearStats) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestClearStats) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestClearStats) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestClearStats) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestClearStats) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestClearStats) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestClearStats) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestClearStats) Clone() (RequestClearStats, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestClearStats()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestClearStats) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestClearStats) setNil() {
	obj.portIdHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestClearStats is description is TBD
type RequestClearStats interface {
	Validation
	// Msg marshals RequestClearStats to protobuf object *otg.RequestClearStats
	// and doesn't set defaults
	Msg() *otg.RequestClearStats
	// SetMsg unmarshals RequestClearStats from protobuf object *otg.RequestClearStats
	// and doesn't set defaults
	SetMsg(*otg.RequestClearStats) RequestClearStats
	// ToProto marshals RequestClearStats to protobuf object *otg.RequestClearStats
	ToProto() (*otg.RequestClearStats, error)
	// ToPbText marshals RequestClearStats to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestClearStats to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestClearStats to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestClearStats from protobuf object *otg.RequestClearStats
	FromProto(msg *otg.RequestClearStats) (RequestClearStats, error)
	// FromPbText unmarshals RequestClearStats from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestClearStats from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestClearStats from JSON text
	FromJson(value string) error
	// Validate validates RequestClearStats
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestClearStats, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestClearStats.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestClearStats.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestClearStats
	// HasPortId checks if PortId has been set in RequestClearStats
	HasPortId() bool
	setNil()
}

func (obj *requestClearStats) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "ClearStats"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestClearStats) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestClearStats) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestClearStats) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestClearStats object
func (obj *requestClearStats) SetPortId(value IdTypePortId) RequestClearStats {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

func (obj *requestClearStats) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

}

func (obj *requestClearStats) setDefault() {

}

// ***** RequestClearPerStreamTxStats *****
type requestClearPerStreamTxStats struct {
	validation
	obj          *otg.RequestClearPerStreamTxStats
	portIdHolder IdTypePortId
}

func NewRequestClearPerStreamTxStats() RequestClearPerStreamTxStats {
	obj := requestClearPerStreamTxStats{obj: &otg.RequestClearPerStreamTxStats{}}
	obj.setDefault()
	return &obj
}

func (obj *requestClearPerStreamTxStats) Msg() *otg.RequestClearPerStreamTxStats {
	return obj.obj
}

func (obj *requestClearPerStreamTxStats) SetMsg(msg *otg.RequestClearPerStreamTxStats) RequestClearPerStreamTxStats {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestClearPerStreamTxStats) ToProto() (*otg.RequestClearPerStreamTxStats, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestClearPerStreamTxStats) FromProto(msg *otg.RequestClearPerStreamTxStats) (RequestClearPerStreamTxStats, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestClearPerStreamTxStats) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestClearPerStreamTxStats) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestClearPerStreamTxStats) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestClearPerStreamTxStats) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestClearPerStreamTxStats) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestClearPerStreamTxStats) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestClearPerStreamTxStats) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestClearPerStreamTxStats) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestClearPerStreamTxStats) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestClearPerStreamTxStats) Clone() (RequestClearPerStreamTxStats, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestClearPerStreamTxStats()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestClearPerStreamTxStats) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestClearPerStreamTxStats) setNil() {
	obj.portIdHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestClearPerStreamTxStats is description is TBD
type RequestClearPerStreamTxStats interface {
	Validation
	// Msg marshals RequestClearPerStreamTxStats to protobuf object *otg.RequestClearPerStreamTxStats
	// and doesn't set defaults
	Msg() *otg.RequestClearPerStreamTxStats
	// SetMsg unmarshals RequestClearPerStreamTxStats from protobuf object *otg.RequestClearPerStreamTxStats
	// and doesn't set defaults
	SetMsg(*otg.RequestClearPerStreamTxStats) RequestClearPerStreamTxStats
	// ToProto marshals RequestClearPerStreamTxStats to protobuf object *otg.RequestClearPerStreamTxStats
	ToProto() (*otg.RequestClearPerStreamTxStats, error)
	// ToPbText marshals RequestClearPerStreamTxStats to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestClearPerStreamTxStats to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestClearPerStreamTxStats to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestClearPerStreamTxStats from protobuf object *otg.RequestClearPerStreamTxStats
	FromProto(msg *otg.RequestClearPerStreamTxStats) (RequestClearPerStreamTxStats, error)
	// FromPbText unmarshals RequestClearPerStreamTxStats from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestClearPerStreamTxStats from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestClearPerStreamTxStats from JSON text
	FromJson(value string) error
	// Validate validates RequestClearPerStreamTxStats
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestClearPerStreamTxStats, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestClearPerStreamTxStats.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestClearPerStreamTxStats.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestClearPerStreamTxStats
	// HasPortId checks if PortId has been set in RequestClearPerStreamTxStats
	HasPortId() bool
	setNil()
}

func (obj *requestClearPerStreamTxStats) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "ClearPerStreamTxStats"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestClearPerStreamTxStats) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestClearPerStreamTxStats) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestClearPerStreamTxStats) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestClearPerStreamTxStats object
func (obj *requestClearPerStreamTxStats) SetPortId(value IdTypePortId) RequestClearPerStreamTxStats {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

func (obj *requestClearPerStreamTxStats) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

}

func (obj *requestClearPerStreamTxStats) setDefault() {

}

// ***** RequestVMAcquire *****
type requestVMAcquire struct {
	validation
	obj          *otg.RequestVMAcquire
	slotIdHolder IdTypeSlotId
}

func NewRequestVMAcquire() RequestVMAcquire {
	obj := requestVMAcquire{obj: &otg.RequestVMAcquire{}}
	obj.setDefault()
	return &obj
}

func (obj *requestVMAcquire) Msg() *otg.RequestVMAcquire {
	return obj.obj
}

func (obj *requestVMAcquire) SetMsg(msg *otg.RequestVMAcquire) RequestVMAcquire {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestVMAcquire) ToProto() (*otg.RequestVMAcquire, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestVMAcquire) FromProto(msg *otg.RequestVMAcquire) (RequestVMAcquire, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestVMAcquire) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestVMAcquire) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestVMAcquire) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestVMAcquire) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestVMAcquire) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestVMAcquire) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestVMAcquire) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestVMAcquire) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestVMAcquire) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestVMAcquire) Clone() (RequestVMAcquire, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestVMAcquire()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestVMAcquire) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestVMAcquire) setNil() {
	obj.slotIdHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestVMAcquire is description is TBD
type RequestVMAcquire interface {
	Validation
	// Msg marshals RequestVMAcquire to protobuf object *otg.RequestVMAcquire
	// and doesn't set defaults
	Msg() *otg.RequestVMAcquire
	// SetMsg unmarshals RequestVMAcquire from protobuf object *otg.RequestVMAcquire
	// and doesn't set defaults
	SetMsg(*otg.RequestVMAcquire) RequestVMAcquire
	// ToProto marshals RequestVMAcquire to protobuf object *otg.RequestVMAcquire
	ToProto() (*otg.RequestVMAcquire, error)
	// ToPbText marshals RequestVMAcquire to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestVMAcquire to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestVMAcquire to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestVMAcquire from protobuf object *otg.RequestVMAcquire
	FromProto(msg *otg.RequestVMAcquire) (RequestVMAcquire, error)
	// FromPbText unmarshals RequestVMAcquire from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestVMAcquire from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestVMAcquire from JSON text
	FromJson(value string) error
	// Validate validates RequestVMAcquire
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestVMAcquire, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// SlotId returns IdTypeSlotId, set in RequestVMAcquire.
	// IdTypeSlotId is tBD
	SlotId() IdTypeSlotId
	// SetSlotId assigns IdTypeSlotId provided by user to RequestVMAcquire.
	// IdTypeSlotId is tBD
	SetSlotId(value IdTypeSlotId) RequestVMAcquire
	// HasSlotId checks if SlotId has been set in RequestVMAcquire
	HasSlotId() bool
	// ManagementIp returns string, set in RequestVMAcquire.
	ManagementIp() string
	// SetManagementIp assigns string provided by user to RequestVMAcquire
	SetManagementIp(value string) RequestVMAcquire
	// HasManagementIp checks if ManagementIp has been set in RequestVMAcquire
	HasManagementIp() bool
	setNil()
}

func (obj *requestVMAcquire) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "VMAcquire"
	args := []Argument{}

	if obj.HasSlotId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "SlotId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+SlotId",
		}

		err := obj.SlotId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}

	if obj.HasManagementIp() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "ManagementIp",
			Type:      "string",
			Value:     obj.ManagementIp(),
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestVMAcquire) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// SlotId returns a IdTypeSlotId
func (obj *requestVMAcquire) SlotId() IdTypeSlotId {
	if obj.obj.SlotId == nil {
		obj.obj.SlotId = NewIdTypeSlotId().Msg()
	}
	if obj.slotIdHolder == nil {
		obj.slotIdHolder = &idTypeSlotId{obj: obj.obj.SlotId}
	}
	return obj.slotIdHolder
}

// description is TBD
// SlotId returns a IdTypeSlotId
func (obj *requestVMAcquire) HasSlotId() bool {
	return obj.obj.SlotId != nil
}

// description is TBD
// SetSlotId sets the IdTypeSlotId value in the RequestVMAcquire object
func (obj *requestVMAcquire) SetSlotId(value IdTypeSlotId) RequestVMAcquire {

	obj.slotIdHolder = nil
	obj.obj.SlotId = value.Msg()

	return obj
}

// description is TBD
// ManagementIp returns a string
func (obj *requestVMAcquire) ManagementIp() string {

	return *obj.obj.ManagementIp

}

// description is TBD
// ManagementIp returns a string
func (obj *requestVMAcquire) HasManagementIp() bool {
	return obj.obj.ManagementIp != nil
}

// description is TBD
// SetManagementIp sets the string value in the RequestVMAcquire object
func (obj *requestVMAcquire) SetManagementIp(value string) RequestVMAcquire {

	obj.obj.ManagementIp = &value
	return obj
}

func (obj *requestVMAcquire) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.SlotId != nil {

		obj.SlotId().validateObj(vObj, set_default)
	}

}

func (obj *requestVMAcquire) setDefault() {

}

// ***** RequestVMAddPort *****
type requestVMAddPort struct {
	validation
	obj              *otg.RequestVMAddPort
	vmPortInfoHolder ServerVMPortInfo
}

func NewRequestVMAddPort() RequestVMAddPort {
	obj := requestVMAddPort{obj: &otg.RequestVMAddPort{}}
	obj.setDefault()
	return &obj
}

func (obj *requestVMAddPort) Msg() *otg.RequestVMAddPort {
	return obj.obj
}

func (obj *requestVMAddPort) SetMsg(msg *otg.RequestVMAddPort) RequestVMAddPort {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestVMAddPort) ToProto() (*otg.RequestVMAddPort, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestVMAddPort) FromProto(msg *otg.RequestVMAddPort) (RequestVMAddPort, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestVMAddPort) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestVMAddPort) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestVMAddPort) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestVMAddPort) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestVMAddPort) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestVMAddPort) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestVMAddPort) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestVMAddPort) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestVMAddPort) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestVMAddPort) Clone() (RequestVMAddPort, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestVMAddPort()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestVMAddPort) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestVMAddPort) setNil() {
	obj.vmPortInfoHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestVMAddPort is description is TBD
type RequestVMAddPort interface {
	Validation
	// Msg marshals RequestVMAddPort to protobuf object *otg.RequestVMAddPort
	// and doesn't set defaults
	Msg() *otg.RequestVMAddPort
	// SetMsg unmarshals RequestVMAddPort from protobuf object *otg.RequestVMAddPort
	// and doesn't set defaults
	SetMsg(*otg.RequestVMAddPort) RequestVMAddPort
	// ToProto marshals RequestVMAddPort to protobuf object *otg.RequestVMAddPort
	ToProto() (*otg.RequestVMAddPort, error)
	// ToPbText marshals RequestVMAddPort to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestVMAddPort to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestVMAddPort to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestVMAddPort from protobuf object *otg.RequestVMAddPort
	FromProto(msg *otg.RequestVMAddPort) (RequestVMAddPort, error)
	// FromPbText unmarshals RequestVMAddPort from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestVMAddPort from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestVMAddPort from JSON text
	FromJson(value string) error
	// Validate validates RequestVMAddPort
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestVMAddPort, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// VmPortInfo returns ServerVMPortInfo, set in RequestVMAddPort.
	// ServerVMPortInfo is id, a unique identifier for the port. name, the name of the test interface. macAddress, the mac address of the test interface. macAddress, the mac address of the test interface. ipAddress, the ip address of the test interface. mtu, the mtu of the test interface. isPromiscuous, whether or not the test nic should be placed in promiscuous mode.
	VmPortInfo() ServerVMPortInfo
	// SetVmPortInfo assigns ServerVMPortInfo provided by user to RequestVMAddPort.
	// ServerVMPortInfo is id, a unique identifier for the port. name, the name of the test interface. macAddress, the mac address of the test interface. macAddress, the mac address of the test interface. ipAddress, the ip address of the test interface. mtu, the mtu of the test interface. isPromiscuous, whether or not the test nic should be placed in promiscuous mode.
	SetVmPortInfo(value ServerVMPortInfo) RequestVMAddPort
	// HasVmPortInfo checks if VmPortInfo has been set in RequestVMAddPort
	HasVmPortInfo() bool
	setNil()
}

func (obj *requestVMAddPort) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "VMAddPort"
	args := []Argument{}

	if obj.HasVmPortInfo() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "VmPortInfo",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.Server+VMPortInfo",
		}

		err := obj.VmPortInfo().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestVMAddPort) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// VmPortInfo returns a ServerVMPortInfo
func (obj *requestVMAddPort) VmPortInfo() ServerVMPortInfo {
	if obj.obj.VmPortInfo == nil {
		obj.obj.VmPortInfo = NewServerVMPortInfo().Msg()
	}
	if obj.vmPortInfoHolder == nil {
		obj.vmPortInfoHolder = &serverVMPortInfo{obj: obj.obj.VmPortInfo}
	}
	return obj.vmPortInfoHolder
}

// description is TBD
// VmPortInfo returns a ServerVMPortInfo
func (obj *requestVMAddPort) HasVmPortInfo() bool {
	return obj.obj.VmPortInfo != nil
}

// description is TBD
// SetVmPortInfo sets the ServerVMPortInfo value in the RequestVMAddPort object
func (obj *requestVMAddPort) SetVmPortInfo(value ServerVMPortInfo) RequestVMAddPort {

	obj.vmPortInfoHolder = nil
	obj.obj.VmPortInfo = value.Msg()

	return obj
}

func (obj *requestVMAddPort) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.VmPortInfo != nil {

		obj.VmPortInfo().validateObj(vObj, set_default)
	}

}

func (obj *requestVMAddPort) setDefault() {

}

// ***** RequestVMRemovePort *****
type requestVMRemovePort struct {
	validation
	obj          *otg.RequestVMRemovePort
	portIdHolder IdTypePortId
}

func NewRequestVMRemovePort() RequestVMRemovePort {
	obj := requestVMRemovePort{obj: &otg.RequestVMRemovePort{}}
	obj.setDefault()
	return &obj
}

func (obj *requestVMRemovePort) Msg() *otg.RequestVMRemovePort {
	return obj.obj
}

func (obj *requestVMRemovePort) SetMsg(msg *otg.RequestVMRemovePort) RequestVMRemovePort {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *requestVMRemovePort) ToProto() (*otg.RequestVMRemovePort, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *requestVMRemovePort) FromProto(msg *otg.RequestVMRemovePort) (RequestVMRemovePort, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *requestVMRemovePort) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *requestVMRemovePort) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *requestVMRemovePort) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestVMRemovePort) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *requestVMRemovePort) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *requestVMRemovePort) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *requestVMRemovePort) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *requestVMRemovePort) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *requestVMRemovePort) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *requestVMRemovePort) Clone() (RequestVMRemovePort, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRequestVMRemovePort()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *requestVMRemovePort) ToRpfXml() (*ObjectRequest, error) {
	ret := &ObjectRequest{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *requestVMRemovePort) setNil() {
	obj.portIdHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RequestVMRemovePort is description is TBD
type RequestVMRemovePort interface {
	Validation
	// Msg marshals RequestVMRemovePort to protobuf object *otg.RequestVMRemovePort
	// and doesn't set defaults
	Msg() *otg.RequestVMRemovePort
	// SetMsg unmarshals RequestVMRemovePort from protobuf object *otg.RequestVMRemovePort
	// and doesn't set defaults
	SetMsg(*otg.RequestVMRemovePort) RequestVMRemovePort
	// ToProto marshals RequestVMRemovePort to protobuf object *otg.RequestVMRemovePort
	ToProto() (*otg.RequestVMRemovePort, error)
	// ToPbText marshals RequestVMRemovePort to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RequestVMRemovePort to YAML text
	ToYaml() (string, error)
	// ToJson marshals RequestVMRemovePort to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RequestVMRemovePort from protobuf object *otg.RequestVMRemovePort
	FromProto(msg *otg.RequestVMRemovePort) (RequestVMRemovePort, error)
	// FromPbText unmarshals RequestVMRemovePort from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RequestVMRemovePort from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RequestVMRemovePort from JSON text
	FromJson(value string) error
	// Validate validates RequestVMRemovePort
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RequestVMRemovePort, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*ObjectRequest, error)
	populateXml(*ObjectRequest) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in RequestVMRemovePort.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to RequestVMRemovePort.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) RequestVMRemovePort
	// HasPortId checks if PortId has been set in RequestVMRemovePort
	HasPortId() bool
	setNil()
}

func (obj *requestVMRemovePort) populateXml(xObj *ObjectRequest) error {

	xObj.Type = "Ixia.IxOS.RPC.PCPU.RPF.Server"
	xObj.Method = "VMRemovePort"
	args := []Argument{}

	if obj.HasPortId() {

		arg := Argument{
			Direction: ArgumentDirectionIn,
			Name:      "PortId",
			Type:      "Ixia.IxOS.RPC.PCPU.RPF.IdType+PortId",
		}

		err := obj.PortId().populateXml(&arg)
		if err != nil {
			return err
		}

		args = append(args, arg)
	}
	xObj.Argument = args
	return nil
}

func (obj *requestVMRemovePort) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestVMRemovePort) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// description is TBD
// PortId returns a IdTypePortId
func (obj *requestVMRemovePort) HasPortId() bool {
	return obj.obj.PortId != nil
}

// description is TBD
// SetPortId sets the IdTypePortId value in the RequestVMRemovePort object
func (obj *requestVMRemovePort) SetPortId(value IdTypePortId) RequestVMRemovePort {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

func (obj *requestVMRemovePort) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

}

func (obj *requestVMRemovePort) setDefault() {

}

// ***** SetTcpPortResponse *****
type setTcpPortResponse struct {
	validation
	obj           *otg.SetTcpPortResponse
	warningHolder Warning
}

func NewSetTcpPortResponse() SetTcpPortResponse {
	obj := setTcpPortResponse{obj: &otg.SetTcpPortResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *setTcpPortResponse) Msg() *otg.SetTcpPortResponse {
	return obj.obj
}

func (obj *setTcpPortResponse) SetMsg(msg *otg.SetTcpPortResponse) SetTcpPortResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *setTcpPortResponse) ToProto() (*otg.SetTcpPortResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *setTcpPortResponse) FromProto(msg *otg.SetTcpPortResponse) (SetTcpPortResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *setTcpPortResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *setTcpPortResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *setTcpPortResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *setTcpPortResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *setTcpPortResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *setTcpPortResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *setTcpPortResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *setTcpPortResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *setTcpPortResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *setTcpPortResponse) Clone() (SetTcpPortResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewSetTcpPortResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *setTcpPortResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *setTcpPortResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// SetTcpPortResponse is description is TBD
type SetTcpPortResponse interface {
	Validation
	// Msg marshals SetTcpPortResponse to protobuf object *otg.SetTcpPortResponse
	// and doesn't set defaults
	Msg() *otg.SetTcpPortResponse
	// SetMsg unmarshals SetTcpPortResponse from protobuf object *otg.SetTcpPortResponse
	// and doesn't set defaults
	SetMsg(*otg.SetTcpPortResponse) SetTcpPortResponse
	// ToProto marshals SetTcpPortResponse to protobuf object *otg.SetTcpPortResponse
	ToProto() (*otg.SetTcpPortResponse, error)
	// ToPbText marshals SetTcpPortResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals SetTcpPortResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals SetTcpPortResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals SetTcpPortResponse from protobuf object *otg.SetTcpPortResponse
	FromProto(msg *otg.SetTcpPortResponse) (SetTcpPortResponse, error)
	// FromPbText unmarshals SetTcpPortResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals SetTcpPortResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals SetTcpPortResponse from JSON text
	FromJson(value string) error
	// Validate validates SetTcpPortResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (SetTcpPortResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in SetTcpPortResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to SetTcpPortResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) SetTcpPortResponse
	// HasWarning checks if Warning has been set in SetTcpPortResponse
	HasWarning() bool
	setNil()
}

func (obj *setTcpPortResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *setTcpPortResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *setTcpPortResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *setTcpPortResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the SetTcpPortResponse object
func (obj *setTcpPortResponse) SetWarning(value Warning) SetTcpPortResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *setTcpPortResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *setTcpPortResponse) setDefault() {

}

// ***** InitRequestResponse *****
type initRequestResponse struct {
	validation
	obj                       *otg.InitRequestResponse
	responseInitRequestHolder ResponseInitRequest
}

func NewInitRequestResponse() InitRequestResponse {
	obj := initRequestResponse{obj: &otg.InitRequestResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *initRequestResponse) Msg() *otg.InitRequestResponse {
	return obj.obj
}

func (obj *initRequestResponse) SetMsg(msg *otg.InitRequestResponse) InitRequestResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *initRequestResponse) ToProto() (*otg.InitRequestResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *initRequestResponse) FromProto(msg *otg.InitRequestResponse) (InitRequestResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *initRequestResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *initRequestResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *initRequestResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *initRequestResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *initRequestResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *initRequestResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *initRequestResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *initRequestResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *initRequestResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *initRequestResponse) Clone() (InitRequestResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewInitRequestResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *initRequestResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *initRequestResponse) setNil() {
	obj.responseInitRequestHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// InitRequestResponse is description is TBD
type InitRequestResponse interface {
	Validation
	// Msg marshals InitRequestResponse to protobuf object *otg.InitRequestResponse
	// and doesn't set defaults
	Msg() *otg.InitRequestResponse
	// SetMsg unmarshals InitRequestResponse from protobuf object *otg.InitRequestResponse
	// and doesn't set defaults
	SetMsg(*otg.InitRequestResponse) InitRequestResponse
	// ToProto marshals InitRequestResponse to protobuf object *otg.InitRequestResponse
	ToProto() (*otg.InitRequestResponse, error)
	// ToPbText marshals InitRequestResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals InitRequestResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals InitRequestResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals InitRequestResponse from protobuf object *otg.InitRequestResponse
	FromProto(msg *otg.InitRequestResponse) (InitRequestResponse, error)
	// FromPbText unmarshals InitRequestResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals InitRequestResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals InitRequestResponse from JSON text
	FromJson(value string) error
	// Validate validates InitRequestResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (InitRequestResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ResponseInitRequest returns ResponseInitRequest, set in InitRequestResponse.
	// ResponseInitRequest is description is TBD
	ResponseInitRequest() ResponseInitRequest
	// SetResponseInitRequest assigns ResponseInitRequest provided by user to InitRequestResponse.
	// ResponseInitRequest is description is TBD
	SetResponseInitRequest(value ResponseInitRequest) InitRequestResponse
	// HasResponseInitRequest checks if ResponseInitRequest has been set in InitRequestResponse
	HasResponseInitRequest() bool
	setNil()
}

func (obj *initRequestResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *initRequestResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// ResponseInitRequest returns a ResponseInitRequest
func (obj *initRequestResponse) ResponseInitRequest() ResponseInitRequest {
	if obj.obj.ResponseInitRequest == nil {
		obj.obj.ResponseInitRequest = NewResponseInitRequest().Msg()
	}
	if obj.responseInitRequestHolder == nil {
		obj.responseInitRequestHolder = &responseInitRequest{obj: obj.obj.ResponseInitRequest}
	}
	return obj.responseInitRequestHolder
}

// description is TBD
// ResponseInitRequest returns a ResponseInitRequest
func (obj *initRequestResponse) HasResponseInitRequest() bool {
	return obj.obj.ResponseInitRequest != nil
}

// description is TBD
// SetResponseInitRequest sets the ResponseInitRequest value in the InitRequestResponse object
func (obj *initRequestResponse) SetResponseInitRequest(value ResponseInitRequest) InitRequestResponse {

	obj.responseInitRequestHolder = nil
	obj.obj.ResponseInitRequest = value.Msg()

	return obj
}

func (obj *initRequestResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ResponseInitRequest != nil {

		obj.ResponseInitRequest().validateObj(vObj, set_default)
	}

}

func (obj *initRequestResponse) setDefault() {

}

// ***** RestartResponse *****
type restartResponse struct {
	validation
	obj           *otg.RestartResponse
	warningHolder Warning
}

func NewRestartResponse() RestartResponse {
	obj := restartResponse{obj: &otg.RestartResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *restartResponse) Msg() *otg.RestartResponse {
	return obj.obj
}

func (obj *restartResponse) SetMsg(msg *otg.RestartResponse) RestartResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *restartResponse) ToProto() (*otg.RestartResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *restartResponse) FromProto(msg *otg.RestartResponse) (RestartResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *restartResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *restartResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *restartResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *restartResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *restartResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *restartResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *restartResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *restartResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *restartResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *restartResponse) Clone() (RestartResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRestartResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *restartResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *restartResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RestartResponse is description is TBD
type RestartResponse interface {
	Validation
	// Msg marshals RestartResponse to protobuf object *otg.RestartResponse
	// and doesn't set defaults
	Msg() *otg.RestartResponse
	// SetMsg unmarshals RestartResponse from protobuf object *otg.RestartResponse
	// and doesn't set defaults
	SetMsg(*otg.RestartResponse) RestartResponse
	// ToProto marshals RestartResponse to protobuf object *otg.RestartResponse
	ToProto() (*otg.RestartResponse, error)
	// ToPbText marshals RestartResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RestartResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals RestartResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RestartResponse from protobuf object *otg.RestartResponse
	FromProto(msg *otg.RestartResponse) (RestartResponse, error)
	// FromPbText unmarshals RestartResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RestartResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RestartResponse from JSON text
	FromJson(value string) error
	// Validate validates RestartResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RestartResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in RestartResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to RestartResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) RestartResponse
	// HasWarning checks if Warning has been set in RestartResponse
	HasWarning() bool
	setNil()
}

func (obj *restartResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *restartResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *restartResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *restartResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the RestartResponse object
func (obj *restartResponse) SetWarning(value Warning) RestartResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *restartResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *restartResponse) setDefault() {

}

// ***** StartDebugSessionResponse *****
type startDebugSessionResponse struct {
	validation
	obj                             *otg.StartDebugSessionResponse
	responseStartDebugSessionHolder ResponseStartDebugSession
}

func NewStartDebugSessionResponse() StartDebugSessionResponse {
	obj := startDebugSessionResponse{obj: &otg.StartDebugSessionResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *startDebugSessionResponse) Msg() *otg.StartDebugSessionResponse {
	return obj.obj
}

func (obj *startDebugSessionResponse) SetMsg(msg *otg.StartDebugSessionResponse) StartDebugSessionResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *startDebugSessionResponse) ToProto() (*otg.StartDebugSessionResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *startDebugSessionResponse) FromProto(msg *otg.StartDebugSessionResponse) (StartDebugSessionResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *startDebugSessionResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *startDebugSessionResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *startDebugSessionResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *startDebugSessionResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *startDebugSessionResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *startDebugSessionResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *startDebugSessionResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *startDebugSessionResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *startDebugSessionResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *startDebugSessionResponse) Clone() (StartDebugSessionResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStartDebugSessionResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *startDebugSessionResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *startDebugSessionResponse) setNil() {
	obj.responseStartDebugSessionHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StartDebugSessionResponse is description is TBD
type StartDebugSessionResponse interface {
	Validation
	// Msg marshals StartDebugSessionResponse to protobuf object *otg.StartDebugSessionResponse
	// and doesn't set defaults
	Msg() *otg.StartDebugSessionResponse
	// SetMsg unmarshals StartDebugSessionResponse from protobuf object *otg.StartDebugSessionResponse
	// and doesn't set defaults
	SetMsg(*otg.StartDebugSessionResponse) StartDebugSessionResponse
	// ToProto marshals StartDebugSessionResponse to protobuf object *otg.StartDebugSessionResponse
	ToProto() (*otg.StartDebugSessionResponse, error)
	// ToPbText marshals StartDebugSessionResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StartDebugSessionResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals StartDebugSessionResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StartDebugSessionResponse from protobuf object *otg.StartDebugSessionResponse
	FromProto(msg *otg.StartDebugSessionResponse) (StartDebugSessionResponse, error)
	// FromPbText unmarshals StartDebugSessionResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StartDebugSessionResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StartDebugSessionResponse from JSON text
	FromJson(value string) error
	// Validate validates StartDebugSessionResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StartDebugSessionResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ResponseStartDebugSession returns ResponseStartDebugSession, set in StartDebugSessionResponse.
	// ResponseStartDebugSession is description is TBD
	ResponseStartDebugSession() ResponseStartDebugSession
	// SetResponseStartDebugSession assigns ResponseStartDebugSession provided by user to StartDebugSessionResponse.
	// ResponseStartDebugSession is description is TBD
	SetResponseStartDebugSession(value ResponseStartDebugSession) StartDebugSessionResponse
	// HasResponseStartDebugSession checks if ResponseStartDebugSession has been set in StartDebugSessionResponse
	HasResponseStartDebugSession() bool
	setNil()
}

func (obj *startDebugSessionResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *startDebugSessionResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// ResponseStartDebugSession returns a ResponseStartDebugSession
func (obj *startDebugSessionResponse) ResponseStartDebugSession() ResponseStartDebugSession {
	if obj.obj.ResponseStartDebugSession == nil {
		obj.obj.ResponseStartDebugSession = NewResponseStartDebugSession().Msg()
	}
	if obj.responseStartDebugSessionHolder == nil {
		obj.responseStartDebugSessionHolder = &responseStartDebugSession{obj: obj.obj.ResponseStartDebugSession}
	}
	return obj.responseStartDebugSessionHolder
}

// description is TBD
// ResponseStartDebugSession returns a ResponseStartDebugSession
func (obj *startDebugSessionResponse) HasResponseStartDebugSession() bool {
	return obj.obj.ResponseStartDebugSession != nil
}

// description is TBD
// SetResponseStartDebugSession sets the ResponseStartDebugSession value in the StartDebugSessionResponse object
func (obj *startDebugSessionResponse) SetResponseStartDebugSession(value ResponseStartDebugSession) StartDebugSessionResponse {

	obj.responseStartDebugSessionHolder = nil
	obj.obj.ResponseStartDebugSession = value.Msg()

	return obj
}

func (obj *startDebugSessionResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ResponseStartDebugSession != nil {

		obj.ResponseStartDebugSession().validateObj(vObj, set_default)
	}

}

func (obj *startDebugSessionResponse) setDefault() {

}

// ***** StopDebugSessionResponse *****
type stopDebugSessionResponse struct {
	validation
	obj                            *otg.StopDebugSessionResponse
	responseStopDebugSessionHolder ResponseStopDebugSession
}

func NewStopDebugSessionResponse() StopDebugSessionResponse {
	obj := stopDebugSessionResponse{obj: &otg.StopDebugSessionResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *stopDebugSessionResponse) Msg() *otg.StopDebugSessionResponse {
	return obj.obj
}

func (obj *stopDebugSessionResponse) SetMsg(msg *otg.StopDebugSessionResponse) StopDebugSessionResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *stopDebugSessionResponse) ToProto() (*otg.StopDebugSessionResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *stopDebugSessionResponse) FromProto(msg *otg.StopDebugSessionResponse) (StopDebugSessionResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *stopDebugSessionResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *stopDebugSessionResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *stopDebugSessionResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *stopDebugSessionResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *stopDebugSessionResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *stopDebugSessionResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *stopDebugSessionResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *stopDebugSessionResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *stopDebugSessionResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *stopDebugSessionResponse) Clone() (StopDebugSessionResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStopDebugSessionResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *stopDebugSessionResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *stopDebugSessionResponse) setNil() {
	obj.responseStopDebugSessionHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StopDebugSessionResponse is description is TBD
type StopDebugSessionResponse interface {
	Validation
	// Msg marshals StopDebugSessionResponse to protobuf object *otg.StopDebugSessionResponse
	// and doesn't set defaults
	Msg() *otg.StopDebugSessionResponse
	// SetMsg unmarshals StopDebugSessionResponse from protobuf object *otg.StopDebugSessionResponse
	// and doesn't set defaults
	SetMsg(*otg.StopDebugSessionResponse) StopDebugSessionResponse
	// ToProto marshals StopDebugSessionResponse to protobuf object *otg.StopDebugSessionResponse
	ToProto() (*otg.StopDebugSessionResponse, error)
	// ToPbText marshals StopDebugSessionResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StopDebugSessionResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals StopDebugSessionResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StopDebugSessionResponse from protobuf object *otg.StopDebugSessionResponse
	FromProto(msg *otg.StopDebugSessionResponse) (StopDebugSessionResponse, error)
	// FromPbText unmarshals StopDebugSessionResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StopDebugSessionResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StopDebugSessionResponse from JSON text
	FromJson(value string) error
	// Validate validates StopDebugSessionResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StopDebugSessionResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ResponseStopDebugSession returns ResponseStopDebugSession, set in StopDebugSessionResponse.
	// ResponseStopDebugSession is description is TBD
	ResponseStopDebugSession() ResponseStopDebugSession
	// SetResponseStopDebugSession assigns ResponseStopDebugSession provided by user to StopDebugSessionResponse.
	// ResponseStopDebugSession is description is TBD
	SetResponseStopDebugSession(value ResponseStopDebugSession) StopDebugSessionResponse
	// HasResponseStopDebugSession checks if ResponseStopDebugSession has been set in StopDebugSessionResponse
	HasResponseStopDebugSession() bool
	setNil()
}

func (obj *stopDebugSessionResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *stopDebugSessionResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// ResponseStopDebugSession returns a ResponseStopDebugSession
func (obj *stopDebugSessionResponse) ResponseStopDebugSession() ResponseStopDebugSession {
	if obj.obj.ResponseStopDebugSession == nil {
		obj.obj.ResponseStopDebugSession = NewResponseStopDebugSession().Msg()
	}
	if obj.responseStopDebugSessionHolder == nil {
		obj.responseStopDebugSessionHolder = &responseStopDebugSession{obj: obj.obj.ResponseStopDebugSession}
	}
	return obj.responseStopDebugSessionHolder
}

// description is TBD
// ResponseStopDebugSession returns a ResponseStopDebugSession
func (obj *stopDebugSessionResponse) HasResponseStopDebugSession() bool {
	return obj.obj.ResponseStopDebugSession != nil
}

// description is TBD
// SetResponseStopDebugSession sets the ResponseStopDebugSession value in the StopDebugSessionResponse object
func (obj *stopDebugSessionResponse) SetResponseStopDebugSession(value ResponseStopDebugSession) StopDebugSessionResponse {

	obj.responseStopDebugSessionHolder = nil
	obj.obj.ResponseStopDebugSession = value.Msg()

	return obj
}

func (obj *stopDebugSessionResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ResponseStopDebugSession != nil {

		obj.ResponseStopDebugSession().validateObj(vObj, set_default)
	}

}

func (obj *stopDebugSessionResponse) setDefault() {

}

// ***** FeatureRequestResponse *****
type featureRequestResponse struct {
	validation
	obj                          *otg.FeatureRequestResponse
	responseFeatureRequestHolder ResponseFeatureRequest
}

func NewFeatureRequestResponse() FeatureRequestResponse {
	obj := featureRequestResponse{obj: &otg.FeatureRequestResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *featureRequestResponse) Msg() *otg.FeatureRequestResponse {
	return obj.obj
}

func (obj *featureRequestResponse) SetMsg(msg *otg.FeatureRequestResponse) FeatureRequestResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *featureRequestResponse) ToProto() (*otg.FeatureRequestResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *featureRequestResponse) FromProto(msg *otg.FeatureRequestResponse) (FeatureRequestResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *featureRequestResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *featureRequestResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *featureRequestResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *featureRequestResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *featureRequestResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *featureRequestResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *featureRequestResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *featureRequestResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *featureRequestResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *featureRequestResponse) Clone() (FeatureRequestResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewFeatureRequestResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *featureRequestResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *featureRequestResponse) setNil() {
	obj.responseFeatureRequestHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// FeatureRequestResponse is description is TBD
type FeatureRequestResponse interface {
	Validation
	// Msg marshals FeatureRequestResponse to protobuf object *otg.FeatureRequestResponse
	// and doesn't set defaults
	Msg() *otg.FeatureRequestResponse
	// SetMsg unmarshals FeatureRequestResponse from protobuf object *otg.FeatureRequestResponse
	// and doesn't set defaults
	SetMsg(*otg.FeatureRequestResponse) FeatureRequestResponse
	// ToProto marshals FeatureRequestResponse to protobuf object *otg.FeatureRequestResponse
	ToProto() (*otg.FeatureRequestResponse, error)
	// ToPbText marshals FeatureRequestResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals FeatureRequestResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals FeatureRequestResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals FeatureRequestResponse from protobuf object *otg.FeatureRequestResponse
	FromProto(msg *otg.FeatureRequestResponse) (FeatureRequestResponse, error)
	// FromPbText unmarshals FeatureRequestResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals FeatureRequestResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals FeatureRequestResponse from JSON text
	FromJson(value string) error
	// Validate validates FeatureRequestResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (FeatureRequestResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ResponseFeatureRequest returns ResponseFeatureRequest, set in FeatureRequestResponse.
	// ResponseFeatureRequest is description is TBD
	ResponseFeatureRequest() ResponseFeatureRequest
	// SetResponseFeatureRequest assigns ResponseFeatureRequest provided by user to FeatureRequestResponse.
	// ResponseFeatureRequest is description is TBD
	SetResponseFeatureRequest(value ResponseFeatureRequest) FeatureRequestResponse
	// HasResponseFeatureRequest checks if ResponseFeatureRequest has been set in FeatureRequestResponse
	HasResponseFeatureRequest() bool
	setNil()
}

func (obj *featureRequestResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *featureRequestResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// ResponseFeatureRequest returns a ResponseFeatureRequest
func (obj *featureRequestResponse) ResponseFeatureRequest() ResponseFeatureRequest {
	if obj.obj.ResponseFeatureRequest == nil {
		obj.obj.ResponseFeatureRequest = NewResponseFeatureRequest().Msg()
	}
	if obj.responseFeatureRequestHolder == nil {
		obj.responseFeatureRequestHolder = &responseFeatureRequest{obj: obj.obj.ResponseFeatureRequest}
	}
	return obj.responseFeatureRequestHolder
}

// description is TBD
// ResponseFeatureRequest returns a ResponseFeatureRequest
func (obj *featureRequestResponse) HasResponseFeatureRequest() bool {
	return obj.obj.ResponseFeatureRequest != nil
}

// description is TBD
// SetResponseFeatureRequest sets the ResponseFeatureRequest value in the FeatureRequestResponse object
func (obj *featureRequestResponse) SetResponseFeatureRequest(value ResponseFeatureRequest) FeatureRequestResponse {

	obj.responseFeatureRequestHolder = nil
	obj.obj.ResponseFeatureRequest = value.Msg()

	return obj
}

func (obj *featureRequestResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ResponseFeatureRequest != nil {

		obj.ResponseFeatureRequest().validateObj(vObj, set_default)
	}

}

func (obj *featureRequestResponse) setDefault() {

}

// ***** SetUserInfoResponse *****
type setUserInfoResponse struct {
	validation
	obj           *otg.SetUserInfoResponse
	warningHolder Warning
}

func NewSetUserInfoResponse() SetUserInfoResponse {
	obj := setUserInfoResponse{obj: &otg.SetUserInfoResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *setUserInfoResponse) Msg() *otg.SetUserInfoResponse {
	return obj.obj
}

func (obj *setUserInfoResponse) SetMsg(msg *otg.SetUserInfoResponse) SetUserInfoResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *setUserInfoResponse) ToProto() (*otg.SetUserInfoResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *setUserInfoResponse) FromProto(msg *otg.SetUserInfoResponse) (SetUserInfoResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *setUserInfoResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *setUserInfoResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *setUserInfoResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *setUserInfoResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *setUserInfoResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *setUserInfoResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *setUserInfoResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *setUserInfoResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *setUserInfoResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *setUserInfoResponse) Clone() (SetUserInfoResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewSetUserInfoResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *setUserInfoResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *setUserInfoResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// SetUserInfoResponse is description is TBD
type SetUserInfoResponse interface {
	Validation
	// Msg marshals SetUserInfoResponse to protobuf object *otg.SetUserInfoResponse
	// and doesn't set defaults
	Msg() *otg.SetUserInfoResponse
	// SetMsg unmarshals SetUserInfoResponse from protobuf object *otg.SetUserInfoResponse
	// and doesn't set defaults
	SetMsg(*otg.SetUserInfoResponse) SetUserInfoResponse
	// ToProto marshals SetUserInfoResponse to protobuf object *otg.SetUserInfoResponse
	ToProto() (*otg.SetUserInfoResponse, error)
	// ToPbText marshals SetUserInfoResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals SetUserInfoResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals SetUserInfoResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals SetUserInfoResponse from protobuf object *otg.SetUserInfoResponse
	FromProto(msg *otg.SetUserInfoResponse) (SetUserInfoResponse, error)
	// FromPbText unmarshals SetUserInfoResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals SetUserInfoResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals SetUserInfoResponse from JSON text
	FromJson(value string) error
	// Validate validates SetUserInfoResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (SetUserInfoResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in SetUserInfoResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to SetUserInfoResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) SetUserInfoResponse
	// HasWarning checks if Warning has been set in SetUserInfoResponse
	HasWarning() bool
	setNil()
}

func (obj *setUserInfoResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *setUserInfoResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *setUserInfoResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *setUserInfoResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the SetUserInfoResponse object
func (obj *setUserInfoResponse) SetWarning(value Warning) SetUserInfoResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *setUserInfoResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *setUserInfoResponse) setDefault() {

}

// ***** GetOwnerResponse *****
type getOwnerResponse struct {
	validation
	obj                    *otg.GetOwnerResponse
	responseGetOwnerHolder ResponseGetOwner
}

func NewGetOwnerResponse() GetOwnerResponse {
	obj := getOwnerResponse{obj: &otg.GetOwnerResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *getOwnerResponse) Msg() *otg.GetOwnerResponse {
	return obj.obj
}

func (obj *getOwnerResponse) SetMsg(msg *otg.GetOwnerResponse) GetOwnerResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *getOwnerResponse) ToProto() (*otg.GetOwnerResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *getOwnerResponse) FromProto(msg *otg.GetOwnerResponse) (GetOwnerResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *getOwnerResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *getOwnerResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *getOwnerResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *getOwnerResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *getOwnerResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *getOwnerResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *getOwnerResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *getOwnerResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *getOwnerResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *getOwnerResponse) Clone() (GetOwnerResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewGetOwnerResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *getOwnerResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *getOwnerResponse) setNil() {
	obj.responseGetOwnerHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// GetOwnerResponse is description is TBD
type GetOwnerResponse interface {
	Validation
	// Msg marshals GetOwnerResponse to protobuf object *otg.GetOwnerResponse
	// and doesn't set defaults
	Msg() *otg.GetOwnerResponse
	// SetMsg unmarshals GetOwnerResponse from protobuf object *otg.GetOwnerResponse
	// and doesn't set defaults
	SetMsg(*otg.GetOwnerResponse) GetOwnerResponse
	// ToProto marshals GetOwnerResponse to protobuf object *otg.GetOwnerResponse
	ToProto() (*otg.GetOwnerResponse, error)
	// ToPbText marshals GetOwnerResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals GetOwnerResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals GetOwnerResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals GetOwnerResponse from protobuf object *otg.GetOwnerResponse
	FromProto(msg *otg.GetOwnerResponse) (GetOwnerResponse, error)
	// FromPbText unmarshals GetOwnerResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals GetOwnerResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals GetOwnerResponse from JSON text
	FromJson(value string) error
	// Validate validates GetOwnerResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (GetOwnerResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ResponseGetOwner returns ResponseGetOwner, set in GetOwnerResponse.
	// ResponseGetOwner is description is TBD
	ResponseGetOwner() ResponseGetOwner
	// SetResponseGetOwner assigns ResponseGetOwner provided by user to GetOwnerResponse.
	// ResponseGetOwner is description is TBD
	SetResponseGetOwner(value ResponseGetOwner) GetOwnerResponse
	// HasResponseGetOwner checks if ResponseGetOwner has been set in GetOwnerResponse
	HasResponseGetOwner() bool
	setNil()
}

func (obj *getOwnerResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *getOwnerResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// ResponseGetOwner returns a ResponseGetOwner
func (obj *getOwnerResponse) ResponseGetOwner() ResponseGetOwner {
	if obj.obj.ResponseGetOwner == nil {
		obj.obj.ResponseGetOwner = NewResponseGetOwner().Msg()
	}
	if obj.responseGetOwnerHolder == nil {
		obj.responseGetOwnerHolder = &responseGetOwner{obj: obj.obj.ResponseGetOwner}
	}
	return obj.responseGetOwnerHolder
}

// description is TBD
// ResponseGetOwner returns a ResponseGetOwner
func (obj *getOwnerResponse) HasResponseGetOwner() bool {
	return obj.obj.ResponseGetOwner != nil
}

// description is TBD
// SetResponseGetOwner sets the ResponseGetOwner value in the GetOwnerResponse object
func (obj *getOwnerResponse) SetResponseGetOwner(value ResponseGetOwner) GetOwnerResponse {

	obj.responseGetOwnerHolder = nil
	obj.obj.ResponseGetOwner = value.Msg()

	return obj
}

func (obj *getOwnerResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ResponseGetOwner != nil {

		obj.ResponseGetOwner().validateObj(vObj, set_default)
	}

}

func (obj *getOwnerResponse) setDefault() {

}

// ***** TakeOwnershipResponse *****
type takeOwnershipResponse struct {
	validation
	obj           *otg.TakeOwnershipResponse
	warningHolder Warning
}

func NewTakeOwnershipResponse() TakeOwnershipResponse {
	obj := takeOwnershipResponse{obj: &otg.TakeOwnershipResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *takeOwnershipResponse) Msg() *otg.TakeOwnershipResponse {
	return obj.obj
}

func (obj *takeOwnershipResponse) SetMsg(msg *otg.TakeOwnershipResponse) TakeOwnershipResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *takeOwnershipResponse) ToProto() (*otg.TakeOwnershipResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *takeOwnershipResponse) FromProto(msg *otg.TakeOwnershipResponse) (TakeOwnershipResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *takeOwnershipResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *takeOwnershipResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *takeOwnershipResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *takeOwnershipResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *takeOwnershipResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *takeOwnershipResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *takeOwnershipResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *takeOwnershipResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *takeOwnershipResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *takeOwnershipResponse) Clone() (TakeOwnershipResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewTakeOwnershipResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *takeOwnershipResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *takeOwnershipResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// TakeOwnershipResponse is description is TBD
type TakeOwnershipResponse interface {
	Validation
	// Msg marshals TakeOwnershipResponse to protobuf object *otg.TakeOwnershipResponse
	// and doesn't set defaults
	Msg() *otg.TakeOwnershipResponse
	// SetMsg unmarshals TakeOwnershipResponse from protobuf object *otg.TakeOwnershipResponse
	// and doesn't set defaults
	SetMsg(*otg.TakeOwnershipResponse) TakeOwnershipResponse
	// ToProto marshals TakeOwnershipResponse to protobuf object *otg.TakeOwnershipResponse
	ToProto() (*otg.TakeOwnershipResponse, error)
	// ToPbText marshals TakeOwnershipResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals TakeOwnershipResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals TakeOwnershipResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals TakeOwnershipResponse from protobuf object *otg.TakeOwnershipResponse
	FromProto(msg *otg.TakeOwnershipResponse) (TakeOwnershipResponse, error)
	// FromPbText unmarshals TakeOwnershipResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals TakeOwnershipResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals TakeOwnershipResponse from JSON text
	FromJson(value string) error
	// Validate validates TakeOwnershipResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (TakeOwnershipResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in TakeOwnershipResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to TakeOwnershipResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) TakeOwnershipResponse
	// HasWarning checks if Warning has been set in TakeOwnershipResponse
	HasWarning() bool
	setNil()
}

func (obj *takeOwnershipResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *takeOwnershipResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *takeOwnershipResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *takeOwnershipResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the TakeOwnershipResponse object
func (obj *takeOwnershipResponse) SetWarning(value Warning) TakeOwnershipResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *takeOwnershipResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *takeOwnershipResponse) setDefault() {

}

// ***** ClearOwnershipResponse *****
type clearOwnershipResponse struct {
	validation
	obj           *otg.ClearOwnershipResponse
	warningHolder Warning
}

func NewClearOwnershipResponse() ClearOwnershipResponse {
	obj := clearOwnershipResponse{obj: &otg.ClearOwnershipResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *clearOwnershipResponse) Msg() *otg.ClearOwnershipResponse {
	return obj.obj
}

func (obj *clearOwnershipResponse) SetMsg(msg *otg.ClearOwnershipResponse) ClearOwnershipResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *clearOwnershipResponse) ToProto() (*otg.ClearOwnershipResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *clearOwnershipResponse) FromProto(msg *otg.ClearOwnershipResponse) (ClearOwnershipResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *clearOwnershipResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *clearOwnershipResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *clearOwnershipResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *clearOwnershipResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *clearOwnershipResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *clearOwnershipResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *clearOwnershipResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *clearOwnershipResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *clearOwnershipResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *clearOwnershipResponse) Clone() (ClearOwnershipResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewClearOwnershipResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *clearOwnershipResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *clearOwnershipResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ClearOwnershipResponse is description is TBD
type ClearOwnershipResponse interface {
	Validation
	// Msg marshals ClearOwnershipResponse to protobuf object *otg.ClearOwnershipResponse
	// and doesn't set defaults
	Msg() *otg.ClearOwnershipResponse
	// SetMsg unmarshals ClearOwnershipResponse from protobuf object *otg.ClearOwnershipResponse
	// and doesn't set defaults
	SetMsg(*otg.ClearOwnershipResponse) ClearOwnershipResponse
	// ToProto marshals ClearOwnershipResponse to protobuf object *otg.ClearOwnershipResponse
	ToProto() (*otg.ClearOwnershipResponse, error)
	// ToPbText marshals ClearOwnershipResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ClearOwnershipResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals ClearOwnershipResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ClearOwnershipResponse from protobuf object *otg.ClearOwnershipResponse
	FromProto(msg *otg.ClearOwnershipResponse) (ClearOwnershipResponse, error)
	// FromPbText unmarshals ClearOwnershipResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ClearOwnershipResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ClearOwnershipResponse from JSON text
	FromJson(value string) error
	// Validate validates ClearOwnershipResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ClearOwnershipResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in ClearOwnershipResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to ClearOwnershipResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) ClearOwnershipResponse
	// HasWarning checks if Warning has been set in ClearOwnershipResponse
	HasWarning() bool
	setNil()
}

func (obj *clearOwnershipResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *clearOwnershipResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *clearOwnershipResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *clearOwnershipResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the ClearOwnershipResponse object
func (obj *clearOwnershipResponse) SetWarning(value Warning) ClearOwnershipResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *clearOwnershipResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *clearOwnershipResponse) setDefault() {

}

// ***** SubscribeEventResponse *****
type subscribeEventResponse struct {
	validation
	obj           *otg.SubscribeEventResponse
	warningHolder Warning
}

func NewSubscribeEventResponse() SubscribeEventResponse {
	obj := subscribeEventResponse{obj: &otg.SubscribeEventResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *subscribeEventResponse) Msg() *otg.SubscribeEventResponse {
	return obj.obj
}

func (obj *subscribeEventResponse) SetMsg(msg *otg.SubscribeEventResponse) SubscribeEventResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *subscribeEventResponse) ToProto() (*otg.SubscribeEventResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *subscribeEventResponse) FromProto(msg *otg.SubscribeEventResponse) (SubscribeEventResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *subscribeEventResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *subscribeEventResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *subscribeEventResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *subscribeEventResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *subscribeEventResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *subscribeEventResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *subscribeEventResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *subscribeEventResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *subscribeEventResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *subscribeEventResponse) Clone() (SubscribeEventResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewSubscribeEventResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *subscribeEventResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *subscribeEventResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// SubscribeEventResponse is description is TBD
type SubscribeEventResponse interface {
	Validation
	// Msg marshals SubscribeEventResponse to protobuf object *otg.SubscribeEventResponse
	// and doesn't set defaults
	Msg() *otg.SubscribeEventResponse
	// SetMsg unmarshals SubscribeEventResponse from protobuf object *otg.SubscribeEventResponse
	// and doesn't set defaults
	SetMsg(*otg.SubscribeEventResponse) SubscribeEventResponse
	// ToProto marshals SubscribeEventResponse to protobuf object *otg.SubscribeEventResponse
	ToProto() (*otg.SubscribeEventResponse, error)
	// ToPbText marshals SubscribeEventResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals SubscribeEventResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals SubscribeEventResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals SubscribeEventResponse from protobuf object *otg.SubscribeEventResponse
	FromProto(msg *otg.SubscribeEventResponse) (SubscribeEventResponse, error)
	// FromPbText unmarshals SubscribeEventResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals SubscribeEventResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals SubscribeEventResponse from JSON text
	FromJson(value string) error
	// Validate validates SubscribeEventResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (SubscribeEventResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in SubscribeEventResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to SubscribeEventResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) SubscribeEventResponse
	// HasWarning checks if Warning has been set in SubscribeEventResponse
	HasWarning() bool
	setNil()
}

func (obj *subscribeEventResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *subscribeEventResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *subscribeEventResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *subscribeEventResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the SubscribeEventResponse object
func (obj *subscribeEventResponse) SetWarning(value Warning) SubscribeEventResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *subscribeEventResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *subscribeEventResponse) setDefault() {

}

// ***** UnsubscribeEventResponse *****
type unsubscribeEventResponse struct {
	validation
	obj           *otg.UnsubscribeEventResponse
	warningHolder Warning
}

func NewUnsubscribeEventResponse() UnsubscribeEventResponse {
	obj := unsubscribeEventResponse{obj: &otg.UnsubscribeEventResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *unsubscribeEventResponse) Msg() *otg.UnsubscribeEventResponse {
	return obj.obj
}

func (obj *unsubscribeEventResponse) SetMsg(msg *otg.UnsubscribeEventResponse) UnsubscribeEventResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *unsubscribeEventResponse) ToProto() (*otg.UnsubscribeEventResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *unsubscribeEventResponse) FromProto(msg *otg.UnsubscribeEventResponse) (UnsubscribeEventResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *unsubscribeEventResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *unsubscribeEventResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *unsubscribeEventResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *unsubscribeEventResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *unsubscribeEventResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *unsubscribeEventResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *unsubscribeEventResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *unsubscribeEventResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *unsubscribeEventResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *unsubscribeEventResponse) Clone() (UnsubscribeEventResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewUnsubscribeEventResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *unsubscribeEventResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *unsubscribeEventResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// UnsubscribeEventResponse is description is TBD
type UnsubscribeEventResponse interface {
	Validation
	// Msg marshals UnsubscribeEventResponse to protobuf object *otg.UnsubscribeEventResponse
	// and doesn't set defaults
	Msg() *otg.UnsubscribeEventResponse
	// SetMsg unmarshals UnsubscribeEventResponse from protobuf object *otg.UnsubscribeEventResponse
	// and doesn't set defaults
	SetMsg(*otg.UnsubscribeEventResponse) UnsubscribeEventResponse
	// ToProto marshals UnsubscribeEventResponse to protobuf object *otg.UnsubscribeEventResponse
	ToProto() (*otg.UnsubscribeEventResponse, error)
	// ToPbText marshals UnsubscribeEventResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals UnsubscribeEventResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals UnsubscribeEventResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals UnsubscribeEventResponse from protobuf object *otg.UnsubscribeEventResponse
	FromProto(msg *otg.UnsubscribeEventResponse) (UnsubscribeEventResponse, error)
	// FromPbText unmarshals UnsubscribeEventResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals UnsubscribeEventResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals UnsubscribeEventResponse from JSON text
	FromJson(value string) error
	// Validate validates UnsubscribeEventResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (UnsubscribeEventResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in UnsubscribeEventResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to UnsubscribeEventResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) UnsubscribeEventResponse
	// HasWarning checks if Warning has been set in UnsubscribeEventResponse
	HasWarning() bool
	setNil()
}

func (obj *unsubscribeEventResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *unsubscribeEventResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *unsubscribeEventResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *unsubscribeEventResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the UnsubscribeEventResponse object
func (obj *unsubscribeEventResponse) SetWarning(value Warning) UnsubscribeEventResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *unsubscribeEventResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *unsubscribeEventResponse) setDefault() {

}

// ***** ConfigurePortResponse *****
type configurePortResponse struct {
	validation
	obj           *otg.ConfigurePortResponse
	warningHolder Warning
}

func NewConfigurePortResponse() ConfigurePortResponse {
	obj := configurePortResponse{obj: &otg.ConfigurePortResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *configurePortResponse) Msg() *otg.ConfigurePortResponse {
	return obj.obj
}

func (obj *configurePortResponse) SetMsg(msg *otg.ConfigurePortResponse) ConfigurePortResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *configurePortResponse) ToProto() (*otg.ConfigurePortResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *configurePortResponse) FromProto(msg *otg.ConfigurePortResponse) (ConfigurePortResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *configurePortResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *configurePortResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *configurePortResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *configurePortResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *configurePortResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *configurePortResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *configurePortResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *configurePortResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *configurePortResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *configurePortResponse) Clone() (ConfigurePortResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewConfigurePortResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *configurePortResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *configurePortResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ConfigurePortResponse is description is TBD
type ConfigurePortResponse interface {
	Validation
	// Msg marshals ConfigurePortResponse to protobuf object *otg.ConfigurePortResponse
	// and doesn't set defaults
	Msg() *otg.ConfigurePortResponse
	// SetMsg unmarshals ConfigurePortResponse from protobuf object *otg.ConfigurePortResponse
	// and doesn't set defaults
	SetMsg(*otg.ConfigurePortResponse) ConfigurePortResponse
	// ToProto marshals ConfigurePortResponse to protobuf object *otg.ConfigurePortResponse
	ToProto() (*otg.ConfigurePortResponse, error)
	// ToPbText marshals ConfigurePortResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ConfigurePortResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals ConfigurePortResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ConfigurePortResponse from protobuf object *otg.ConfigurePortResponse
	FromProto(msg *otg.ConfigurePortResponse) (ConfigurePortResponse, error)
	// FromPbText unmarshals ConfigurePortResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ConfigurePortResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ConfigurePortResponse from JSON text
	FromJson(value string) error
	// Validate validates ConfigurePortResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ConfigurePortResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in ConfigurePortResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to ConfigurePortResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) ConfigurePortResponse
	// HasWarning checks if Warning has been set in ConfigurePortResponse
	HasWarning() bool
	setNil()
}

func (obj *configurePortResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *configurePortResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *configurePortResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *configurePortResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the ConfigurePortResponse object
func (obj *configurePortResponse) SetWarning(value Warning) ConfigurePortResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *configurePortResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *configurePortResponse) setDefault() {

}

// ***** ConfigurePortBasicResponse *****
type configurePortBasicResponse struct {
	validation
	obj           *otg.ConfigurePortBasicResponse
	warningHolder Warning
}

func NewConfigurePortBasicResponse() ConfigurePortBasicResponse {
	obj := configurePortBasicResponse{obj: &otg.ConfigurePortBasicResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *configurePortBasicResponse) Msg() *otg.ConfigurePortBasicResponse {
	return obj.obj
}

func (obj *configurePortBasicResponse) SetMsg(msg *otg.ConfigurePortBasicResponse) ConfigurePortBasicResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *configurePortBasicResponse) ToProto() (*otg.ConfigurePortBasicResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *configurePortBasicResponse) FromProto(msg *otg.ConfigurePortBasicResponse) (ConfigurePortBasicResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *configurePortBasicResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *configurePortBasicResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *configurePortBasicResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *configurePortBasicResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *configurePortBasicResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *configurePortBasicResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *configurePortBasicResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *configurePortBasicResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *configurePortBasicResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *configurePortBasicResponse) Clone() (ConfigurePortBasicResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewConfigurePortBasicResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *configurePortBasicResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *configurePortBasicResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ConfigurePortBasicResponse is description is TBD
type ConfigurePortBasicResponse interface {
	Validation
	// Msg marshals ConfigurePortBasicResponse to protobuf object *otg.ConfigurePortBasicResponse
	// and doesn't set defaults
	Msg() *otg.ConfigurePortBasicResponse
	// SetMsg unmarshals ConfigurePortBasicResponse from protobuf object *otg.ConfigurePortBasicResponse
	// and doesn't set defaults
	SetMsg(*otg.ConfigurePortBasicResponse) ConfigurePortBasicResponse
	// ToProto marshals ConfigurePortBasicResponse to protobuf object *otg.ConfigurePortBasicResponse
	ToProto() (*otg.ConfigurePortBasicResponse, error)
	// ToPbText marshals ConfigurePortBasicResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ConfigurePortBasicResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals ConfigurePortBasicResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ConfigurePortBasicResponse from protobuf object *otg.ConfigurePortBasicResponse
	FromProto(msg *otg.ConfigurePortBasicResponse) (ConfigurePortBasicResponse, error)
	// FromPbText unmarshals ConfigurePortBasicResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ConfigurePortBasicResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ConfigurePortBasicResponse from JSON text
	FromJson(value string) error
	// Validate validates ConfigurePortBasicResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ConfigurePortBasicResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in ConfigurePortBasicResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to ConfigurePortBasicResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) ConfigurePortBasicResponse
	// HasWarning checks if Warning has been set in ConfigurePortBasicResponse
	HasWarning() bool
	setNil()
}

func (obj *configurePortBasicResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *configurePortBasicResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *configurePortBasicResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *configurePortBasicResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the ConfigurePortBasicResponse object
func (obj *configurePortBasicResponse) SetWarning(value Warning) ConfigurePortBasicResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *configurePortBasicResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *configurePortBasicResponse) setDefault() {

}

// ***** PrepareForStartTxResponse *****
type prepareForStartTxResponse struct {
	validation
	obj           *otg.PrepareForStartTxResponse
	warningHolder Warning
}

func NewPrepareForStartTxResponse() PrepareForStartTxResponse {
	obj := prepareForStartTxResponse{obj: &otg.PrepareForStartTxResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *prepareForStartTxResponse) Msg() *otg.PrepareForStartTxResponse {
	return obj.obj
}

func (obj *prepareForStartTxResponse) SetMsg(msg *otg.PrepareForStartTxResponse) PrepareForStartTxResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *prepareForStartTxResponse) ToProto() (*otg.PrepareForStartTxResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *prepareForStartTxResponse) FromProto(msg *otg.PrepareForStartTxResponse) (PrepareForStartTxResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *prepareForStartTxResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *prepareForStartTxResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *prepareForStartTxResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *prepareForStartTxResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *prepareForStartTxResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *prepareForStartTxResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *prepareForStartTxResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *prepareForStartTxResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *prepareForStartTxResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *prepareForStartTxResponse) Clone() (PrepareForStartTxResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPrepareForStartTxResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *prepareForStartTxResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *prepareForStartTxResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// PrepareForStartTxResponse is description is TBD
type PrepareForStartTxResponse interface {
	Validation
	// Msg marshals PrepareForStartTxResponse to protobuf object *otg.PrepareForStartTxResponse
	// and doesn't set defaults
	Msg() *otg.PrepareForStartTxResponse
	// SetMsg unmarshals PrepareForStartTxResponse from protobuf object *otg.PrepareForStartTxResponse
	// and doesn't set defaults
	SetMsg(*otg.PrepareForStartTxResponse) PrepareForStartTxResponse
	// ToProto marshals PrepareForStartTxResponse to protobuf object *otg.PrepareForStartTxResponse
	ToProto() (*otg.PrepareForStartTxResponse, error)
	// ToPbText marshals PrepareForStartTxResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PrepareForStartTxResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals PrepareForStartTxResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PrepareForStartTxResponse from protobuf object *otg.PrepareForStartTxResponse
	FromProto(msg *otg.PrepareForStartTxResponse) (PrepareForStartTxResponse, error)
	// FromPbText unmarshals PrepareForStartTxResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PrepareForStartTxResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PrepareForStartTxResponse from JSON text
	FromJson(value string) error
	// Validate validates PrepareForStartTxResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PrepareForStartTxResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in PrepareForStartTxResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to PrepareForStartTxResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) PrepareForStartTxResponse
	// HasWarning checks if Warning has been set in PrepareForStartTxResponse
	HasWarning() bool
	setNil()
}

func (obj *prepareForStartTxResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *prepareForStartTxResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *prepareForStartTxResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *prepareForStartTxResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the PrepareForStartTxResponse object
func (obj *prepareForStartTxResponse) SetWarning(value Warning) PrepareForStartTxResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *prepareForStartTxResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *prepareForStartTxResponse) setDefault() {

}

// ***** ConfigureCaptureResponse *****
type configureCaptureResponse struct {
	validation
	obj           *otg.ConfigureCaptureResponse
	warningHolder Warning
}

func NewConfigureCaptureResponse() ConfigureCaptureResponse {
	obj := configureCaptureResponse{obj: &otg.ConfigureCaptureResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *configureCaptureResponse) Msg() *otg.ConfigureCaptureResponse {
	return obj.obj
}

func (obj *configureCaptureResponse) SetMsg(msg *otg.ConfigureCaptureResponse) ConfigureCaptureResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *configureCaptureResponse) ToProto() (*otg.ConfigureCaptureResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *configureCaptureResponse) FromProto(msg *otg.ConfigureCaptureResponse) (ConfigureCaptureResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *configureCaptureResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *configureCaptureResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *configureCaptureResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *configureCaptureResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *configureCaptureResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *configureCaptureResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *configureCaptureResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *configureCaptureResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *configureCaptureResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *configureCaptureResponse) Clone() (ConfigureCaptureResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewConfigureCaptureResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *configureCaptureResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *configureCaptureResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ConfigureCaptureResponse is description is TBD
type ConfigureCaptureResponse interface {
	Validation
	// Msg marshals ConfigureCaptureResponse to protobuf object *otg.ConfigureCaptureResponse
	// and doesn't set defaults
	Msg() *otg.ConfigureCaptureResponse
	// SetMsg unmarshals ConfigureCaptureResponse from protobuf object *otg.ConfigureCaptureResponse
	// and doesn't set defaults
	SetMsg(*otg.ConfigureCaptureResponse) ConfigureCaptureResponse
	// ToProto marshals ConfigureCaptureResponse to protobuf object *otg.ConfigureCaptureResponse
	ToProto() (*otg.ConfigureCaptureResponse, error)
	// ToPbText marshals ConfigureCaptureResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ConfigureCaptureResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals ConfigureCaptureResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ConfigureCaptureResponse from protobuf object *otg.ConfigureCaptureResponse
	FromProto(msg *otg.ConfigureCaptureResponse) (ConfigureCaptureResponse, error)
	// FromPbText unmarshals ConfigureCaptureResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ConfigureCaptureResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ConfigureCaptureResponse from JSON text
	FromJson(value string) error
	// Validate validates ConfigureCaptureResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ConfigureCaptureResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in ConfigureCaptureResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to ConfigureCaptureResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) ConfigureCaptureResponse
	// HasWarning checks if Warning has been set in ConfigureCaptureResponse
	HasWarning() bool
	setNil()
}

func (obj *configureCaptureResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *configureCaptureResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *configureCaptureResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *configureCaptureResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the ConfigureCaptureResponse object
func (obj *configureCaptureResponse) SetWarning(value Warning) ConfigureCaptureResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *configureCaptureResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *configureCaptureResponse) setDefault() {

}

// ***** StartCaptureResponse *****
type startCaptureResponse struct {
	validation
	obj           *otg.StartCaptureResponse
	warningHolder Warning
}

func NewStartCaptureResponse() StartCaptureResponse {
	obj := startCaptureResponse{obj: &otg.StartCaptureResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *startCaptureResponse) Msg() *otg.StartCaptureResponse {
	return obj.obj
}

func (obj *startCaptureResponse) SetMsg(msg *otg.StartCaptureResponse) StartCaptureResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *startCaptureResponse) ToProto() (*otg.StartCaptureResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *startCaptureResponse) FromProto(msg *otg.StartCaptureResponse) (StartCaptureResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *startCaptureResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *startCaptureResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *startCaptureResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *startCaptureResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *startCaptureResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *startCaptureResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *startCaptureResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *startCaptureResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *startCaptureResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *startCaptureResponse) Clone() (StartCaptureResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStartCaptureResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *startCaptureResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *startCaptureResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StartCaptureResponse is description is TBD
type StartCaptureResponse interface {
	Validation
	// Msg marshals StartCaptureResponse to protobuf object *otg.StartCaptureResponse
	// and doesn't set defaults
	Msg() *otg.StartCaptureResponse
	// SetMsg unmarshals StartCaptureResponse from protobuf object *otg.StartCaptureResponse
	// and doesn't set defaults
	SetMsg(*otg.StartCaptureResponse) StartCaptureResponse
	// ToProto marshals StartCaptureResponse to protobuf object *otg.StartCaptureResponse
	ToProto() (*otg.StartCaptureResponse, error)
	// ToPbText marshals StartCaptureResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StartCaptureResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals StartCaptureResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StartCaptureResponse from protobuf object *otg.StartCaptureResponse
	FromProto(msg *otg.StartCaptureResponse) (StartCaptureResponse, error)
	// FromPbText unmarshals StartCaptureResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StartCaptureResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StartCaptureResponse from JSON text
	FromJson(value string) error
	// Validate validates StartCaptureResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StartCaptureResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in StartCaptureResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to StartCaptureResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) StartCaptureResponse
	// HasWarning checks if Warning has been set in StartCaptureResponse
	HasWarning() bool
	setNil()
}

func (obj *startCaptureResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *startCaptureResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *startCaptureResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *startCaptureResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the StartCaptureResponse object
func (obj *startCaptureResponse) SetWarning(value Warning) StartCaptureResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *startCaptureResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *startCaptureResponse) setDefault() {

}

// ***** StopCaptureResponse *****
type stopCaptureResponse struct {
	validation
	obj           *otg.StopCaptureResponse
	warningHolder Warning
}

func NewStopCaptureResponse() StopCaptureResponse {
	obj := stopCaptureResponse{obj: &otg.StopCaptureResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *stopCaptureResponse) Msg() *otg.StopCaptureResponse {
	return obj.obj
}

func (obj *stopCaptureResponse) SetMsg(msg *otg.StopCaptureResponse) StopCaptureResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *stopCaptureResponse) ToProto() (*otg.StopCaptureResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *stopCaptureResponse) FromProto(msg *otg.StopCaptureResponse) (StopCaptureResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *stopCaptureResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *stopCaptureResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *stopCaptureResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *stopCaptureResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *stopCaptureResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *stopCaptureResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *stopCaptureResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *stopCaptureResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *stopCaptureResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *stopCaptureResponse) Clone() (StopCaptureResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStopCaptureResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *stopCaptureResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *stopCaptureResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StopCaptureResponse is description is TBD
type StopCaptureResponse interface {
	Validation
	// Msg marshals StopCaptureResponse to protobuf object *otg.StopCaptureResponse
	// and doesn't set defaults
	Msg() *otg.StopCaptureResponse
	// SetMsg unmarshals StopCaptureResponse from protobuf object *otg.StopCaptureResponse
	// and doesn't set defaults
	SetMsg(*otg.StopCaptureResponse) StopCaptureResponse
	// ToProto marshals StopCaptureResponse to protobuf object *otg.StopCaptureResponse
	ToProto() (*otg.StopCaptureResponse, error)
	// ToPbText marshals StopCaptureResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StopCaptureResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals StopCaptureResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StopCaptureResponse from protobuf object *otg.StopCaptureResponse
	FromProto(msg *otg.StopCaptureResponse) (StopCaptureResponse, error)
	// FromPbText unmarshals StopCaptureResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StopCaptureResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StopCaptureResponse from JSON text
	FromJson(value string) error
	// Validate validates StopCaptureResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StopCaptureResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in StopCaptureResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to StopCaptureResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) StopCaptureResponse
	// HasWarning checks if Warning has been set in StopCaptureResponse
	HasWarning() bool
	setNil()
}

func (obj *stopCaptureResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *stopCaptureResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *stopCaptureResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *stopCaptureResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the StopCaptureResponse object
func (obj *stopCaptureResponse) SetWarning(value Warning) StopCaptureResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *stopCaptureResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *stopCaptureResponse) setDefault() {

}

// ***** GetCapturePacketCountResponse *****
type getCapturePacketCountResponse struct {
	validation
	obj                                 *otg.GetCapturePacketCountResponse
	responseGetCapturePacketCountHolder ResponseGetCapturePacketCount
}

func NewGetCapturePacketCountResponse() GetCapturePacketCountResponse {
	obj := getCapturePacketCountResponse{obj: &otg.GetCapturePacketCountResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *getCapturePacketCountResponse) Msg() *otg.GetCapturePacketCountResponse {
	return obj.obj
}

func (obj *getCapturePacketCountResponse) SetMsg(msg *otg.GetCapturePacketCountResponse) GetCapturePacketCountResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *getCapturePacketCountResponse) ToProto() (*otg.GetCapturePacketCountResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *getCapturePacketCountResponse) FromProto(msg *otg.GetCapturePacketCountResponse) (GetCapturePacketCountResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *getCapturePacketCountResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *getCapturePacketCountResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *getCapturePacketCountResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *getCapturePacketCountResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *getCapturePacketCountResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *getCapturePacketCountResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *getCapturePacketCountResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *getCapturePacketCountResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *getCapturePacketCountResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *getCapturePacketCountResponse) Clone() (GetCapturePacketCountResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewGetCapturePacketCountResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *getCapturePacketCountResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *getCapturePacketCountResponse) setNil() {
	obj.responseGetCapturePacketCountHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// GetCapturePacketCountResponse is description is TBD
type GetCapturePacketCountResponse interface {
	Validation
	// Msg marshals GetCapturePacketCountResponse to protobuf object *otg.GetCapturePacketCountResponse
	// and doesn't set defaults
	Msg() *otg.GetCapturePacketCountResponse
	// SetMsg unmarshals GetCapturePacketCountResponse from protobuf object *otg.GetCapturePacketCountResponse
	// and doesn't set defaults
	SetMsg(*otg.GetCapturePacketCountResponse) GetCapturePacketCountResponse
	// ToProto marshals GetCapturePacketCountResponse to protobuf object *otg.GetCapturePacketCountResponse
	ToProto() (*otg.GetCapturePacketCountResponse, error)
	// ToPbText marshals GetCapturePacketCountResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals GetCapturePacketCountResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals GetCapturePacketCountResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals GetCapturePacketCountResponse from protobuf object *otg.GetCapturePacketCountResponse
	FromProto(msg *otg.GetCapturePacketCountResponse) (GetCapturePacketCountResponse, error)
	// FromPbText unmarshals GetCapturePacketCountResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals GetCapturePacketCountResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals GetCapturePacketCountResponse from JSON text
	FromJson(value string) error
	// Validate validates GetCapturePacketCountResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (GetCapturePacketCountResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ResponseGetCapturePacketCount returns ResponseGetCapturePacketCount, set in GetCapturePacketCountResponse.
	// ResponseGetCapturePacketCount is description is TBD
	ResponseGetCapturePacketCount() ResponseGetCapturePacketCount
	// SetResponseGetCapturePacketCount assigns ResponseGetCapturePacketCount provided by user to GetCapturePacketCountResponse.
	// ResponseGetCapturePacketCount is description is TBD
	SetResponseGetCapturePacketCount(value ResponseGetCapturePacketCount) GetCapturePacketCountResponse
	// HasResponseGetCapturePacketCount checks if ResponseGetCapturePacketCount has been set in GetCapturePacketCountResponse
	HasResponseGetCapturePacketCount() bool
	setNil()
}

func (obj *getCapturePacketCountResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *getCapturePacketCountResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// ResponseGetCapturePacketCount returns a ResponseGetCapturePacketCount
func (obj *getCapturePacketCountResponse) ResponseGetCapturePacketCount() ResponseGetCapturePacketCount {
	if obj.obj.ResponseGetCapturePacketCount == nil {
		obj.obj.ResponseGetCapturePacketCount = NewResponseGetCapturePacketCount().Msg()
	}
	if obj.responseGetCapturePacketCountHolder == nil {
		obj.responseGetCapturePacketCountHolder = &responseGetCapturePacketCount{obj: obj.obj.ResponseGetCapturePacketCount}
	}
	return obj.responseGetCapturePacketCountHolder
}

// description is TBD
// ResponseGetCapturePacketCount returns a ResponseGetCapturePacketCount
func (obj *getCapturePacketCountResponse) HasResponseGetCapturePacketCount() bool {
	return obj.obj.ResponseGetCapturePacketCount != nil
}

// description is TBD
// SetResponseGetCapturePacketCount sets the ResponseGetCapturePacketCount value in the GetCapturePacketCountResponse object
func (obj *getCapturePacketCountResponse) SetResponseGetCapturePacketCount(value ResponseGetCapturePacketCount) GetCapturePacketCountResponse {

	obj.responseGetCapturePacketCountHolder = nil
	obj.obj.ResponseGetCapturePacketCount = value.Msg()

	return obj
}

func (obj *getCapturePacketCountResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ResponseGetCapturePacketCount != nil {

		obj.ResponseGetCapturePacketCount().validateObj(vObj, set_default)
	}

}

func (obj *getCapturePacketCountResponse) setDefault() {

}

// ***** GetCaptureStatusResponse *****
type getCaptureStatusResponse struct {
	validation
	obj                            *otg.GetCaptureStatusResponse
	responseGetCaptureStatusHolder ResponseGetCaptureStatus
}

func NewGetCaptureStatusResponse() GetCaptureStatusResponse {
	obj := getCaptureStatusResponse{obj: &otg.GetCaptureStatusResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *getCaptureStatusResponse) Msg() *otg.GetCaptureStatusResponse {
	return obj.obj
}

func (obj *getCaptureStatusResponse) SetMsg(msg *otg.GetCaptureStatusResponse) GetCaptureStatusResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *getCaptureStatusResponse) ToProto() (*otg.GetCaptureStatusResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *getCaptureStatusResponse) FromProto(msg *otg.GetCaptureStatusResponse) (GetCaptureStatusResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *getCaptureStatusResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *getCaptureStatusResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *getCaptureStatusResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *getCaptureStatusResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *getCaptureStatusResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *getCaptureStatusResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *getCaptureStatusResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *getCaptureStatusResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *getCaptureStatusResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *getCaptureStatusResponse) Clone() (GetCaptureStatusResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewGetCaptureStatusResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *getCaptureStatusResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *getCaptureStatusResponse) setNil() {
	obj.responseGetCaptureStatusHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// GetCaptureStatusResponse is description is TBD
type GetCaptureStatusResponse interface {
	Validation
	// Msg marshals GetCaptureStatusResponse to protobuf object *otg.GetCaptureStatusResponse
	// and doesn't set defaults
	Msg() *otg.GetCaptureStatusResponse
	// SetMsg unmarshals GetCaptureStatusResponse from protobuf object *otg.GetCaptureStatusResponse
	// and doesn't set defaults
	SetMsg(*otg.GetCaptureStatusResponse) GetCaptureStatusResponse
	// ToProto marshals GetCaptureStatusResponse to protobuf object *otg.GetCaptureStatusResponse
	ToProto() (*otg.GetCaptureStatusResponse, error)
	// ToPbText marshals GetCaptureStatusResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals GetCaptureStatusResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals GetCaptureStatusResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals GetCaptureStatusResponse from protobuf object *otg.GetCaptureStatusResponse
	FromProto(msg *otg.GetCaptureStatusResponse) (GetCaptureStatusResponse, error)
	// FromPbText unmarshals GetCaptureStatusResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals GetCaptureStatusResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals GetCaptureStatusResponse from JSON text
	FromJson(value string) error
	// Validate validates GetCaptureStatusResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (GetCaptureStatusResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ResponseGetCaptureStatus returns ResponseGetCaptureStatus, set in GetCaptureStatusResponse.
	// ResponseGetCaptureStatus is description is TBD
	ResponseGetCaptureStatus() ResponseGetCaptureStatus
	// SetResponseGetCaptureStatus assigns ResponseGetCaptureStatus provided by user to GetCaptureStatusResponse.
	// ResponseGetCaptureStatus is description is TBD
	SetResponseGetCaptureStatus(value ResponseGetCaptureStatus) GetCaptureStatusResponse
	// HasResponseGetCaptureStatus checks if ResponseGetCaptureStatus has been set in GetCaptureStatusResponse
	HasResponseGetCaptureStatus() bool
	setNil()
}

func (obj *getCaptureStatusResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *getCaptureStatusResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// ResponseGetCaptureStatus returns a ResponseGetCaptureStatus
func (obj *getCaptureStatusResponse) ResponseGetCaptureStatus() ResponseGetCaptureStatus {
	if obj.obj.ResponseGetCaptureStatus == nil {
		obj.obj.ResponseGetCaptureStatus = NewResponseGetCaptureStatus().Msg()
	}
	if obj.responseGetCaptureStatusHolder == nil {
		obj.responseGetCaptureStatusHolder = &responseGetCaptureStatus{obj: obj.obj.ResponseGetCaptureStatus}
	}
	return obj.responseGetCaptureStatusHolder
}

// description is TBD
// ResponseGetCaptureStatus returns a ResponseGetCaptureStatus
func (obj *getCaptureStatusResponse) HasResponseGetCaptureStatus() bool {
	return obj.obj.ResponseGetCaptureStatus != nil
}

// description is TBD
// SetResponseGetCaptureStatus sets the ResponseGetCaptureStatus value in the GetCaptureStatusResponse object
func (obj *getCaptureStatusResponse) SetResponseGetCaptureStatus(value ResponseGetCaptureStatus) GetCaptureStatusResponse {

	obj.responseGetCaptureStatusHolder = nil
	obj.obj.ResponseGetCaptureStatus = value.Msg()

	return obj
}

func (obj *getCaptureStatusResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ResponseGetCaptureStatus != nil {

		obj.ResponseGetCaptureStatus().validateObj(vObj, set_default)
	}

}

func (obj *getCaptureStatusResponse) setDefault() {

}

// ***** RetrieveCaptureResponse *****
type retrieveCaptureResponse struct {
	validation
	obj                           *otg.RetrieveCaptureResponse
	responseRetrieveCaptureHolder ResponseRetrieveCapture
}

func NewRetrieveCaptureResponse() RetrieveCaptureResponse {
	obj := retrieveCaptureResponse{obj: &otg.RetrieveCaptureResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *retrieveCaptureResponse) Msg() *otg.RetrieveCaptureResponse {
	return obj.obj
}

func (obj *retrieveCaptureResponse) SetMsg(msg *otg.RetrieveCaptureResponse) RetrieveCaptureResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *retrieveCaptureResponse) ToProto() (*otg.RetrieveCaptureResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *retrieveCaptureResponse) FromProto(msg *otg.RetrieveCaptureResponse) (RetrieveCaptureResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *retrieveCaptureResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *retrieveCaptureResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *retrieveCaptureResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *retrieveCaptureResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *retrieveCaptureResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *retrieveCaptureResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *retrieveCaptureResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *retrieveCaptureResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *retrieveCaptureResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *retrieveCaptureResponse) Clone() (RetrieveCaptureResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRetrieveCaptureResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *retrieveCaptureResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *retrieveCaptureResponse) setNil() {
	obj.responseRetrieveCaptureHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RetrieveCaptureResponse is description is TBD
type RetrieveCaptureResponse interface {
	Validation
	// Msg marshals RetrieveCaptureResponse to protobuf object *otg.RetrieveCaptureResponse
	// and doesn't set defaults
	Msg() *otg.RetrieveCaptureResponse
	// SetMsg unmarshals RetrieveCaptureResponse from protobuf object *otg.RetrieveCaptureResponse
	// and doesn't set defaults
	SetMsg(*otg.RetrieveCaptureResponse) RetrieveCaptureResponse
	// ToProto marshals RetrieveCaptureResponse to protobuf object *otg.RetrieveCaptureResponse
	ToProto() (*otg.RetrieveCaptureResponse, error)
	// ToPbText marshals RetrieveCaptureResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RetrieveCaptureResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals RetrieveCaptureResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RetrieveCaptureResponse from protobuf object *otg.RetrieveCaptureResponse
	FromProto(msg *otg.RetrieveCaptureResponse) (RetrieveCaptureResponse, error)
	// FromPbText unmarshals RetrieveCaptureResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RetrieveCaptureResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RetrieveCaptureResponse from JSON text
	FromJson(value string) error
	// Validate validates RetrieveCaptureResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RetrieveCaptureResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ResponseRetrieveCapture returns ResponseRetrieveCapture, set in RetrieveCaptureResponse.
	// ResponseRetrieveCapture is description is TBD
	ResponseRetrieveCapture() ResponseRetrieveCapture
	// SetResponseRetrieveCapture assigns ResponseRetrieveCapture provided by user to RetrieveCaptureResponse.
	// ResponseRetrieveCapture is description is TBD
	SetResponseRetrieveCapture(value ResponseRetrieveCapture) RetrieveCaptureResponse
	// HasResponseRetrieveCapture checks if ResponseRetrieveCapture has been set in RetrieveCaptureResponse
	HasResponseRetrieveCapture() bool
	setNil()
}

func (obj *retrieveCaptureResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *retrieveCaptureResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// ResponseRetrieveCapture returns a ResponseRetrieveCapture
func (obj *retrieveCaptureResponse) ResponseRetrieveCapture() ResponseRetrieveCapture {
	if obj.obj.ResponseRetrieveCapture == nil {
		obj.obj.ResponseRetrieveCapture = NewResponseRetrieveCapture().Msg()
	}
	if obj.responseRetrieveCaptureHolder == nil {
		obj.responseRetrieveCaptureHolder = &responseRetrieveCapture{obj: obj.obj.ResponseRetrieveCapture}
	}
	return obj.responseRetrieveCaptureHolder
}

// description is TBD
// ResponseRetrieveCapture returns a ResponseRetrieveCapture
func (obj *retrieveCaptureResponse) HasResponseRetrieveCapture() bool {
	return obj.obj.ResponseRetrieveCapture != nil
}

// description is TBD
// SetResponseRetrieveCapture sets the ResponseRetrieveCapture value in the RetrieveCaptureResponse object
func (obj *retrieveCaptureResponse) SetResponseRetrieveCapture(value ResponseRetrieveCapture) RetrieveCaptureResponse {

	obj.responseRetrieveCaptureHolder = nil
	obj.obj.ResponseRetrieveCapture = value.Msg()

	return obj
}

func (obj *retrieveCaptureResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ResponseRetrieveCapture != nil {

		obj.ResponseRetrieveCapture().validateObj(vObj, set_default)
	}

}

func (obj *retrieveCaptureResponse) setDefault() {

}

// ***** StartLatencyResponse *****
type startLatencyResponse struct {
	validation
	obj           *otg.StartLatencyResponse
	warningHolder Warning
}

func NewStartLatencyResponse() StartLatencyResponse {
	obj := startLatencyResponse{obj: &otg.StartLatencyResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *startLatencyResponse) Msg() *otg.StartLatencyResponse {
	return obj.obj
}

func (obj *startLatencyResponse) SetMsg(msg *otg.StartLatencyResponse) StartLatencyResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *startLatencyResponse) ToProto() (*otg.StartLatencyResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *startLatencyResponse) FromProto(msg *otg.StartLatencyResponse) (StartLatencyResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *startLatencyResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *startLatencyResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *startLatencyResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *startLatencyResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *startLatencyResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *startLatencyResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *startLatencyResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *startLatencyResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *startLatencyResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *startLatencyResponse) Clone() (StartLatencyResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStartLatencyResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *startLatencyResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *startLatencyResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StartLatencyResponse is description is TBD
type StartLatencyResponse interface {
	Validation
	// Msg marshals StartLatencyResponse to protobuf object *otg.StartLatencyResponse
	// and doesn't set defaults
	Msg() *otg.StartLatencyResponse
	// SetMsg unmarshals StartLatencyResponse from protobuf object *otg.StartLatencyResponse
	// and doesn't set defaults
	SetMsg(*otg.StartLatencyResponse) StartLatencyResponse
	// ToProto marshals StartLatencyResponse to protobuf object *otg.StartLatencyResponse
	ToProto() (*otg.StartLatencyResponse, error)
	// ToPbText marshals StartLatencyResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StartLatencyResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals StartLatencyResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StartLatencyResponse from protobuf object *otg.StartLatencyResponse
	FromProto(msg *otg.StartLatencyResponse) (StartLatencyResponse, error)
	// FromPbText unmarshals StartLatencyResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StartLatencyResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StartLatencyResponse from JSON text
	FromJson(value string) error
	// Validate validates StartLatencyResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StartLatencyResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in StartLatencyResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to StartLatencyResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) StartLatencyResponse
	// HasWarning checks if Warning has been set in StartLatencyResponse
	HasWarning() bool
	setNil()
}

func (obj *startLatencyResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *startLatencyResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *startLatencyResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *startLatencyResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the StartLatencyResponse object
func (obj *startLatencyResponse) SetWarning(value Warning) StartLatencyResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *startLatencyResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *startLatencyResponse) setDefault() {

}

// ***** StopLatencyResponse *****
type stopLatencyResponse struct {
	validation
	obj           *otg.StopLatencyResponse
	warningHolder Warning
}

func NewStopLatencyResponse() StopLatencyResponse {
	obj := stopLatencyResponse{obj: &otg.StopLatencyResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *stopLatencyResponse) Msg() *otg.StopLatencyResponse {
	return obj.obj
}

func (obj *stopLatencyResponse) SetMsg(msg *otg.StopLatencyResponse) StopLatencyResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *stopLatencyResponse) ToProto() (*otg.StopLatencyResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *stopLatencyResponse) FromProto(msg *otg.StopLatencyResponse) (StopLatencyResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *stopLatencyResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *stopLatencyResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *stopLatencyResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *stopLatencyResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *stopLatencyResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *stopLatencyResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *stopLatencyResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *stopLatencyResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *stopLatencyResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *stopLatencyResponse) Clone() (StopLatencyResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStopLatencyResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *stopLatencyResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *stopLatencyResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StopLatencyResponse is description is TBD
type StopLatencyResponse interface {
	Validation
	// Msg marshals StopLatencyResponse to protobuf object *otg.StopLatencyResponse
	// and doesn't set defaults
	Msg() *otg.StopLatencyResponse
	// SetMsg unmarshals StopLatencyResponse from protobuf object *otg.StopLatencyResponse
	// and doesn't set defaults
	SetMsg(*otg.StopLatencyResponse) StopLatencyResponse
	// ToProto marshals StopLatencyResponse to protobuf object *otg.StopLatencyResponse
	ToProto() (*otg.StopLatencyResponse, error)
	// ToPbText marshals StopLatencyResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StopLatencyResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals StopLatencyResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StopLatencyResponse from protobuf object *otg.StopLatencyResponse
	FromProto(msg *otg.StopLatencyResponse) (StopLatencyResponse, error)
	// FromPbText unmarshals StopLatencyResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StopLatencyResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StopLatencyResponse from JSON text
	FromJson(value string) error
	// Validate validates StopLatencyResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StopLatencyResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in StopLatencyResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to StopLatencyResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) StopLatencyResponse
	// HasWarning checks if Warning has been set in StopLatencyResponse
	HasWarning() bool
	setNil()
}

func (obj *stopLatencyResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *stopLatencyResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *stopLatencyResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *stopLatencyResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the StopLatencyResponse object
func (obj *stopLatencyResponse) SetWarning(value Warning) StopLatencyResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *stopLatencyResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *stopLatencyResponse) setDefault() {

}

// ***** ClearLatencyResponse *****
type clearLatencyResponse struct {
	validation
	obj           *otg.ClearLatencyResponse
	warningHolder Warning
}

func NewClearLatencyResponse() ClearLatencyResponse {
	obj := clearLatencyResponse{obj: &otg.ClearLatencyResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *clearLatencyResponse) Msg() *otg.ClearLatencyResponse {
	return obj.obj
}

func (obj *clearLatencyResponse) SetMsg(msg *otg.ClearLatencyResponse) ClearLatencyResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *clearLatencyResponse) ToProto() (*otg.ClearLatencyResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *clearLatencyResponse) FromProto(msg *otg.ClearLatencyResponse) (ClearLatencyResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *clearLatencyResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *clearLatencyResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *clearLatencyResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *clearLatencyResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *clearLatencyResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *clearLatencyResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *clearLatencyResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *clearLatencyResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *clearLatencyResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *clearLatencyResponse) Clone() (ClearLatencyResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewClearLatencyResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *clearLatencyResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *clearLatencyResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ClearLatencyResponse is description is TBD
type ClearLatencyResponse interface {
	Validation
	// Msg marshals ClearLatencyResponse to protobuf object *otg.ClearLatencyResponse
	// and doesn't set defaults
	Msg() *otg.ClearLatencyResponse
	// SetMsg unmarshals ClearLatencyResponse from protobuf object *otg.ClearLatencyResponse
	// and doesn't set defaults
	SetMsg(*otg.ClearLatencyResponse) ClearLatencyResponse
	// ToProto marshals ClearLatencyResponse to protobuf object *otg.ClearLatencyResponse
	ToProto() (*otg.ClearLatencyResponse, error)
	// ToPbText marshals ClearLatencyResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ClearLatencyResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals ClearLatencyResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ClearLatencyResponse from protobuf object *otg.ClearLatencyResponse
	FromProto(msg *otg.ClearLatencyResponse) (ClearLatencyResponse, error)
	// FromPbText unmarshals ClearLatencyResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ClearLatencyResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ClearLatencyResponse from JSON text
	FromJson(value string) error
	// Validate validates ClearLatencyResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ClearLatencyResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in ClearLatencyResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to ClearLatencyResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) ClearLatencyResponse
	// HasWarning checks if Warning has been set in ClearLatencyResponse
	HasWarning() bool
	setNil()
}

func (obj *clearLatencyResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *clearLatencyResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *clearLatencyResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *clearLatencyResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the ClearLatencyResponse object
func (obj *clearLatencyResponse) SetWarning(value Warning) ClearLatencyResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *clearLatencyResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *clearLatencyResponse) setDefault() {

}

// ***** ClearLatencyForSelectedPgiDsResponse *****
type clearLatencyForSelectedPgiDsResponse struct {
	validation
	obj           *otg.ClearLatencyForSelectedPgiDsResponse
	warningHolder Warning
}

func NewClearLatencyForSelectedPgiDsResponse() ClearLatencyForSelectedPgiDsResponse {
	obj := clearLatencyForSelectedPgiDsResponse{obj: &otg.ClearLatencyForSelectedPgiDsResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *clearLatencyForSelectedPgiDsResponse) Msg() *otg.ClearLatencyForSelectedPgiDsResponse {
	return obj.obj
}

func (obj *clearLatencyForSelectedPgiDsResponse) SetMsg(msg *otg.ClearLatencyForSelectedPgiDsResponse) ClearLatencyForSelectedPgiDsResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *clearLatencyForSelectedPgiDsResponse) ToProto() (*otg.ClearLatencyForSelectedPgiDsResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *clearLatencyForSelectedPgiDsResponse) FromProto(msg *otg.ClearLatencyForSelectedPgiDsResponse) (ClearLatencyForSelectedPgiDsResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *clearLatencyForSelectedPgiDsResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *clearLatencyForSelectedPgiDsResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *clearLatencyForSelectedPgiDsResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *clearLatencyForSelectedPgiDsResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *clearLatencyForSelectedPgiDsResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *clearLatencyForSelectedPgiDsResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *clearLatencyForSelectedPgiDsResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *clearLatencyForSelectedPgiDsResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *clearLatencyForSelectedPgiDsResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *clearLatencyForSelectedPgiDsResponse) Clone() (ClearLatencyForSelectedPgiDsResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewClearLatencyForSelectedPgiDsResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *clearLatencyForSelectedPgiDsResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *clearLatencyForSelectedPgiDsResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ClearLatencyForSelectedPgiDsResponse is description is TBD
type ClearLatencyForSelectedPgiDsResponse interface {
	Validation
	// Msg marshals ClearLatencyForSelectedPgiDsResponse to protobuf object *otg.ClearLatencyForSelectedPgiDsResponse
	// and doesn't set defaults
	Msg() *otg.ClearLatencyForSelectedPgiDsResponse
	// SetMsg unmarshals ClearLatencyForSelectedPgiDsResponse from protobuf object *otg.ClearLatencyForSelectedPgiDsResponse
	// and doesn't set defaults
	SetMsg(*otg.ClearLatencyForSelectedPgiDsResponse) ClearLatencyForSelectedPgiDsResponse
	// ToProto marshals ClearLatencyForSelectedPgiDsResponse to protobuf object *otg.ClearLatencyForSelectedPgiDsResponse
	ToProto() (*otg.ClearLatencyForSelectedPgiDsResponse, error)
	// ToPbText marshals ClearLatencyForSelectedPgiDsResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ClearLatencyForSelectedPgiDsResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals ClearLatencyForSelectedPgiDsResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ClearLatencyForSelectedPgiDsResponse from protobuf object *otg.ClearLatencyForSelectedPgiDsResponse
	FromProto(msg *otg.ClearLatencyForSelectedPgiDsResponse) (ClearLatencyForSelectedPgiDsResponse, error)
	// FromPbText unmarshals ClearLatencyForSelectedPgiDsResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ClearLatencyForSelectedPgiDsResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ClearLatencyForSelectedPgiDsResponse from JSON text
	FromJson(value string) error
	// Validate validates ClearLatencyForSelectedPgiDsResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ClearLatencyForSelectedPgiDsResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in ClearLatencyForSelectedPgiDsResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to ClearLatencyForSelectedPgiDsResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) ClearLatencyForSelectedPgiDsResponse
	// HasWarning checks if Warning has been set in ClearLatencyForSelectedPgiDsResponse
	HasWarning() bool
	setNil()
}

func (obj *clearLatencyForSelectedPgiDsResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *clearLatencyForSelectedPgiDsResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *clearLatencyForSelectedPgiDsResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *clearLatencyForSelectedPgiDsResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the ClearLatencyForSelectedPgiDsResponse object
func (obj *clearLatencyForSelectedPgiDsResponse) SetWarning(value Warning) ClearLatencyForSelectedPgiDsResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *clearLatencyForSelectedPgiDsResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *clearLatencyForSelectedPgiDsResponse) setDefault() {

}

// ***** ClearTimestampResponse *****
type clearTimestampResponse struct {
	validation
	obj           *otg.ClearTimestampResponse
	warningHolder Warning
}

func NewClearTimestampResponse() ClearTimestampResponse {
	obj := clearTimestampResponse{obj: &otg.ClearTimestampResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *clearTimestampResponse) Msg() *otg.ClearTimestampResponse {
	return obj.obj
}

func (obj *clearTimestampResponse) SetMsg(msg *otg.ClearTimestampResponse) ClearTimestampResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *clearTimestampResponse) ToProto() (*otg.ClearTimestampResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *clearTimestampResponse) FromProto(msg *otg.ClearTimestampResponse) (ClearTimestampResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *clearTimestampResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *clearTimestampResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *clearTimestampResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *clearTimestampResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *clearTimestampResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *clearTimestampResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *clearTimestampResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *clearTimestampResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *clearTimestampResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *clearTimestampResponse) Clone() (ClearTimestampResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewClearTimestampResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *clearTimestampResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *clearTimestampResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ClearTimestampResponse is description is TBD
type ClearTimestampResponse interface {
	Validation
	// Msg marshals ClearTimestampResponse to protobuf object *otg.ClearTimestampResponse
	// and doesn't set defaults
	Msg() *otg.ClearTimestampResponse
	// SetMsg unmarshals ClearTimestampResponse from protobuf object *otg.ClearTimestampResponse
	// and doesn't set defaults
	SetMsg(*otg.ClearTimestampResponse) ClearTimestampResponse
	// ToProto marshals ClearTimestampResponse to protobuf object *otg.ClearTimestampResponse
	ToProto() (*otg.ClearTimestampResponse, error)
	// ToPbText marshals ClearTimestampResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ClearTimestampResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals ClearTimestampResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ClearTimestampResponse from protobuf object *otg.ClearTimestampResponse
	FromProto(msg *otg.ClearTimestampResponse) (ClearTimestampResponse, error)
	// FromPbText unmarshals ClearTimestampResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ClearTimestampResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ClearTimestampResponse from JSON text
	FromJson(value string) error
	// Validate validates ClearTimestampResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ClearTimestampResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in ClearTimestampResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to ClearTimestampResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) ClearTimestampResponse
	// HasWarning checks if Warning has been set in ClearTimestampResponse
	HasWarning() bool
	setNil()
}

func (obj *clearTimestampResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *clearTimestampResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *clearTimestampResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *clearTimestampResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the ClearTimestampResponse object
func (obj *clearTimestampResponse) SetWarning(value Warning) ClearTimestampResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *clearTimestampResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *clearTimestampResponse) setDefault() {

}

// ***** SetRxLatencyResponse *****
type setRxLatencyResponse struct {
	validation
	obj           *otg.SetRxLatencyResponse
	warningHolder Warning
}

func NewSetRxLatencyResponse() SetRxLatencyResponse {
	obj := setRxLatencyResponse{obj: &otg.SetRxLatencyResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *setRxLatencyResponse) Msg() *otg.SetRxLatencyResponse {
	return obj.obj
}

func (obj *setRxLatencyResponse) SetMsg(msg *otg.SetRxLatencyResponse) SetRxLatencyResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *setRxLatencyResponse) ToProto() (*otg.SetRxLatencyResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *setRxLatencyResponse) FromProto(msg *otg.SetRxLatencyResponse) (SetRxLatencyResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *setRxLatencyResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *setRxLatencyResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *setRxLatencyResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *setRxLatencyResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *setRxLatencyResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *setRxLatencyResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *setRxLatencyResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *setRxLatencyResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *setRxLatencyResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *setRxLatencyResponse) Clone() (SetRxLatencyResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewSetRxLatencyResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *setRxLatencyResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *setRxLatencyResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// SetRxLatencyResponse is description is TBD
type SetRxLatencyResponse interface {
	Validation
	// Msg marshals SetRxLatencyResponse to protobuf object *otg.SetRxLatencyResponse
	// and doesn't set defaults
	Msg() *otg.SetRxLatencyResponse
	// SetMsg unmarshals SetRxLatencyResponse from protobuf object *otg.SetRxLatencyResponse
	// and doesn't set defaults
	SetMsg(*otg.SetRxLatencyResponse) SetRxLatencyResponse
	// ToProto marshals SetRxLatencyResponse to protobuf object *otg.SetRxLatencyResponse
	ToProto() (*otg.SetRxLatencyResponse, error)
	// ToPbText marshals SetRxLatencyResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals SetRxLatencyResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals SetRxLatencyResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals SetRxLatencyResponse from protobuf object *otg.SetRxLatencyResponse
	FromProto(msg *otg.SetRxLatencyResponse) (SetRxLatencyResponse, error)
	// FromPbText unmarshals SetRxLatencyResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals SetRxLatencyResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals SetRxLatencyResponse from JSON text
	FromJson(value string) error
	// Validate validates SetRxLatencyResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (SetRxLatencyResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in SetRxLatencyResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to SetRxLatencyResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) SetRxLatencyResponse
	// HasWarning checks if Warning has been set in SetRxLatencyResponse
	HasWarning() bool
	setNil()
}

func (obj *setRxLatencyResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *setRxLatencyResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *setRxLatencyResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *setRxLatencyResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the SetRxLatencyResponse object
func (obj *setRxLatencyResponse) SetWarning(value Warning) SetRxLatencyResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *setRxLatencyResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *setRxLatencyResponse) setDefault() {

}

// ***** SetTxRxSyncIntervalResponse *****
type setTxRxSyncIntervalResponse struct {
	validation
	obj           *otg.SetTxRxSyncIntervalResponse
	warningHolder Warning
}

func NewSetTxRxSyncIntervalResponse() SetTxRxSyncIntervalResponse {
	obj := setTxRxSyncIntervalResponse{obj: &otg.SetTxRxSyncIntervalResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *setTxRxSyncIntervalResponse) Msg() *otg.SetTxRxSyncIntervalResponse {
	return obj.obj
}

func (obj *setTxRxSyncIntervalResponse) SetMsg(msg *otg.SetTxRxSyncIntervalResponse) SetTxRxSyncIntervalResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *setTxRxSyncIntervalResponse) ToProto() (*otg.SetTxRxSyncIntervalResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *setTxRxSyncIntervalResponse) FromProto(msg *otg.SetTxRxSyncIntervalResponse) (SetTxRxSyncIntervalResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *setTxRxSyncIntervalResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *setTxRxSyncIntervalResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *setTxRxSyncIntervalResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *setTxRxSyncIntervalResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *setTxRxSyncIntervalResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *setTxRxSyncIntervalResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *setTxRxSyncIntervalResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *setTxRxSyncIntervalResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *setTxRxSyncIntervalResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *setTxRxSyncIntervalResponse) Clone() (SetTxRxSyncIntervalResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewSetTxRxSyncIntervalResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *setTxRxSyncIntervalResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *setTxRxSyncIntervalResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// SetTxRxSyncIntervalResponse is description is TBD
type SetTxRxSyncIntervalResponse interface {
	Validation
	// Msg marshals SetTxRxSyncIntervalResponse to protobuf object *otg.SetTxRxSyncIntervalResponse
	// and doesn't set defaults
	Msg() *otg.SetTxRxSyncIntervalResponse
	// SetMsg unmarshals SetTxRxSyncIntervalResponse from protobuf object *otg.SetTxRxSyncIntervalResponse
	// and doesn't set defaults
	SetMsg(*otg.SetTxRxSyncIntervalResponse) SetTxRxSyncIntervalResponse
	// ToProto marshals SetTxRxSyncIntervalResponse to protobuf object *otg.SetTxRxSyncIntervalResponse
	ToProto() (*otg.SetTxRxSyncIntervalResponse, error)
	// ToPbText marshals SetTxRxSyncIntervalResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals SetTxRxSyncIntervalResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals SetTxRxSyncIntervalResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals SetTxRxSyncIntervalResponse from protobuf object *otg.SetTxRxSyncIntervalResponse
	FromProto(msg *otg.SetTxRxSyncIntervalResponse) (SetTxRxSyncIntervalResponse, error)
	// FromPbText unmarshals SetTxRxSyncIntervalResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals SetTxRxSyncIntervalResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals SetTxRxSyncIntervalResponse from JSON text
	FromJson(value string) error
	// Validate validates SetTxRxSyncIntervalResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (SetTxRxSyncIntervalResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in SetTxRxSyncIntervalResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to SetTxRxSyncIntervalResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) SetTxRxSyncIntervalResponse
	// HasWarning checks if Warning has been set in SetTxRxSyncIntervalResponse
	HasWarning() bool
	setNil()
}

func (obj *setTxRxSyncIntervalResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *setTxRxSyncIntervalResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *setTxRxSyncIntervalResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *setTxRxSyncIntervalResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the SetTxRxSyncIntervalResponse object
func (obj *setTxRxSyncIntervalResponse) SetWarning(value Warning) SetTxRxSyncIntervalResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *setTxRxSyncIntervalResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *setTxRxSyncIntervalResponse) setDefault() {

}

// ***** ConfigurePcpuFiltersResponse *****
type configurePcpuFiltersResponse struct {
	validation
	obj           *otg.ConfigurePcpuFiltersResponse
	warningHolder Warning
}

func NewConfigurePcpuFiltersResponse() ConfigurePcpuFiltersResponse {
	obj := configurePcpuFiltersResponse{obj: &otg.ConfigurePcpuFiltersResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *configurePcpuFiltersResponse) Msg() *otg.ConfigurePcpuFiltersResponse {
	return obj.obj
}

func (obj *configurePcpuFiltersResponse) SetMsg(msg *otg.ConfigurePcpuFiltersResponse) ConfigurePcpuFiltersResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *configurePcpuFiltersResponse) ToProto() (*otg.ConfigurePcpuFiltersResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *configurePcpuFiltersResponse) FromProto(msg *otg.ConfigurePcpuFiltersResponse) (ConfigurePcpuFiltersResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *configurePcpuFiltersResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *configurePcpuFiltersResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *configurePcpuFiltersResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *configurePcpuFiltersResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *configurePcpuFiltersResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *configurePcpuFiltersResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *configurePcpuFiltersResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *configurePcpuFiltersResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *configurePcpuFiltersResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *configurePcpuFiltersResponse) Clone() (ConfigurePcpuFiltersResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewConfigurePcpuFiltersResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *configurePcpuFiltersResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *configurePcpuFiltersResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ConfigurePcpuFiltersResponse is description is TBD
type ConfigurePcpuFiltersResponse interface {
	Validation
	// Msg marshals ConfigurePcpuFiltersResponse to protobuf object *otg.ConfigurePcpuFiltersResponse
	// and doesn't set defaults
	Msg() *otg.ConfigurePcpuFiltersResponse
	// SetMsg unmarshals ConfigurePcpuFiltersResponse from protobuf object *otg.ConfigurePcpuFiltersResponse
	// and doesn't set defaults
	SetMsg(*otg.ConfigurePcpuFiltersResponse) ConfigurePcpuFiltersResponse
	// ToProto marshals ConfigurePcpuFiltersResponse to protobuf object *otg.ConfigurePcpuFiltersResponse
	ToProto() (*otg.ConfigurePcpuFiltersResponse, error)
	// ToPbText marshals ConfigurePcpuFiltersResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ConfigurePcpuFiltersResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals ConfigurePcpuFiltersResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ConfigurePcpuFiltersResponse from protobuf object *otg.ConfigurePcpuFiltersResponse
	FromProto(msg *otg.ConfigurePcpuFiltersResponse) (ConfigurePcpuFiltersResponse, error)
	// FromPbText unmarshals ConfigurePcpuFiltersResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ConfigurePcpuFiltersResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ConfigurePcpuFiltersResponse from JSON text
	FromJson(value string) error
	// Validate validates ConfigurePcpuFiltersResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ConfigurePcpuFiltersResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in ConfigurePcpuFiltersResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to ConfigurePcpuFiltersResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) ConfigurePcpuFiltersResponse
	// HasWarning checks if Warning has been set in ConfigurePcpuFiltersResponse
	HasWarning() bool
	setNil()
}

func (obj *configurePcpuFiltersResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *configurePcpuFiltersResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *configurePcpuFiltersResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *configurePcpuFiltersResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the ConfigurePcpuFiltersResponse object
func (obj *configurePcpuFiltersResponse) SetWarning(value Warning) ConfigurePcpuFiltersResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *configurePcpuFiltersResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *configurePcpuFiltersResponse) setDefault() {

}

// ***** GetCurrentServerTimeResponse *****
type getCurrentServerTimeResponse struct {
	validation
	obj                                *otg.GetCurrentServerTimeResponse
	responseGetCurrentServerTimeHolder ResponseGetCurrentServerTime
}

func NewGetCurrentServerTimeResponse() GetCurrentServerTimeResponse {
	obj := getCurrentServerTimeResponse{obj: &otg.GetCurrentServerTimeResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *getCurrentServerTimeResponse) Msg() *otg.GetCurrentServerTimeResponse {
	return obj.obj
}

func (obj *getCurrentServerTimeResponse) SetMsg(msg *otg.GetCurrentServerTimeResponse) GetCurrentServerTimeResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *getCurrentServerTimeResponse) ToProto() (*otg.GetCurrentServerTimeResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *getCurrentServerTimeResponse) FromProto(msg *otg.GetCurrentServerTimeResponse) (GetCurrentServerTimeResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *getCurrentServerTimeResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *getCurrentServerTimeResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *getCurrentServerTimeResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *getCurrentServerTimeResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *getCurrentServerTimeResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *getCurrentServerTimeResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *getCurrentServerTimeResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *getCurrentServerTimeResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *getCurrentServerTimeResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *getCurrentServerTimeResponse) Clone() (GetCurrentServerTimeResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewGetCurrentServerTimeResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *getCurrentServerTimeResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *getCurrentServerTimeResponse) setNil() {
	obj.responseGetCurrentServerTimeHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// GetCurrentServerTimeResponse is description is TBD
type GetCurrentServerTimeResponse interface {
	Validation
	// Msg marshals GetCurrentServerTimeResponse to protobuf object *otg.GetCurrentServerTimeResponse
	// and doesn't set defaults
	Msg() *otg.GetCurrentServerTimeResponse
	// SetMsg unmarshals GetCurrentServerTimeResponse from protobuf object *otg.GetCurrentServerTimeResponse
	// and doesn't set defaults
	SetMsg(*otg.GetCurrentServerTimeResponse) GetCurrentServerTimeResponse
	// ToProto marshals GetCurrentServerTimeResponse to protobuf object *otg.GetCurrentServerTimeResponse
	ToProto() (*otg.GetCurrentServerTimeResponse, error)
	// ToPbText marshals GetCurrentServerTimeResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals GetCurrentServerTimeResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals GetCurrentServerTimeResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals GetCurrentServerTimeResponse from protobuf object *otg.GetCurrentServerTimeResponse
	FromProto(msg *otg.GetCurrentServerTimeResponse) (GetCurrentServerTimeResponse, error)
	// FromPbText unmarshals GetCurrentServerTimeResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals GetCurrentServerTimeResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals GetCurrentServerTimeResponse from JSON text
	FromJson(value string) error
	// Validate validates GetCurrentServerTimeResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (GetCurrentServerTimeResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ResponseGetCurrentServerTime returns ResponseGetCurrentServerTime, set in GetCurrentServerTimeResponse.
	// ResponseGetCurrentServerTime is description is TBD
	ResponseGetCurrentServerTime() ResponseGetCurrentServerTime
	// SetResponseGetCurrentServerTime assigns ResponseGetCurrentServerTime provided by user to GetCurrentServerTimeResponse.
	// ResponseGetCurrentServerTime is description is TBD
	SetResponseGetCurrentServerTime(value ResponseGetCurrentServerTime) GetCurrentServerTimeResponse
	// HasResponseGetCurrentServerTime checks if ResponseGetCurrentServerTime has been set in GetCurrentServerTimeResponse
	HasResponseGetCurrentServerTime() bool
	setNil()
}

func (obj *getCurrentServerTimeResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *getCurrentServerTimeResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// ResponseGetCurrentServerTime returns a ResponseGetCurrentServerTime
func (obj *getCurrentServerTimeResponse) ResponseGetCurrentServerTime() ResponseGetCurrentServerTime {
	if obj.obj.ResponseGetCurrentServerTime == nil {
		obj.obj.ResponseGetCurrentServerTime = NewResponseGetCurrentServerTime().Msg()
	}
	if obj.responseGetCurrentServerTimeHolder == nil {
		obj.responseGetCurrentServerTimeHolder = &responseGetCurrentServerTime{obj: obj.obj.ResponseGetCurrentServerTime}
	}
	return obj.responseGetCurrentServerTimeHolder
}

// description is TBD
// ResponseGetCurrentServerTime returns a ResponseGetCurrentServerTime
func (obj *getCurrentServerTimeResponse) HasResponseGetCurrentServerTime() bool {
	return obj.obj.ResponseGetCurrentServerTime != nil
}

// description is TBD
// SetResponseGetCurrentServerTime sets the ResponseGetCurrentServerTime value in the GetCurrentServerTimeResponse object
func (obj *getCurrentServerTimeResponse) SetResponseGetCurrentServerTime(value ResponseGetCurrentServerTime) GetCurrentServerTimeResponse {

	obj.responseGetCurrentServerTimeHolder = nil
	obj.obj.ResponseGetCurrentServerTime = value.Msg()

	return obj
}

func (obj *getCurrentServerTimeResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ResponseGetCurrentServerTime != nil {

		obj.ResponseGetCurrentServerTime().validateObj(vObj, set_default)
	}

}

func (obj *getCurrentServerTimeResponse) setDefault() {

}

// ***** GetNtpStateResponse *****
type getNtpStateResponse struct {
	validation
	obj                       *otg.GetNtpStateResponse
	responseGetNTPStateHolder ResponseGetNTPState
}

func NewGetNtpStateResponse() GetNtpStateResponse {
	obj := getNtpStateResponse{obj: &otg.GetNtpStateResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *getNtpStateResponse) Msg() *otg.GetNtpStateResponse {
	return obj.obj
}

func (obj *getNtpStateResponse) SetMsg(msg *otg.GetNtpStateResponse) GetNtpStateResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *getNtpStateResponse) ToProto() (*otg.GetNtpStateResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *getNtpStateResponse) FromProto(msg *otg.GetNtpStateResponse) (GetNtpStateResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *getNtpStateResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *getNtpStateResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *getNtpStateResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *getNtpStateResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *getNtpStateResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *getNtpStateResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *getNtpStateResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *getNtpStateResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *getNtpStateResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *getNtpStateResponse) Clone() (GetNtpStateResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewGetNtpStateResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *getNtpStateResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *getNtpStateResponse) setNil() {
	obj.responseGetNTPStateHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// GetNtpStateResponse is description is TBD
type GetNtpStateResponse interface {
	Validation
	// Msg marshals GetNtpStateResponse to protobuf object *otg.GetNtpStateResponse
	// and doesn't set defaults
	Msg() *otg.GetNtpStateResponse
	// SetMsg unmarshals GetNtpStateResponse from protobuf object *otg.GetNtpStateResponse
	// and doesn't set defaults
	SetMsg(*otg.GetNtpStateResponse) GetNtpStateResponse
	// ToProto marshals GetNtpStateResponse to protobuf object *otg.GetNtpStateResponse
	ToProto() (*otg.GetNtpStateResponse, error)
	// ToPbText marshals GetNtpStateResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals GetNtpStateResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals GetNtpStateResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals GetNtpStateResponse from protobuf object *otg.GetNtpStateResponse
	FromProto(msg *otg.GetNtpStateResponse) (GetNtpStateResponse, error)
	// FromPbText unmarshals GetNtpStateResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals GetNtpStateResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals GetNtpStateResponse from JSON text
	FromJson(value string) error
	// Validate validates GetNtpStateResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (GetNtpStateResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ResponseGetNTPState returns ResponseGetNTPState, set in GetNtpStateResponse.
	// ResponseGetNTPState is description is TBD
	ResponseGetNTPState() ResponseGetNTPState
	// SetResponseGetNTPState assigns ResponseGetNTPState provided by user to GetNtpStateResponse.
	// ResponseGetNTPState is description is TBD
	SetResponseGetNTPState(value ResponseGetNTPState) GetNtpStateResponse
	// HasResponseGetNTPState checks if ResponseGetNTPState has been set in GetNtpStateResponse
	HasResponseGetNTPState() bool
	setNil()
}

func (obj *getNtpStateResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *getNtpStateResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// ResponseGetNTPState returns a ResponseGetNTPState
func (obj *getNtpStateResponse) ResponseGetNTPState() ResponseGetNTPState {
	if obj.obj.ResponseGetNtpstate == nil {
		obj.obj.ResponseGetNtpstate = NewResponseGetNTPState().Msg()
	}
	if obj.responseGetNTPStateHolder == nil {
		obj.responseGetNTPStateHolder = &responseGetNTPState{obj: obj.obj.ResponseGetNtpstate}
	}
	return obj.responseGetNTPStateHolder
}

// description is TBD
// ResponseGetNTPState returns a ResponseGetNTPState
func (obj *getNtpStateResponse) HasResponseGetNTPState() bool {
	return obj.obj.ResponseGetNtpstate != nil
}

// description is TBD
// SetResponseGetNTPState sets the ResponseGetNTPState value in the GetNtpStateResponse object
func (obj *getNtpStateResponse) SetResponseGetNTPState(value ResponseGetNTPState) GetNtpStateResponse {

	obj.responseGetNTPStateHolder = nil
	obj.obj.ResponseGetNtpstate = value.Msg()

	return obj
}

func (obj *getNtpStateResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ResponseGetNtpstate != nil {

		obj.ResponseGetNTPState().validateObj(vObj, set_default)
	}

}

func (obj *getNtpStateResponse) setDefault() {

}

// ***** SetNtpMasterOnNtpClientResponse *****
type setNtpMasterOnNtpClientResponse struct {
	validation
	obj           *otg.SetNtpMasterOnNtpClientResponse
	warningHolder Warning
}

func NewSetNtpMasterOnNtpClientResponse() SetNtpMasterOnNtpClientResponse {
	obj := setNtpMasterOnNtpClientResponse{obj: &otg.SetNtpMasterOnNtpClientResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *setNtpMasterOnNtpClientResponse) Msg() *otg.SetNtpMasterOnNtpClientResponse {
	return obj.obj
}

func (obj *setNtpMasterOnNtpClientResponse) SetMsg(msg *otg.SetNtpMasterOnNtpClientResponse) SetNtpMasterOnNtpClientResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *setNtpMasterOnNtpClientResponse) ToProto() (*otg.SetNtpMasterOnNtpClientResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *setNtpMasterOnNtpClientResponse) FromProto(msg *otg.SetNtpMasterOnNtpClientResponse) (SetNtpMasterOnNtpClientResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *setNtpMasterOnNtpClientResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *setNtpMasterOnNtpClientResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *setNtpMasterOnNtpClientResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *setNtpMasterOnNtpClientResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *setNtpMasterOnNtpClientResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *setNtpMasterOnNtpClientResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *setNtpMasterOnNtpClientResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *setNtpMasterOnNtpClientResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *setNtpMasterOnNtpClientResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *setNtpMasterOnNtpClientResponse) Clone() (SetNtpMasterOnNtpClientResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewSetNtpMasterOnNtpClientResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *setNtpMasterOnNtpClientResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *setNtpMasterOnNtpClientResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// SetNtpMasterOnNtpClientResponse is description is TBD
type SetNtpMasterOnNtpClientResponse interface {
	Validation
	// Msg marshals SetNtpMasterOnNtpClientResponse to protobuf object *otg.SetNtpMasterOnNtpClientResponse
	// and doesn't set defaults
	Msg() *otg.SetNtpMasterOnNtpClientResponse
	// SetMsg unmarshals SetNtpMasterOnNtpClientResponse from protobuf object *otg.SetNtpMasterOnNtpClientResponse
	// and doesn't set defaults
	SetMsg(*otg.SetNtpMasterOnNtpClientResponse) SetNtpMasterOnNtpClientResponse
	// ToProto marshals SetNtpMasterOnNtpClientResponse to protobuf object *otg.SetNtpMasterOnNtpClientResponse
	ToProto() (*otg.SetNtpMasterOnNtpClientResponse, error)
	// ToPbText marshals SetNtpMasterOnNtpClientResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals SetNtpMasterOnNtpClientResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals SetNtpMasterOnNtpClientResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals SetNtpMasterOnNtpClientResponse from protobuf object *otg.SetNtpMasterOnNtpClientResponse
	FromProto(msg *otg.SetNtpMasterOnNtpClientResponse) (SetNtpMasterOnNtpClientResponse, error)
	// FromPbText unmarshals SetNtpMasterOnNtpClientResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals SetNtpMasterOnNtpClientResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals SetNtpMasterOnNtpClientResponse from JSON text
	FromJson(value string) error
	// Validate validates SetNtpMasterOnNtpClientResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (SetNtpMasterOnNtpClientResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in SetNtpMasterOnNtpClientResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to SetNtpMasterOnNtpClientResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) SetNtpMasterOnNtpClientResponse
	// HasWarning checks if Warning has been set in SetNtpMasterOnNtpClientResponse
	HasWarning() bool
	setNil()
}

func (obj *setNtpMasterOnNtpClientResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *setNtpMasterOnNtpClientResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *setNtpMasterOnNtpClientResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *setNtpMasterOnNtpClientResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the SetNtpMasterOnNtpClientResponse object
func (obj *setNtpMasterOnNtpClientResponse) SetWarning(value Warning) SetNtpMasterOnNtpClientResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *setNtpMasterOnNtpClientResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *setNtpMasterOnNtpClientResponse) setDefault() {

}

// ***** SetNtpMasterAsSelfResponse *****
type setNtpMasterAsSelfResponse struct {
	validation
	obj           *otg.SetNtpMasterAsSelfResponse
	warningHolder Warning
}

func NewSetNtpMasterAsSelfResponse() SetNtpMasterAsSelfResponse {
	obj := setNtpMasterAsSelfResponse{obj: &otg.SetNtpMasterAsSelfResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *setNtpMasterAsSelfResponse) Msg() *otg.SetNtpMasterAsSelfResponse {
	return obj.obj
}

func (obj *setNtpMasterAsSelfResponse) SetMsg(msg *otg.SetNtpMasterAsSelfResponse) SetNtpMasterAsSelfResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *setNtpMasterAsSelfResponse) ToProto() (*otg.SetNtpMasterAsSelfResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *setNtpMasterAsSelfResponse) FromProto(msg *otg.SetNtpMasterAsSelfResponse) (SetNtpMasterAsSelfResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *setNtpMasterAsSelfResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *setNtpMasterAsSelfResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *setNtpMasterAsSelfResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *setNtpMasterAsSelfResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *setNtpMasterAsSelfResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *setNtpMasterAsSelfResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *setNtpMasterAsSelfResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *setNtpMasterAsSelfResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *setNtpMasterAsSelfResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *setNtpMasterAsSelfResponse) Clone() (SetNtpMasterAsSelfResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewSetNtpMasterAsSelfResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *setNtpMasterAsSelfResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *setNtpMasterAsSelfResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// SetNtpMasterAsSelfResponse is description is TBD
type SetNtpMasterAsSelfResponse interface {
	Validation
	// Msg marshals SetNtpMasterAsSelfResponse to protobuf object *otg.SetNtpMasterAsSelfResponse
	// and doesn't set defaults
	Msg() *otg.SetNtpMasterAsSelfResponse
	// SetMsg unmarshals SetNtpMasterAsSelfResponse from protobuf object *otg.SetNtpMasterAsSelfResponse
	// and doesn't set defaults
	SetMsg(*otg.SetNtpMasterAsSelfResponse) SetNtpMasterAsSelfResponse
	// ToProto marshals SetNtpMasterAsSelfResponse to protobuf object *otg.SetNtpMasterAsSelfResponse
	ToProto() (*otg.SetNtpMasterAsSelfResponse, error)
	// ToPbText marshals SetNtpMasterAsSelfResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals SetNtpMasterAsSelfResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals SetNtpMasterAsSelfResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals SetNtpMasterAsSelfResponse from protobuf object *otg.SetNtpMasterAsSelfResponse
	FromProto(msg *otg.SetNtpMasterAsSelfResponse) (SetNtpMasterAsSelfResponse, error)
	// FromPbText unmarshals SetNtpMasterAsSelfResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals SetNtpMasterAsSelfResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals SetNtpMasterAsSelfResponse from JSON text
	FromJson(value string) error
	// Validate validates SetNtpMasterAsSelfResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (SetNtpMasterAsSelfResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in SetNtpMasterAsSelfResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to SetNtpMasterAsSelfResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) SetNtpMasterAsSelfResponse
	// HasWarning checks if Warning has been set in SetNtpMasterAsSelfResponse
	HasWarning() bool
	setNil()
}

func (obj *setNtpMasterAsSelfResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *setNtpMasterAsSelfResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *setNtpMasterAsSelfResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *setNtpMasterAsSelfResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the SetNtpMasterAsSelfResponse object
func (obj *setNtpMasterAsSelfResponse) SetWarning(value Warning) SetNtpMasterAsSelfResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *setNtpMasterAsSelfResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *setNtpMasterAsSelfResponse) setDefault() {

}

// ***** LockPulseResponse *****
type lockPulseResponse struct {
	validation
	obj           *otg.LockPulseResponse
	warningHolder Warning
}

func NewLockPulseResponse() LockPulseResponse {
	obj := lockPulseResponse{obj: &otg.LockPulseResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *lockPulseResponse) Msg() *otg.LockPulseResponse {
	return obj.obj
}

func (obj *lockPulseResponse) SetMsg(msg *otg.LockPulseResponse) LockPulseResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *lockPulseResponse) ToProto() (*otg.LockPulseResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *lockPulseResponse) FromProto(msg *otg.LockPulseResponse) (LockPulseResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *lockPulseResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *lockPulseResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *lockPulseResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *lockPulseResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *lockPulseResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *lockPulseResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *lockPulseResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *lockPulseResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *lockPulseResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *lockPulseResponse) Clone() (LockPulseResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewLockPulseResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *lockPulseResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *lockPulseResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// LockPulseResponse is description is TBD
type LockPulseResponse interface {
	Validation
	// Msg marshals LockPulseResponse to protobuf object *otg.LockPulseResponse
	// and doesn't set defaults
	Msg() *otg.LockPulseResponse
	// SetMsg unmarshals LockPulseResponse from protobuf object *otg.LockPulseResponse
	// and doesn't set defaults
	SetMsg(*otg.LockPulseResponse) LockPulseResponse
	// ToProto marshals LockPulseResponse to protobuf object *otg.LockPulseResponse
	ToProto() (*otg.LockPulseResponse, error)
	// ToPbText marshals LockPulseResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals LockPulseResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals LockPulseResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals LockPulseResponse from protobuf object *otg.LockPulseResponse
	FromProto(msg *otg.LockPulseResponse) (LockPulseResponse, error)
	// FromPbText unmarshals LockPulseResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals LockPulseResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals LockPulseResponse from JSON text
	FromJson(value string) error
	// Validate validates LockPulseResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (LockPulseResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in LockPulseResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to LockPulseResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) LockPulseResponse
	// HasWarning checks if Warning has been set in LockPulseResponse
	HasWarning() bool
	setNil()
}

func (obj *lockPulseResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *lockPulseResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *lockPulseResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *lockPulseResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the LockPulseResponse object
func (obj *lockPulseResponse) SetWarning(value Warning) LockPulseResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *lockPulseResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *lockPulseResponse) setDefault() {

}

// ***** ArmPulseResponse *****
type armPulseResponse struct {
	validation
	obj           *otg.ArmPulseResponse
	warningHolder Warning
}

func NewArmPulseResponse() ArmPulseResponse {
	obj := armPulseResponse{obj: &otg.ArmPulseResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *armPulseResponse) Msg() *otg.ArmPulseResponse {
	return obj.obj
}

func (obj *armPulseResponse) SetMsg(msg *otg.ArmPulseResponse) ArmPulseResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *armPulseResponse) ToProto() (*otg.ArmPulseResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *armPulseResponse) FromProto(msg *otg.ArmPulseResponse) (ArmPulseResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *armPulseResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *armPulseResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *armPulseResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *armPulseResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *armPulseResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *armPulseResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *armPulseResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *armPulseResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *armPulseResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *armPulseResponse) Clone() (ArmPulseResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewArmPulseResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *armPulseResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *armPulseResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ArmPulseResponse is description is TBD
type ArmPulseResponse interface {
	Validation
	// Msg marshals ArmPulseResponse to protobuf object *otg.ArmPulseResponse
	// and doesn't set defaults
	Msg() *otg.ArmPulseResponse
	// SetMsg unmarshals ArmPulseResponse from protobuf object *otg.ArmPulseResponse
	// and doesn't set defaults
	SetMsg(*otg.ArmPulseResponse) ArmPulseResponse
	// ToProto marshals ArmPulseResponse to protobuf object *otg.ArmPulseResponse
	ToProto() (*otg.ArmPulseResponse, error)
	// ToPbText marshals ArmPulseResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ArmPulseResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals ArmPulseResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ArmPulseResponse from protobuf object *otg.ArmPulseResponse
	FromProto(msg *otg.ArmPulseResponse) (ArmPulseResponse, error)
	// FromPbText unmarshals ArmPulseResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ArmPulseResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ArmPulseResponse from JSON text
	FromJson(value string) error
	// Validate validates ArmPulseResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ArmPulseResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in ArmPulseResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to ArmPulseResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) ArmPulseResponse
	// HasWarning checks if Warning has been set in ArmPulseResponse
	HasWarning() bool
	setNil()
}

func (obj *armPulseResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *armPulseResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *armPulseResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *armPulseResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the ArmPulseResponse object
func (obj *armPulseResponse) SetWarning(value Warning) ArmPulseResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *armPulseResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *armPulseResponse) setDefault() {

}

// ***** UnlockPulseResponse *****
type unlockPulseResponse struct {
	validation
	obj           *otg.UnlockPulseResponse
	warningHolder Warning
}

func NewUnlockPulseResponse() UnlockPulseResponse {
	obj := unlockPulseResponse{obj: &otg.UnlockPulseResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *unlockPulseResponse) Msg() *otg.UnlockPulseResponse {
	return obj.obj
}

func (obj *unlockPulseResponse) SetMsg(msg *otg.UnlockPulseResponse) UnlockPulseResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *unlockPulseResponse) ToProto() (*otg.UnlockPulseResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *unlockPulseResponse) FromProto(msg *otg.UnlockPulseResponse) (UnlockPulseResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *unlockPulseResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *unlockPulseResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *unlockPulseResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *unlockPulseResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *unlockPulseResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *unlockPulseResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *unlockPulseResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *unlockPulseResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *unlockPulseResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *unlockPulseResponse) Clone() (UnlockPulseResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewUnlockPulseResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *unlockPulseResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *unlockPulseResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// UnlockPulseResponse is description is TBD
type UnlockPulseResponse interface {
	Validation
	// Msg marshals UnlockPulseResponse to protobuf object *otg.UnlockPulseResponse
	// and doesn't set defaults
	Msg() *otg.UnlockPulseResponse
	// SetMsg unmarshals UnlockPulseResponse from protobuf object *otg.UnlockPulseResponse
	// and doesn't set defaults
	SetMsg(*otg.UnlockPulseResponse) UnlockPulseResponse
	// ToProto marshals UnlockPulseResponse to protobuf object *otg.UnlockPulseResponse
	ToProto() (*otg.UnlockPulseResponse, error)
	// ToPbText marshals UnlockPulseResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals UnlockPulseResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals UnlockPulseResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals UnlockPulseResponse from protobuf object *otg.UnlockPulseResponse
	FromProto(msg *otg.UnlockPulseResponse) (UnlockPulseResponse, error)
	// FromPbText unmarshals UnlockPulseResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals UnlockPulseResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals UnlockPulseResponse from JSON text
	FromJson(value string) error
	// Validate validates UnlockPulseResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (UnlockPulseResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in UnlockPulseResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to UnlockPulseResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) UnlockPulseResponse
	// HasWarning checks if Warning has been set in UnlockPulseResponse
	HasWarning() bool
	setNil()
}

func (obj *unlockPulseResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *unlockPulseResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *unlockPulseResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *unlockPulseResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the UnlockPulseResponse object
func (obj *unlockPulseResponse) SetWarning(value Warning) UnlockPulseResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *unlockPulseResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *unlockPulseResponse) setDefault() {

}

// ***** GetTimedActionTimestampResponse *****
type getTimedActionTimestampResponse struct {
	validation
	obj                                   *otg.GetTimedActionTimestampResponse
	responseGetTimedActionTimestampHolder ResponseGetTimedActionTimestamp
}

func NewGetTimedActionTimestampResponse() GetTimedActionTimestampResponse {
	obj := getTimedActionTimestampResponse{obj: &otg.GetTimedActionTimestampResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *getTimedActionTimestampResponse) Msg() *otg.GetTimedActionTimestampResponse {
	return obj.obj
}

func (obj *getTimedActionTimestampResponse) SetMsg(msg *otg.GetTimedActionTimestampResponse) GetTimedActionTimestampResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *getTimedActionTimestampResponse) ToProto() (*otg.GetTimedActionTimestampResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *getTimedActionTimestampResponse) FromProto(msg *otg.GetTimedActionTimestampResponse) (GetTimedActionTimestampResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *getTimedActionTimestampResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *getTimedActionTimestampResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *getTimedActionTimestampResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *getTimedActionTimestampResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *getTimedActionTimestampResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *getTimedActionTimestampResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *getTimedActionTimestampResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *getTimedActionTimestampResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *getTimedActionTimestampResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *getTimedActionTimestampResponse) Clone() (GetTimedActionTimestampResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewGetTimedActionTimestampResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *getTimedActionTimestampResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *getTimedActionTimestampResponse) setNil() {
	obj.responseGetTimedActionTimestampHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// GetTimedActionTimestampResponse is description is TBD
type GetTimedActionTimestampResponse interface {
	Validation
	// Msg marshals GetTimedActionTimestampResponse to protobuf object *otg.GetTimedActionTimestampResponse
	// and doesn't set defaults
	Msg() *otg.GetTimedActionTimestampResponse
	// SetMsg unmarshals GetTimedActionTimestampResponse from protobuf object *otg.GetTimedActionTimestampResponse
	// and doesn't set defaults
	SetMsg(*otg.GetTimedActionTimestampResponse) GetTimedActionTimestampResponse
	// ToProto marshals GetTimedActionTimestampResponse to protobuf object *otg.GetTimedActionTimestampResponse
	ToProto() (*otg.GetTimedActionTimestampResponse, error)
	// ToPbText marshals GetTimedActionTimestampResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals GetTimedActionTimestampResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals GetTimedActionTimestampResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals GetTimedActionTimestampResponse from protobuf object *otg.GetTimedActionTimestampResponse
	FromProto(msg *otg.GetTimedActionTimestampResponse) (GetTimedActionTimestampResponse, error)
	// FromPbText unmarshals GetTimedActionTimestampResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals GetTimedActionTimestampResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals GetTimedActionTimestampResponse from JSON text
	FromJson(value string) error
	// Validate validates GetTimedActionTimestampResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (GetTimedActionTimestampResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ResponseGetTimedActionTimestamp returns ResponseGetTimedActionTimestamp, set in GetTimedActionTimestampResponse.
	// ResponseGetTimedActionTimestamp is description is TBD
	ResponseGetTimedActionTimestamp() ResponseGetTimedActionTimestamp
	// SetResponseGetTimedActionTimestamp assigns ResponseGetTimedActionTimestamp provided by user to GetTimedActionTimestampResponse.
	// ResponseGetTimedActionTimestamp is description is TBD
	SetResponseGetTimedActionTimestamp(value ResponseGetTimedActionTimestamp) GetTimedActionTimestampResponse
	// HasResponseGetTimedActionTimestamp checks if ResponseGetTimedActionTimestamp has been set in GetTimedActionTimestampResponse
	HasResponseGetTimedActionTimestamp() bool
	setNil()
}

func (obj *getTimedActionTimestampResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *getTimedActionTimestampResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// ResponseGetTimedActionTimestamp returns a ResponseGetTimedActionTimestamp
func (obj *getTimedActionTimestampResponse) ResponseGetTimedActionTimestamp() ResponseGetTimedActionTimestamp {
	if obj.obj.ResponseGetTimedActionTimestamp == nil {
		obj.obj.ResponseGetTimedActionTimestamp = NewResponseGetTimedActionTimestamp().Msg()
	}
	if obj.responseGetTimedActionTimestampHolder == nil {
		obj.responseGetTimedActionTimestampHolder = &responseGetTimedActionTimestamp{obj: obj.obj.ResponseGetTimedActionTimestamp}
	}
	return obj.responseGetTimedActionTimestampHolder
}

// description is TBD
// ResponseGetTimedActionTimestamp returns a ResponseGetTimedActionTimestamp
func (obj *getTimedActionTimestampResponse) HasResponseGetTimedActionTimestamp() bool {
	return obj.obj.ResponseGetTimedActionTimestamp != nil
}

// description is TBD
// SetResponseGetTimedActionTimestamp sets the ResponseGetTimedActionTimestamp value in the GetTimedActionTimestampResponse object
func (obj *getTimedActionTimestampResponse) SetResponseGetTimedActionTimestamp(value ResponseGetTimedActionTimestamp) GetTimedActionTimestampResponse {

	obj.responseGetTimedActionTimestampHolder = nil
	obj.obj.ResponseGetTimedActionTimestamp = value.Msg()

	return obj
}

func (obj *getTimedActionTimestampResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ResponseGetTimedActionTimestamp != nil {

		obj.ResponseGetTimedActionTimestamp().validateObj(vObj, set_default)
	}

}

func (obj *getTimedActionTimestampResponse) setDefault() {

}

// ***** ScheduleTimedActionsResponse *****
type scheduleTimedActionsResponse struct {
	validation
	obj                                *otg.ScheduleTimedActionsResponse
	responseScheduleTimedActionsHolder ResponseScheduleTimedActions
}

func NewScheduleTimedActionsResponse() ScheduleTimedActionsResponse {
	obj := scheduleTimedActionsResponse{obj: &otg.ScheduleTimedActionsResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *scheduleTimedActionsResponse) Msg() *otg.ScheduleTimedActionsResponse {
	return obj.obj
}

func (obj *scheduleTimedActionsResponse) SetMsg(msg *otg.ScheduleTimedActionsResponse) ScheduleTimedActionsResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *scheduleTimedActionsResponse) ToProto() (*otg.ScheduleTimedActionsResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *scheduleTimedActionsResponse) FromProto(msg *otg.ScheduleTimedActionsResponse) (ScheduleTimedActionsResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *scheduleTimedActionsResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *scheduleTimedActionsResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *scheduleTimedActionsResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *scheduleTimedActionsResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *scheduleTimedActionsResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *scheduleTimedActionsResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *scheduleTimedActionsResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *scheduleTimedActionsResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *scheduleTimedActionsResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *scheduleTimedActionsResponse) Clone() (ScheduleTimedActionsResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewScheduleTimedActionsResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *scheduleTimedActionsResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *scheduleTimedActionsResponse) setNil() {
	obj.responseScheduleTimedActionsHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ScheduleTimedActionsResponse is description is TBD
type ScheduleTimedActionsResponse interface {
	Validation
	// Msg marshals ScheduleTimedActionsResponse to protobuf object *otg.ScheduleTimedActionsResponse
	// and doesn't set defaults
	Msg() *otg.ScheduleTimedActionsResponse
	// SetMsg unmarshals ScheduleTimedActionsResponse from protobuf object *otg.ScheduleTimedActionsResponse
	// and doesn't set defaults
	SetMsg(*otg.ScheduleTimedActionsResponse) ScheduleTimedActionsResponse
	// ToProto marshals ScheduleTimedActionsResponse to protobuf object *otg.ScheduleTimedActionsResponse
	ToProto() (*otg.ScheduleTimedActionsResponse, error)
	// ToPbText marshals ScheduleTimedActionsResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ScheduleTimedActionsResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals ScheduleTimedActionsResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ScheduleTimedActionsResponse from protobuf object *otg.ScheduleTimedActionsResponse
	FromProto(msg *otg.ScheduleTimedActionsResponse) (ScheduleTimedActionsResponse, error)
	// FromPbText unmarshals ScheduleTimedActionsResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ScheduleTimedActionsResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ScheduleTimedActionsResponse from JSON text
	FromJson(value string) error
	// Validate validates ScheduleTimedActionsResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ScheduleTimedActionsResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ResponseScheduleTimedActions returns ResponseScheduleTimedActions, set in ScheduleTimedActionsResponse.
	// ResponseScheduleTimedActions is description is TBD
	ResponseScheduleTimedActions() ResponseScheduleTimedActions
	// SetResponseScheduleTimedActions assigns ResponseScheduleTimedActions provided by user to ScheduleTimedActionsResponse.
	// ResponseScheduleTimedActions is description is TBD
	SetResponseScheduleTimedActions(value ResponseScheduleTimedActions) ScheduleTimedActionsResponse
	// HasResponseScheduleTimedActions checks if ResponseScheduleTimedActions has been set in ScheduleTimedActionsResponse
	HasResponseScheduleTimedActions() bool
	setNil()
}

func (obj *scheduleTimedActionsResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *scheduleTimedActionsResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// ResponseScheduleTimedActions returns a ResponseScheduleTimedActions
func (obj *scheduleTimedActionsResponse) ResponseScheduleTimedActions() ResponseScheduleTimedActions {
	if obj.obj.ResponseScheduleTimedActions == nil {
		obj.obj.ResponseScheduleTimedActions = NewResponseScheduleTimedActions().Msg()
	}
	if obj.responseScheduleTimedActionsHolder == nil {
		obj.responseScheduleTimedActionsHolder = &responseScheduleTimedActions{obj: obj.obj.ResponseScheduleTimedActions}
	}
	return obj.responseScheduleTimedActionsHolder
}

// description is TBD
// ResponseScheduleTimedActions returns a ResponseScheduleTimedActions
func (obj *scheduleTimedActionsResponse) HasResponseScheduleTimedActions() bool {
	return obj.obj.ResponseScheduleTimedActions != nil
}

// description is TBD
// SetResponseScheduleTimedActions sets the ResponseScheduleTimedActions value in the ScheduleTimedActionsResponse object
func (obj *scheduleTimedActionsResponse) SetResponseScheduleTimedActions(value ResponseScheduleTimedActions) ScheduleTimedActionsResponse {

	obj.responseScheduleTimedActionsHolder = nil
	obj.obj.ResponseScheduleTimedActions = value.Msg()

	return obj
}

func (obj *scheduleTimedActionsResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ResponseScheduleTimedActions != nil {

		obj.ResponseScheduleTimedActions().validateObj(vObj, set_default)
	}

}

func (obj *scheduleTimedActionsResponse) setDefault() {

}

// ***** StartTxResponse *****
type startTxResponse struct {
	validation
	obj           *otg.StartTxResponse
	warningHolder Warning
}

func NewStartTxResponse() StartTxResponse {
	obj := startTxResponse{obj: &otg.StartTxResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *startTxResponse) Msg() *otg.StartTxResponse {
	return obj.obj
}

func (obj *startTxResponse) SetMsg(msg *otg.StartTxResponse) StartTxResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *startTxResponse) ToProto() (*otg.StartTxResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *startTxResponse) FromProto(msg *otg.StartTxResponse) (StartTxResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *startTxResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *startTxResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *startTxResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *startTxResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *startTxResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *startTxResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *startTxResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *startTxResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *startTxResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *startTxResponse) Clone() (StartTxResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStartTxResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *startTxResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *startTxResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StartTxResponse is description is TBD
type StartTxResponse interface {
	Validation
	// Msg marshals StartTxResponse to protobuf object *otg.StartTxResponse
	// and doesn't set defaults
	Msg() *otg.StartTxResponse
	// SetMsg unmarshals StartTxResponse from protobuf object *otg.StartTxResponse
	// and doesn't set defaults
	SetMsg(*otg.StartTxResponse) StartTxResponse
	// ToProto marshals StartTxResponse to protobuf object *otg.StartTxResponse
	ToProto() (*otg.StartTxResponse, error)
	// ToPbText marshals StartTxResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StartTxResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals StartTxResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StartTxResponse from protobuf object *otg.StartTxResponse
	FromProto(msg *otg.StartTxResponse) (StartTxResponse, error)
	// FromPbText unmarshals StartTxResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StartTxResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StartTxResponse from JSON text
	FromJson(value string) error
	// Validate validates StartTxResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StartTxResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in StartTxResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to StartTxResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) StartTxResponse
	// HasWarning checks if Warning has been set in StartTxResponse
	HasWarning() bool
	setNil()
}

func (obj *startTxResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *startTxResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *startTxResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *startTxResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the StartTxResponse object
func (obj *startTxResponse) SetWarning(value Warning) StartTxResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *startTxResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *startTxResponse) setDefault() {

}

// ***** StopTxResponse *****
type stopTxResponse struct {
	validation
	obj           *otg.StopTxResponse
	warningHolder Warning
}

func NewStopTxResponse() StopTxResponse {
	obj := stopTxResponse{obj: &otg.StopTxResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *stopTxResponse) Msg() *otg.StopTxResponse {
	return obj.obj
}

func (obj *stopTxResponse) SetMsg(msg *otg.StopTxResponse) StopTxResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *stopTxResponse) ToProto() (*otg.StopTxResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *stopTxResponse) FromProto(msg *otg.StopTxResponse) (StopTxResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *stopTxResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *stopTxResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *stopTxResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *stopTxResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *stopTxResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *stopTxResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *stopTxResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *stopTxResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *stopTxResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *stopTxResponse) Clone() (StopTxResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStopTxResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *stopTxResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *stopTxResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StopTxResponse is description is TBD
type StopTxResponse interface {
	Validation
	// Msg marshals StopTxResponse to protobuf object *otg.StopTxResponse
	// and doesn't set defaults
	Msg() *otg.StopTxResponse
	// SetMsg unmarshals StopTxResponse from protobuf object *otg.StopTxResponse
	// and doesn't set defaults
	SetMsg(*otg.StopTxResponse) StopTxResponse
	// ToProto marshals StopTxResponse to protobuf object *otg.StopTxResponse
	ToProto() (*otg.StopTxResponse, error)
	// ToPbText marshals StopTxResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StopTxResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals StopTxResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StopTxResponse from protobuf object *otg.StopTxResponse
	FromProto(msg *otg.StopTxResponse) (StopTxResponse, error)
	// FromPbText unmarshals StopTxResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StopTxResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StopTxResponse from JSON text
	FromJson(value string) error
	// Validate validates StopTxResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StopTxResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in StopTxResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to StopTxResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) StopTxResponse
	// HasWarning checks if Warning has been set in StopTxResponse
	HasWarning() bool
	setNil()
}

func (obj *stopTxResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *stopTxResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *stopTxResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *stopTxResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the StopTxResponse object
func (obj *stopTxResponse) SetWarning(value Warning) StopTxResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *stopTxResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *stopTxResponse) setDefault() {

}

// ***** ConfigureStreamsResponse *****
type configureStreamsResponse struct {
	validation
	obj           *otg.ConfigureStreamsResponse
	warningHolder Warning
}

func NewConfigureStreamsResponse() ConfigureStreamsResponse {
	obj := configureStreamsResponse{obj: &otg.ConfigureStreamsResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *configureStreamsResponse) Msg() *otg.ConfigureStreamsResponse {
	return obj.obj
}

func (obj *configureStreamsResponse) SetMsg(msg *otg.ConfigureStreamsResponse) ConfigureStreamsResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *configureStreamsResponse) ToProto() (*otg.ConfigureStreamsResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *configureStreamsResponse) FromProto(msg *otg.ConfigureStreamsResponse) (ConfigureStreamsResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *configureStreamsResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *configureStreamsResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *configureStreamsResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *configureStreamsResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *configureStreamsResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *configureStreamsResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *configureStreamsResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *configureStreamsResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *configureStreamsResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *configureStreamsResponse) Clone() (ConfigureStreamsResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewConfigureStreamsResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *configureStreamsResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *configureStreamsResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ConfigureStreamsResponse is description is TBD
type ConfigureStreamsResponse interface {
	Validation
	// Msg marshals ConfigureStreamsResponse to protobuf object *otg.ConfigureStreamsResponse
	// and doesn't set defaults
	Msg() *otg.ConfigureStreamsResponse
	// SetMsg unmarshals ConfigureStreamsResponse from protobuf object *otg.ConfigureStreamsResponse
	// and doesn't set defaults
	SetMsg(*otg.ConfigureStreamsResponse) ConfigureStreamsResponse
	// ToProto marshals ConfigureStreamsResponse to protobuf object *otg.ConfigureStreamsResponse
	ToProto() (*otg.ConfigureStreamsResponse, error)
	// ToPbText marshals ConfigureStreamsResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ConfigureStreamsResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals ConfigureStreamsResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ConfigureStreamsResponse from protobuf object *otg.ConfigureStreamsResponse
	FromProto(msg *otg.ConfigureStreamsResponse) (ConfigureStreamsResponse, error)
	// FromPbText unmarshals ConfigureStreamsResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ConfigureStreamsResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ConfigureStreamsResponse from JSON text
	FromJson(value string) error
	// Validate validates ConfigureStreamsResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ConfigureStreamsResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in ConfigureStreamsResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to ConfigureStreamsResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) ConfigureStreamsResponse
	// HasWarning checks if Warning has been set in ConfigureStreamsResponse
	HasWarning() bool
	setNil()
}

func (obj *configureStreamsResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *configureStreamsResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *configureStreamsResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *configureStreamsResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the ConfigureStreamsResponse object
func (obj *configureStreamsResponse) SetWarning(value Warning) ConfigureStreamsResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *configureStreamsResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *configureStreamsResponse) setDefault() {

}

// ***** ConfigureUpdateStreamsResponse *****
type configureUpdateStreamsResponse struct {
	validation
	obj                                  *otg.ConfigureUpdateStreamsResponse
	responseConfigureUpdateStreamsHolder ResponseConfigureUpdateStreams
}

func NewConfigureUpdateStreamsResponse() ConfigureUpdateStreamsResponse {
	obj := configureUpdateStreamsResponse{obj: &otg.ConfigureUpdateStreamsResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *configureUpdateStreamsResponse) Msg() *otg.ConfigureUpdateStreamsResponse {
	return obj.obj
}

func (obj *configureUpdateStreamsResponse) SetMsg(msg *otg.ConfigureUpdateStreamsResponse) ConfigureUpdateStreamsResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *configureUpdateStreamsResponse) ToProto() (*otg.ConfigureUpdateStreamsResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *configureUpdateStreamsResponse) FromProto(msg *otg.ConfigureUpdateStreamsResponse) (ConfigureUpdateStreamsResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *configureUpdateStreamsResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *configureUpdateStreamsResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *configureUpdateStreamsResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *configureUpdateStreamsResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *configureUpdateStreamsResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *configureUpdateStreamsResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *configureUpdateStreamsResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *configureUpdateStreamsResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *configureUpdateStreamsResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *configureUpdateStreamsResponse) Clone() (ConfigureUpdateStreamsResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewConfigureUpdateStreamsResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *configureUpdateStreamsResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *configureUpdateStreamsResponse) setNil() {
	obj.responseConfigureUpdateStreamsHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ConfigureUpdateStreamsResponse is description is TBD
type ConfigureUpdateStreamsResponse interface {
	Validation
	// Msg marshals ConfigureUpdateStreamsResponse to protobuf object *otg.ConfigureUpdateStreamsResponse
	// and doesn't set defaults
	Msg() *otg.ConfigureUpdateStreamsResponse
	// SetMsg unmarshals ConfigureUpdateStreamsResponse from protobuf object *otg.ConfigureUpdateStreamsResponse
	// and doesn't set defaults
	SetMsg(*otg.ConfigureUpdateStreamsResponse) ConfigureUpdateStreamsResponse
	// ToProto marshals ConfigureUpdateStreamsResponse to protobuf object *otg.ConfigureUpdateStreamsResponse
	ToProto() (*otg.ConfigureUpdateStreamsResponse, error)
	// ToPbText marshals ConfigureUpdateStreamsResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ConfigureUpdateStreamsResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals ConfigureUpdateStreamsResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ConfigureUpdateStreamsResponse from protobuf object *otg.ConfigureUpdateStreamsResponse
	FromProto(msg *otg.ConfigureUpdateStreamsResponse) (ConfigureUpdateStreamsResponse, error)
	// FromPbText unmarshals ConfigureUpdateStreamsResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ConfigureUpdateStreamsResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ConfigureUpdateStreamsResponse from JSON text
	FromJson(value string) error
	// Validate validates ConfigureUpdateStreamsResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ConfigureUpdateStreamsResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ResponseConfigureUpdateStreams returns ResponseConfigureUpdateStreams, set in ConfigureUpdateStreamsResponse.
	// ResponseConfigureUpdateStreams is description is TBD
	ResponseConfigureUpdateStreams() ResponseConfigureUpdateStreams
	// SetResponseConfigureUpdateStreams assigns ResponseConfigureUpdateStreams provided by user to ConfigureUpdateStreamsResponse.
	// ResponseConfigureUpdateStreams is description is TBD
	SetResponseConfigureUpdateStreams(value ResponseConfigureUpdateStreams) ConfigureUpdateStreamsResponse
	// HasResponseConfigureUpdateStreams checks if ResponseConfigureUpdateStreams has been set in ConfigureUpdateStreamsResponse
	HasResponseConfigureUpdateStreams() bool
	setNil()
}

func (obj *configureUpdateStreamsResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *configureUpdateStreamsResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// ResponseConfigureUpdateStreams returns a ResponseConfigureUpdateStreams
func (obj *configureUpdateStreamsResponse) ResponseConfigureUpdateStreams() ResponseConfigureUpdateStreams {
	if obj.obj.ResponseConfigureUpdateStreams == nil {
		obj.obj.ResponseConfigureUpdateStreams = NewResponseConfigureUpdateStreams().Msg()
	}
	if obj.responseConfigureUpdateStreamsHolder == nil {
		obj.responseConfigureUpdateStreamsHolder = &responseConfigureUpdateStreams{obj: obj.obj.ResponseConfigureUpdateStreams}
	}
	return obj.responseConfigureUpdateStreamsHolder
}

// description is TBD
// ResponseConfigureUpdateStreams returns a ResponseConfigureUpdateStreams
func (obj *configureUpdateStreamsResponse) HasResponseConfigureUpdateStreams() bool {
	return obj.obj.ResponseConfigureUpdateStreams != nil
}

// description is TBD
// SetResponseConfigureUpdateStreams sets the ResponseConfigureUpdateStreams value in the ConfigureUpdateStreamsResponse object
func (obj *configureUpdateStreamsResponse) SetResponseConfigureUpdateStreams(value ResponseConfigureUpdateStreams) ConfigureUpdateStreamsResponse {

	obj.responseConfigureUpdateStreamsHolder = nil
	obj.obj.ResponseConfigureUpdateStreams = value.Msg()

	return obj
}

func (obj *configureUpdateStreamsResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ResponseConfigureUpdateStreams != nil {

		obj.ResponseConfigureUpdateStreams().validateObj(vObj, set_default)
	}

}

func (obj *configureUpdateStreamsResponse) setDefault() {

}

// ***** ConfigureStreamsDataBeginResponse *****
type configureStreamsDataBeginResponse struct {
	validation
	obj           *otg.ConfigureStreamsDataBeginResponse
	warningHolder Warning
}

func NewConfigureStreamsDataBeginResponse() ConfigureStreamsDataBeginResponse {
	obj := configureStreamsDataBeginResponse{obj: &otg.ConfigureStreamsDataBeginResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *configureStreamsDataBeginResponse) Msg() *otg.ConfigureStreamsDataBeginResponse {
	return obj.obj
}

func (obj *configureStreamsDataBeginResponse) SetMsg(msg *otg.ConfigureStreamsDataBeginResponse) ConfigureStreamsDataBeginResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *configureStreamsDataBeginResponse) ToProto() (*otg.ConfigureStreamsDataBeginResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *configureStreamsDataBeginResponse) FromProto(msg *otg.ConfigureStreamsDataBeginResponse) (ConfigureStreamsDataBeginResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *configureStreamsDataBeginResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *configureStreamsDataBeginResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *configureStreamsDataBeginResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *configureStreamsDataBeginResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *configureStreamsDataBeginResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *configureStreamsDataBeginResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *configureStreamsDataBeginResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *configureStreamsDataBeginResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *configureStreamsDataBeginResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *configureStreamsDataBeginResponse) Clone() (ConfigureStreamsDataBeginResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewConfigureStreamsDataBeginResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *configureStreamsDataBeginResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *configureStreamsDataBeginResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ConfigureStreamsDataBeginResponse is description is TBD
type ConfigureStreamsDataBeginResponse interface {
	Validation
	// Msg marshals ConfigureStreamsDataBeginResponse to protobuf object *otg.ConfigureStreamsDataBeginResponse
	// and doesn't set defaults
	Msg() *otg.ConfigureStreamsDataBeginResponse
	// SetMsg unmarshals ConfigureStreamsDataBeginResponse from protobuf object *otg.ConfigureStreamsDataBeginResponse
	// and doesn't set defaults
	SetMsg(*otg.ConfigureStreamsDataBeginResponse) ConfigureStreamsDataBeginResponse
	// ToProto marshals ConfigureStreamsDataBeginResponse to protobuf object *otg.ConfigureStreamsDataBeginResponse
	ToProto() (*otg.ConfigureStreamsDataBeginResponse, error)
	// ToPbText marshals ConfigureStreamsDataBeginResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ConfigureStreamsDataBeginResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals ConfigureStreamsDataBeginResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ConfigureStreamsDataBeginResponse from protobuf object *otg.ConfigureStreamsDataBeginResponse
	FromProto(msg *otg.ConfigureStreamsDataBeginResponse) (ConfigureStreamsDataBeginResponse, error)
	// FromPbText unmarshals ConfigureStreamsDataBeginResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ConfigureStreamsDataBeginResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ConfigureStreamsDataBeginResponse from JSON text
	FromJson(value string) error
	// Validate validates ConfigureStreamsDataBeginResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ConfigureStreamsDataBeginResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in ConfigureStreamsDataBeginResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to ConfigureStreamsDataBeginResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) ConfigureStreamsDataBeginResponse
	// HasWarning checks if Warning has been set in ConfigureStreamsDataBeginResponse
	HasWarning() bool
	setNil()
}

func (obj *configureStreamsDataBeginResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *configureStreamsDataBeginResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *configureStreamsDataBeginResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *configureStreamsDataBeginResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the ConfigureStreamsDataBeginResponse object
func (obj *configureStreamsDataBeginResponse) SetWarning(value Warning) ConfigureStreamsDataBeginResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *configureStreamsDataBeginResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *configureStreamsDataBeginResponse) setDefault() {

}

// ***** ConfigureStreamsDataWriteResponse *****
type configureStreamsDataWriteResponse struct {
	validation
	obj           *otg.ConfigureStreamsDataWriteResponse
	warningHolder Warning
}

func NewConfigureStreamsDataWriteResponse() ConfigureStreamsDataWriteResponse {
	obj := configureStreamsDataWriteResponse{obj: &otg.ConfigureStreamsDataWriteResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *configureStreamsDataWriteResponse) Msg() *otg.ConfigureStreamsDataWriteResponse {
	return obj.obj
}

func (obj *configureStreamsDataWriteResponse) SetMsg(msg *otg.ConfigureStreamsDataWriteResponse) ConfigureStreamsDataWriteResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *configureStreamsDataWriteResponse) ToProto() (*otg.ConfigureStreamsDataWriteResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *configureStreamsDataWriteResponse) FromProto(msg *otg.ConfigureStreamsDataWriteResponse) (ConfigureStreamsDataWriteResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *configureStreamsDataWriteResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *configureStreamsDataWriteResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *configureStreamsDataWriteResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *configureStreamsDataWriteResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *configureStreamsDataWriteResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *configureStreamsDataWriteResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *configureStreamsDataWriteResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *configureStreamsDataWriteResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *configureStreamsDataWriteResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *configureStreamsDataWriteResponse) Clone() (ConfigureStreamsDataWriteResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewConfigureStreamsDataWriteResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *configureStreamsDataWriteResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *configureStreamsDataWriteResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ConfigureStreamsDataWriteResponse is description is TBD
type ConfigureStreamsDataWriteResponse interface {
	Validation
	// Msg marshals ConfigureStreamsDataWriteResponse to protobuf object *otg.ConfigureStreamsDataWriteResponse
	// and doesn't set defaults
	Msg() *otg.ConfigureStreamsDataWriteResponse
	// SetMsg unmarshals ConfigureStreamsDataWriteResponse from protobuf object *otg.ConfigureStreamsDataWriteResponse
	// and doesn't set defaults
	SetMsg(*otg.ConfigureStreamsDataWriteResponse) ConfigureStreamsDataWriteResponse
	// ToProto marshals ConfigureStreamsDataWriteResponse to protobuf object *otg.ConfigureStreamsDataWriteResponse
	ToProto() (*otg.ConfigureStreamsDataWriteResponse, error)
	// ToPbText marshals ConfigureStreamsDataWriteResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ConfigureStreamsDataWriteResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals ConfigureStreamsDataWriteResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ConfigureStreamsDataWriteResponse from protobuf object *otg.ConfigureStreamsDataWriteResponse
	FromProto(msg *otg.ConfigureStreamsDataWriteResponse) (ConfigureStreamsDataWriteResponse, error)
	// FromPbText unmarshals ConfigureStreamsDataWriteResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ConfigureStreamsDataWriteResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ConfigureStreamsDataWriteResponse from JSON text
	FromJson(value string) error
	// Validate validates ConfigureStreamsDataWriteResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ConfigureStreamsDataWriteResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in ConfigureStreamsDataWriteResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to ConfigureStreamsDataWriteResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) ConfigureStreamsDataWriteResponse
	// HasWarning checks if Warning has been set in ConfigureStreamsDataWriteResponse
	HasWarning() bool
	setNil()
}

func (obj *configureStreamsDataWriteResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *configureStreamsDataWriteResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *configureStreamsDataWriteResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *configureStreamsDataWriteResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the ConfigureStreamsDataWriteResponse object
func (obj *configureStreamsDataWriteResponse) SetWarning(value Warning) ConfigureStreamsDataWriteResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *configureStreamsDataWriteResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *configureStreamsDataWriteResponse) setDefault() {

}

// ***** RefreshValueListResponse *****
type refreshValueListResponse struct {
	validation
	obj                            *otg.RefreshValueListResponse
	responseRefreshValueListHolder ResponseRefreshValueList
}

func NewRefreshValueListResponse() RefreshValueListResponse {
	obj := refreshValueListResponse{obj: &otg.RefreshValueListResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *refreshValueListResponse) Msg() *otg.RefreshValueListResponse {
	return obj.obj
}

func (obj *refreshValueListResponse) SetMsg(msg *otg.RefreshValueListResponse) RefreshValueListResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *refreshValueListResponse) ToProto() (*otg.RefreshValueListResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *refreshValueListResponse) FromProto(msg *otg.RefreshValueListResponse) (RefreshValueListResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *refreshValueListResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *refreshValueListResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *refreshValueListResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *refreshValueListResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *refreshValueListResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *refreshValueListResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *refreshValueListResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *refreshValueListResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *refreshValueListResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *refreshValueListResponse) Clone() (RefreshValueListResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRefreshValueListResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *refreshValueListResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *refreshValueListResponse) setNil() {
	obj.responseRefreshValueListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RefreshValueListResponse is description is TBD
type RefreshValueListResponse interface {
	Validation
	// Msg marshals RefreshValueListResponse to protobuf object *otg.RefreshValueListResponse
	// and doesn't set defaults
	Msg() *otg.RefreshValueListResponse
	// SetMsg unmarshals RefreshValueListResponse from protobuf object *otg.RefreshValueListResponse
	// and doesn't set defaults
	SetMsg(*otg.RefreshValueListResponse) RefreshValueListResponse
	// ToProto marshals RefreshValueListResponse to protobuf object *otg.RefreshValueListResponse
	ToProto() (*otg.RefreshValueListResponse, error)
	// ToPbText marshals RefreshValueListResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RefreshValueListResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals RefreshValueListResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RefreshValueListResponse from protobuf object *otg.RefreshValueListResponse
	FromProto(msg *otg.RefreshValueListResponse) (RefreshValueListResponse, error)
	// FromPbText unmarshals RefreshValueListResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RefreshValueListResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RefreshValueListResponse from JSON text
	FromJson(value string) error
	// Validate validates RefreshValueListResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RefreshValueListResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ResponseRefreshValueList returns ResponseRefreshValueList, set in RefreshValueListResponse.
	// ResponseRefreshValueList is description is TBD
	ResponseRefreshValueList() ResponseRefreshValueList
	// SetResponseRefreshValueList assigns ResponseRefreshValueList provided by user to RefreshValueListResponse.
	// ResponseRefreshValueList is description is TBD
	SetResponseRefreshValueList(value ResponseRefreshValueList) RefreshValueListResponse
	// HasResponseRefreshValueList checks if ResponseRefreshValueList has been set in RefreshValueListResponse
	HasResponseRefreshValueList() bool
	setNil()
}

func (obj *refreshValueListResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *refreshValueListResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// ResponseRefreshValueList returns a ResponseRefreshValueList
func (obj *refreshValueListResponse) ResponseRefreshValueList() ResponseRefreshValueList {
	if obj.obj.ResponseRefreshValueList == nil {
		obj.obj.ResponseRefreshValueList = NewResponseRefreshValueList().Msg()
	}
	if obj.responseRefreshValueListHolder == nil {
		obj.responseRefreshValueListHolder = &responseRefreshValueList{obj: obj.obj.ResponseRefreshValueList}
	}
	return obj.responseRefreshValueListHolder
}

// description is TBD
// ResponseRefreshValueList returns a ResponseRefreshValueList
func (obj *refreshValueListResponse) HasResponseRefreshValueList() bool {
	return obj.obj.ResponseRefreshValueList != nil
}

// description is TBD
// SetResponseRefreshValueList sets the ResponseRefreshValueList value in the RefreshValueListResponse object
func (obj *refreshValueListResponse) SetResponseRefreshValueList(value ResponseRefreshValueList) RefreshValueListResponse {

	obj.responseRefreshValueListHolder = nil
	obj.obj.ResponseRefreshValueList = value.Msg()

	return obj
}

func (obj *refreshValueListResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ResponseRefreshValueList != nil {

		obj.ResponseRefreshValueList().validateObj(vObj, set_default)
	}

}

func (obj *refreshValueListResponse) setDefault() {

}

// ***** TxMacSecArmTriggerTimerResponse *****
type txMacSecArmTriggerTimerResponse struct {
	validation
	obj           *otg.TxMacSecArmTriggerTimerResponse
	warningHolder Warning
}

func NewTxMacSecArmTriggerTimerResponse() TxMacSecArmTriggerTimerResponse {
	obj := txMacSecArmTriggerTimerResponse{obj: &otg.TxMacSecArmTriggerTimerResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *txMacSecArmTriggerTimerResponse) Msg() *otg.TxMacSecArmTriggerTimerResponse {
	return obj.obj
}

func (obj *txMacSecArmTriggerTimerResponse) SetMsg(msg *otg.TxMacSecArmTriggerTimerResponse) TxMacSecArmTriggerTimerResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *txMacSecArmTriggerTimerResponse) ToProto() (*otg.TxMacSecArmTriggerTimerResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *txMacSecArmTriggerTimerResponse) FromProto(msg *otg.TxMacSecArmTriggerTimerResponse) (TxMacSecArmTriggerTimerResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *txMacSecArmTriggerTimerResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *txMacSecArmTriggerTimerResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *txMacSecArmTriggerTimerResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *txMacSecArmTriggerTimerResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *txMacSecArmTriggerTimerResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *txMacSecArmTriggerTimerResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *txMacSecArmTriggerTimerResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *txMacSecArmTriggerTimerResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *txMacSecArmTriggerTimerResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *txMacSecArmTriggerTimerResponse) Clone() (TxMacSecArmTriggerTimerResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewTxMacSecArmTriggerTimerResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *txMacSecArmTriggerTimerResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *txMacSecArmTriggerTimerResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// TxMacSecArmTriggerTimerResponse is description is TBD
type TxMacSecArmTriggerTimerResponse interface {
	Validation
	// Msg marshals TxMacSecArmTriggerTimerResponse to protobuf object *otg.TxMacSecArmTriggerTimerResponse
	// and doesn't set defaults
	Msg() *otg.TxMacSecArmTriggerTimerResponse
	// SetMsg unmarshals TxMacSecArmTriggerTimerResponse from protobuf object *otg.TxMacSecArmTriggerTimerResponse
	// and doesn't set defaults
	SetMsg(*otg.TxMacSecArmTriggerTimerResponse) TxMacSecArmTriggerTimerResponse
	// ToProto marshals TxMacSecArmTriggerTimerResponse to protobuf object *otg.TxMacSecArmTriggerTimerResponse
	ToProto() (*otg.TxMacSecArmTriggerTimerResponse, error)
	// ToPbText marshals TxMacSecArmTriggerTimerResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals TxMacSecArmTriggerTimerResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals TxMacSecArmTriggerTimerResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals TxMacSecArmTriggerTimerResponse from protobuf object *otg.TxMacSecArmTriggerTimerResponse
	FromProto(msg *otg.TxMacSecArmTriggerTimerResponse) (TxMacSecArmTriggerTimerResponse, error)
	// FromPbText unmarshals TxMacSecArmTriggerTimerResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals TxMacSecArmTriggerTimerResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals TxMacSecArmTriggerTimerResponse from JSON text
	FromJson(value string) error
	// Validate validates TxMacSecArmTriggerTimerResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (TxMacSecArmTriggerTimerResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in TxMacSecArmTriggerTimerResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to TxMacSecArmTriggerTimerResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) TxMacSecArmTriggerTimerResponse
	// HasWarning checks if Warning has been set in TxMacSecArmTriggerTimerResponse
	HasWarning() bool
	setNil()
}

func (obj *txMacSecArmTriggerTimerResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *txMacSecArmTriggerTimerResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *txMacSecArmTriggerTimerResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *txMacSecArmTriggerTimerResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the TxMacSecArmTriggerTimerResponse object
func (obj *txMacSecArmTriggerTimerResponse) SetWarning(value Warning) TxMacSecArmTriggerTimerResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *txMacSecArmTriggerTimerResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *txMacSecArmTriggerTimerResponse) setDefault() {

}

// ***** ConfigureMacSecPortControlResponse *****
type configureMacSecPortControlResponse struct {
	validation
	obj           *otg.ConfigureMacSecPortControlResponse
	warningHolder Warning
}

func NewConfigureMacSecPortControlResponse() ConfigureMacSecPortControlResponse {
	obj := configureMacSecPortControlResponse{obj: &otg.ConfigureMacSecPortControlResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *configureMacSecPortControlResponse) Msg() *otg.ConfigureMacSecPortControlResponse {
	return obj.obj
}

func (obj *configureMacSecPortControlResponse) SetMsg(msg *otg.ConfigureMacSecPortControlResponse) ConfigureMacSecPortControlResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *configureMacSecPortControlResponse) ToProto() (*otg.ConfigureMacSecPortControlResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *configureMacSecPortControlResponse) FromProto(msg *otg.ConfigureMacSecPortControlResponse) (ConfigureMacSecPortControlResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *configureMacSecPortControlResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *configureMacSecPortControlResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *configureMacSecPortControlResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *configureMacSecPortControlResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *configureMacSecPortControlResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *configureMacSecPortControlResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *configureMacSecPortControlResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *configureMacSecPortControlResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *configureMacSecPortControlResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *configureMacSecPortControlResponse) Clone() (ConfigureMacSecPortControlResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewConfigureMacSecPortControlResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *configureMacSecPortControlResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *configureMacSecPortControlResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ConfigureMacSecPortControlResponse is description is TBD
type ConfigureMacSecPortControlResponse interface {
	Validation
	// Msg marshals ConfigureMacSecPortControlResponse to protobuf object *otg.ConfigureMacSecPortControlResponse
	// and doesn't set defaults
	Msg() *otg.ConfigureMacSecPortControlResponse
	// SetMsg unmarshals ConfigureMacSecPortControlResponse from protobuf object *otg.ConfigureMacSecPortControlResponse
	// and doesn't set defaults
	SetMsg(*otg.ConfigureMacSecPortControlResponse) ConfigureMacSecPortControlResponse
	// ToProto marshals ConfigureMacSecPortControlResponse to protobuf object *otg.ConfigureMacSecPortControlResponse
	ToProto() (*otg.ConfigureMacSecPortControlResponse, error)
	// ToPbText marshals ConfigureMacSecPortControlResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ConfigureMacSecPortControlResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals ConfigureMacSecPortControlResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ConfigureMacSecPortControlResponse from protobuf object *otg.ConfigureMacSecPortControlResponse
	FromProto(msg *otg.ConfigureMacSecPortControlResponse) (ConfigureMacSecPortControlResponse, error)
	// FromPbText unmarshals ConfigureMacSecPortControlResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ConfigureMacSecPortControlResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ConfigureMacSecPortControlResponse from JSON text
	FromJson(value string) error
	// Validate validates ConfigureMacSecPortControlResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ConfigureMacSecPortControlResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in ConfigureMacSecPortControlResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to ConfigureMacSecPortControlResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) ConfigureMacSecPortControlResponse
	// HasWarning checks if Warning has been set in ConfigureMacSecPortControlResponse
	HasWarning() bool
	setNil()
}

func (obj *configureMacSecPortControlResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *configureMacSecPortControlResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *configureMacSecPortControlResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *configureMacSecPortControlResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the ConfigureMacSecPortControlResponse object
func (obj *configureMacSecPortControlResponse) SetWarning(value Warning) ConfigureMacSecPortControlResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *configureMacSecPortControlResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *configureMacSecPortControlResponse) setDefault() {

}

// ***** ConfigureMacSecScControlResponse *****
type configureMacSecScControlResponse struct {
	validation
	obj           *otg.ConfigureMacSecScControlResponse
	warningHolder Warning
}

func NewConfigureMacSecScControlResponse() ConfigureMacSecScControlResponse {
	obj := configureMacSecScControlResponse{obj: &otg.ConfigureMacSecScControlResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *configureMacSecScControlResponse) Msg() *otg.ConfigureMacSecScControlResponse {
	return obj.obj
}

func (obj *configureMacSecScControlResponse) SetMsg(msg *otg.ConfigureMacSecScControlResponse) ConfigureMacSecScControlResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *configureMacSecScControlResponse) ToProto() (*otg.ConfigureMacSecScControlResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *configureMacSecScControlResponse) FromProto(msg *otg.ConfigureMacSecScControlResponse) (ConfigureMacSecScControlResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *configureMacSecScControlResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *configureMacSecScControlResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *configureMacSecScControlResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *configureMacSecScControlResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *configureMacSecScControlResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *configureMacSecScControlResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *configureMacSecScControlResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *configureMacSecScControlResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *configureMacSecScControlResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *configureMacSecScControlResponse) Clone() (ConfigureMacSecScControlResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewConfigureMacSecScControlResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *configureMacSecScControlResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *configureMacSecScControlResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ConfigureMacSecScControlResponse is description is TBD
type ConfigureMacSecScControlResponse interface {
	Validation
	// Msg marshals ConfigureMacSecScControlResponse to protobuf object *otg.ConfigureMacSecScControlResponse
	// and doesn't set defaults
	Msg() *otg.ConfigureMacSecScControlResponse
	// SetMsg unmarshals ConfigureMacSecScControlResponse from protobuf object *otg.ConfigureMacSecScControlResponse
	// and doesn't set defaults
	SetMsg(*otg.ConfigureMacSecScControlResponse) ConfigureMacSecScControlResponse
	// ToProto marshals ConfigureMacSecScControlResponse to protobuf object *otg.ConfigureMacSecScControlResponse
	ToProto() (*otg.ConfigureMacSecScControlResponse, error)
	// ToPbText marshals ConfigureMacSecScControlResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ConfigureMacSecScControlResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals ConfigureMacSecScControlResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ConfigureMacSecScControlResponse from protobuf object *otg.ConfigureMacSecScControlResponse
	FromProto(msg *otg.ConfigureMacSecScControlResponse) (ConfigureMacSecScControlResponse, error)
	// FromPbText unmarshals ConfigureMacSecScControlResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ConfigureMacSecScControlResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ConfigureMacSecScControlResponse from JSON text
	FromJson(value string) error
	// Validate validates ConfigureMacSecScControlResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ConfigureMacSecScControlResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in ConfigureMacSecScControlResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to ConfigureMacSecScControlResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) ConfigureMacSecScControlResponse
	// HasWarning checks if Warning has been set in ConfigureMacSecScControlResponse
	HasWarning() bool
	setNil()
}

func (obj *configureMacSecScControlResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *configureMacSecScControlResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *configureMacSecScControlResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *configureMacSecScControlResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the ConfigureMacSecScControlResponse object
func (obj *configureMacSecScControlResponse) SetWarning(value Warning) ConfigureMacSecScControlResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *configureMacSecScControlResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *configureMacSecScControlResponse) setDefault() {

}

// ***** UpdateMacSecStreamsResponse *****
type updateMacSecStreamsResponse struct {
	validation
	obj           *otg.UpdateMacSecStreamsResponse
	warningHolder Warning
}

func NewUpdateMacSecStreamsResponse() UpdateMacSecStreamsResponse {
	obj := updateMacSecStreamsResponse{obj: &otg.UpdateMacSecStreamsResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *updateMacSecStreamsResponse) Msg() *otg.UpdateMacSecStreamsResponse {
	return obj.obj
}

func (obj *updateMacSecStreamsResponse) SetMsg(msg *otg.UpdateMacSecStreamsResponse) UpdateMacSecStreamsResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *updateMacSecStreamsResponse) ToProto() (*otg.UpdateMacSecStreamsResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *updateMacSecStreamsResponse) FromProto(msg *otg.UpdateMacSecStreamsResponse) (UpdateMacSecStreamsResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *updateMacSecStreamsResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *updateMacSecStreamsResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *updateMacSecStreamsResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *updateMacSecStreamsResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *updateMacSecStreamsResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *updateMacSecStreamsResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *updateMacSecStreamsResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *updateMacSecStreamsResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *updateMacSecStreamsResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *updateMacSecStreamsResponse) Clone() (UpdateMacSecStreamsResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewUpdateMacSecStreamsResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *updateMacSecStreamsResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *updateMacSecStreamsResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// UpdateMacSecStreamsResponse is description is TBD
type UpdateMacSecStreamsResponse interface {
	Validation
	// Msg marshals UpdateMacSecStreamsResponse to protobuf object *otg.UpdateMacSecStreamsResponse
	// and doesn't set defaults
	Msg() *otg.UpdateMacSecStreamsResponse
	// SetMsg unmarshals UpdateMacSecStreamsResponse from protobuf object *otg.UpdateMacSecStreamsResponse
	// and doesn't set defaults
	SetMsg(*otg.UpdateMacSecStreamsResponse) UpdateMacSecStreamsResponse
	// ToProto marshals UpdateMacSecStreamsResponse to protobuf object *otg.UpdateMacSecStreamsResponse
	ToProto() (*otg.UpdateMacSecStreamsResponse, error)
	// ToPbText marshals UpdateMacSecStreamsResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals UpdateMacSecStreamsResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals UpdateMacSecStreamsResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals UpdateMacSecStreamsResponse from protobuf object *otg.UpdateMacSecStreamsResponse
	FromProto(msg *otg.UpdateMacSecStreamsResponse) (UpdateMacSecStreamsResponse, error)
	// FromPbText unmarshals UpdateMacSecStreamsResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals UpdateMacSecStreamsResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals UpdateMacSecStreamsResponse from JSON text
	FromJson(value string) error
	// Validate validates UpdateMacSecStreamsResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (UpdateMacSecStreamsResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in UpdateMacSecStreamsResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to UpdateMacSecStreamsResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) UpdateMacSecStreamsResponse
	// HasWarning checks if Warning has been set in UpdateMacSecStreamsResponse
	HasWarning() bool
	setNil()
}

func (obj *updateMacSecStreamsResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *updateMacSecStreamsResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *updateMacSecStreamsResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *updateMacSecStreamsResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the UpdateMacSecStreamsResponse object
func (obj *updateMacSecStreamsResponse) SetWarning(value Warning) UpdateMacSecStreamsResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *updateMacSecStreamsResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *updateMacSecStreamsResponse) setDefault() {

}

// ***** ConfigureMacSecSaKeysResponse *****
type configureMacSecSaKeysResponse struct {
	validation
	obj           *otg.ConfigureMacSecSaKeysResponse
	warningHolder Warning
}

func NewConfigureMacSecSaKeysResponse() ConfigureMacSecSaKeysResponse {
	obj := configureMacSecSaKeysResponse{obj: &otg.ConfigureMacSecSaKeysResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *configureMacSecSaKeysResponse) Msg() *otg.ConfigureMacSecSaKeysResponse {
	return obj.obj
}

func (obj *configureMacSecSaKeysResponse) SetMsg(msg *otg.ConfigureMacSecSaKeysResponse) ConfigureMacSecSaKeysResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *configureMacSecSaKeysResponse) ToProto() (*otg.ConfigureMacSecSaKeysResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *configureMacSecSaKeysResponse) FromProto(msg *otg.ConfigureMacSecSaKeysResponse) (ConfigureMacSecSaKeysResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *configureMacSecSaKeysResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *configureMacSecSaKeysResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *configureMacSecSaKeysResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *configureMacSecSaKeysResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *configureMacSecSaKeysResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *configureMacSecSaKeysResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *configureMacSecSaKeysResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *configureMacSecSaKeysResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *configureMacSecSaKeysResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *configureMacSecSaKeysResponse) Clone() (ConfigureMacSecSaKeysResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewConfigureMacSecSaKeysResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *configureMacSecSaKeysResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *configureMacSecSaKeysResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ConfigureMacSecSaKeysResponse is description is TBD
type ConfigureMacSecSaKeysResponse interface {
	Validation
	// Msg marshals ConfigureMacSecSaKeysResponse to protobuf object *otg.ConfigureMacSecSaKeysResponse
	// and doesn't set defaults
	Msg() *otg.ConfigureMacSecSaKeysResponse
	// SetMsg unmarshals ConfigureMacSecSaKeysResponse from protobuf object *otg.ConfigureMacSecSaKeysResponse
	// and doesn't set defaults
	SetMsg(*otg.ConfigureMacSecSaKeysResponse) ConfigureMacSecSaKeysResponse
	// ToProto marshals ConfigureMacSecSaKeysResponse to protobuf object *otg.ConfigureMacSecSaKeysResponse
	ToProto() (*otg.ConfigureMacSecSaKeysResponse, error)
	// ToPbText marshals ConfigureMacSecSaKeysResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ConfigureMacSecSaKeysResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals ConfigureMacSecSaKeysResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ConfigureMacSecSaKeysResponse from protobuf object *otg.ConfigureMacSecSaKeysResponse
	FromProto(msg *otg.ConfigureMacSecSaKeysResponse) (ConfigureMacSecSaKeysResponse, error)
	// FromPbText unmarshals ConfigureMacSecSaKeysResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ConfigureMacSecSaKeysResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ConfigureMacSecSaKeysResponse from JSON text
	FromJson(value string) error
	// Validate validates ConfigureMacSecSaKeysResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ConfigureMacSecSaKeysResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in ConfigureMacSecSaKeysResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to ConfigureMacSecSaKeysResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) ConfigureMacSecSaKeysResponse
	// HasWarning checks if Warning has been set in ConfigureMacSecSaKeysResponse
	HasWarning() bool
	setNil()
}

func (obj *configureMacSecSaKeysResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *configureMacSecSaKeysResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *configureMacSecSaKeysResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *configureMacSecSaKeysResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the ConfigureMacSecSaKeysResponse object
func (obj *configureMacSecSaKeysResponse) SetWarning(value Warning) ConfigureMacSecSaKeysResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *configureMacSecSaKeysResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *configureMacSecSaKeysResponse) setDefault() {

}

// ***** ToggleMacSecSaKeysResponse *****
type toggleMacSecSaKeysResponse struct {
	validation
	obj           *otg.ToggleMacSecSaKeysResponse
	warningHolder Warning
}

func NewToggleMacSecSaKeysResponse() ToggleMacSecSaKeysResponse {
	obj := toggleMacSecSaKeysResponse{obj: &otg.ToggleMacSecSaKeysResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *toggleMacSecSaKeysResponse) Msg() *otg.ToggleMacSecSaKeysResponse {
	return obj.obj
}

func (obj *toggleMacSecSaKeysResponse) SetMsg(msg *otg.ToggleMacSecSaKeysResponse) ToggleMacSecSaKeysResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *toggleMacSecSaKeysResponse) ToProto() (*otg.ToggleMacSecSaKeysResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *toggleMacSecSaKeysResponse) FromProto(msg *otg.ToggleMacSecSaKeysResponse) (ToggleMacSecSaKeysResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *toggleMacSecSaKeysResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *toggleMacSecSaKeysResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *toggleMacSecSaKeysResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *toggleMacSecSaKeysResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *toggleMacSecSaKeysResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *toggleMacSecSaKeysResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *toggleMacSecSaKeysResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *toggleMacSecSaKeysResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *toggleMacSecSaKeysResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *toggleMacSecSaKeysResponse) Clone() (ToggleMacSecSaKeysResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewToggleMacSecSaKeysResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *toggleMacSecSaKeysResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *toggleMacSecSaKeysResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ToggleMacSecSaKeysResponse is description is TBD
type ToggleMacSecSaKeysResponse interface {
	Validation
	// Msg marshals ToggleMacSecSaKeysResponse to protobuf object *otg.ToggleMacSecSaKeysResponse
	// and doesn't set defaults
	Msg() *otg.ToggleMacSecSaKeysResponse
	// SetMsg unmarshals ToggleMacSecSaKeysResponse from protobuf object *otg.ToggleMacSecSaKeysResponse
	// and doesn't set defaults
	SetMsg(*otg.ToggleMacSecSaKeysResponse) ToggleMacSecSaKeysResponse
	// ToProto marshals ToggleMacSecSaKeysResponse to protobuf object *otg.ToggleMacSecSaKeysResponse
	ToProto() (*otg.ToggleMacSecSaKeysResponse, error)
	// ToPbText marshals ToggleMacSecSaKeysResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ToggleMacSecSaKeysResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals ToggleMacSecSaKeysResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ToggleMacSecSaKeysResponse from protobuf object *otg.ToggleMacSecSaKeysResponse
	FromProto(msg *otg.ToggleMacSecSaKeysResponse) (ToggleMacSecSaKeysResponse, error)
	// FromPbText unmarshals ToggleMacSecSaKeysResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ToggleMacSecSaKeysResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ToggleMacSecSaKeysResponse from JSON text
	FromJson(value string) error
	// Validate validates ToggleMacSecSaKeysResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ToggleMacSecSaKeysResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in ToggleMacSecSaKeysResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to ToggleMacSecSaKeysResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) ToggleMacSecSaKeysResponse
	// HasWarning checks if Warning has been set in ToggleMacSecSaKeysResponse
	HasWarning() bool
	setNil()
}

func (obj *toggleMacSecSaKeysResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *toggleMacSecSaKeysResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *toggleMacSecSaKeysResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *toggleMacSecSaKeysResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the ToggleMacSecSaKeysResponse object
func (obj *toggleMacSecSaKeysResponse) SetWarning(value Warning) ToggleMacSecSaKeysResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *toggleMacSecSaKeysResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *toggleMacSecSaKeysResponse) setDefault() {

}

// ***** ResetMacSecScsResponse *****
type resetMacSecScsResponse struct {
	validation
	obj           *otg.ResetMacSecScsResponse
	warningHolder Warning
}

func NewResetMacSecScsResponse() ResetMacSecScsResponse {
	obj := resetMacSecScsResponse{obj: &otg.ResetMacSecScsResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *resetMacSecScsResponse) Msg() *otg.ResetMacSecScsResponse {
	return obj.obj
}

func (obj *resetMacSecScsResponse) SetMsg(msg *otg.ResetMacSecScsResponse) ResetMacSecScsResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *resetMacSecScsResponse) ToProto() (*otg.ResetMacSecScsResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *resetMacSecScsResponse) FromProto(msg *otg.ResetMacSecScsResponse) (ResetMacSecScsResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *resetMacSecScsResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *resetMacSecScsResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *resetMacSecScsResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *resetMacSecScsResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *resetMacSecScsResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *resetMacSecScsResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *resetMacSecScsResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *resetMacSecScsResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *resetMacSecScsResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *resetMacSecScsResponse) Clone() (ResetMacSecScsResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewResetMacSecScsResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *resetMacSecScsResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *resetMacSecScsResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ResetMacSecScsResponse is description is TBD
type ResetMacSecScsResponse interface {
	Validation
	// Msg marshals ResetMacSecScsResponse to protobuf object *otg.ResetMacSecScsResponse
	// and doesn't set defaults
	Msg() *otg.ResetMacSecScsResponse
	// SetMsg unmarshals ResetMacSecScsResponse from protobuf object *otg.ResetMacSecScsResponse
	// and doesn't set defaults
	SetMsg(*otg.ResetMacSecScsResponse) ResetMacSecScsResponse
	// ToProto marshals ResetMacSecScsResponse to protobuf object *otg.ResetMacSecScsResponse
	ToProto() (*otg.ResetMacSecScsResponse, error)
	// ToPbText marshals ResetMacSecScsResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ResetMacSecScsResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals ResetMacSecScsResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ResetMacSecScsResponse from protobuf object *otg.ResetMacSecScsResponse
	FromProto(msg *otg.ResetMacSecScsResponse) (ResetMacSecScsResponse, error)
	// FromPbText unmarshals ResetMacSecScsResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ResetMacSecScsResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ResetMacSecScsResponse from JSON text
	FromJson(value string) error
	// Validate validates ResetMacSecScsResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ResetMacSecScsResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in ResetMacSecScsResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to ResetMacSecScsResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) ResetMacSecScsResponse
	// HasWarning checks if Warning has been set in ResetMacSecScsResponse
	HasWarning() bool
	setNil()
}

func (obj *resetMacSecScsResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *resetMacSecScsResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *resetMacSecScsResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *resetMacSecScsResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the ResetMacSecScsResponse object
func (obj *resetMacSecScsResponse) SetWarning(value Warning) ResetMacSecScsResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *resetMacSecScsResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *resetMacSecScsResponse) setDefault() {

}

// ***** SetMacSecSaKeyStateResponse *****
type setMacSecSaKeyStateResponse struct {
	validation
	obj           *otg.SetMacSecSaKeyStateResponse
	warningHolder Warning
}

func NewSetMacSecSaKeyStateResponse() SetMacSecSaKeyStateResponse {
	obj := setMacSecSaKeyStateResponse{obj: &otg.SetMacSecSaKeyStateResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *setMacSecSaKeyStateResponse) Msg() *otg.SetMacSecSaKeyStateResponse {
	return obj.obj
}

func (obj *setMacSecSaKeyStateResponse) SetMsg(msg *otg.SetMacSecSaKeyStateResponse) SetMacSecSaKeyStateResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *setMacSecSaKeyStateResponse) ToProto() (*otg.SetMacSecSaKeyStateResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *setMacSecSaKeyStateResponse) FromProto(msg *otg.SetMacSecSaKeyStateResponse) (SetMacSecSaKeyStateResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *setMacSecSaKeyStateResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *setMacSecSaKeyStateResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *setMacSecSaKeyStateResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *setMacSecSaKeyStateResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *setMacSecSaKeyStateResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *setMacSecSaKeyStateResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *setMacSecSaKeyStateResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *setMacSecSaKeyStateResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *setMacSecSaKeyStateResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *setMacSecSaKeyStateResponse) Clone() (SetMacSecSaKeyStateResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewSetMacSecSaKeyStateResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *setMacSecSaKeyStateResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *setMacSecSaKeyStateResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// SetMacSecSaKeyStateResponse is description is TBD
type SetMacSecSaKeyStateResponse interface {
	Validation
	// Msg marshals SetMacSecSaKeyStateResponse to protobuf object *otg.SetMacSecSaKeyStateResponse
	// and doesn't set defaults
	Msg() *otg.SetMacSecSaKeyStateResponse
	// SetMsg unmarshals SetMacSecSaKeyStateResponse from protobuf object *otg.SetMacSecSaKeyStateResponse
	// and doesn't set defaults
	SetMsg(*otg.SetMacSecSaKeyStateResponse) SetMacSecSaKeyStateResponse
	// ToProto marshals SetMacSecSaKeyStateResponse to protobuf object *otg.SetMacSecSaKeyStateResponse
	ToProto() (*otg.SetMacSecSaKeyStateResponse, error)
	// ToPbText marshals SetMacSecSaKeyStateResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals SetMacSecSaKeyStateResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals SetMacSecSaKeyStateResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals SetMacSecSaKeyStateResponse from protobuf object *otg.SetMacSecSaKeyStateResponse
	FromProto(msg *otg.SetMacSecSaKeyStateResponse) (SetMacSecSaKeyStateResponse, error)
	// FromPbText unmarshals SetMacSecSaKeyStateResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals SetMacSecSaKeyStateResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals SetMacSecSaKeyStateResponse from JSON text
	FromJson(value string) error
	// Validate validates SetMacSecSaKeyStateResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (SetMacSecSaKeyStateResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in SetMacSecSaKeyStateResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to SetMacSecSaKeyStateResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) SetMacSecSaKeyStateResponse
	// HasWarning checks if Warning has been set in SetMacSecSaKeyStateResponse
	HasWarning() bool
	setNil()
}

func (obj *setMacSecSaKeyStateResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *setMacSecSaKeyStateResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *setMacSecSaKeyStateResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *setMacSecSaKeyStateResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the SetMacSecSaKeyStateResponse object
func (obj *setMacSecSaKeyStateResponse) SetWarning(value Warning) SetMacSecSaKeyStateResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *setMacSecSaKeyStateResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *setMacSecSaKeyStateResponse) setDefault() {

}

// ***** GetMacSecSaKeyStatusResponse *****
type getMacSecSaKeyStatusResponse struct {
	validation
	obj                                *otg.GetMacSecSaKeyStatusResponse
	responseGetMacSecSaKeyStatusHolder ResponseGetMacSecSaKeyStatus
}

func NewGetMacSecSaKeyStatusResponse() GetMacSecSaKeyStatusResponse {
	obj := getMacSecSaKeyStatusResponse{obj: &otg.GetMacSecSaKeyStatusResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *getMacSecSaKeyStatusResponse) Msg() *otg.GetMacSecSaKeyStatusResponse {
	return obj.obj
}

func (obj *getMacSecSaKeyStatusResponse) SetMsg(msg *otg.GetMacSecSaKeyStatusResponse) GetMacSecSaKeyStatusResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *getMacSecSaKeyStatusResponse) ToProto() (*otg.GetMacSecSaKeyStatusResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *getMacSecSaKeyStatusResponse) FromProto(msg *otg.GetMacSecSaKeyStatusResponse) (GetMacSecSaKeyStatusResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *getMacSecSaKeyStatusResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *getMacSecSaKeyStatusResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *getMacSecSaKeyStatusResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *getMacSecSaKeyStatusResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *getMacSecSaKeyStatusResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *getMacSecSaKeyStatusResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *getMacSecSaKeyStatusResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *getMacSecSaKeyStatusResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *getMacSecSaKeyStatusResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *getMacSecSaKeyStatusResponse) Clone() (GetMacSecSaKeyStatusResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewGetMacSecSaKeyStatusResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *getMacSecSaKeyStatusResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *getMacSecSaKeyStatusResponse) setNil() {
	obj.responseGetMacSecSaKeyStatusHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// GetMacSecSaKeyStatusResponse is description is TBD
type GetMacSecSaKeyStatusResponse interface {
	Validation
	// Msg marshals GetMacSecSaKeyStatusResponse to protobuf object *otg.GetMacSecSaKeyStatusResponse
	// and doesn't set defaults
	Msg() *otg.GetMacSecSaKeyStatusResponse
	// SetMsg unmarshals GetMacSecSaKeyStatusResponse from protobuf object *otg.GetMacSecSaKeyStatusResponse
	// and doesn't set defaults
	SetMsg(*otg.GetMacSecSaKeyStatusResponse) GetMacSecSaKeyStatusResponse
	// ToProto marshals GetMacSecSaKeyStatusResponse to protobuf object *otg.GetMacSecSaKeyStatusResponse
	ToProto() (*otg.GetMacSecSaKeyStatusResponse, error)
	// ToPbText marshals GetMacSecSaKeyStatusResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals GetMacSecSaKeyStatusResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals GetMacSecSaKeyStatusResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals GetMacSecSaKeyStatusResponse from protobuf object *otg.GetMacSecSaKeyStatusResponse
	FromProto(msg *otg.GetMacSecSaKeyStatusResponse) (GetMacSecSaKeyStatusResponse, error)
	// FromPbText unmarshals GetMacSecSaKeyStatusResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals GetMacSecSaKeyStatusResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals GetMacSecSaKeyStatusResponse from JSON text
	FromJson(value string) error
	// Validate validates GetMacSecSaKeyStatusResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (GetMacSecSaKeyStatusResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ResponseGetMacSecSaKeyStatus returns ResponseGetMacSecSaKeyStatus, set in GetMacSecSaKeyStatusResponse.
	// ResponseGetMacSecSaKeyStatus is description is TBD
	ResponseGetMacSecSaKeyStatus() ResponseGetMacSecSaKeyStatus
	// SetResponseGetMacSecSaKeyStatus assigns ResponseGetMacSecSaKeyStatus provided by user to GetMacSecSaKeyStatusResponse.
	// ResponseGetMacSecSaKeyStatus is description is TBD
	SetResponseGetMacSecSaKeyStatus(value ResponseGetMacSecSaKeyStatus) GetMacSecSaKeyStatusResponse
	// HasResponseGetMacSecSaKeyStatus checks if ResponseGetMacSecSaKeyStatus has been set in GetMacSecSaKeyStatusResponse
	HasResponseGetMacSecSaKeyStatus() bool
	setNil()
}

func (obj *getMacSecSaKeyStatusResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *getMacSecSaKeyStatusResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// ResponseGetMacSecSaKeyStatus returns a ResponseGetMacSecSaKeyStatus
func (obj *getMacSecSaKeyStatusResponse) ResponseGetMacSecSaKeyStatus() ResponseGetMacSecSaKeyStatus {
	if obj.obj.ResponseGetMacSecSaKeyStatus == nil {
		obj.obj.ResponseGetMacSecSaKeyStatus = NewResponseGetMacSecSaKeyStatus().Msg()
	}
	if obj.responseGetMacSecSaKeyStatusHolder == nil {
		obj.responseGetMacSecSaKeyStatusHolder = &responseGetMacSecSaKeyStatus{obj: obj.obj.ResponseGetMacSecSaKeyStatus}
	}
	return obj.responseGetMacSecSaKeyStatusHolder
}

// description is TBD
// ResponseGetMacSecSaKeyStatus returns a ResponseGetMacSecSaKeyStatus
func (obj *getMacSecSaKeyStatusResponse) HasResponseGetMacSecSaKeyStatus() bool {
	return obj.obj.ResponseGetMacSecSaKeyStatus != nil
}

// description is TBD
// SetResponseGetMacSecSaKeyStatus sets the ResponseGetMacSecSaKeyStatus value in the GetMacSecSaKeyStatusResponse object
func (obj *getMacSecSaKeyStatusResponse) SetResponseGetMacSecSaKeyStatus(value ResponseGetMacSecSaKeyStatus) GetMacSecSaKeyStatusResponse {

	obj.responseGetMacSecSaKeyStatusHolder = nil
	obj.obj.ResponseGetMacSecSaKeyStatus = value.Msg()

	return obj
}

func (obj *getMacSecSaKeyStatusResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ResponseGetMacSecSaKeyStatus != nil {

		obj.ResponseGetMacSecSaKeyStatus().validateObj(vObj, set_default)
	}

}

func (obj *getMacSecSaKeyStatusResponse) setDefault() {

}

// ***** ConfigureMacSecUdsResponse *****
type configureMacSecUdsResponse struct {
	validation
	obj           *otg.ConfigureMacSecUdsResponse
	warningHolder Warning
}

func NewConfigureMacSecUdsResponse() ConfigureMacSecUdsResponse {
	obj := configureMacSecUdsResponse{obj: &otg.ConfigureMacSecUdsResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *configureMacSecUdsResponse) Msg() *otg.ConfigureMacSecUdsResponse {
	return obj.obj
}

func (obj *configureMacSecUdsResponse) SetMsg(msg *otg.ConfigureMacSecUdsResponse) ConfigureMacSecUdsResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *configureMacSecUdsResponse) ToProto() (*otg.ConfigureMacSecUdsResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *configureMacSecUdsResponse) FromProto(msg *otg.ConfigureMacSecUdsResponse) (ConfigureMacSecUdsResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *configureMacSecUdsResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *configureMacSecUdsResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *configureMacSecUdsResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *configureMacSecUdsResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *configureMacSecUdsResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *configureMacSecUdsResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *configureMacSecUdsResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *configureMacSecUdsResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *configureMacSecUdsResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *configureMacSecUdsResponse) Clone() (ConfigureMacSecUdsResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewConfigureMacSecUdsResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *configureMacSecUdsResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *configureMacSecUdsResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ConfigureMacSecUdsResponse is description is TBD
type ConfigureMacSecUdsResponse interface {
	Validation
	// Msg marshals ConfigureMacSecUdsResponse to protobuf object *otg.ConfigureMacSecUdsResponse
	// and doesn't set defaults
	Msg() *otg.ConfigureMacSecUdsResponse
	// SetMsg unmarshals ConfigureMacSecUdsResponse from protobuf object *otg.ConfigureMacSecUdsResponse
	// and doesn't set defaults
	SetMsg(*otg.ConfigureMacSecUdsResponse) ConfigureMacSecUdsResponse
	// ToProto marshals ConfigureMacSecUdsResponse to protobuf object *otg.ConfigureMacSecUdsResponse
	ToProto() (*otg.ConfigureMacSecUdsResponse, error)
	// ToPbText marshals ConfigureMacSecUdsResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ConfigureMacSecUdsResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals ConfigureMacSecUdsResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ConfigureMacSecUdsResponse from protobuf object *otg.ConfigureMacSecUdsResponse
	FromProto(msg *otg.ConfigureMacSecUdsResponse) (ConfigureMacSecUdsResponse, error)
	// FromPbText unmarshals ConfigureMacSecUdsResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ConfigureMacSecUdsResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ConfigureMacSecUdsResponse from JSON text
	FromJson(value string) error
	// Validate validates ConfigureMacSecUdsResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ConfigureMacSecUdsResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in ConfigureMacSecUdsResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to ConfigureMacSecUdsResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) ConfigureMacSecUdsResponse
	// HasWarning checks if Warning has been set in ConfigureMacSecUdsResponse
	HasWarning() bool
	setNil()
}

func (obj *configureMacSecUdsResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *configureMacSecUdsResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *configureMacSecUdsResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *configureMacSecUdsResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the ConfigureMacSecUdsResponse object
func (obj *configureMacSecUdsResponse) SetWarning(value Warning) ConfigureMacSecUdsResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *configureMacSecUdsResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *configureMacSecUdsResponse) setDefault() {

}

// ***** GetStatCatalogResponse *****
type getStatCatalogResponse struct {
	validation
	obj                          *otg.GetStatCatalogResponse
	responseGetStatCatalogHolder ResponseGetStatCatalog
}

func NewGetStatCatalogResponse() GetStatCatalogResponse {
	obj := getStatCatalogResponse{obj: &otg.GetStatCatalogResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *getStatCatalogResponse) Msg() *otg.GetStatCatalogResponse {
	return obj.obj
}

func (obj *getStatCatalogResponse) SetMsg(msg *otg.GetStatCatalogResponse) GetStatCatalogResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *getStatCatalogResponse) ToProto() (*otg.GetStatCatalogResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *getStatCatalogResponse) FromProto(msg *otg.GetStatCatalogResponse) (GetStatCatalogResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *getStatCatalogResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *getStatCatalogResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *getStatCatalogResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *getStatCatalogResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *getStatCatalogResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *getStatCatalogResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *getStatCatalogResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *getStatCatalogResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *getStatCatalogResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *getStatCatalogResponse) Clone() (GetStatCatalogResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewGetStatCatalogResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *getStatCatalogResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *getStatCatalogResponse) setNil() {
	obj.responseGetStatCatalogHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// GetStatCatalogResponse is description is TBD
type GetStatCatalogResponse interface {
	Validation
	// Msg marshals GetStatCatalogResponse to protobuf object *otg.GetStatCatalogResponse
	// and doesn't set defaults
	Msg() *otg.GetStatCatalogResponse
	// SetMsg unmarshals GetStatCatalogResponse from protobuf object *otg.GetStatCatalogResponse
	// and doesn't set defaults
	SetMsg(*otg.GetStatCatalogResponse) GetStatCatalogResponse
	// ToProto marshals GetStatCatalogResponse to protobuf object *otg.GetStatCatalogResponse
	ToProto() (*otg.GetStatCatalogResponse, error)
	// ToPbText marshals GetStatCatalogResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals GetStatCatalogResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals GetStatCatalogResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals GetStatCatalogResponse from protobuf object *otg.GetStatCatalogResponse
	FromProto(msg *otg.GetStatCatalogResponse) (GetStatCatalogResponse, error)
	// FromPbText unmarshals GetStatCatalogResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals GetStatCatalogResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals GetStatCatalogResponse from JSON text
	FromJson(value string) error
	// Validate validates GetStatCatalogResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (GetStatCatalogResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ResponseGetStatCatalog returns ResponseGetStatCatalog, set in GetStatCatalogResponse.
	// ResponseGetStatCatalog is description is TBD
	ResponseGetStatCatalog() ResponseGetStatCatalog
	// SetResponseGetStatCatalog assigns ResponseGetStatCatalog provided by user to GetStatCatalogResponse.
	// ResponseGetStatCatalog is description is TBD
	SetResponseGetStatCatalog(value ResponseGetStatCatalog) GetStatCatalogResponse
	// HasResponseGetStatCatalog checks if ResponseGetStatCatalog has been set in GetStatCatalogResponse
	HasResponseGetStatCatalog() bool
	setNil()
}

func (obj *getStatCatalogResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *getStatCatalogResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// ResponseGetStatCatalog returns a ResponseGetStatCatalog
func (obj *getStatCatalogResponse) ResponseGetStatCatalog() ResponseGetStatCatalog {
	if obj.obj.ResponseGetStatCatalog == nil {
		obj.obj.ResponseGetStatCatalog = NewResponseGetStatCatalog().Msg()
	}
	if obj.responseGetStatCatalogHolder == nil {
		obj.responseGetStatCatalogHolder = &responseGetStatCatalog{obj: obj.obj.ResponseGetStatCatalog}
	}
	return obj.responseGetStatCatalogHolder
}

// description is TBD
// ResponseGetStatCatalog returns a ResponseGetStatCatalog
func (obj *getStatCatalogResponse) HasResponseGetStatCatalog() bool {
	return obj.obj.ResponseGetStatCatalog != nil
}

// description is TBD
// SetResponseGetStatCatalog sets the ResponseGetStatCatalog value in the GetStatCatalogResponse object
func (obj *getStatCatalogResponse) SetResponseGetStatCatalog(value ResponseGetStatCatalog) GetStatCatalogResponse {

	obj.responseGetStatCatalogHolder = nil
	obj.obj.ResponseGetStatCatalog = value.Msg()

	return obj
}

func (obj *getStatCatalogResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ResponseGetStatCatalog != nil {

		obj.ResponseGetStatCatalog().validateObj(vObj, set_default)
	}

}

func (obj *getStatCatalogResponse) setDefault() {

}

// ***** ClearStatsResponse *****
type clearStatsResponse struct {
	validation
	obj           *otg.ClearStatsResponse
	warningHolder Warning
}

func NewClearStatsResponse() ClearStatsResponse {
	obj := clearStatsResponse{obj: &otg.ClearStatsResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *clearStatsResponse) Msg() *otg.ClearStatsResponse {
	return obj.obj
}

func (obj *clearStatsResponse) SetMsg(msg *otg.ClearStatsResponse) ClearStatsResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *clearStatsResponse) ToProto() (*otg.ClearStatsResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *clearStatsResponse) FromProto(msg *otg.ClearStatsResponse) (ClearStatsResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *clearStatsResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *clearStatsResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *clearStatsResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *clearStatsResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *clearStatsResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *clearStatsResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *clearStatsResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *clearStatsResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *clearStatsResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *clearStatsResponse) Clone() (ClearStatsResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewClearStatsResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *clearStatsResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *clearStatsResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ClearStatsResponse is description is TBD
type ClearStatsResponse interface {
	Validation
	// Msg marshals ClearStatsResponse to protobuf object *otg.ClearStatsResponse
	// and doesn't set defaults
	Msg() *otg.ClearStatsResponse
	// SetMsg unmarshals ClearStatsResponse from protobuf object *otg.ClearStatsResponse
	// and doesn't set defaults
	SetMsg(*otg.ClearStatsResponse) ClearStatsResponse
	// ToProto marshals ClearStatsResponse to protobuf object *otg.ClearStatsResponse
	ToProto() (*otg.ClearStatsResponse, error)
	// ToPbText marshals ClearStatsResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ClearStatsResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals ClearStatsResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ClearStatsResponse from protobuf object *otg.ClearStatsResponse
	FromProto(msg *otg.ClearStatsResponse) (ClearStatsResponse, error)
	// FromPbText unmarshals ClearStatsResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ClearStatsResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ClearStatsResponse from JSON text
	FromJson(value string) error
	// Validate validates ClearStatsResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ClearStatsResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in ClearStatsResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to ClearStatsResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) ClearStatsResponse
	// HasWarning checks if Warning has been set in ClearStatsResponse
	HasWarning() bool
	setNil()
}

func (obj *clearStatsResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *clearStatsResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *clearStatsResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *clearStatsResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the ClearStatsResponse object
func (obj *clearStatsResponse) SetWarning(value Warning) ClearStatsResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *clearStatsResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *clearStatsResponse) setDefault() {

}

// ***** ClearPerStreamTxStatsResponse *****
type clearPerStreamTxStatsResponse struct {
	validation
	obj           *otg.ClearPerStreamTxStatsResponse
	warningHolder Warning
}

func NewClearPerStreamTxStatsResponse() ClearPerStreamTxStatsResponse {
	obj := clearPerStreamTxStatsResponse{obj: &otg.ClearPerStreamTxStatsResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *clearPerStreamTxStatsResponse) Msg() *otg.ClearPerStreamTxStatsResponse {
	return obj.obj
}

func (obj *clearPerStreamTxStatsResponse) SetMsg(msg *otg.ClearPerStreamTxStatsResponse) ClearPerStreamTxStatsResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *clearPerStreamTxStatsResponse) ToProto() (*otg.ClearPerStreamTxStatsResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *clearPerStreamTxStatsResponse) FromProto(msg *otg.ClearPerStreamTxStatsResponse) (ClearPerStreamTxStatsResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *clearPerStreamTxStatsResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *clearPerStreamTxStatsResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *clearPerStreamTxStatsResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *clearPerStreamTxStatsResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *clearPerStreamTxStatsResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *clearPerStreamTxStatsResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *clearPerStreamTxStatsResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *clearPerStreamTxStatsResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *clearPerStreamTxStatsResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *clearPerStreamTxStatsResponse) Clone() (ClearPerStreamTxStatsResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewClearPerStreamTxStatsResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *clearPerStreamTxStatsResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *clearPerStreamTxStatsResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ClearPerStreamTxStatsResponse is description is TBD
type ClearPerStreamTxStatsResponse interface {
	Validation
	// Msg marshals ClearPerStreamTxStatsResponse to protobuf object *otg.ClearPerStreamTxStatsResponse
	// and doesn't set defaults
	Msg() *otg.ClearPerStreamTxStatsResponse
	// SetMsg unmarshals ClearPerStreamTxStatsResponse from protobuf object *otg.ClearPerStreamTxStatsResponse
	// and doesn't set defaults
	SetMsg(*otg.ClearPerStreamTxStatsResponse) ClearPerStreamTxStatsResponse
	// ToProto marshals ClearPerStreamTxStatsResponse to protobuf object *otg.ClearPerStreamTxStatsResponse
	ToProto() (*otg.ClearPerStreamTxStatsResponse, error)
	// ToPbText marshals ClearPerStreamTxStatsResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ClearPerStreamTxStatsResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals ClearPerStreamTxStatsResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ClearPerStreamTxStatsResponse from protobuf object *otg.ClearPerStreamTxStatsResponse
	FromProto(msg *otg.ClearPerStreamTxStatsResponse) (ClearPerStreamTxStatsResponse, error)
	// FromPbText unmarshals ClearPerStreamTxStatsResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ClearPerStreamTxStatsResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ClearPerStreamTxStatsResponse from JSON text
	FromJson(value string) error
	// Validate validates ClearPerStreamTxStatsResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ClearPerStreamTxStatsResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in ClearPerStreamTxStatsResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to ClearPerStreamTxStatsResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) ClearPerStreamTxStatsResponse
	// HasWarning checks if Warning has been set in ClearPerStreamTxStatsResponse
	HasWarning() bool
	setNil()
}

func (obj *clearPerStreamTxStatsResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *clearPerStreamTxStatsResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *clearPerStreamTxStatsResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *clearPerStreamTxStatsResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the ClearPerStreamTxStatsResponse object
func (obj *clearPerStreamTxStatsResponse) SetWarning(value Warning) ClearPerStreamTxStatsResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *clearPerStreamTxStatsResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *clearPerStreamTxStatsResponse) setDefault() {

}

// ***** VmAcquireResponse *****
type vmAcquireResponse struct {
	validation
	obj           *otg.VmAcquireResponse
	warningHolder Warning
}

func NewVmAcquireResponse() VmAcquireResponse {
	obj := vmAcquireResponse{obj: &otg.VmAcquireResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *vmAcquireResponse) Msg() *otg.VmAcquireResponse {
	return obj.obj
}

func (obj *vmAcquireResponse) SetMsg(msg *otg.VmAcquireResponse) VmAcquireResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *vmAcquireResponse) ToProto() (*otg.VmAcquireResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *vmAcquireResponse) FromProto(msg *otg.VmAcquireResponse) (VmAcquireResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *vmAcquireResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *vmAcquireResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *vmAcquireResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *vmAcquireResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *vmAcquireResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *vmAcquireResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *vmAcquireResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *vmAcquireResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *vmAcquireResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *vmAcquireResponse) Clone() (VmAcquireResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewVmAcquireResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *vmAcquireResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *vmAcquireResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// VmAcquireResponse is description is TBD
type VmAcquireResponse interface {
	Validation
	// Msg marshals VmAcquireResponse to protobuf object *otg.VmAcquireResponse
	// and doesn't set defaults
	Msg() *otg.VmAcquireResponse
	// SetMsg unmarshals VmAcquireResponse from protobuf object *otg.VmAcquireResponse
	// and doesn't set defaults
	SetMsg(*otg.VmAcquireResponse) VmAcquireResponse
	// ToProto marshals VmAcquireResponse to protobuf object *otg.VmAcquireResponse
	ToProto() (*otg.VmAcquireResponse, error)
	// ToPbText marshals VmAcquireResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals VmAcquireResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals VmAcquireResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals VmAcquireResponse from protobuf object *otg.VmAcquireResponse
	FromProto(msg *otg.VmAcquireResponse) (VmAcquireResponse, error)
	// FromPbText unmarshals VmAcquireResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals VmAcquireResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals VmAcquireResponse from JSON text
	FromJson(value string) error
	// Validate validates VmAcquireResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (VmAcquireResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in VmAcquireResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to VmAcquireResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) VmAcquireResponse
	// HasWarning checks if Warning has been set in VmAcquireResponse
	HasWarning() bool
	setNil()
}

func (obj *vmAcquireResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *vmAcquireResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *vmAcquireResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *vmAcquireResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the VmAcquireResponse object
func (obj *vmAcquireResponse) SetWarning(value Warning) VmAcquireResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *vmAcquireResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *vmAcquireResponse) setDefault() {

}

// ***** VmAddPortResponse *****
type vmAddPortResponse struct {
	validation
	obj           *otg.VmAddPortResponse
	warningHolder Warning
}

func NewVmAddPortResponse() VmAddPortResponse {
	obj := vmAddPortResponse{obj: &otg.VmAddPortResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *vmAddPortResponse) Msg() *otg.VmAddPortResponse {
	return obj.obj
}

func (obj *vmAddPortResponse) SetMsg(msg *otg.VmAddPortResponse) VmAddPortResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *vmAddPortResponse) ToProto() (*otg.VmAddPortResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *vmAddPortResponse) FromProto(msg *otg.VmAddPortResponse) (VmAddPortResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *vmAddPortResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *vmAddPortResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *vmAddPortResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *vmAddPortResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *vmAddPortResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *vmAddPortResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *vmAddPortResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *vmAddPortResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *vmAddPortResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *vmAddPortResponse) Clone() (VmAddPortResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewVmAddPortResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *vmAddPortResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *vmAddPortResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// VmAddPortResponse is description is TBD
type VmAddPortResponse interface {
	Validation
	// Msg marshals VmAddPortResponse to protobuf object *otg.VmAddPortResponse
	// and doesn't set defaults
	Msg() *otg.VmAddPortResponse
	// SetMsg unmarshals VmAddPortResponse from protobuf object *otg.VmAddPortResponse
	// and doesn't set defaults
	SetMsg(*otg.VmAddPortResponse) VmAddPortResponse
	// ToProto marshals VmAddPortResponse to protobuf object *otg.VmAddPortResponse
	ToProto() (*otg.VmAddPortResponse, error)
	// ToPbText marshals VmAddPortResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals VmAddPortResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals VmAddPortResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals VmAddPortResponse from protobuf object *otg.VmAddPortResponse
	FromProto(msg *otg.VmAddPortResponse) (VmAddPortResponse, error)
	// FromPbText unmarshals VmAddPortResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals VmAddPortResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals VmAddPortResponse from JSON text
	FromJson(value string) error
	// Validate validates VmAddPortResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (VmAddPortResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in VmAddPortResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to VmAddPortResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) VmAddPortResponse
	// HasWarning checks if Warning has been set in VmAddPortResponse
	HasWarning() bool
	setNil()
}

func (obj *vmAddPortResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *vmAddPortResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *vmAddPortResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *vmAddPortResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the VmAddPortResponse object
func (obj *vmAddPortResponse) SetWarning(value Warning) VmAddPortResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *vmAddPortResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *vmAddPortResponse) setDefault() {

}

// ***** VmRemovePortResponse *****
type vmRemovePortResponse struct {
	validation
	obj           *otg.VmRemovePortResponse
	warningHolder Warning
}

func NewVmRemovePortResponse() VmRemovePortResponse {
	obj := vmRemovePortResponse{obj: &otg.VmRemovePortResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *vmRemovePortResponse) Msg() *otg.VmRemovePortResponse {
	return obj.obj
}

func (obj *vmRemovePortResponse) SetMsg(msg *otg.VmRemovePortResponse) VmRemovePortResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *vmRemovePortResponse) ToProto() (*otg.VmRemovePortResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *vmRemovePortResponse) FromProto(msg *otg.VmRemovePortResponse) (VmRemovePortResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *vmRemovePortResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *vmRemovePortResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *vmRemovePortResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *vmRemovePortResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *vmRemovePortResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *vmRemovePortResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *vmRemovePortResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *vmRemovePortResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *vmRemovePortResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *vmRemovePortResponse) Clone() (VmRemovePortResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewVmRemovePortResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *vmRemovePortResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *vmRemovePortResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// VmRemovePortResponse is description is TBD
type VmRemovePortResponse interface {
	Validation
	// Msg marshals VmRemovePortResponse to protobuf object *otg.VmRemovePortResponse
	// and doesn't set defaults
	Msg() *otg.VmRemovePortResponse
	// SetMsg unmarshals VmRemovePortResponse from protobuf object *otg.VmRemovePortResponse
	// and doesn't set defaults
	SetMsg(*otg.VmRemovePortResponse) VmRemovePortResponse
	// ToProto marshals VmRemovePortResponse to protobuf object *otg.VmRemovePortResponse
	ToProto() (*otg.VmRemovePortResponse, error)
	// ToPbText marshals VmRemovePortResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals VmRemovePortResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals VmRemovePortResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals VmRemovePortResponse from protobuf object *otg.VmRemovePortResponse
	FromProto(msg *otg.VmRemovePortResponse) (VmRemovePortResponse, error)
	// FromPbText unmarshals VmRemovePortResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals VmRemovePortResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals VmRemovePortResponse from JSON text
	FromJson(value string) error
	// Validate validates VmRemovePortResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (VmRemovePortResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in VmRemovePortResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to VmRemovePortResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) VmRemovePortResponse
	// HasWarning checks if Warning has been set in VmRemovePortResponse
	HasWarning() bool
	setNil()
}

func (obj *vmRemovePortResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *vmRemovePortResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *vmRemovePortResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *vmRemovePortResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the VmRemovePortResponse object
func (obj *vmRemovePortResponse) SetWarning(value Warning) VmRemovePortResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *vmRemovePortResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *vmRemovePortResponse) setDefault() {

}

// ***** VmReleaseResponse *****
type vmReleaseResponse struct {
	validation
	obj           *otg.VmReleaseResponse
	warningHolder Warning
}

func NewVmReleaseResponse() VmReleaseResponse {
	obj := vmReleaseResponse{obj: &otg.VmReleaseResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *vmReleaseResponse) Msg() *otg.VmReleaseResponse {
	return obj.obj
}

func (obj *vmReleaseResponse) SetMsg(msg *otg.VmReleaseResponse) VmReleaseResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *vmReleaseResponse) ToProto() (*otg.VmReleaseResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *vmReleaseResponse) FromProto(msg *otg.VmReleaseResponse) (VmReleaseResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *vmReleaseResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *vmReleaseResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *vmReleaseResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *vmReleaseResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *vmReleaseResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *vmReleaseResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *vmReleaseResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *vmReleaseResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *vmReleaseResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *vmReleaseResponse) Clone() (VmReleaseResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewVmReleaseResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *vmReleaseResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *vmReleaseResponse) setNil() {
	obj.warningHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// VmReleaseResponse is description is TBD
type VmReleaseResponse interface {
	Validation
	// Msg marshals VmReleaseResponse to protobuf object *otg.VmReleaseResponse
	// and doesn't set defaults
	Msg() *otg.VmReleaseResponse
	// SetMsg unmarshals VmReleaseResponse from protobuf object *otg.VmReleaseResponse
	// and doesn't set defaults
	SetMsg(*otg.VmReleaseResponse) VmReleaseResponse
	// ToProto marshals VmReleaseResponse to protobuf object *otg.VmReleaseResponse
	ToProto() (*otg.VmReleaseResponse, error)
	// ToPbText marshals VmReleaseResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals VmReleaseResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals VmReleaseResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals VmReleaseResponse from protobuf object *otg.VmReleaseResponse
	FromProto(msg *otg.VmReleaseResponse) (VmReleaseResponse, error)
	// FromPbText unmarshals VmReleaseResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals VmReleaseResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals VmReleaseResponse from JSON text
	FromJson(value string) error
	// Validate validates VmReleaseResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (VmReleaseResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warning returns Warning, set in VmReleaseResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	Warning() Warning
	// SetWarning assigns Warning provided by user to VmReleaseResponse.
	// Warning is a list of warnings that have occurred while executing the request.
	SetWarning(value Warning) VmReleaseResponse
	// HasWarning checks if Warning has been set in VmReleaseResponse
	HasWarning() bool
	setNil()
}

func (obj *vmReleaseResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *vmReleaseResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Warning returns a Warning
func (obj *vmReleaseResponse) Warning() Warning {
	if obj.obj.Warning == nil {
		obj.obj.Warning = NewWarning().Msg()
	}
	if obj.warningHolder == nil {
		obj.warningHolder = &warning{obj: obj.obj.Warning}
	}
	return obj.warningHolder
}

// description is TBD
// Warning returns a Warning
func (obj *vmReleaseResponse) HasWarning() bool {
	return obj.obj.Warning != nil
}

// description is TBD
// SetWarning sets the Warning value in the VmReleaseResponse object
func (obj *vmReleaseResponse) SetWarning(value Warning) VmReleaseResponse {

	obj.warningHolder = nil
	obj.obj.Warning = value.Msg()

	return obj
}

func (obj *vmReleaseResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Warning != nil {

		obj.Warning().validateObj(vObj, set_default)
	}

}

func (obj *vmReleaseResponse) setDefault() {

}

// ***** GetVersionResponse *****
type getVersionResponse struct {
	validation
	obj           *otg.GetVersionResponse
	versionHolder Version
}

func NewGetVersionResponse() GetVersionResponse {
	obj := getVersionResponse{obj: &otg.GetVersionResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *getVersionResponse) Msg() *otg.GetVersionResponse {
	return obj.obj
}

func (obj *getVersionResponse) SetMsg(msg *otg.GetVersionResponse) GetVersionResponse {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *getVersionResponse) ToProto() (*otg.GetVersionResponse, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *getVersionResponse) FromProto(msg *otg.GetVersionResponse) (GetVersionResponse, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *getVersionResponse) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *getVersionResponse) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *getVersionResponse) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *getVersionResponse) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *getVersionResponse) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *getVersionResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *getVersionResponse) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *getVersionResponse) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *getVersionResponse) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *getVersionResponse) Clone() (GetVersionResponse, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewGetVersionResponse()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *getVersionResponse) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *getVersionResponse) setNil() {
	obj.versionHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// GetVersionResponse is description is TBD
type GetVersionResponse interface {
	Validation
	// Msg marshals GetVersionResponse to protobuf object *otg.GetVersionResponse
	// and doesn't set defaults
	Msg() *otg.GetVersionResponse
	// SetMsg unmarshals GetVersionResponse from protobuf object *otg.GetVersionResponse
	// and doesn't set defaults
	SetMsg(*otg.GetVersionResponse) GetVersionResponse
	// ToProto marshals GetVersionResponse to protobuf object *otg.GetVersionResponse
	ToProto() (*otg.GetVersionResponse, error)
	// ToPbText marshals GetVersionResponse to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals GetVersionResponse to YAML text
	ToYaml() (string, error)
	// ToJson marshals GetVersionResponse to JSON text
	ToJson() (string, error)
	// FromProto unmarshals GetVersionResponse from protobuf object *otg.GetVersionResponse
	FromProto(msg *otg.GetVersionResponse) (GetVersionResponse, error)
	// FromPbText unmarshals GetVersionResponse from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals GetVersionResponse from YAML text
	FromYaml(value string) error
	// FromJson unmarshals GetVersionResponse from JSON text
	FromJson(value string) error
	// Validate validates GetVersionResponse
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (GetVersionResponse, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Version returns Version, set in GetVersionResponse.
	// Version is version details
	Version() Version
	// SetVersion assigns Version provided by user to GetVersionResponse.
	// Version is version details
	SetVersion(value Version) GetVersionResponse
	// HasVersion checks if Version has been set in GetVersionResponse
	HasVersion() bool
	setNil()
}

func (obj *getVersionResponse) populateXml(xObj *Argument) error {

	return nil
}

func (obj *getVersionResponse) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// Version returns a Version
func (obj *getVersionResponse) Version() Version {
	if obj.obj.Version == nil {
		obj.obj.Version = NewVersion().Msg()
	}
	if obj.versionHolder == nil {
		obj.versionHolder = &version{obj: obj.obj.Version}
	}
	return obj.versionHolder
}

// description is TBD
// Version returns a Version
func (obj *getVersionResponse) HasVersion() bool {
	return obj.obj.Version != nil
}

// description is TBD
// SetVersion sets the Version value in the GetVersionResponse object
func (obj *getVersionResponse) SetVersion(value Version) GetVersionResponse {

	obj.versionHolder = nil
	obj.obj.Version = value.Msg()

	return obj
}

func (obj *getVersionResponse) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Version != nil {

		obj.Version().validateObj(vObj, set_default)
	}

}

func (obj *getVersionResponse) setDefault() {

}

// ***** PFTypeVersionType *****
type pFTypeVersionType struct {
	validation
	obj            *otg.PFTypeVersionType
	releaseHolder  PFTypeReleaseType
	revisionHolder PFTypeRevisionType
}

func NewPFTypeVersionType() PFTypeVersionType {
	obj := pFTypeVersionType{obj: &otg.PFTypeVersionType{}}
	obj.setDefault()
	return &obj
}

func (obj *pFTypeVersionType) Msg() *otg.PFTypeVersionType {
	return obj.obj
}

func (obj *pFTypeVersionType) SetMsg(msg *otg.PFTypeVersionType) PFTypeVersionType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *pFTypeVersionType) ToProto() (*otg.PFTypeVersionType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *pFTypeVersionType) FromProto(msg *otg.PFTypeVersionType) (PFTypeVersionType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *pFTypeVersionType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *pFTypeVersionType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *pFTypeVersionType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypeVersionType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *pFTypeVersionType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypeVersionType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *pFTypeVersionType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *pFTypeVersionType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *pFTypeVersionType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *pFTypeVersionType) Clone() (PFTypeVersionType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPFTypeVersionType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *pFTypeVersionType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *pFTypeVersionType) setNil() {
	obj.releaseHolder = nil
	obj.revisionHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// PFTypeVersionType is model the version used to identify the API. The release number components (Major.Minor release number) identifies the maturity of the API. A client compiled with release (A.B) can use a server providing release (C.D) iff A equals C and B less than or equal to D. In other words, an "old client" can use a "new server". The revision number components (Branch.Build revision number) identifies the particular revision of the API conforming to the API release number.
type PFTypeVersionType interface {
	Validation
	// Msg marshals PFTypeVersionType to protobuf object *otg.PFTypeVersionType
	// and doesn't set defaults
	Msg() *otg.PFTypeVersionType
	// SetMsg unmarshals PFTypeVersionType from protobuf object *otg.PFTypeVersionType
	// and doesn't set defaults
	SetMsg(*otg.PFTypeVersionType) PFTypeVersionType
	// ToProto marshals PFTypeVersionType to protobuf object *otg.PFTypeVersionType
	ToProto() (*otg.PFTypeVersionType, error)
	// ToPbText marshals PFTypeVersionType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PFTypeVersionType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PFTypeVersionType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PFTypeVersionType from protobuf object *otg.PFTypeVersionType
	FromProto(msg *otg.PFTypeVersionType) (PFTypeVersionType, error)
	// FromPbText unmarshals PFTypeVersionType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PFTypeVersionType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PFTypeVersionType from JSON text
	FromJson(value string) error
	// Validate validates PFTypeVersionType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PFTypeVersionType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Release returns PFTypeReleaseType, set in PFTypeVersionType.
	// PFTypeReleaseType is tBD
	Release() PFTypeReleaseType
	// SetRelease assigns PFTypeReleaseType provided by user to PFTypeVersionType.
	// PFTypeReleaseType is tBD
	SetRelease(value PFTypeReleaseType) PFTypeVersionType
	// HasRelease checks if Release has been set in PFTypeVersionType
	HasRelease() bool
	// Revision returns PFTypeRevisionType, set in PFTypeVersionType.
	// PFTypeRevisionType is tBD
	Revision() PFTypeRevisionType
	// SetRevision assigns PFTypeRevisionType provided by user to PFTypeVersionType.
	// PFTypeRevisionType is tBD
	SetRevision(value PFTypeRevisionType) PFTypeVersionType
	// HasRevision checks if Revision has been set in PFTypeVersionType
	HasRevision() bool
	setNil()
}

func (obj *pFTypeVersionType) populateXml(xObj *Argument) error {

	return nil
}

func (obj *pFTypeVersionType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Release returns a PFTypeReleaseType
func (obj *pFTypeVersionType) Release() PFTypeReleaseType {
	if obj.obj.Release == nil {
		obj.obj.Release = NewPFTypeReleaseType().Msg()
	}
	if obj.releaseHolder == nil {
		obj.releaseHolder = &pFTypeReleaseType{obj: obj.obj.Release}
	}
	return obj.releaseHolder
}

// TBD
// Release returns a PFTypeReleaseType
func (obj *pFTypeVersionType) HasRelease() bool {
	return obj.obj.Release != nil
}

// TBD
// SetRelease sets the PFTypeReleaseType value in the PFTypeVersionType object
func (obj *pFTypeVersionType) SetRelease(value PFTypeReleaseType) PFTypeVersionType {

	obj.releaseHolder = nil
	obj.obj.Release = value.Msg()

	return obj
}

// TBD
// Revision returns a PFTypeRevisionType
func (obj *pFTypeVersionType) Revision() PFTypeRevisionType {
	if obj.obj.Revision == nil {
		obj.obj.Revision = NewPFTypeRevisionType().Msg()
	}
	if obj.revisionHolder == nil {
		obj.revisionHolder = &pFTypeRevisionType{obj: obj.obj.Revision}
	}
	return obj.revisionHolder
}

// TBD
// Revision returns a PFTypeRevisionType
func (obj *pFTypeVersionType) HasRevision() bool {
	return obj.obj.Revision != nil
}

// TBD
// SetRevision sets the PFTypeRevisionType value in the PFTypeVersionType object
func (obj *pFTypeVersionType) SetRevision(value PFTypeRevisionType) PFTypeVersionType {

	obj.revisionHolder = nil
	obj.obj.Revision = value.Msg()

	return obj
}

func (obj *pFTypeVersionType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Release != nil {

		obj.Release().validateObj(vObj, set_default)
	}

	if obj.obj.Revision != nil {

		obj.Revision().validateObj(vObj, set_default)
	}

}

func (obj *pFTypeVersionType) setDefault() {

}

// ***** DebugTopologyDebugPortInfoList *****
type debugTopologyDebugPortInfoList struct {
	validation
	obj                     *otg.DebugTopologyDebugPortInfoList
	debugPortInfoListHolder DebugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter
}

func NewDebugTopologyDebugPortInfoList() DebugTopologyDebugPortInfoList {
	obj := debugTopologyDebugPortInfoList{obj: &otg.DebugTopologyDebugPortInfoList{}}
	obj.setDefault()
	return &obj
}

func (obj *debugTopologyDebugPortInfoList) Msg() *otg.DebugTopologyDebugPortInfoList {
	return obj.obj
}

func (obj *debugTopologyDebugPortInfoList) SetMsg(msg *otg.DebugTopologyDebugPortInfoList) DebugTopologyDebugPortInfoList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *debugTopologyDebugPortInfoList) ToProto() (*otg.DebugTopologyDebugPortInfoList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *debugTopologyDebugPortInfoList) FromProto(msg *otg.DebugTopologyDebugPortInfoList) (DebugTopologyDebugPortInfoList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *debugTopologyDebugPortInfoList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *debugTopologyDebugPortInfoList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *debugTopologyDebugPortInfoList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *debugTopologyDebugPortInfoList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *debugTopologyDebugPortInfoList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *debugTopologyDebugPortInfoList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *debugTopologyDebugPortInfoList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *debugTopologyDebugPortInfoList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *debugTopologyDebugPortInfoList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *debugTopologyDebugPortInfoList) Clone() (DebugTopologyDebugPortInfoList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewDebugTopologyDebugPortInfoList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *debugTopologyDebugPortInfoList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *debugTopologyDebugPortInfoList) setNil() {
	obj.debugPortInfoListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// DebugTopologyDebugPortInfoList is tBD
type DebugTopologyDebugPortInfoList interface {
	Validation
	// Msg marshals DebugTopologyDebugPortInfoList to protobuf object *otg.DebugTopologyDebugPortInfoList
	// and doesn't set defaults
	Msg() *otg.DebugTopologyDebugPortInfoList
	// SetMsg unmarshals DebugTopologyDebugPortInfoList from protobuf object *otg.DebugTopologyDebugPortInfoList
	// and doesn't set defaults
	SetMsg(*otg.DebugTopologyDebugPortInfoList) DebugTopologyDebugPortInfoList
	// ToProto marshals DebugTopologyDebugPortInfoList to protobuf object *otg.DebugTopologyDebugPortInfoList
	ToProto() (*otg.DebugTopologyDebugPortInfoList, error)
	// ToPbText marshals DebugTopologyDebugPortInfoList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals DebugTopologyDebugPortInfoList to YAML text
	ToYaml() (string, error)
	// ToJson marshals DebugTopologyDebugPortInfoList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals DebugTopologyDebugPortInfoList from protobuf object *otg.DebugTopologyDebugPortInfoList
	FromProto(msg *otg.DebugTopologyDebugPortInfoList) (DebugTopologyDebugPortInfoList, error)
	// FromPbText unmarshals DebugTopologyDebugPortInfoList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals DebugTopologyDebugPortInfoList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals DebugTopologyDebugPortInfoList from JSON text
	FromJson(value string) error
	// Validate validates DebugTopologyDebugPortInfoList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (DebugTopologyDebugPortInfoList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// DebugPortInfoList returns DebugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIterIter, set in DebugTopologyDebugPortInfoList
	DebugPortInfoList() DebugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter
	setNil()
}

func (obj *debugTopologyDebugPortInfoList) populateXml(xObj *Argument) error {

	if len(obj.DebugPortInfoList().Items()) != 0 {
		for _, item := range obj.DebugPortInfoList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *debugTopologyDebugPortInfoList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// DebugPortInfoList returns a []DebugTopologyDebugPortInfo
func (obj *debugTopologyDebugPortInfoList) DebugPortInfoList() DebugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter {
	if len(obj.obj.DebugPortInfoList) == 0 {
		obj.obj.DebugPortInfoList = []*otg.DebugTopologyDebugPortInfo{}
	}
	if obj.debugPortInfoListHolder == nil {
		obj.debugPortInfoListHolder = newDebugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter(&obj.obj.DebugPortInfoList).setMsg(obj)
	}
	return obj.debugPortInfoListHolder
}

type debugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter struct {
	obj                             *debugTopologyDebugPortInfoList
	debugTopologyDebugPortInfoSlice []DebugTopologyDebugPortInfo
	fieldPtr                        *[]*otg.DebugTopologyDebugPortInfo
}

func newDebugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter(ptr *[]*otg.DebugTopologyDebugPortInfo) DebugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter {
	return &debugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter{fieldPtr: ptr}
}

type DebugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter interface {
	setMsg(*debugTopologyDebugPortInfoList) DebugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter
	Items() []DebugTopologyDebugPortInfo
	Add() DebugTopologyDebugPortInfo
	Append(items ...DebugTopologyDebugPortInfo) DebugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter
	Set(index int, newObj DebugTopologyDebugPortInfo) DebugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter
	Clear() DebugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter
	clearHolderSlice() DebugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter
	appendHolderSlice(item DebugTopologyDebugPortInfo) DebugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter
}

func (obj *debugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter) setMsg(msg *debugTopologyDebugPortInfoList) DebugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&debugTopologyDebugPortInfo{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *debugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter) Items() []DebugTopologyDebugPortInfo {
	return obj.debugTopologyDebugPortInfoSlice
}

func (obj *debugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter) Add() DebugTopologyDebugPortInfo {
	newObj := &otg.DebugTopologyDebugPortInfo{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &debugTopologyDebugPortInfo{obj: newObj}
	newLibObj.setDefault()
	obj.debugTopologyDebugPortInfoSlice = append(obj.debugTopologyDebugPortInfoSlice, newLibObj)
	return newLibObj
}

func (obj *debugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter) Append(items ...DebugTopologyDebugPortInfo) DebugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.debugTopologyDebugPortInfoSlice = append(obj.debugTopologyDebugPortInfoSlice, item)
	}
	return obj
}

func (obj *debugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter) Set(index int, newObj DebugTopologyDebugPortInfo) DebugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.debugTopologyDebugPortInfoSlice[index] = newObj
	return obj
}
func (obj *debugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter) Clear() DebugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.DebugTopologyDebugPortInfo{}
		obj.debugTopologyDebugPortInfoSlice = []DebugTopologyDebugPortInfo{}
	}
	return obj
}
func (obj *debugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter) clearHolderSlice() DebugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter {
	if len(obj.debugTopologyDebugPortInfoSlice) > 0 {
		obj.debugTopologyDebugPortInfoSlice = []DebugTopologyDebugPortInfo{}
	}
	return obj
}
func (obj *debugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter) appendHolderSlice(item DebugTopologyDebugPortInfo) DebugTopologyDebugPortInfoListDebugTopologyDebugPortInfoIter {
	obj.debugTopologyDebugPortInfoSlice = append(obj.debugTopologyDebugPortInfoSlice, item)
	return obj
}

func (obj *debugTopologyDebugPortInfoList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.DebugPortInfoList) != 0 {

		if set_default {
			obj.DebugPortInfoList().clearHolderSlice()
			for _, item := range obj.obj.DebugPortInfoList {
				obj.DebugPortInfoList().appendHolderSlice(&debugTopologyDebugPortInfo{obj: item})
			}
		}
		for _, item := range obj.DebugPortInfoList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *debugTopologyDebugPortInfoList) setDefault() {

}

// ***** DebugTopologyDebugPortIdList *****
type debugTopologyDebugPortIdList struct {
	validation
	obj *otg.DebugTopologyDebugPortIdList
}

func NewDebugTopologyDebugPortIdList() DebugTopologyDebugPortIdList {
	obj := debugTopologyDebugPortIdList{obj: &otg.DebugTopologyDebugPortIdList{}}
	obj.setDefault()
	return &obj
}

func (obj *debugTopologyDebugPortIdList) Msg() *otg.DebugTopologyDebugPortIdList {
	return obj.obj
}

func (obj *debugTopologyDebugPortIdList) SetMsg(msg *otg.DebugTopologyDebugPortIdList) DebugTopologyDebugPortIdList {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *debugTopologyDebugPortIdList) ToProto() (*otg.DebugTopologyDebugPortIdList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *debugTopologyDebugPortIdList) FromProto(msg *otg.DebugTopologyDebugPortIdList) (DebugTopologyDebugPortIdList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *debugTopologyDebugPortIdList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *debugTopologyDebugPortIdList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *debugTopologyDebugPortIdList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *debugTopologyDebugPortIdList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *debugTopologyDebugPortIdList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *debugTopologyDebugPortIdList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *debugTopologyDebugPortIdList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *debugTopologyDebugPortIdList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *debugTopologyDebugPortIdList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *debugTopologyDebugPortIdList) Clone() (DebugTopologyDebugPortIdList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewDebugTopologyDebugPortIdList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *debugTopologyDebugPortIdList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// DebugTopologyDebugPortIdList is tBD
type DebugTopologyDebugPortIdList interface {
	Validation
	// Msg marshals DebugTopologyDebugPortIdList to protobuf object *otg.DebugTopologyDebugPortIdList
	// and doesn't set defaults
	Msg() *otg.DebugTopologyDebugPortIdList
	// SetMsg unmarshals DebugTopologyDebugPortIdList from protobuf object *otg.DebugTopologyDebugPortIdList
	// and doesn't set defaults
	SetMsg(*otg.DebugTopologyDebugPortIdList) DebugTopologyDebugPortIdList
	// ToProto marshals DebugTopologyDebugPortIdList to protobuf object *otg.DebugTopologyDebugPortIdList
	ToProto() (*otg.DebugTopologyDebugPortIdList, error)
	// ToPbText marshals DebugTopologyDebugPortIdList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals DebugTopologyDebugPortIdList to YAML text
	ToYaml() (string, error)
	// ToJson marshals DebugTopologyDebugPortIdList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals DebugTopologyDebugPortIdList from protobuf object *otg.DebugTopologyDebugPortIdList
	FromProto(msg *otg.DebugTopologyDebugPortIdList) (DebugTopologyDebugPortIdList, error)
	// FromPbText unmarshals DebugTopologyDebugPortIdList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals DebugTopologyDebugPortIdList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals DebugTopologyDebugPortIdList from JSON text
	FromJson(value string) error
	// Validate validates DebugTopologyDebugPortIdList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (DebugTopologyDebugPortIdList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// DebugPortIdList returns []int32, set in DebugTopologyDebugPortIdList.
	DebugPortIdList() []int32
	// SetDebugPortIdList assigns []int32 provided by user to DebugTopologyDebugPortIdList
	SetDebugPortIdList(value []int32) DebugTopologyDebugPortIdList
}

func (obj *debugTopologyDebugPortIdList) populateXml(xObj *Argument) error {

	if len(obj.DebugPortIdList()) != 0 {
		for _, item := range obj.DebugPortIdList() {
			it := Item{
				Type:  "None",
				Value: strconv.FormatInt(int64(item), 10),
			}

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *debugTopologyDebugPortIdList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// DebugPortIdList returns a []int32
func (obj *debugTopologyDebugPortIdList) DebugPortIdList() []int32 {
	if obj.obj.DebugPortIdList == nil {
		obj.obj.DebugPortIdList = make([]int32, 0)
	}
	return obj.obj.DebugPortIdList
}

// description is TBD
// SetDebugPortIdList sets the []int32 value in the DebugTopologyDebugPortIdList object
func (obj *debugTopologyDebugPortIdList) SetDebugPortIdList(value []int32) DebugTopologyDebugPortIdList {

	if obj.obj.DebugPortIdList == nil {
		obj.obj.DebugPortIdList = make([]int32, 0)
	}
	obj.obj.DebugPortIdList = value

	return obj
}

func (obj *debugTopologyDebugPortIdList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *debugTopologyDebugPortIdList) setDefault() {

}

// ***** ServerUserInfo *****
type serverUserInfo struct {
	validation
	obj *otg.ServerUserInfo
}

func NewServerUserInfo() ServerUserInfo {
	obj := serverUserInfo{obj: &otg.ServerUserInfo{}}
	obj.setDefault()
	return &obj
}

func (obj *serverUserInfo) Msg() *otg.ServerUserInfo {
	return obj.obj
}

func (obj *serverUserInfo) SetMsg(msg *otg.ServerUserInfo) ServerUserInfo {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *serverUserInfo) ToProto() (*otg.ServerUserInfo, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *serverUserInfo) FromProto(msg *otg.ServerUserInfo) (ServerUserInfo, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *serverUserInfo) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *serverUserInfo) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *serverUserInfo) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *serverUserInfo) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *serverUserInfo) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *serverUserInfo) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *serverUserInfo) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *serverUserInfo) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *serverUserInfo) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *serverUserInfo) Clone() (ServerUserInfo, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewServerUserInfo()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *serverUserInfo) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// ServerUserInfo is owner, the current owner, empty if not owned description, provided at the time ownership
type ServerUserInfo interface {
	Validation
	// Msg marshals ServerUserInfo to protobuf object *otg.ServerUserInfo
	// and doesn't set defaults
	Msg() *otg.ServerUserInfo
	// SetMsg unmarshals ServerUserInfo from protobuf object *otg.ServerUserInfo
	// and doesn't set defaults
	SetMsg(*otg.ServerUserInfo) ServerUserInfo
	// ToProto marshals ServerUserInfo to protobuf object *otg.ServerUserInfo
	ToProto() (*otg.ServerUserInfo, error)
	// ToPbText marshals ServerUserInfo to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ServerUserInfo to YAML text
	ToYaml() (string, error)
	// ToJson marshals ServerUserInfo to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ServerUserInfo from protobuf object *otg.ServerUserInfo
	FromProto(msg *otg.ServerUserInfo) (ServerUserInfo, error)
	// FromPbText unmarshals ServerUserInfo from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ServerUserInfo from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ServerUserInfo from JSON text
	FromJson(value string) error
	// Validate validates ServerUserInfo
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ServerUserInfo, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Owner returns string, set in ServerUserInfo.
	Owner() string
	// SetOwner assigns string provided by user to ServerUserInfo
	SetOwner(value string) ServerUserInfo
	// HasOwner checks if Owner has been set in ServerUserInfo
	HasOwner() bool
	// Description returns string, set in ServerUserInfo.
	Description() string
	// SetDescription assigns string provided by user to ServerUserInfo
	SetDescription(value string) ServerUserInfo
	// HasDescription checks if Description has been set in ServerUserInfo
	HasDescription() bool
}

func (obj *serverUserInfo) populateXml(xObj *Argument) error {

	if obj.HasOwner() {

		member := Member{
			Name:  "owner",
			Type:  "string",
			Value: obj.Owner(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasDescription() {

		member := Member{
			Name:  "description",
			Type:  "string",
			Value: obj.Description(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *serverUserInfo) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Owner returns a string
func (obj *serverUserInfo) Owner() string {

	return *obj.obj.Owner

}

// TBD
// Owner returns a string
func (obj *serverUserInfo) HasOwner() bool {
	return obj.obj.Owner != nil
}

// TBD
// SetOwner sets the string value in the ServerUserInfo object
func (obj *serverUserInfo) SetOwner(value string) ServerUserInfo {

	obj.obj.Owner = &value
	return obj
}

// TBD
// Description returns a string
func (obj *serverUserInfo) Description() string {

	return *obj.obj.Description

}

// TBD
// Description returns a string
func (obj *serverUserInfo) HasDescription() bool {
	return obj.obj.Description != nil
}

// TBD
// SetDescription sets the string value in the ServerUserInfo object
func (obj *serverUserInfo) SetDescription(value string) ServerUserInfo {

	obj.obj.Description = &value
	return obj
}

func (obj *serverUserInfo) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *serverUserInfo) setDefault() {

}

// ***** IdTypePortIdList *****
type idTypePortIdList struct {
	validation
	obj              *otg.IdTypePortIdList
	portIdListHolder IdTypePortIdListIdTypePortIdIter
}

func NewIdTypePortIdList() IdTypePortIdList {
	obj := idTypePortIdList{obj: &otg.IdTypePortIdList{}}
	obj.setDefault()
	return &obj
}

func (obj *idTypePortIdList) Msg() *otg.IdTypePortIdList {
	return obj.obj
}

func (obj *idTypePortIdList) SetMsg(msg *otg.IdTypePortIdList) IdTypePortIdList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *idTypePortIdList) ToProto() (*otg.IdTypePortIdList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *idTypePortIdList) FromProto(msg *otg.IdTypePortIdList) (IdTypePortIdList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *idTypePortIdList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *idTypePortIdList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *idTypePortIdList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *idTypePortIdList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *idTypePortIdList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *idTypePortIdList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *idTypePortIdList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *idTypePortIdList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *idTypePortIdList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *idTypePortIdList) Clone() (IdTypePortIdList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewIdTypePortIdList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *idTypePortIdList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *idTypePortIdList) setNil() {
	obj.portIdListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// IdTypePortIdList is tBD
type IdTypePortIdList interface {
	Validation
	// Msg marshals IdTypePortIdList to protobuf object *otg.IdTypePortIdList
	// and doesn't set defaults
	Msg() *otg.IdTypePortIdList
	// SetMsg unmarshals IdTypePortIdList from protobuf object *otg.IdTypePortIdList
	// and doesn't set defaults
	SetMsg(*otg.IdTypePortIdList) IdTypePortIdList
	// ToProto marshals IdTypePortIdList to protobuf object *otg.IdTypePortIdList
	ToProto() (*otg.IdTypePortIdList, error)
	// ToPbText marshals IdTypePortIdList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals IdTypePortIdList to YAML text
	ToYaml() (string, error)
	// ToJson marshals IdTypePortIdList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals IdTypePortIdList from protobuf object *otg.IdTypePortIdList
	FromProto(msg *otg.IdTypePortIdList) (IdTypePortIdList, error)
	// FromPbText unmarshals IdTypePortIdList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals IdTypePortIdList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals IdTypePortIdList from JSON text
	FromJson(value string) error
	// Validate validates IdTypePortIdList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (IdTypePortIdList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// PortIdList returns IdTypePortIdListIdTypePortIdIterIter, set in IdTypePortIdList
	PortIdList() IdTypePortIdListIdTypePortIdIter
	setNil()
}

func (obj *idTypePortIdList) populateXml(xObj *Argument) error {

	if len(obj.PortIdList().Items()) != 0 {
		for _, item := range obj.PortIdList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *idTypePortIdList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PortIdList returns a []IdTypePortId
func (obj *idTypePortIdList) PortIdList() IdTypePortIdListIdTypePortIdIter {
	if len(obj.obj.PortIdList) == 0 {
		obj.obj.PortIdList = []*otg.IdTypePortId{}
	}
	if obj.portIdListHolder == nil {
		obj.portIdListHolder = newIdTypePortIdListIdTypePortIdIter(&obj.obj.PortIdList).setMsg(obj)
	}
	return obj.portIdListHolder
}

type idTypePortIdListIdTypePortIdIter struct {
	obj               *idTypePortIdList
	idTypePortIdSlice []IdTypePortId
	fieldPtr          *[]*otg.IdTypePortId
}

func newIdTypePortIdListIdTypePortIdIter(ptr *[]*otg.IdTypePortId) IdTypePortIdListIdTypePortIdIter {
	return &idTypePortIdListIdTypePortIdIter{fieldPtr: ptr}
}

type IdTypePortIdListIdTypePortIdIter interface {
	setMsg(*idTypePortIdList) IdTypePortIdListIdTypePortIdIter
	Items() []IdTypePortId
	Add() IdTypePortId
	Append(items ...IdTypePortId) IdTypePortIdListIdTypePortIdIter
	Set(index int, newObj IdTypePortId) IdTypePortIdListIdTypePortIdIter
	Clear() IdTypePortIdListIdTypePortIdIter
	clearHolderSlice() IdTypePortIdListIdTypePortIdIter
	appendHolderSlice(item IdTypePortId) IdTypePortIdListIdTypePortIdIter
}

func (obj *idTypePortIdListIdTypePortIdIter) setMsg(msg *idTypePortIdList) IdTypePortIdListIdTypePortIdIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&idTypePortId{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *idTypePortIdListIdTypePortIdIter) Items() []IdTypePortId {
	return obj.idTypePortIdSlice
}

func (obj *idTypePortIdListIdTypePortIdIter) Add() IdTypePortId {
	newObj := &otg.IdTypePortId{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &idTypePortId{obj: newObj}
	newLibObj.setDefault()
	obj.idTypePortIdSlice = append(obj.idTypePortIdSlice, newLibObj)
	return newLibObj
}

func (obj *idTypePortIdListIdTypePortIdIter) Append(items ...IdTypePortId) IdTypePortIdListIdTypePortIdIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.idTypePortIdSlice = append(obj.idTypePortIdSlice, item)
	}
	return obj
}

func (obj *idTypePortIdListIdTypePortIdIter) Set(index int, newObj IdTypePortId) IdTypePortIdListIdTypePortIdIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.idTypePortIdSlice[index] = newObj
	return obj
}
func (obj *idTypePortIdListIdTypePortIdIter) Clear() IdTypePortIdListIdTypePortIdIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.IdTypePortId{}
		obj.idTypePortIdSlice = []IdTypePortId{}
	}
	return obj
}
func (obj *idTypePortIdListIdTypePortIdIter) clearHolderSlice() IdTypePortIdListIdTypePortIdIter {
	if len(obj.idTypePortIdSlice) > 0 {
		obj.idTypePortIdSlice = []IdTypePortId{}
	}
	return obj
}
func (obj *idTypePortIdListIdTypePortIdIter) appendHolderSlice(item IdTypePortId) IdTypePortIdListIdTypePortIdIter {
	obj.idTypePortIdSlice = append(obj.idTypePortIdSlice, item)
	return obj
}

func (obj *idTypePortIdList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.PortIdList) != 0 {

		if set_default {
			obj.PortIdList().clearHolderSlice()
			for _, item := range obj.obj.PortIdList {
				obj.PortIdList().appendHolderSlice(&idTypePortId{obj: item})
			}
		}
		for _, item := range obj.PortIdList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *idTypePortIdList) setDefault() {

}

// ***** ServerEventSubscribeList *****
type serverEventSubscribeList struct {
	validation
	obj                      *otg.ServerEventSubscribeList
	eventSubscribeListHolder ServerEventSubscribeListServereEventIter
}

func NewServerEventSubscribeList() ServerEventSubscribeList {
	obj := serverEventSubscribeList{obj: &otg.ServerEventSubscribeList{}}
	obj.setDefault()
	return &obj
}

func (obj *serverEventSubscribeList) Msg() *otg.ServerEventSubscribeList {
	return obj.obj
}

func (obj *serverEventSubscribeList) SetMsg(msg *otg.ServerEventSubscribeList) ServerEventSubscribeList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *serverEventSubscribeList) ToProto() (*otg.ServerEventSubscribeList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *serverEventSubscribeList) FromProto(msg *otg.ServerEventSubscribeList) (ServerEventSubscribeList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *serverEventSubscribeList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *serverEventSubscribeList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *serverEventSubscribeList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *serverEventSubscribeList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *serverEventSubscribeList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *serverEventSubscribeList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *serverEventSubscribeList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *serverEventSubscribeList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *serverEventSubscribeList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *serverEventSubscribeList) Clone() (ServerEventSubscribeList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewServerEventSubscribeList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *serverEventSubscribeList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *serverEventSubscribeList) setNil() {
	obj.eventSubscribeListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ServerEventSubscribeList is tBD
type ServerEventSubscribeList interface {
	Validation
	// Msg marshals ServerEventSubscribeList to protobuf object *otg.ServerEventSubscribeList
	// and doesn't set defaults
	Msg() *otg.ServerEventSubscribeList
	// SetMsg unmarshals ServerEventSubscribeList from protobuf object *otg.ServerEventSubscribeList
	// and doesn't set defaults
	SetMsg(*otg.ServerEventSubscribeList) ServerEventSubscribeList
	// ToProto marshals ServerEventSubscribeList to protobuf object *otg.ServerEventSubscribeList
	ToProto() (*otg.ServerEventSubscribeList, error)
	// ToPbText marshals ServerEventSubscribeList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ServerEventSubscribeList to YAML text
	ToYaml() (string, error)
	// ToJson marshals ServerEventSubscribeList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ServerEventSubscribeList from protobuf object *otg.ServerEventSubscribeList
	FromProto(msg *otg.ServerEventSubscribeList) (ServerEventSubscribeList, error)
	// FromPbText unmarshals ServerEventSubscribeList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ServerEventSubscribeList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ServerEventSubscribeList from JSON text
	FromJson(value string) error
	// Validate validates ServerEventSubscribeList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ServerEventSubscribeList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// EventSubscribeList returns ServerEventSubscribeListServereEventIterIter, set in ServerEventSubscribeList
	EventSubscribeList() ServerEventSubscribeListServereEventIter
	setNil()
}

func (obj *serverEventSubscribeList) populateXml(xObj *Argument) error {

	if len(obj.EventSubscribeList().Items()) != 0 {
		for _, item := range obj.EventSubscribeList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *serverEventSubscribeList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// EventSubscribeList returns a []ServereEvent
func (obj *serverEventSubscribeList) EventSubscribeList() ServerEventSubscribeListServereEventIter {
	if len(obj.obj.EventSubscribeList) == 0 {
		obj.obj.EventSubscribeList = []*otg.ServereEvent{}
	}
	if obj.eventSubscribeListHolder == nil {
		obj.eventSubscribeListHolder = newServerEventSubscribeListServereEventIter(&obj.obj.EventSubscribeList).setMsg(obj)
	}
	return obj.eventSubscribeListHolder
}

type serverEventSubscribeListServereEventIter struct {
	obj               *serverEventSubscribeList
	servereEventSlice []ServereEvent
	fieldPtr          *[]*otg.ServereEvent
}

func newServerEventSubscribeListServereEventIter(ptr *[]*otg.ServereEvent) ServerEventSubscribeListServereEventIter {
	return &serverEventSubscribeListServereEventIter{fieldPtr: ptr}
}

type ServerEventSubscribeListServereEventIter interface {
	setMsg(*serverEventSubscribeList) ServerEventSubscribeListServereEventIter
	Items() []ServereEvent
	Add() ServereEvent
	Append(items ...ServereEvent) ServerEventSubscribeListServereEventIter
	Set(index int, newObj ServereEvent) ServerEventSubscribeListServereEventIter
	Clear() ServerEventSubscribeListServereEventIter
	clearHolderSlice() ServerEventSubscribeListServereEventIter
	appendHolderSlice(item ServereEvent) ServerEventSubscribeListServereEventIter
}

func (obj *serverEventSubscribeListServereEventIter) setMsg(msg *serverEventSubscribeList) ServerEventSubscribeListServereEventIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&servereEvent{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *serverEventSubscribeListServereEventIter) Items() []ServereEvent {
	return obj.servereEventSlice
}

func (obj *serverEventSubscribeListServereEventIter) Add() ServereEvent {
	newObj := &otg.ServereEvent{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &servereEvent{obj: newObj}
	newLibObj.setDefault()
	obj.servereEventSlice = append(obj.servereEventSlice, newLibObj)
	return newLibObj
}

func (obj *serverEventSubscribeListServereEventIter) Append(items ...ServereEvent) ServerEventSubscribeListServereEventIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.servereEventSlice = append(obj.servereEventSlice, item)
	}
	return obj
}

func (obj *serverEventSubscribeListServereEventIter) Set(index int, newObj ServereEvent) ServerEventSubscribeListServereEventIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.servereEventSlice[index] = newObj
	return obj
}
func (obj *serverEventSubscribeListServereEventIter) Clear() ServerEventSubscribeListServereEventIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.ServereEvent{}
		obj.servereEventSlice = []ServereEvent{}
	}
	return obj
}
func (obj *serverEventSubscribeListServereEventIter) clearHolderSlice() ServerEventSubscribeListServereEventIter {
	if len(obj.servereEventSlice) > 0 {
		obj.servereEventSlice = []ServereEvent{}
	}
	return obj
}
func (obj *serverEventSubscribeListServereEventIter) appendHolderSlice(item ServereEvent) ServerEventSubscribeListServereEventIter {
	obj.servereEventSlice = append(obj.servereEventSlice, item)
	return obj
}

func (obj *serverEventSubscribeList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.EventSubscribeList) != 0 {

		if set_default {
			obj.EventSubscribeList().clearHolderSlice()
			for _, item := range obj.obj.EventSubscribeList {
				obj.EventSubscribeList().appendHolderSlice(&servereEvent{obj: item})
			}
		}
		for _, item := range obj.EventSubscribeList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *serverEventSubscribeList) setDefault() {

}

// ***** IdTypePortId *****
type idTypePortId struct {
	validation
	obj *otg.IdTypePortId
}

func NewIdTypePortId() IdTypePortId {
	obj := idTypePortId{obj: &otg.IdTypePortId{}}
	obj.setDefault()
	return &obj
}

func (obj *idTypePortId) Msg() *otg.IdTypePortId {
	return obj.obj
}

func (obj *idTypePortId) SetMsg(msg *otg.IdTypePortId) IdTypePortId {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *idTypePortId) ToProto() (*otg.IdTypePortId, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *idTypePortId) FromProto(msg *otg.IdTypePortId) (IdTypePortId, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *idTypePortId) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *idTypePortId) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *idTypePortId) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *idTypePortId) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *idTypePortId) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *idTypePortId) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *idTypePortId) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *idTypePortId) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *idTypePortId) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *idTypePortId) Clone() (IdTypePortId, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewIdTypePortId()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *idTypePortId) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// IdTypePortId is tBD
type IdTypePortId interface {
	Validation
	// Msg marshals IdTypePortId to protobuf object *otg.IdTypePortId
	// and doesn't set defaults
	Msg() *otg.IdTypePortId
	// SetMsg unmarshals IdTypePortId from protobuf object *otg.IdTypePortId
	// and doesn't set defaults
	SetMsg(*otg.IdTypePortId) IdTypePortId
	// ToProto marshals IdTypePortId to protobuf object *otg.IdTypePortId
	ToProto() (*otg.IdTypePortId, error)
	// ToPbText marshals IdTypePortId to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals IdTypePortId to YAML text
	ToYaml() (string, error)
	// ToJson marshals IdTypePortId to JSON text
	ToJson() (string, error)
	// FromProto unmarshals IdTypePortId from protobuf object *otg.IdTypePortId
	FromProto(msg *otg.IdTypePortId) (IdTypePortId, error)
	// FromPbText unmarshals IdTypePortId from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals IdTypePortId from YAML text
	FromYaml(value string) error
	// FromJson unmarshals IdTypePortId from JSON text
	FromJson(value string) error
	// Validate validates IdTypePortId
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (IdTypePortId, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Id returns int32, set in IdTypePortId.
	Id() int32
	// SetId assigns int32 provided by user to IdTypePortId
	SetId(value int32) IdTypePortId
	// HasId checks if Id has been set in IdTypePortId
	HasId() bool
}

func (obj *idTypePortId) populateXml(xObj *Argument) error {

	if obj.HasId() {

		member := Member{
			Name:  "id",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Id()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *idTypePortId) populateFromXml(xObj *RetVal) error {

	return nil
}

// The PortId is only locally unique and identifies the test   port within this test application. The first test port   controlled by the test application would have PortId 0,   and the second test port would have PortId 1.   The number of test ports available in this test application is   advertised in PORTCOUNT.
// Id returns a int32
func (obj *idTypePortId) Id() int32 {

	return *obj.obj.Id

}

// The PortId is only locally unique and identifies the test   port within this test application. The first test port   controlled by the test application would have PortId 0,   and the second test port would have PortId 1.   The number of test ports available in this test application is   advertised in PORTCOUNT.
// Id returns a int32
func (obj *idTypePortId) HasId() bool {
	return obj.obj.Id != nil
}

// The PortId is only locally unique and identifies the test   port within this test application. The first test port   controlled by the test application would have PortId 0,   and the second test port would have PortId 1.   The number of test ports available in this test application is   advertised in PORTCOUNT.
// SetId sets the int32 value in the IdTypePortId object
func (obj *idTypePortId) SetId(value int32) IdTypePortId {

	obj.obj.Id = &value
	return obj
}

func (obj *idTypePortId) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *idTypePortId) setDefault() {

}

// ***** PortPortConfigurationType *****
type portPortConfigurationType struct {
	validation
	obj                           *otg.PortPortConfigurationType
	basicConfigurationHolder      PortBasicConfigurationType
	transmitConfigurationHolder   PortTransmitConfigurationType
	receiveConfigurationHolder    PortReceiveConfigurationType
	pauseConfigurationHolder      PortPauseConfigurationType
	ethernetConfigurationHolder   PortEthernetConfigurationType
	dataCenterConfigurationHolder PortDataCenterConfigurationType
	pfcConfigurationHolder        PortPfcConfigurationType
	txLaneConfigurationHolder     PortTxLaneConfigurationType
}

func NewPortPortConfigurationType() PortPortConfigurationType {
	obj := portPortConfigurationType{obj: &otg.PortPortConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *portPortConfigurationType) Msg() *otg.PortPortConfigurationType {
	return obj.obj
}

func (obj *portPortConfigurationType) SetMsg(msg *otg.PortPortConfigurationType) PortPortConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *portPortConfigurationType) ToProto() (*otg.PortPortConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *portPortConfigurationType) FromProto(msg *otg.PortPortConfigurationType) (PortPortConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *portPortConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *portPortConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portPortConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portPortConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *portPortConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portPortConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *portPortConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *portPortConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *portPortConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *portPortConfigurationType) Clone() (PortPortConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPortPortConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *portPortConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *portPortConfigurationType) setNil() {
	obj.basicConfigurationHolder = nil
	obj.transmitConfigurationHolder = nil
	obj.receiveConfigurationHolder = nil
	obj.pauseConfigurationHolder = nil
	obj.ethernetConfigurationHolder = nil
	obj.dataCenterConfigurationHolder = nil
	obj.pfcConfigurationHolder = nil
	obj.txLaneConfigurationHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// PortPortConfigurationType is tBD
type PortPortConfigurationType interface {
	Validation
	// Msg marshals PortPortConfigurationType to protobuf object *otg.PortPortConfigurationType
	// and doesn't set defaults
	Msg() *otg.PortPortConfigurationType
	// SetMsg unmarshals PortPortConfigurationType from protobuf object *otg.PortPortConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.PortPortConfigurationType) PortPortConfigurationType
	// ToProto marshals PortPortConfigurationType to protobuf object *otg.PortPortConfigurationType
	ToProto() (*otg.PortPortConfigurationType, error)
	// ToPbText marshals PortPortConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PortPortConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PortPortConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PortPortConfigurationType from protobuf object *otg.PortPortConfigurationType
	FromProto(msg *otg.PortPortConfigurationType) (PortPortConfigurationType, error)
	// FromPbText unmarshals PortPortConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PortPortConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PortPortConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates PortPortConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PortPortConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// BasicConfiguration returns PortBasicConfigurationType, set in PortPortConfigurationType.
	// PortBasicConfigurationType is tBD
	BasicConfiguration() PortBasicConfigurationType
	// SetBasicConfiguration assigns PortBasicConfigurationType provided by user to PortPortConfigurationType.
	// PortBasicConfigurationType is tBD
	SetBasicConfiguration(value PortBasicConfigurationType) PortPortConfigurationType
	// HasBasicConfiguration checks if BasicConfiguration has been set in PortPortConfigurationType
	HasBasicConfiguration() bool
	// TransmitConfiguration returns PortTransmitConfigurationType, set in PortPortConfigurationType.
	// PortTransmitConfigurationType is tBD
	TransmitConfiguration() PortTransmitConfigurationType
	// SetTransmitConfiguration assigns PortTransmitConfigurationType provided by user to PortPortConfigurationType.
	// PortTransmitConfigurationType is tBD
	SetTransmitConfiguration(value PortTransmitConfigurationType) PortPortConfigurationType
	// HasTransmitConfiguration checks if TransmitConfiguration has been set in PortPortConfigurationType
	HasTransmitConfiguration() bool
	// ReceiveConfiguration returns PortReceiveConfigurationType, set in PortPortConfigurationType.
	// PortReceiveConfigurationType is tBD
	ReceiveConfiguration() PortReceiveConfigurationType
	// SetReceiveConfiguration assigns PortReceiveConfigurationType provided by user to PortPortConfigurationType.
	// PortReceiveConfigurationType is tBD
	SetReceiveConfiguration(value PortReceiveConfigurationType) PortPortConfigurationType
	// HasReceiveConfiguration checks if ReceiveConfiguration has been set in PortPortConfigurationType
	HasReceiveConfiguration() bool
	// PauseConfiguration returns PortPauseConfigurationType, set in PortPortConfigurationType.
	// PortPauseConfigurationType is tBD
	PauseConfiguration() PortPauseConfigurationType
	// SetPauseConfiguration assigns PortPauseConfigurationType provided by user to PortPortConfigurationType.
	// PortPauseConfigurationType is tBD
	SetPauseConfiguration(value PortPauseConfigurationType) PortPortConfigurationType
	// HasPauseConfiguration checks if PauseConfiguration has been set in PortPortConfigurationType
	HasPauseConfiguration() bool
	// EthernetConfiguration returns PortEthernetConfigurationType, set in PortPortConfigurationType.
	// PortEthernetConfigurationType is tBD
	EthernetConfiguration() PortEthernetConfigurationType
	// SetEthernetConfiguration assigns PortEthernetConfigurationType provided by user to PortPortConfigurationType.
	// PortEthernetConfigurationType is tBD
	SetEthernetConfiguration(value PortEthernetConfigurationType) PortPortConfigurationType
	// HasEthernetConfiguration checks if EthernetConfiguration has been set in PortPortConfigurationType
	HasEthernetConfiguration() bool
	// DataCenterConfiguration returns PortDataCenterConfigurationType, set in PortPortConfigurationType.
	// PortDataCenterConfigurationType is tBD
	DataCenterConfiguration() PortDataCenterConfigurationType
	// SetDataCenterConfiguration assigns PortDataCenterConfigurationType provided by user to PortPortConfigurationType.
	// PortDataCenterConfigurationType is tBD
	SetDataCenterConfiguration(value PortDataCenterConfigurationType) PortPortConfigurationType
	// HasDataCenterConfiguration checks if DataCenterConfiguration has been set in PortPortConfigurationType
	HasDataCenterConfiguration() bool
	// PfcConfiguration returns PortPfcConfigurationType, set in PortPortConfigurationType.
	// PortPfcConfigurationType is tBD
	PfcConfiguration() PortPfcConfigurationType
	// SetPfcConfiguration assigns PortPfcConfigurationType provided by user to PortPortConfigurationType.
	// PortPfcConfigurationType is tBD
	SetPfcConfiguration(value PortPfcConfigurationType) PortPortConfigurationType
	// HasPfcConfiguration checks if PfcConfiguration has been set in PortPortConfigurationType
	HasPfcConfiguration() bool
	// TxLaneConfiguration returns PortTxLaneConfigurationType, set in PortPortConfigurationType.
	// PortTxLaneConfigurationType is tBD
	TxLaneConfiguration() PortTxLaneConfigurationType
	// SetTxLaneConfiguration assigns PortTxLaneConfigurationType provided by user to PortPortConfigurationType.
	// PortTxLaneConfigurationType is tBD
	SetTxLaneConfiguration(value PortTxLaneConfigurationType) PortPortConfigurationType
	// HasTxLaneConfiguration checks if TxLaneConfiguration has been set in PortPortConfigurationType
	HasTxLaneConfiguration() bool
	setNil()
}

func (obj *portPortConfigurationType) populateXml(xObj *Argument) error {

	return nil
}

func (obj *portPortConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// BasicConfiguration returns a PortBasicConfigurationType
func (obj *portPortConfigurationType) BasicConfiguration() PortBasicConfigurationType {
	if obj.obj.BasicConfiguration == nil {
		obj.obj.BasicConfiguration = NewPortBasicConfigurationType().Msg()
	}
	if obj.basicConfigurationHolder == nil {
		obj.basicConfigurationHolder = &portBasicConfigurationType{obj: obj.obj.BasicConfiguration}
	}
	return obj.basicConfigurationHolder
}

// TBD
// BasicConfiguration returns a PortBasicConfigurationType
func (obj *portPortConfigurationType) HasBasicConfiguration() bool {
	return obj.obj.BasicConfiguration != nil
}

// TBD
// SetBasicConfiguration sets the PortBasicConfigurationType value in the PortPortConfigurationType object
func (obj *portPortConfigurationType) SetBasicConfiguration(value PortBasicConfigurationType) PortPortConfigurationType {

	obj.basicConfigurationHolder = nil
	obj.obj.BasicConfiguration = value.Msg()

	return obj
}

// TBD
// TransmitConfiguration returns a PortTransmitConfigurationType
func (obj *portPortConfigurationType) TransmitConfiguration() PortTransmitConfigurationType {
	if obj.obj.TransmitConfiguration == nil {
		obj.obj.TransmitConfiguration = NewPortTransmitConfigurationType().Msg()
	}
	if obj.transmitConfigurationHolder == nil {
		obj.transmitConfigurationHolder = &portTransmitConfigurationType{obj: obj.obj.TransmitConfiguration}
	}
	return obj.transmitConfigurationHolder
}

// TBD
// TransmitConfiguration returns a PortTransmitConfigurationType
func (obj *portPortConfigurationType) HasTransmitConfiguration() bool {
	return obj.obj.TransmitConfiguration != nil
}

// TBD
// SetTransmitConfiguration sets the PortTransmitConfigurationType value in the PortPortConfigurationType object
func (obj *portPortConfigurationType) SetTransmitConfiguration(value PortTransmitConfigurationType) PortPortConfigurationType {

	obj.transmitConfigurationHolder = nil
	obj.obj.TransmitConfiguration = value.Msg()

	return obj
}

// TBD
// ReceiveConfiguration returns a PortReceiveConfigurationType
func (obj *portPortConfigurationType) ReceiveConfiguration() PortReceiveConfigurationType {
	if obj.obj.ReceiveConfiguration == nil {
		obj.obj.ReceiveConfiguration = NewPortReceiveConfigurationType().Msg()
	}
	if obj.receiveConfigurationHolder == nil {
		obj.receiveConfigurationHolder = &portReceiveConfigurationType{obj: obj.obj.ReceiveConfiguration}
	}
	return obj.receiveConfigurationHolder
}

// TBD
// ReceiveConfiguration returns a PortReceiveConfigurationType
func (obj *portPortConfigurationType) HasReceiveConfiguration() bool {
	return obj.obj.ReceiveConfiguration != nil
}

// TBD
// SetReceiveConfiguration sets the PortReceiveConfigurationType value in the PortPortConfigurationType object
func (obj *portPortConfigurationType) SetReceiveConfiguration(value PortReceiveConfigurationType) PortPortConfigurationType {

	obj.receiveConfigurationHolder = nil
	obj.obj.ReceiveConfiguration = value.Msg()

	return obj
}

// TBD
// PauseConfiguration returns a PortPauseConfigurationType
func (obj *portPortConfigurationType) PauseConfiguration() PortPauseConfigurationType {
	if obj.obj.PauseConfiguration == nil {
		obj.obj.PauseConfiguration = NewPortPauseConfigurationType().Msg()
	}
	if obj.pauseConfigurationHolder == nil {
		obj.pauseConfigurationHolder = &portPauseConfigurationType{obj: obj.obj.PauseConfiguration}
	}
	return obj.pauseConfigurationHolder
}

// TBD
// PauseConfiguration returns a PortPauseConfigurationType
func (obj *portPortConfigurationType) HasPauseConfiguration() bool {
	return obj.obj.PauseConfiguration != nil
}

// TBD
// SetPauseConfiguration sets the PortPauseConfigurationType value in the PortPortConfigurationType object
func (obj *portPortConfigurationType) SetPauseConfiguration(value PortPauseConfigurationType) PortPortConfigurationType {

	obj.pauseConfigurationHolder = nil
	obj.obj.PauseConfiguration = value.Msg()

	return obj
}

// TBD
// EthernetConfiguration returns a PortEthernetConfigurationType
func (obj *portPortConfigurationType) EthernetConfiguration() PortEthernetConfigurationType {
	if obj.obj.EthernetConfiguration == nil {
		obj.obj.EthernetConfiguration = NewPortEthernetConfigurationType().Msg()
	}
	if obj.ethernetConfigurationHolder == nil {
		obj.ethernetConfigurationHolder = &portEthernetConfigurationType{obj: obj.obj.EthernetConfiguration}
	}
	return obj.ethernetConfigurationHolder
}

// TBD
// EthernetConfiguration returns a PortEthernetConfigurationType
func (obj *portPortConfigurationType) HasEthernetConfiguration() bool {
	return obj.obj.EthernetConfiguration != nil
}

// TBD
// SetEthernetConfiguration sets the PortEthernetConfigurationType value in the PortPortConfigurationType object
func (obj *portPortConfigurationType) SetEthernetConfiguration(value PortEthernetConfigurationType) PortPortConfigurationType {

	obj.ethernetConfigurationHolder = nil
	obj.obj.EthernetConfiguration = value.Msg()

	return obj
}

// TBD
// DataCenterConfiguration returns a PortDataCenterConfigurationType
func (obj *portPortConfigurationType) DataCenterConfiguration() PortDataCenterConfigurationType {
	if obj.obj.DataCenterConfiguration == nil {
		obj.obj.DataCenterConfiguration = NewPortDataCenterConfigurationType().Msg()
	}
	if obj.dataCenterConfigurationHolder == nil {
		obj.dataCenterConfigurationHolder = &portDataCenterConfigurationType{obj: obj.obj.DataCenterConfiguration}
	}
	return obj.dataCenterConfigurationHolder
}

// TBD
// DataCenterConfiguration returns a PortDataCenterConfigurationType
func (obj *portPortConfigurationType) HasDataCenterConfiguration() bool {
	return obj.obj.DataCenterConfiguration != nil
}

// TBD
// SetDataCenterConfiguration sets the PortDataCenterConfigurationType value in the PortPortConfigurationType object
func (obj *portPortConfigurationType) SetDataCenterConfiguration(value PortDataCenterConfigurationType) PortPortConfigurationType {

	obj.dataCenterConfigurationHolder = nil
	obj.obj.DataCenterConfiguration = value.Msg()

	return obj
}

// TBD
// PfcConfiguration returns a PortPfcConfigurationType
func (obj *portPortConfigurationType) PfcConfiguration() PortPfcConfigurationType {
	if obj.obj.PfcConfiguration == nil {
		obj.obj.PfcConfiguration = NewPortPfcConfigurationType().Msg()
	}
	if obj.pfcConfigurationHolder == nil {
		obj.pfcConfigurationHolder = &portPfcConfigurationType{obj: obj.obj.PfcConfiguration}
	}
	return obj.pfcConfigurationHolder
}

// TBD
// PfcConfiguration returns a PortPfcConfigurationType
func (obj *portPortConfigurationType) HasPfcConfiguration() bool {
	return obj.obj.PfcConfiguration != nil
}

// TBD
// SetPfcConfiguration sets the PortPfcConfigurationType value in the PortPortConfigurationType object
func (obj *portPortConfigurationType) SetPfcConfiguration(value PortPfcConfigurationType) PortPortConfigurationType {

	obj.pfcConfigurationHolder = nil
	obj.obj.PfcConfiguration = value.Msg()

	return obj
}

// TBD
// TxLaneConfiguration returns a PortTxLaneConfigurationType
func (obj *portPortConfigurationType) TxLaneConfiguration() PortTxLaneConfigurationType {
	if obj.obj.TxLaneConfiguration == nil {
		obj.obj.TxLaneConfiguration = NewPortTxLaneConfigurationType().Msg()
	}
	if obj.txLaneConfigurationHolder == nil {
		obj.txLaneConfigurationHolder = &portTxLaneConfigurationType{obj: obj.obj.TxLaneConfiguration}
	}
	return obj.txLaneConfigurationHolder
}

// TBD
// TxLaneConfiguration returns a PortTxLaneConfigurationType
func (obj *portPortConfigurationType) HasTxLaneConfiguration() bool {
	return obj.obj.TxLaneConfiguration != nil
}

// TBD
// SetTxLaneConfiguration sets the PortTxLaneConfigurationType value in the PortPortConfigurationType object
func (obj *portPortConfigurationType) SetTxLaneConfiguration(value PortTxLaneConfigurationType) PortPortConfigurationType {

	obj.txLaneConfigurationHolder = nil
	obj.obj.TxLaneConfiguration = value.Msg()

	return obj
}

func (obj *portPortConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.BasicConfiguration != nil {

		obj.BasicConfiguration().validateObj(vObj, set_default)
	}

	if obj.obj.TransmitConfiguration != nil {

		obj.TransmitConfiguration().validateObj(vObj, set_default)
	}

	if obj.obj.ReceiveConfiguration != nil {

		obj.ReceiveConfiguration().validateObj(vObj, set_default)
	}

	if obj.obj.PauseConfiguration != nil {

		obj.PauseConfiguration().validateObj(vObj, set_default)
	}

	if obj.obj.EthernetConfiguration != nil {

		obj.EthernetConfiguration().validateObj(vObj, set_default)
	}

	if obj.obj.DataCenterConfiguration != nil {

		obj.DataCenterConfiguration().validateObj(vObj, set_default)
	}

	if obj.obj.PfcConfiguration != nil {

		obj.PfcConfiguration().validateObj(vObj, set_default)
	}

	if obj.obj.TxLaneConfiguration != nil {

		obj.TxLaneConfiguration().validateObj(vObj, set_default)
	}

}

func (obj *portPortConfigurationType) setDefault() {

}

// ***** PortPortConfigurationStreamsType *****
type portPortConfigurationStreamsType struct {
	validation
	obj                           *otg.PortPortConfigurationStreamsType
	dataCenterConfigurationHolder PortDataCenterConfigurationType
}

func NewPortPortConfigurationStreamsType() PortPortConfigurationStreamsType {
	obj := portPortConfigurationStreamsType{obj: &otg.PortPortConfigurationStreamsType{}}
	obj.setDefault()
	return &obj
}

func (obj *portPortConfigurationStreamsType) Msg() *otg.PortPortConfigurationStreamsType {
	return obj.obj
}

func (obj *portPortConfigurationStreamsType) SetMsg(msg *otg.PortPortConfigurationStreamsType) PortPortConfigurationStreamsType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *portPortConfigurationStreamsType) ToProto() (*otg.PortPortConfigurationStreamsType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *portPortConfigurationStreamsType) FromProto(msg *otg.PortPortConfigurationStreamsType) (PortPortConfigurationStreamsType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *portPortConfigurationStreamsType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *portPortConfigurationStreamsType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portPortConfigurationStreamsType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portPortConfigurationStreamsType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *portPortConfigurationStreamsType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portPortConfigurationStreamsType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *portPortConfigurationStreamsType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *portPortConfigurationStreamsType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *portPortConfigurationStreamsType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *portPortConfigurationStreamsType) Clone() (PortPortConfigurationStreamsType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPortPortConfigurationStreamsType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *portPortConfigurationStreamsType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *portPortConfigurationStreamsType) setNil() {
	obj.dataCenterConfigurationHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// PortPortConfigurationStreamsType is tBD
type PortPortConfigurationStreamsType interface {
	Validation
	// Msg marshals PortPortConfigurationStreamsType to protobuf object *otg.PortPortConfigurationStreamsType
	// and doesn't set defaults
	Msg() *otg.PortPortConfigurationStreamsType
	// SetMsg unmarshals PortPortConfigurationStreamsType from protobuf object *otg.PortPortConfigurationStreamsType
	// and doesn't set defaults
	SetMsg(*otg.PortPortConfigurationStreamsType) PortPortConfigurationStreamsType
	// ToProto marshals PortPortConfigurationStreamsType to protobuf object *otg.PortPortConfigurationStreamsType
	ToProto() (*otg.PortPortConfigurationStreamsType, error)
	// ToPbText marshals PortPortConfigurationStreamsType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PortPortConfigurationStreamsType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PortPortConfigurationStreamsType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PortPortConfigurationStreamsType from protobuf object *otg.PortPortConfigurationStreamsType
	FromProto(msg *otg.PortPortConfigurationStreamsType) (PortPortConfigurationStreamsType, error)
	// FromPbText unmarshals PortPortConfigurationStreamsType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PortPortConfigurationStreamsType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PortPortConfigurationStreamsType from JSON text
	FromJson(value string) error
	// Validate validates PortPortConfigurationStreamsType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PortPortConfigurationStreamsType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// TransmitMode returns PortPortConfigurationStreamsTypeTransmitModeEnum, set in PortPortConfigurationStreamsType
	TransmitMode() PortPortConfigurationStreamsTypeTransmitModeEnum
	// SetTransmitMode assigns PortPortConfigurationStreamsTypeTransmitModeEnum provided by user to PortPortConfigurationStreamsType
	SetTransmitMode(value PortPortConfigurationStreamsTypeTransmitModeEnum) PortPortConfigurationStreamsType
	// HasTransmitMode checks if TransmitMode has been set in PortPortConfigurationStreamsType
	HasTransmitMode() bool
	// EnableRepeatableLastRandomPattern returns bool, set in PortPortConfigurationStreamsType.
	EnableRepeatableLastRandomPattern() bool
	// SetEnableRepeatableLastRandomPattern assigns bool provided by user to PortPortConfigurationStreamsType
	SetEnableRepeatableLastRandomPattern(value bool) PortPortConfigurationStreamsType
	// HasEnableRepeatableLastRandomPattern checks if EnableRepeatableLastRandomPattern has been set in PortPortConfigurationStreamsType
	HasEnableRepeatableLastRandomPattern() bool
	// InstrumentationMode returns PortPortConfigurationStreamsTypeInstrumentationModeEnum, set in PortPortConfigurationStreamsType
	InstrumentationMode() PortPortConfigurationStreamsTypeInstrumentationModeEnum
	// SetInstrumentationMode assigns PortPortConfigurationStreamsTypeInstrumentationModeEnum provided by user to PortPortConfigurationStreamsType
	SetInstrumentationMode(value PortPortConfigurationStreamsTypeInstrumentationModeEnum) PortPortConfigurationStreamsType
	// HasInstrumentationMode checks if InstrumentationMode has been set in PortPortConfigurationStreamsType
	HasInstrumentationMode() bool
	// DataCenterConfiguration returns PortDataCenterConfigurationType, set in PortPortConfigurationStreamsType.
	// PortDataCenterConfigurationType is tBD
	DataCenterConfiguration() PortDataCenterConfigurationType
	// SetDataCenterConfiguration assigns PortDataCenterConfigurationType provided by user to PortPortConfigurationStreamsType.
	// PortDataCenterConfigurationType is tBD
	SetDataCenterConfiguration(value PortDataCenterConfigurationType) PortPortConfigurationStreamsType
	// HasDataCenterConfiguration checks if DataCenterConfiguration has been set in PortPortConfigurationStreamsType
	HasDataCenterConfiguration() bool
	// LineSpeed returns int64, set in PortPortConfigurationStreamsType.
	LineSpeed() int64
	// SetLineSpeed assigns int64 provided by user to PortPortConfigurationStreamsType
	SetLineSpeed(value int64) PortPortConfigurationStreamsType
	// HasLineSpeed checks if LineSpeed has been set in PortPortConfigurationStreamsType
	HasLineSpeed() bool
	setNil()
}

func (obj *portPortConfigurationStreamsType) populateXml(xObj *Argument) error {

	if obj.HasTransmitMode() {

		member := Member{
			Name:  "transmitmode",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Port+eTxMode",
			Value: strconv.FormatInt(int64(obj.obj.TransmitMode.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableRepeatableLastRandomPattern() {
		var value string
		if obj.EnableRepeatableLastRandomPattern() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablerepeatablelastrandompattern",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasInstrumentationMode() {

		member := Member{
			Name:  "instrumentationmode",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Port+eInstrumentationMode",
			Value: strconv.FormatInt(int64(obj.obj.InstrumentationMode.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasLineSpeed() {

		member := Member{
			Name:  "linespeed",
			Type:  "int64",
			Value: strconv.FormatInt(obj.LineSpeed(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *portPortConfigurationStreamsType) populateFromXml(xObj *RetVal) error {

	return nil
}

type PortPortConfigurationStreamsTypeTransmitModeEnum string

// Enum of TransmitMode on PortPortConfigurationStreamsType
var PortPortConfigurationStreamsTypeTransmitMode = struct {
	KPACKETSTREAMS     PortPortConfigurationStreamsTypeTransmitModeEnum
	KPACKETFLOWS       PortPortConfigurationStreamsTypeTransmitModeEnum
	KADVANCEDSCHEDULER PortPortConfigurationStreamsTypeTransmitModeEnum
	KECHO              PortPortConfigurationStreamsTypeTransmitModeEnum
}{
	KPACKETSTREAMS:     PortPortConfigurationStreamsTypeTransmitModeEnum("kPacketStreams"),
	KPACKETFLOWS:       PortPortConfigurationStreamsTypeTransmitModeEnum("kPacketFlows"),
	KADVANCEDSCHEDULER: PortPortConfigurationStreamsTypeTransmitModeEnum("kAdvancedScheduler"),
	KECHO:              PortPortConfigurationStreamsTypeTransmitModeEnum("kEcho"),
}

func (obj *portPortConfigurationStreamsType) TransmitMode() PortPortConfigurationStreamsTypeTransmitModeEnum {
	return PortPortConfigurationStreamsTypeTransmitModeEnum(obj.obj.TransmitMode.Enum().String())
}

// TBD
// TransmitMode returns a string
func (obj *portPortConfigurationStreamsType) HasTransmitMode() bool {
	return obj.obj.TransmitMode != nil
}

func (obj *portPortConfigurationStreamsType) SetTransmitMode(value PortPortConfigurationStreamsTypeTransmitModeEnum) PortPortConfigurationStreamsType {
	intValue, ok := otg.PortPortConfigurationStreamsType_TransmitMode_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PortPortConfigurationStreamsTypeTransmitModeEnum", string(value)))
		return obj
	}
	enumValue := otg.PortPortConfigurationStreamsType_TransmitMode_Enum(intValue)
	obj.obj.TransmitMode = &enumValue

	return obj
}

// TBD
// EnableRepeatableLastRandomPattern returns a bool
func (obj *portPortConfigurationStreamsType) EnableRepeatableLastRandomPattern() bool {

	return *obj.obj.EnableRepeatableLastRandomPattern

}

// TBD
// EnableRepeatableLastRandomPattern returns a bool
func (obj *portPortConfigurationStreamsType) HasEnableRepeatableLastRandomPattern() bool {
	return obj.obj.EnableRepeatableLastRandomPattern != nil
}

// TBD
// SetEnableRepeatableLastRandomPattern sets the bool value in the PortPortConfigurationStreamsType object
func (obj *portPortConfigurationStreamsType) SetEnableRepeatableLastRandomPattern(value bool) PortPortConfigurationStreamsType {

	obj.obj.EnableRepeatableLastRandomPattern = &value
	return obj
}

type PortPortConfigurationStreamsTypeInstrumentationModeEnum string

// Enum of InstrumentationMode on PortPortConfigurationStreamsType
var PortPortConfigurationStreamsTypeInstrumentationMode = struct {
	KMODEENDOFFRAME PortPortConfigurationStreamsTypeInstrumentationModeEnum
	KMODEFLOATING   PortPortConfigurationStreamsTypeInstrumentationModeEnum
}{
	KMODEENDOFFRAME: PortPortConfigurationStreamsTypeInstrumentationModeEnum("kModeEndOfFrame"),
	KMODEFLOATING:   PortPortConfigurationStreamsTypeInstrumentationModeEnum("kModeFloating"),
}

func (obj *portPortConfigurationStreamsType) InstrumentationMode() PortPortConfigurationStreamsTypeInstrumentationModeEnum {
	return PortPortConfigurationStreamsTypeInstrumentationModeEnum(obj.obj.InstrumentationMode.Enum().String())
}

// TBD
// InstrumentationMode returns a string
func (obj *portPortConfigurationStreamsType) HasInstrumentationMode() bool {
	return obj.obj.InstrumentationMode != nil
}

func (obj *portPortConfigurationStreamsType) SetInstrumentationMode(value PortPortConfigurationStreamsTypeInstrumentationModeEnum) PortPortConfigurationStreamsType {
	intValue, ok := otg.PortPortConfigurationStreamsType_InstrumentationMode_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PortPortConfigurationStreamsTypeInstrumentationModeEnum", string(value)))
		return obj
	}
	enumValue := otg.PortPortConfigurationStreamsType_InstrumentationMode_Enum(intValue)
	obj.obj.InstrumentationMode = &enumValue

	return obj
}

// TBD
// DataCenterConfiguration returns a PortDataCenterConfigurationType
func (obj *portPortConfigurationStreamsType) DataCenterConfiguration() PortDataCenterConfigurationType {
	if obj.obj.DataCenterConfiguration == nil {
		obj.obj.DataCenterConfiguration = NewPortDataCenterConfigurationType().Msg()
	}
	if obj.dataCenterConfigurationHolder == nil {
		obj.dataCenterConfigurationHolder = &portDataCenterConfigurationType{obj: obj.obj.DataCenterConfiguration}
	}
	return obj.dataCenterConfigurationHolder
}

// TBD
// DataCenterConfiguration returns a PortDataCenterConfigurationType
func (obj *portPortConfigurationStreamsType) HasDataCenterConfiguration() bool {
	return obj.obj.DataCenterConfiguration != nil
}

// TBD
// SetDataCenterConfiguration sets the PortDataCenterConfigurationType value in the PortPortConfigurationStreamsType object
func (obj *portPortConfigurationStreamsType) SetDataCenterConfiguration(value PortDataCenterConfigurationType) PortPortConfigurationStreamsType {

	obj.dataCenterConfigurationHolder = nil
	obj.obj.DataCenterConfiguration = value.Msg()

	return obj
}

// IxOS port speed in bits.
// LineSpeed returns a int64
func (obj *portPortConfigurationStreamsType) LineSpeed() int64 {

	return *obj.obj.LineSpeed

}

// IxOS port speed in bits.
// LineSpeed returns a int64
func (obj *portPortConfigurationStreamsType) HasLineSpeed() bool {
	return obj.obj.LineSpeed != nil
}

// IxOS port speed in bits.
// SetLineSpeed sets the int64 value in the PortPortConfigurationStreamsType object
func (obj *portPortConfigurationStreamsType) SetLineSpeed(value int64) PortPortConfigurationStreamsType {

	obj.obj.LineSpeed = &value
	return obj
}

func (obj *portPortConfigurationStreamsType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.DataCenterConfiguration != nil {

		obj.DataCenterConfiguration().validateObj(vObj, set_default)
	}

}

func (obj *portPortConfigurationStreamsType) setDefault() {

}

// ***** CaptureConfigurationList *****
type captureConfigurationList struct {
	validation
	obj                     *otg.CaptureConfigurationList
	configurationListHolder CaptureConfigurationListCaptureConfigurationTypeIter
}

func NewCaptureConfigurationList() CaptureConfigurationList {
	obj := captureConfigurationList{obj: &otg.CaptureConfigurationList{}}
	obj.setDefault()
	return &obj
}

func (obj *captureConfigurationList) Msg() *otg.CaptureConfigurationList {
	return obj.obj
}

func (obj *captureConfigurationList) SetMsg(msg *otg.CaptureConfigurationList) CaptureConfigurationList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *captureConfigurationList) ToProto() (*otg.CaptureConfigurationList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *captureConfigurationList) FromProto(msg *otg.CaptureConfigurationList) (CaptureConfigurationList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *captureConfigurationList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *captureConfigurationList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureConfigurationList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureConfigurationList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *captureConfigurationList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureConfigurationList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *captureConfigurationList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *captureConfigurationList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *captureConfigurationList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *captureConfigurationList) Clone() (CaptureConfigurationList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewCaptureConfigurationList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *captureConfigurationList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *captureConfigurationList) setNil() {
	obj.configurationListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// CaptureConfigurationList is tBD
type CaptureConfigurationList interface {
	Validation
	// Msg marshals CaptureConfigurationList to protobuf object *otg.CaptureConfigurationList
	// and doesn't set defaults
	Msg() *otg.CaptureConfigurationList
	// SetMsg unmarshals CaptureConfigurationList from protobuf object *otg.CaptureConfigurationList
	// and doesn't set defaults
	SetMsg(*otg.CaptureConfigurationList) CaptureConfigurationList
	// ToProto marshals CaptureConfigurationList to protobuf object *otg.CaptureConfigurationList
	ToProto() (*otg.CaptureConfigurationList, error)
	// ToPbText marshals CaptureConfigurationList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals CaptureConfigurationList to YAML text
	ToYaml() (string, error)
	// ToJson marshals CaptureConfigurationList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals CaptureConfigurationList from protobuf object *otg.CaptureConfigurationList
	FromProto(msg *otg.CaptureConfigurationList) (CaptureConfigurationList, error)
	// FromPbText unmarshals CaptureConfigurationList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals CaptureConfigurationList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals CaptureConfigurationList from JSON text
	FromJson(value string) error
	// Validate validates CaptureConfigurationList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (CaptureConfigurationList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ConfigurationList returns CaptureConfigurationListCaptureConfigurationTypeIterIter, set in CaptureConfigurationList
	ConfigurationList() CaptureConfigurationListCaptureConfigurationTypeIter
	setNil()
}

func (obj *captureConfigurationList) populateXml(xObj *Argument) error {

	if len(obj.ConfigurationList().Items()) != 0 {
		for _, item := range obj.ConfigurationList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *captureConfigurationList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// ConfigurationList returns a []CaptureConfigurationType
func (obj *captureConfigurationList) ConfigurationList() CaptureConfigurationListCaptureConfigurationTypeIter {
	if len(obj.obj.ConfigurationList) == 0 {
		obj.obj.ConfigurationList = []*otg.CaptureConfigurationType{}
	}
	if obj.configurationListHolder == nil {
		obj.configurationListHolder = newCaptureConfigurationListCaptureConfigurationTypeIter(&obj.obj.ConfigurationList).setMsg(obj)
	}
	return obj.configurationListHolder
}

type captureConfigurationListCaptureConfigurationTypeIter struct {
	obj                           *captureConfigurationList
	captureConfigurationTypeSlice []CaptureConfigurationType
	fieldPtr                      *[]*otg.CaptureConfigurationType
}

func newCaptureConfigurationListCaptureConfigurationTypeIter(ptr *[]*otg.CaptureConfigurationType) CaptureConfigurationListCaptureConfigurationTypeIter {
	return &captureConfigurationListCaptureConfigurationTypeIter{fieldPtr: ptr}
}

type CaptureConfigurationListCaptureConfigurationTypeIter interface {
	setMsg(*captureConfigurationList) CaptureConfigurationListCaptureConfigurationTypeIter
	Items() []CaptureConfigurationType
	Add() CaptureConfigurationType
	Append(items ...CaptureConfigurationType) CaptureConfigurationListCaptureConfigurationTypeIter
	Set(index int, newObj CaptureConfigurationType) CaptureConfigurationListCaptureConfigurationTypeIter
	Clear() CaptureConfigurationListCaptureConfigurationTypeIter
	clearHolderSlice() CaptureConfigurationListCaptureConfigurationTypeIter
	appendHolderSlice(item CaptureConfigurationType) CaptureConfigurationListCaptureConfigurationTypeIter
}

func (obj *captureConfigurationListCaptureConfigurationTypeIter) setMsg(msg *captureConfigurationList) CaptureConfigurationListCaptureConfigurationTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&captureConfigurationType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *captureConfigurationListCaptureConfigurationTypeIter) Items() []CaptureConfigurationType {
	return obj.captureConfigurationTypeSlice
}

func (obj *captureConfigurationListCaptureConfigurationTypeIter) Add() CaptureConfigurationType {
	newObj := &otg.CaptureConfigurationType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &captureConfigurationType{obj: newObj}
	newLibObj.setDefault()
	obj.captureConfigurationTypeSlice = append(obj.captureConfigurationTypeSlice, newLibObj)
	return newLibObj
}

func (obj *captureConfigurationListCaptureConfigurationTypeIter) Append(items ...CaptureConfigurationType) CaptureConfigurationListCaptureConfigurationTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.captureConfigurationTypeSlice = append(obj.captureConfigurationTypeSlice, item)
	}
	return obj
}

func (obj *captureConfigurationListCaptureConfigurationTypeIter) Set(index int, newObj CaptureConfigurationType) CaptureConfigurationListCaptureConfigurationTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.captureConfigurationTypeSlice[index] = newObj
	return obj
}
func (obj *captureConfigurationListCaptureConfigurationTypeIter) Clear() CaptureConfigurationListCaptureConfigurationTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.CaptureConfigurationType{}
		obj.captureConfigurationTypeSlice = []CaptureConfigurationType{}
	}
	return obj
}
func (obj *captureConfigurationListCaptureConfigurationTypeIter) clearHolderSlice() CaptureConfigurationListCaptureConfigurationTypeIter {
	if len(obj.captureConfigurationTypeSlice) > 0 {
		obj.captureConfigurationTypeSlice = []CaptureConfigurationType{}
	}
	return obj
}
func (obj *captureConfigurationListCaptureConfigurationTypeIter) appendHolderSlice(item CaptureConfigurationType) CaptureConfigurationListCaptureConfigurationTypeIter {
	obj.captureConfigurationTypeSlice = append(obj.captureConfigurationTypeSlice, item)
	return obj
}

func (obj *captureConfigurationList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.ConfigurationList) != 0 {

		if set_default {
			obj.ConfigurationList().clearHolderSlice()
			for _, item := range obj.obj.ConfigurationList {
				obj.ConfigurationList().appendHolderSlice(&captureConfigurationType{obj: item})
			}
		}
		for _, item := range obj.ConfigurationList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *captureConfigurationList) setDefault() {

}

// ***** CaptureeDirection *****
type captureeDirection struct {
	validation
	obj *otg.CaptureeDirection
}

func NewCaptureeDirection() CaptureeDirection {
	obj := captureeDirection{obj: &otg.CaptureeDirection{}}
	obj.setDefault()
	return &obj
}

func (obj *captureeDirection) Msg() *otg.CaptureeDirection {
	return obj.obj
}

func (obj *captureeDirection) SetMsg(msg *otg.CaptureeDirection) CaptureeDirection {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *captureeDirection) ToProto() (*otg.CaptureeDirection, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *captureeDirection) FromProto(msg *otg.CaptureeDirection) (CaptureeDirection, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *captureeDirection) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *captureeDirection) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureeDirection) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureeDirection) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *captureeDirection) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureeDirection) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *captureeDirection) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *captureeDirection) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *captureeDirection) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *captureeDirection) Clone() (CaptureeDirection, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewCaptureeDirection()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *captureeDirection) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// CaptureeDirection is description is TBD
type CaptureeDirection interface {
	Validation
	// Msg marshals CaptureeDirection to protobuf object *otg.CaptureeDirection
	// and doesn't set defaults
	Msg() *otg.CaptureeDirection
	// SetMsg unmarshals CaptureeDirection from protobuf object *otg.CaptureeDirection
	// and doesn't set defaults
	SetMsg(*otg.CaptureeDirection) CaptureeDirection
	// ToProto marshals CaptureeDirection to protobuf object *otg.CaptureeDirection
	ToProto() (*otg.CaptureeDirection, error)
	// ToPbText marshals CaptureeDirection to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals CaptureeDirection to YAML text
	ToYaml() (string, error)
	// ToJson marshals CaptureeDirection to JSON text
	ToJson() (string, error)
	// FromProto unmarshals CaptureeDirection from protobuf object *otg.CaptureeDirection
	FromProto(msg *otg.CaptureeDirection) (CaptureeDirection, error)
	// FromPbText unmarshals CaptureeDirection from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals CaptureeDirection from YAML text
	FromYaml(value string) error
	// FromJson unmarshals CaptureeDirection from JSON text
	FromJson(value string) error
	// Validate validates CaptureeDirection
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (CaptureeDirection, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// EDirection returns CaptureeDirectionEDirectionEnum, set in CaptureeDirection
	EDirection() CaptureeDirectionEDirectionEnum
	// SetEDirection assigns CaptureeDirectionEDirectionEnum provided by user to CaptureeDirection
	SetEDirection(value CaptureeDirectionEDirectionEnum) CaptureeDirection
	// HasEDirection checks if EDirection has been set in CaptureeDirection
	HasEDirection() bool
}

func (obj *captureeDirection) populateXml(xObj *Argument) error {

	if obj.HasEDirection() {

		member := Member{
			Name:  "edirection",
			Type:  "None",
			Value: strconv.FormatInt(int64(obj.obj.EDirection.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *captureeDirection) populateFromXml(xObj *RetVal) error {

	return nil
}

type CaptureeDirectionEDirectionEnum string

// Enum of EDirection on CaptureeDirection
var CaptureeDirectionEDirection = struct {
	KRX            CaptureeDirectionEDirectionEnum
	KTX            CaptureeDirectionEDirectionEnum
	KBIDIRECTIONAL CaptureeDirectionEDirectionEnum
}{
	KRX:            CaptureeDirectionEDirectionEnum("kRx"),
	KTX:            CaptureeDirectionEDirectionEnum("kTx"),
	KBIDIRECTIONAL: CaptureeDirectionEDirectionEnum("kBidirectional"),
}

func (obj *captureeDirection) EDirection() CaptureeDirectionEDirectionEnum {
	return CaptureeDirectionEDirectionEnum(obj.obj.EDirection.Enum().String())
}

// description is TBD
// EDirection returns a string
func (obj *captureeDirection) HasEDirection() bool {
	return obj.obj.EDirection != nil
}

func (obj *captureeDirection) SetEDirection(value CaptureeDirectionEDirectionEnum) CaptureeDirection {
	intValue, ok := otg.CaptureeDirection_EDirection_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on CaptureeDirectionEDirectionEnum", string(value)))
		return obj
	}
	enumValue := otg.CaptureeDirection_EDirection_Enum(intValue)
	obj.obj.EDirection = &enumValue

	return obj
}

func (obj *captureeDirection) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *captureeDirection) setDefault() {

}

// ***** CaptureRetrieveOptionsType *****
type captureRetrieveOptionsType struct {
	validation
	obj *otg.CaptureRetrieveOptionsType
}

func NewCaptureRetrieveOptionsType() CaptureRetrieveOptionsType {
	obj := captureRetrieveOptionsType{obj: &otg.CaptureRetrieveOptionsType{}}
	obj.setDefault()
	return &obj
}

func (obj *captureRetrieveOptionsType) Msg() *otg.CaptureRetrieveOptionsType {
	return obj.obj
}

func (obj *captureRetrieveOptionsType) SetMsg(msg *otg.CaptureRetrieveOptionsType) CaptureRetrieveOptionsType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *captureRetrieveOptionsType) ToProto() (*otg.CaptureRetrieveOptionsType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *captureRetrieveOptionsType) FromProto(msg *otg.CaptureRetrieveOptionsType) (CaptureRetrieveOptionsType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *captureRetrieveOptionsType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *captureRetrieveOptionsType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureRetrieveOptionsType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureRetrieveOptionsType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *captureRetrieveOptionsType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureRetrieveOptionsType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *captureRetrieveOptionsType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *captureRetrieveOptionsType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *captureRetrieveOptionsType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *captureRetrieveOptionsType) Clone() (CaptureRetrieveOptionsType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewCaptureRetrieveOptionsType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *captureRetrieveOptionsType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// CaptureRetrieveOptionsType is tBD
type CaptureRetrieveOptionsType interface {
	Validation
	// Msg marshals CaptureRetrieveOptionsType to protobuf object *otg.CaptureRetrieveOptionsType
	// and doesn't set defaults
	Msg() *otg.CaptureRetrieveOptionsType
	// SetMsg unmarshals CaptureRetrieveOptionsType from protobuf object *otg.CaptureRetrieveOptionsType
	// and doesn't set defaults
	SetMsg(*otg.CaptureRetrieveOptionsType) CaptureRetrieveOptionsType
	// ToProto marshals CaptureRetrieveOptionsType to protobuf object *otg.CaptureRetrieveOptionsType
	ToProto() (*otg.CaptureRetrieveOptionsType, error)
	// ToPbText marshals CaptureRetrieveOptionsType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals CaptureRetrieveOptionsType to YAML text
	ToYaml() (string, error)
	// ToJson marshals CaptureRetrieveOptionsType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals CaptureRetrieveOptionsType from protobuf object *otg.CaptureRetrieveOptionsType
	FromProto(msg *otg.CaptureRetrieveOptionsType) (CaptureRetrieveOptionsType, error)
	// FromPbText unmarshals CaptureRetrieveOptionsType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals CaptureRetrieveOptionsType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals CaptureRetrieveOptionsType from JSON text
	FromJson(value string) error
	// Validate validates CaptureRetrieveOptionsType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (CaptureRetrieveOptionsType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// StartIndex returns int32, set in CaptureRetrieveOptionsType.
	StartIndex() int32
	// SetStartIndex assigns int32 provided by user to CaptureRetrieveOptionsType
	SetStartIndex(value int32) CaptureRetrieveOptionsType
	// HasStartIndex checks if StartIndex has been set in CaptureRetrieveOptionsType
	HasStartIndex() bool
	// NumPackets returns int32, set in CaptureRetrieveOptionsType.
	NumPackets() int32
	// SetNumPackets assigns int32 provided by user to CaptureRetrieveOptionsType
	SetNumPackets(value int32) CaptureRetrieveOptionsType
	// HasNumPackets checks if NumPackets has been set in CaptureRetrieveOptionsType
	HasNumPackets() bool
	// Direction returns CaptureRetrieveOptionsTypeDirectionEnum, set in CaptureRetrieveOptionsType
	Direction() CaptureRetrieveOptionsTypeDirectionEnum
	// SetDirection assigns CaptureRetrieveOptionsTypeDirectionEnum provided by user to CaptureRetrieveOptionsType
	SetDirection(value CaptureRetrieveOptionsTypeDirectionEnum) CaptureRetrieveOptionsType
	// HasDirection checks if Direction has been set in CaptureRetrieveOptionsType
	HasDirection() bool
	// Format returns CaptureRetrieveOptionsTypeFormatEnum, set in CaptureRetrieveOptionsType
	Format() CaptureRetrieveOptionsTypeFormatEnum
	// SetFormat assigns CaptureRetrieveOptionsTypeFormatEnum provided by user to CaptureRetrieveOptionsType
	SetFormat(value CaptureRetrieveOptionsTypeFormatEnum) CaptureRetrieveOptionsType
	// HasFormat checks if Format has been set in CaptureRetrieveOptionsType
	HasFormat() bool
	// Precision returns CaptureRetrieveOptionsTypePrecisionEnum, set in CaptureRetrieveOptionsType
	Precision() CaptureRetrieveOptionsTypePrecisionEnum
	// SetPrecision assigns CaptureRetrieveOptionsTypePrecisionEnum provided by user to CaptureRetrieveOptionsType
	SetPrecision(value CaptureRetrieveOptionsTypePrecisionEnum) CaptureRetrieveOptionsType
	// HasPrecision checks if Precision has been set in CaptureRetrieveOptionsType
	HasPrecision() bool
}

func (obj *captureRetrieveOptionsType) populateXml(xObj *Argument) error {

	if obj.HasStartIndex() {

		member := Member{
			Name:  "startindex",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.StartIndex()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasNumPackets() {

		member := Member{
			Name:  "numpackets",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.NumPackets()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasDirection() {

		member := Member{
			Name:  "direction",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Capture+eDirection",
			Value: strconv.FormatInt(int64(obj.obj.Direction.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasFormat() {

		member := Member{
			Name:  "format",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Capture+ePacketFormat",
			Value: strconv.FormatInt(int64(obj.obj.Format.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasPrecision() {

		member := Member{
			Name:  "precision",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Capture+eTimestampPrecision",
			Value: strconv.FormatInt(int64(obj.obj.Precision.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *captureRetrieveOptionsType) populateFromXml(xObj *RetVal) error {

	return nil
}

// Soecified the index of the first packet we want to retrieve.   Starts from 0 to total number of captured packets - 1.
// StartIndex returns a int32
func (obj *captureRetrieveOptionsType) StartIndex() int32 {

	return *obj.obj.StartIndex

}

// Soecified the index of the first packet we want to retrieve.   Starts from 0 to total number of captured packets - 1.
// StartIndex returns a int32
func (obj *captureRetrieveOptionsType) HasStartIndex() bool {
	return obj.obj.StartIndex != nil
}

// Soecified the index of the first packet we want to retrieve.   Starts from 0 to total number of captured packets - 1.
// SetStartIndex sets the int32 value in the CaptureRetrieveOptionsType object
func (obj *captureRetrieveOptionsType) SetStartIndex(value int32) CaptureRetrieveOptionsType {

	obj.obj.StartIndex = &value
	return obj
}

// The number of packets we want to retrieve starting from packet with   index startIndex.
// NumPackets returns a int32
func (obj *captureRetrieveOptionsType) NumPackets() int32 {

	return *obj.obj.NumPackets

}

// The number of packets we want to retrieve starting from packet with   index startIndex.
// NumPackets returns a int32
func (obj *captureRetrieveOptionsType) HasNumPackets() bool {
	return obj.obj.NumPackets != nil
}

// The number of packets we want to retrieve starting from packet with   index startIndex.
// SetNumPackets sets the int32 value in the CaptureRetrieveOptionsType object
func (obj *captureRetrieveOptionsType) SetNumPackets(value int32) CaptureRetrieveOptionsType {

	obj.obj.NumPackets = &value
	return obj
}

type CaptureRetrieveOptionsTypeDirectionEnum string

// Enum of Direction on CaptureRetrieveOptionsType
var CaptureRetrieveOptionsTypeDirection = struct {
	KRX            CaptureRetrieveOptionsTypeDirectionEnum
	KTX            CaptureRetrieveOptionsTypeDirectionEnum
	KBIDIRECTIONAL CaptureRetrieveOptionsTypeDirectionEnum
}{
	KRX:            CaptureRetrieveOptionsTypeDirectionEnum("kRx"),
	KTX:            CaptureRetrieveOptionsTypeDirectionEnum("kTx"),
	KBIDIRECTIONAL: CaptureRetrieveOptionsTypeDirectionEnum("kBidirectional"),
}

func (obj *captureRetrieveOptionsType) Direction() CaptureRetrieveOptionsTypeDirectionEnum {
	return CaptureRetrieveOptionsTypeDirectionEnum(obj.obj.Direction.Enum().String())
}

// Specify on which packets to retrieve: RX/TX or from RX-TX merged.
// Direction returns a string
func (obj *captureRetrieveOptionsType) HasDirection() bool {
	return obj.obj.Direction != nil
}

func (obj *captureRetrieveOptionsType) SetDirection(value CaptureRetrieveOptionsTypeDirectionEnum) CaptureRetrieveOptionsType {
	intValue, ok := otg.CaptureRetrieveOptionsType_Direction_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on CaptureRetrieveOptionsTypeDirectionEnum", string(value)))
		return obj
	}
	enumValue := otg.CaptureRetrieveOptionsType_Direction_Enum(intValue)
	obj.obj.Direction = &enumValue

	return obj
}

type CaptureRetrieveOptionsTypeFormatEnum string

// Enum of Format on CaptureRetrieveOptionsType
var CaptureRetrieveOptionsTypeFormat = struct {
	KRAW  CaptureRetrieveOptionsTypeFormatEnum
	KPCAP CaptureRetrieveOptionsTypeFormatEnum
}{
	KRAW:  CaptureRetrieveOptionsTypeFormatEnum("kRaw"),
	KPCAP: CaptureRetrieveOptionsTypeFormatEnum("kPcap"),
}

func (obj *captureRetrieveOptionsType) Format() CaptureRetrieveOptionsTypeFormatEnum {
	return CaptureRetrieveOptionsTypeFormatEnum(obj.obj.Format.Enum().String())
}

// The captured packets can be in either PCAP standard format or RAW format.
// Format returns a string
func (obj *captureRetrieveOptionsType) HasFormat() bool {
	return obj.obj.Format != nil
}

func (obj *captureRetrieveOptionsType) SetFormat(value CaptureRetrieveOptionsTypeFormatEnum) CaptureRetrieveOptionsType {
	intValue, ok := otg.CaptureRetrieveOptionsType_Format_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on CaptureRetrieveOptionsTypeFormatEnum", string(value)))
		return obj
	}
	enumValue := otg.CaptureRetrieveOptionsType_Format_Enum(intValue)
	obj.obj.Format = &enumValue

	return obj
}

type CaptureRetrieveOptionsTypePrecisionEnum string

// Enum of Precision on CaptureRetrieveOptionsType
var CaptureRetrieveOptionsTypePrecision = struct {
	KMICROSEC CaptureRetrieveOptionsTypePrecisionEnum
	KNANOSEC  CaptureRetrieveOptionsTypePrecisionEnum
}{
	KMICROSEC: CaptureRetrieveOptionsTypePrecisionEnum("kMicroSec"),
	KNANOSEC:  CaptureRetrieveOptionsTypePrecisionEnum("kNanoSec"),
}

func (obj *captureRetrieveOptionsType) Precision() CaptureRetrieveOptionsTypePrecisionEnum {
	return CaptureRetrieveOptionsTypePrecisionEnum(obj.obj.Precision.Enum().String())
}

// This option is only available for PCAP format. It reffers to the timestamp   precision: nanosecond or microsecond.
// Precision returns a string
func (obj *captureRetrieveOptionsType) HasPrecision() bool {
	return obj.obj.Precision != nil
}

func (obj *captureRetrieveOptionsType) SetPrecision(value CaptureRetrieveOptionsTypePrecisionEnum) CaptureRetrieveOptionsType {
	intValue, ok := otg.CaptureRetrieveOptionsType_Precision_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on CaptureRetrieveOptionsTypePrecisionEnum", string(value)))
		return obj
	}
	enumValue := otg.CaptureRetrieveOptionsType_Precision_Enum(intValue)
	obj.obj.Precision = &enumValue

	return obj
}

func (obj *captureRetrieveOptionsType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *captureRetrieveOptionsType) setDefault() {

}

// ***** PacketGroupPGIDRangeList *****
type packetGroupPGIDRangeList struct {
	validation
	obj                 *otg.PacketGroupPGIDRangeList
	pgidRangeListHolder PacketGroupPGIDRangeListPacketGroupPGIDRangeIter
}

func NewPacketGroupPGIDRangeList() PacketGroupPGIDRangeList {
	obj := packetGroupPGIDRangeList{obj: &otg.PacketGroupPGIDRangeList{}}
	obj.setDefault()
	return &obj
}

func (obj *packetGroupPGIDRangeList) Msg() *otg.PacketGroupPGIDRangeList {
	return obj.obj
}

func (obj *packetGroupPGIDRangeList) SetMsg(msg *otg.PacketGroupPGIDRangeList) PacketGroupPGIDRangeList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *packetGroupPGIDRangeList) ToProto() (*otg.PacketGroupPGIDRangeList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *packetGroupPGIDRangeList) FromProto(msg *otg.PacketGroupPGIDRangeList) (PacketGroupPGIDRangeList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *packetGroupPGIDRangeList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *packetGroupPGIDRangeList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *packetGroupPGIDRangeList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *packetGroupPGIDRangeList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *packetGroupPGIDRangeList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *packetGroupPGIDRangeList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *packetGroupPGIDRangeList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *packetGroupPGIDRangeList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *packetGroupPGIDRangeList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *packetGroupPGIDRangeList) Clone() (PacketGroupPGIDRangeList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPacketGroupPGIDRangeList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *packetGroupPGIDRangeList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *packetGroupPGIDRangeList) setNil() {
	obj.pgidRangeListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// PacketGroupPGIDRangeList is tBD
type PacketGroupPGIDRangeList interface {
	Validation
	// Msg marshals PacketGroupPGIDRangeList to protobuf object *otg.PacketGroupPGIDRangeList
	// and doesn't set defaults
	Msg() *otg.PacketGroupPGIDRangeList
	// SetMsg unmarshals PacketGroupPGIDRangeList from protobuf object *otg.PacketGroupPGIDRangeList
	// and doesn't set defaults
	SetMsg(*otg.PacketGroupPGIDRangeList) PacketGroupPGIDRangeList
	// ToProto marshals PacketGroupPGIDRangeList to protobuf object *otg.PacketGroupPGIDRangeList
	ToProto() (*otg.PacketGroupPGIDRangeList, error)
	// ToPbText marshals PacketGroupPGIDRangeList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PacketGroupPGIDRangeList to YAML text
	ToYaml() (string, error)
	// ToJson marshals PacketGroupPGIDRangeList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PacketGroupPGIDRangeList from protobuf object *otg.PacketGroupPGIDRangeList
	FromProto(msg *otg.PacketGroupPGIDRangeList) (PacketGroupPGIDRangeList, error)
	// FromPbText unmarshals PacketGroupPGIDRangeList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PacketGroupPGIDRangeList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PacketGroupPGIDRangeList from JSON text
	FromJson(value string) error
	// Validate validates PacketGroupPGIDRangeList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PacketGroupPGIDRangeList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// PgidRangeList returns PacketGroupPGIDRangeListPacketGroupPGIDRangeIterIter, set in PacketGroupPGIDRangeList
	PgidRangeList() PacketGroupPGIDRangeListPacketGroupPGIDRangeIter
	setNil()
}

func (obj *packetGroupPGIDRangeList) populateXml(xObj *Argument) error {

	if len(obj.PgidRangeList().Items()) != 0 {
		for _, item := range obj.PgidRangeList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *packetGroupPGIDRangeList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PgidRangeList returns a []PacketGroupPGIDRange
func (obj *packetGroupPGIDRangeList) PgidRangeList() PacketGroupPGIDRangeListPacketGroupPGIDRangeIter {
	if len(obj.obj.PgidRangeList) == 0 {
		obj.obj.PgidRangeList = []*otg.PacketGroupPGIDRange{}
	}
	if obj.pgidRangeListHolder == nil {
		obj.pgidRangeListHolder = newPacketGroupPGIDRangeListPacketGroupPGIDRangeIter(&obj.obj.PgidRangeList).setMsg(obj)
	}
	return obj.pgidRangeListHolder
}

type packetGroupPGIDRangeListPacketGroupPGIDRangeIter struct {
	obj                       *packetGroupPGIDRangeList
	packetGroupPGIDRangeSlice []PacketGroupPGIDRange
	fieldPtr                  *[]*otg.PacketGroupPGIDRange
}

func newPacketGroupPGIDRangeListPacketGroupPGIDRangeIter(ptr *[]*otg.PacketGroupPGIDRange) PacketGroupPGIDRangeListPacketGroupPGIDRangeIter {
	return &packetGroupPGIDRangeListPacketGroupPGIDRangeIter{fieldPtr: ptr}
}

type PacketGroupPGIDRangeListPacketGroupPGIDRangeIter interface {
	setMsg(*packetGroupPGIDRangeList) PacketGroupPGIDRangeListPacketGroupPGIDRangeIter
	Items() []PacketGroupPGIDRange
	Add() PacketGroupPGIDRange
	Append(items ...PacketGroupPGIDRange) PacketGroupPGIDRangeListPacketGroupPGIDRangeIter
	Set(index int, newObj PacketGroupPGIDRange) PacketGroupPGIDRangeListPacketGroupPGIDRangeIter
	Clear() PacketGroupPGIDRangeListPacketGroupPGIDRangeIter
	clearHolderSlice() PacketGroupPGIDRangeListPacketGroupPGIDRangeIter
	appendHolderSlice(item PacketGroupPGIDRange) PacketGroupPGIDRangeListPacketGroupPGIDRangeIter
}

func (obj *packetGroupPGIDRangeListPacketGroupPGIDRangeIter) setMsg(msg *packetGroupPGIDRangeList) PacketGroupPGIDRangeListPacketGroupPGIDRangeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&packetGroupPGIDRange{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *packetGroupPGIDRangeListPacketGroupPGIDRangeIter) Items() []PacketGroupPGIDRange {
	return obj.packetGroupPGIDRangeSlice
}

func (obj *packetGroupPGIDRangeListPacketGroupPGIDRangeIter) Add() PacketGroupPGIDRange {
	newObj := &otg.PacketGroupPGIDRange{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &packetGroupPGIDRange{obj: newObj}
	newLibObj.setDefault()
	obj.packetGroupPGIDRangeSlice = append(obj.packetGroupPGIDRangeSlice, newLibObj)
	return newLibObj
}

func (obj *packetGroupPGIDRangeListPacketGroupPGIDRangeIter) Append(items ...PacketGroupPGIDRange) PacketGroupPGIDRangeListPacketGroupPGIDRangeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.packetGroupPGIDRangeSlice = append(obj.packetGroupPGIDRangeSlice, item)
	}
	return obj
}

func (obj *packetGroupPGIDRangeListPacketGroupPGIDRangeIter) Set(index int, newObj PacketGroupPGIDRange) PacketGroupPGIDRangeListPacketGroupPGIDRangeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.packetGroupPGIDRangeSlice[index] = newObj
	return obj
}
func (obj *packetGroupPGIDRangeListPacketGroupPGIDRangeIter) Clear() PacketGroupPGIDRangeListPacketGroupPGIDRangeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.PacketGroupPGIDRange{}
		obj.packetGroupPGIDRangeSlice = []PacketGroupPGIDRange{}
	}
	return obj
}
func (obj *packetGroupPGIDRangeListPacketGroupPGIDRangeIter) clearHolderSlice() PacketGroupPGIDRangeListPacketGroupPGIDRangeIter {
	if len(obj.packetGroupPGIDRangeSlice) > 0 {
		obj.packetGroupPGIDRangeSlice = []PacketGroupPGIDRange{}
	}
	return obj
}
func (obj *packetGroupPGIDRangeListPacketGroupPGIDRangeIter) appendHolderSlice(item PacketGroupPGIDRange) PacketGroupPGIDRangeListPacketGroupPGIDRangeIter {
	obj.packetGroupPGIDRangeSlice = append(obj.packetGroupPGIDRangeSlice, item)
	return obj
}

func (obj *packetGroupPGIDRangeList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.PgidRangeList) != 0 {

		if set_default {
			obj.PgidRangeList().clearHolderSlice()
			for _, item := range obj.obj.PgidRangeList {
				obj.PgidRangeList().appendHolderSlice(&packetGroupPGIDRange{obj: item})
			}
		}
		for _, item := range obj.PgidRangeList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *packetGroupPGIDRangeList) setDefault() {

}

// ***** PortReceiveConfigurationType *****
type portReceiveConfigurationType struct {
	validation
	obj                                *otg.PortReceiveConfigurationType
	rxModeHolder                       PortRxModeSet
	txRxSyncIntervalHolder             PFTypeMilliSecondsType
	packetGroupConfigurationHolder     PacketGroupConfigurationType
	dataIntegrityRxConfigurationHolder DataIntegrityRxConfigurationType
	rxAutoInstrumentationHolder        RxAutoInstrumentationConfigurationType
	rateMonitoringConfigurationHolder  RateMonitoringRateMonitoringList
}

func NewPortReceiveConfigurationType() PortReceiveConfigurationType {
	obj := portReceiveConfigurationType{obj: &otg.PortReceiveConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *portReceiveConfigurationType) Msg() *otg.PortReceiveConfigurationType {
	return obj.obj
}

func (obj *portReceiveConfigurationType) SetMsg(msg *otg.PortReceiveConfigurationType) PortReceiveConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *portReceiveConfigurationType) ToProto() (*otg.PortReceiveConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *portReceiveConfigurationType) FromProto(msg *otg.PortReceiveConfigurationType) (PortReceiveConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *portReceiveConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *portReceiveConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portReceiveConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portReceiveConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *portReceiveConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portReceiveConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *portReceiveConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *portReceiveConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *portReceiveConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *portReceiveConfigurationType) Clone() (PortReceiveConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPortReceiveConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *portReceiveConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *portReceiveConfigurationType) setNil() {
	obj.rxModeHolder = nil
	obj.txRxSyncIntervalHolder = nil
	obj.packetGroupConfigurationHolder = nil
	obj.dataIntegrityRxConfigurationHolder = nil
	obj.rxAutoInstrumentationHolder = nil
	obj.rateMonitoringConfigurationHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// PortReceiveConfigurationType is tBD
type PortReceiveConfigurationType interface {
	Validation
	// Msg marshals PortReceiveConfigurationType to protobuf object *otg.PortReceiveConfigurationType
	// and doesn't set defaults
	Msg() *otg.PortReceiveConfigurationType
	// SetMsg unmarshals PortReceiveConfigurationType from protobuf object *otg.PortReceiveConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.PortReceiveConfigurationType) PortReceiveConfigurationType
	// ToProto marshals PortReceiveConfigurationType to protobuf object *otg.PortReceiveConfigurationType
	ToProto() (*otg.PortReceiveConfigurationType, error)
	// ToPbText marshals PortReceiveConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PortReceiveConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PortReceiveConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PortReceiveConfigurationType from protobuf object *otg.PortReceiveConfigurationType
	FromProto(msg *otg.PortReceiveConfigurationType) (PortReceiveConfigurationType, error)
	// FromPbText unmarshals PortReceiveConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PortReceiveConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PortReceiveConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates PortReceiveConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PortReceiveConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// RxMode returns PortRxModeSet, set in PortReceiveConfigurationType.
	// PortRxModeSet is tBD
	RxMode() PortRxModeSet
	// SetRxMode assigns PortRxModeSet provided by user to PortReceiveConfigurationType.
	// PortRxModeSet is tBD
	SetRxMode(value PortRxModeSet) PortReceiveConfigurationType
	// HasRxMode checks if RxMode has been set in PortReceiveConfigurationType
	HasRxMode() bool
	// EnableAutoDetectInstrumentation returns bool, set in PortReceiveConfigurationType.
	EnableAutoDetectInstrumentation() bool
	// SetEnableAutoDetectInstrumentation assigns bool provided by user to PortReceiveConfigurationType
	SetEnableAutoDetectInstrumentation(value bool) PortReceiveConfigurationType
	// HasEnableAutoDetectInstrumentation checks if EnableAutoDetectInstrumentation has been set in PortReceiveConfigurationType
	HasEnableAutoDetectInstrumentation() bool
	// EnableTxRxSync returns bool, set in PortReceiveConfigurationType.
	EnableTxRxSync() bool
	// SetEnableTxRxSync assigns bool provided by user to PortReceiveConfigurationType
	SetEnableTxRxSync(value bool) PortReceiveConfigurationType
	// HasEnableTxRxSync checks if EnableTxRxSync has been set in PortReceiveConfigurationType
	HasEnableTxRxSync() bool
	// TxRxSyncInterval returns PFTypeMilliSecondsType, set in PortReceiveConfigurationType.
	// PFTypeMilliSecondsType is model a duration in milliseconds using a plain integer. This allows signed durations up to 300000 years to expressed.
	TxRxSyncInterval() PFTypeMilliSecondsType
	// SetTxRxSyncInterval assigns PFTypeMilliSecondsType provided by user to PortReceiveConfigurationType.
	// PFTypeMilliSecondsType is model a duration in milliseconds using a plain integer. This allows signed durations up to 300000 years to expressed.
	SetTxRxSyncInterval(value PFTypeMilliSecondsType) PortReceiveConfigurationType
	// HasTxRxSyncInterval checks if TxRxSyncInterval has been set in PortReceiveConfigurationType
	HasTxRxSyncInterval() bool
	// PacketGroupConfiguration returns PacketGroupConfigurationType, set in PortReceiveConfigurationType.
	// PacketGroupConfigurationType is tBD
	PacketGroupConfiguration() PacketGroupConfigurationType
	// SetPacketGroupConfiguration assigns PacketGroupConfigurationType provided by user to PortReceiveConfigurationType.
	// PacketGroupConfigurationType is tBD
	SetPacketGroupConfiguration(value PacketGroupConfigurationType) PortReceiveConfigurationType
	// HasPacketGroupConfiguration checks if PacketGroupConfiguration has been set in PortReceiveConfigurationType
	HasPacketGroupConfiguration() bool
	// DataIntegrityRxConfiguration returns DataIntegrityRxConfigurationType, set in PortReceiveConfigurationType.
	// DataIntegrityRxConfigurationType is tBD
	DataIntegrityRxConfiguration() DataIntegrityRxConfigurationType
	// SetDataIntegrityRxConfiguration assigns DataIntegrityRxConfigurationType provided by user to PortReceiveConfigurationType.
	// DataIntegrityRxConfigurationType is tBD
	SetDataIntegrityRxConfiguration(value DataIntegrityRxConfigurationType) PortReceiveConfigurationType
	// HasDataIntegrityRxConfiguration checks if DataIntegrityRxConfiguration has been set in PortReceiveConfigurationType
	HasDataIntegrityRxConfiguration() bool
	// RxAutoInstrumentation returns RxAutoInstrumentationConfigurationType, set in PortReceiveConfigurationType.
	// RxAutoInstrumentationConfigurationType is tBD
	RxAutoInstrumentation() RxAutoInstrumentationConfigurationType
	// SetRxAutoInstrumentation assigns RxAutoInstrumentationConfigurationType provided by user to PortReceiveConfigurationType.
	// RxAutoInstrumentationConfigurationType is tBD
	SetRxAutoInstrumentation(value RxAutoInstrumentationConfigurationType) PortReceiveConfigurationType
	// HasRxAutoInstrumentation checks if RxAutoInstrumentation has been set in PortReceiveConfigurationType
	HasRxAutoInstrumentation() bool
	// RateMonitoringConfiguration returns RateMonitoringRateMonitoringList, set in PortReceiveConfigurationType.
	// RateMonitoringRateMonitoringList is tBD
	RateMonitoringConfiguration() RateMonitoringRateMonitoringList
	// SetRateMonitoringConfiguration assigns RateMonitoringRateMonitoringList provided by user to PortReceiveConfigurationType.
	// RateMonitoringRateMonitoringList is tBD
	SetRateMonitoringConfiguration(value RateMonitoringRateMonitoringList) PortReceiveConfigurationType
	// HasRateMonitoringConfiguration checks if RateMonitoringConfiguration has been set in PortReceiveConfigurationType
	HasRateMonitoringConfiguration() bool
	setNil()
}

func (obj *portReceiveConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasEnableAutoDetectInstrumentation() {
		var value string
		if obj.EnableAutoDetectInstrumentation() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enableautodetectinstrumentation",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableTxRxSync() {
		var value string
		if obj.EnableTxRxSync() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enabletxrxsync",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *portReceiveConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// RxMode returns a PortRxModeSet
func (obj *portReceiveConfigurationType) RxMode() PortRxModeSet {
	if obj.obj.RxMode == nil {
		obj.obj.RxMode = NewPortRxModeSet().Msg()
	}
	if obj.rxModeHolder == nil {
		obj.rxModeHolder = &portRxModeSet{obj: obj.obj.RxMode}
	}
	return obj.rxModeHolder
}

// TBD
// RxMode returns a PortRxModeSet
func (obj *portReceiveConfigurationType) HasRxMode() bool {
	return obj.obj.RxMode != nil
}

// TBD
// SetRxMode sets the PortRxModeSet value in the PortReceiveConfigurationType object
func (obj *portReceiveConfigurationType) SetRxMode(value PortRxModeSet) PortReceiveConfigurationType {

	obj.rxModeHolder = nil
	obj.obj.RxMode = value.Msg()

	return obj
}

// TBD
// EnableAutoDetectInstrumentation returns a bool
func (obj *portReceiveConfigurationType) EnableAutoDetectInstrumentation() bool {

	return *obj.obj.EnableAutoDetectInstrumentation

}

// TBD
// EnableAutoDetectInstrumentation returns a bool
func (obj *portReceiveConfigurationType) HasEnableAutoDetectInstrumentation() bool {
	return obj.obj.EnableAutoDetectInstrumentation != nil
}

// TBD
// SetEnableAutoDetectInstrumentation sets the bool value in the PortReceiveConfigurationType object
func (obj *portReceiveConfigurationType) SetEnableAutoDetectInstrumentation(value bool) PortReceiveConfigurationType {

	obj.obj.EnableAutoDetectInstrumentation = &value
	return obj
}

// TBD
// EnableTxRxSync returns a bool
func (obj *portReceiveConfigurationType) EnableTxRxSync() bool {

	return *obj.obj.EnableTxRxSync

}

// TBD
// EnableTxRxSync returns a bool
func (obj *portReceiveConfigurationType) HasEnableTxRxSync() bool {
	return obj.obj.EnableTxRxSync != nil
}

// TBD
// SetEnableTxRxSync sets the bool value in the PortReceiveConfigurationType object
func (obj *portReceiveConfigurationType) SetEnableTxRxSync(value bool) PortReceiveConfigurationType {

	obj.obj.EnableTxRxSync = &value
	return obj
}

// TBD
// TxRxSyncInterval returns a PFTypeMilliSecondsType
func (obj *portReceiveConfigurationType) TxRxSyncInterval() PFTypeMilliSecondsType {
	if obj.obj.TxRxSyncInterval == nil {
		obj.obj.TxRxSyncInterval = NewPFTypeMilliSecondsType().Msg()
	}
	if obj.txRxSyncIntervalHolder == nil {
		obj.txRxSyncIntervalHolder = &pFTypeMilliSecondsType{obj: obj.obj.TxRxSyncInterval}
	}
	return obj.txRxSyncIntervalHolder
}

// TBD
// TxRxSyncInterval returns a PFTypeMilliSecondsType
func (obj *portReceiveConfigurationType) HasTxRxSyncInterval() bool {
	return obj.obj.TxRxSyncInterval != nil
}

// TBD
// SetTxRxSyncInterval sets the PFTypeMilliSecondsType value in the PortReceiveConfigurationType object
func (obj *portReceiveConfigurationType) SetTxRxSyncInterval(value PFTypeMilliSecondsType) PortReceiveConfigurationType {

	obj.txRxSyncIntervalHolder = nil
	obj.obj.TxRxSyncInterval = value.Msg()

	return obj
}

// TBD
// PacketGroupConfiguration returns a PacketGroupConfigurationType
func (obj *portReceiveConfigurationType) PacketGroupConfiguration() PacketGroupConfigurationType {
	if obj.obj.PacketGroupConfiguration == nil {
		obj.obj.PacketGroupConfiguration = NewPacketGroupConfigurationType().Msg()
	}
	if obj.packetGroupConfigurationHolder == nil {
		obj.packetGroupConfigurationHolder = &packetGroupConfigurationType{obj: obj.obj.PacketGroupConfiguration}
	}
	return obj.packetGroupConfigurationHolder
}

// TBD
// PacketGroupConfiguration returns a PacketGroupConfigurationType
func (obj *portReceiveConfigurationType) HasPacketGroupConfiguration() bool {
	return obj.obj.PacketGroupConfiguration != nil
}

// TBD
// SetPacketGroupConfiguration sets the PacketGroupConfigurationType value in the PortReceiveConfigurationType object
func (obj *portReceiveConfigurationType) SetPacketGroupConfiguration(value PacketGroupConfigurationType) PortReceiveConfigurationType {

	obj.packetGroupConfigurationHolder = nil
	obj.obj.PacketGroupConfiguration = value.Msg()

	return obj
}

// TBD
// DataIntegrityRxConfiguration returns a DataIntegrityRxConfigurationType
func (obj *portReceiveConfigurationType) DataIntegrityRxConfiguration() DataIntegrityRxConfigurationType {
	if obj.obj.DataIntegrityRxConfiguration == nil {
		obj.obj.DataIntegrityRxConfiguration = NewDataIntegrityRxConfigurationType().Msg()
	}
	if obj.dataIntegrityRxConfigurationHolder == nil {
		obj.dataIntegrityRxConfigurationHolder = &dataIntegrityRxConfigurationType{obj: obj.obj.DataIntegrityRxConfiguration}
	}
	return obj.dataIntegrityRxConfigurationHolder
}

// TBD
// DataIntegrityRxConfiguration returns a DataIntegrityRxConfigurationType
func (obj *portReceiveConfigurationType) HasDataIntegrityRxConfiguration() bool {
	return obj.obj.DataIntegrityRxConfiguration != nil
}

// TBD
// SetDataIntegrityRxConfiguration sets the DataIntegrityRxConfigurationType value in the PortReceiveConfigurationType object
func (obj *portReceiveConfigurationType) SetDataIntegrityRxConfiguration(value DataIntegrityRxConfigurationType) PortReceiveConfigurationType {

	obj.dataIntegrityRxConfigurationHolder = nil
	obj.obj.DataIntegrityRxConfiguration = value.Msg()

	return obj
}

// TBD
// RxAutoInstrumentation returns a RxAutoInstrumentationConfigurationType
func (obj *portReceiveConfigurationType) RxAutoInstrumentation() RxAutoInstrumentationConfigurationType {
	if obj.obj.RxAutoInstrumentation == nil {
		obj.obj.RxAutoInstrumentation = NewRxAutoInstrumentationConfigurationType().Msg()
	}
	if obj.rxAutoInstrumentationHolder == nil {
		obj.rxAutoInstrumentationHolder = &rxAutoInstrumentationConfigurationType{obj: obj.obj.RxAutoInstrumentation}
	}
	return obj.rxAutoInstrumentationHolder
}

// TBD
// RxAutoInstrumentation returns a RxAutoInstrumentationConfigurationType
func (obj *portReceiveConfigurationType) HasRxAutoInstrumentation() bool {
	return obj.obj.RxAutoInstrumentation != nil
}

// TBD
// SetRxAutoInstrumentation sets the RxAutoInstrumentationConfigurationType value in the PortReceiveConfigurationType object
func (obj *portReceiveConfigurationType) SetRxAutoInstrumentation(value RxAutoInstrumentationConfigurationType) PortReceiveConfigurationType {

	obj.rxAutoInstrumentationHolder = nil
	obj.obj.RxAutoInstrumentation = value.Msg()

	return obj
}

// TBD
// RateMonitoringConfiguration returns a RateMonitoringRateMonitoringList
func (obj *portReceiveConfigurationType) RateMonitoringConfiguration() RateMonitoringRateMonitoringList {
	if obj.obj.RateMonitoringConfiguration == nil {
		obj.obj.RateMonitoringConfiguration = NewRateMonitoringRateMonitoringList().Msg()
	}
	if obj.rateMonitoringConfigurationHolder == nil {
		obj.rateMonitoringConfigurationHolder = &rateMonitoringRateMonitoringList{obj: obj.obj.RateMonitoringConfiguration}
	}
	return obj.rateMonitoringConfigurationHolder
}

// TBD
// RateMonitoringConfiguration returns a RateMonitoringRateMonitoringList
func (obj *portReceiveConfigurationType) HasRateMonitoringConfiguration() bool {
	return obj.obj.RateMonitoringConfiguration != nil
}

// TBD
// SetRateMonitoringConfiguration sets the RateMonitoringRateMonitoringList value in the PortReceiveConfigurationType object
func (obj *portReceiveConfigurationType) SetRateMonitoringConfiguration(value RateMonitoringRateMonitoringList) PortReceiveConfigurationType {

	obj.rateMonitoringConfigurationHolder = nil
	obj.obj.RateMonitoringConfiguration = value.Msg()

	return obj
}

func (obj *portReceiveConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.RxMode != nil {

		obj.RxMode().validateObj(vObj, set_default)
	}

	if obj.obj.TxRxSyncInterval != nil {

		obj.TxRxSyncInterval().validateObj(vObj, set_default)
	}

	if obj.obj.PacketGroupConfiguration != nil {

		obj.PacketGroupConfiguration().validateObj(vObj, set_default)
	}

	if obj.obj.DataIntegrityRxConfiguration != nil {

		obj.DataIntegrityRxConfiguration().validateObj(vObj, set_default)
	}

	if obj.obj.RxAutoInstrumentation != nil {

		obj.RxAutoInstrumentation().validateObj(vObj, set_default)
	}

	if obj.obj.RateMonitoringConfiguration != nil {

		obj.RateMonitoringConfiguration().validateObj(vObj, set_default)
	}

}

func (obj *portReceiveConfigurationType) setDefault() {

}

// ***** PortTxRxSyncIntervalConfigurationType *****
type portTxRxSyncIntervalConfigurationType struct {
	validation
	obj                    *otg.PortTxRxSyncIntervalConfigurationType
	txRxSyncIntervalHolder PFTypeMilliSecondsType
}

func NewPortTxRxSyncIntervalConfigurationType() PortTxRxSyncIntervalConfigurationType {
	obj := portTxRxSyncIntervalConfigurationType{obj: &otg.PortTxRxSyncIntervalConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *portTxRxSyncIntervalConfigurationType) Msg() *otg.PortTxRxSyncIntervalConfigurationType {
	return obj.obj
}

func (obj *portTxRxSyncIntervalConfigurationType) SetMsg(msg *otg.PortTxRxSyncIntervalConfigurationType) PortTxRxSyncIntervalConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *portTxRxSyncIntervalConfigurationType) ToProto() (*otg.PortTxRxSyncIntervalConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *portTxRxSyncIntervalConfigurationType) FromProto(msg *otg.PortTxRxSyncIntervalConfigurationType) (PortTxRxSyncIntervalConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *portTxRxSyncIntervalConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *portTxRxSyncIntervalConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portTxRxSyncIntervalConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portTxRxSyncIntervalConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *portTxRxSyncIntervalConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portTxRxSyncIntervalConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *portTxRxSyncIntervalConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *portTxRxSyncIntervalConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *portTxRxSyncIntervalConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *portTxRxSyncIntervalConfigurationType) Clone() (PortTxRxSyncIntervalConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPortTxRxSyncIntervalConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *portTxRxSyncIntervalConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *portTxRxSyncIntervalConfigurationType) setNil() {
	obj.txRxSyncIntervalHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// PortTxRxSyncIntervalConfigurationType is tBD
type PortTxRxSyncIntervalConfigurationType interface {
	Validation
	// Msg marshals PortTxRxSyncIntervalConfigurationType to protobuf object *otg.PortTxRxSyncIntervalConfigurationType
	// and doesn't set defaults
	Msg() *otg.PortTxRxSyncIntervalConfigurationType
	// SetMsg unmarshals PortTxRxSyncIntervalConfigurationType from protobuf object *otg.PortTxRxSyncIntervalConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.PortTxRxSyncIntervalConfigurationType) PortTxRxSyncIntervalConfigurationType
	// ToProto marshals PortTxRxSyncIntervalConfigurationType to protobuf object *otg.PortTxRxSyncIntervalConfigurationType
	ToProto() (*otg.PortTxRxSyncIntervalConfigurationType, error)
	// ToPbText marshals PortTxRxSyncIntervalConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PortTxRxSyncIntervalConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PortTxRxSyncIntervalConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PortTxRxSyncIntervalConfigurationType from protobuf object *otg.PortTxRxSyncIntervalConfigurationType
	FromProto(msg *otg.PortTxRxSyncIntervalConfigurationType) (PortTxRxSyncIntervalConfigurationType, error)
	// FromPbText unmarshals PortTxRxSyncIntervalConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PortTxRxSyncIntervalConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PortTxRxSyncIntervalConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates PortTxRxSyncIntervalConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PortTxRxSyncIntervalConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// EnableTxRxSync returns bool, set in PortTxRxSyncIntervalConfigurationType.
	EnableTxRxSync() bool
	// SetEnableTxRxSync assigns bool provided by user to PortTxRxSyncIntervalConfigurationType
	SetEnableTxRxSync(value bool) PortTxRxSyncIntervalConfigurationType
	// HasEnableTxRxSync checks if EnableTxRxSync has been set in PortTxRxSyncIntervalConfigurationType
	HasEnableTxRxSync() bool
	// TxRxSyncInterval returns PFTypeMilliSecondsType, set in PortTxRxSyncIntervalConfigurationType.
	// PFTypeMilliSecondsType is model a duration in milliseconds using a plain integer. This allows signed durations up to 300000 years to expressed.
	TxRxSyncInterval() PFTypeMilliSecondsType
	// SetTxRxSyncInterval assigns PFTypeMilliSecondsType provided by user to PortTxRxSyncIntervalConfigurationType.
	// PFTypeMilliSecondsType is model a duration in milliseconds using a plain integer. This allows signed durations up to 300000 years to expressed.
	SetTxRxSyncInterval(value PFTypeMilliSecondsType) PortTxRxSyncIntervalConfigurationType
	// HasTxRxSyncInterval checks if TxRxSyncInterval has been set in PortTxRxSyncIntervalConfigurationType
	HasTxRxSyncInterval() bool
	setNil()
}

func (obj *portTxRxSyncIntervalConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasEnableTxRxSync() {
		var value string
		if obj.EnableTxRxSync() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enabletxrxsync",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *portTxRxSyncIntervalConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// EnableTxRxSync returns a bool
func (obj *portTxRxSyncIntervalConfigurationType) EnableTxRxSync() bool {

	return *obj.obj.EnableTxRxSync

}

// TBD
// EnableTxRxSync returns a bool
func (obj *portTxRxSyncIntervalConfigurationType) HasEnableTxRxSync() bool {
	return obj.obj.EnableTxRxSync != nil
}

// TBD
// SetEnableTxRxSync sets the bool value in the PortTxRxSyncIntervalConfigurationType object
func (obj *portTxRxSyncIntervalConfigurationType) SetEnableTxRxSync(value bool) PortTxRxSyncIntervalConfigurationType {

	obj.obj.EnableTxRxSync = &value
	return obj
}

// TBD
// TxRxSyncInterval returns a PFTypeMilliSecondsType
func (obj *portTxRxSyncIntervalConfigurationType) TxRxSyncInterval() PFTypeMilliSecondsType {
	if obj.obj.TxRxSyncInterval == nil {
		obj.obj.TxRxSyncInterval = NewPFTypeMilliSecondsType().Msg()
	}
	if obj.txRxSyncIntervalHolder == nil {
		obj.txRxSyncIntervalHolder = &pFTypeMilliSecondsType{obj: obj.obj.TxRxSyncInterval}
	}
	return obj.txRxSyncIntervalHolder
}

// TBD
// TxRxSyncInterval returns a PFTypeMilliSecondsType
func (obj *portTxRxSyncIntervalConfigurationType) HasTxRxSyncInterval() bool {
	return obj.obj.TxRxSyncInterval != nil
}

// TBD
// SetTxRxSyncInterval sets the PFTypeMilliSecondsType value in the PortTxRxSyncIntervalConfigurationType object
func (obj *portTxRxSyncIntervalConfigurationType) SetTxRxSyncInterval(value PFTypeMilliSecondsType) PortTxRxSyncIntervalConfigurationType {

	obj.txRxSyncIntervalHolder = nil
	obj.obj.TxRxSyncInterval = value.Msg()

	return obj
}

func (obj *portTxRxSyncIntervalConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.TxRxSyncInterval != nil {

		obj.TxRxSyncInterval().validateObj(vObj, set_default)
	}

}

func (obj *portTxRxSyncIntervalConfigurationType) setDefault() {

}

// ***** PortPCPUFiltersConfigurationType *****
type portPCPUFiltersConfigurationType struct {
	validation
	obj *otg.PortPCPUFiltersConfigurationType
}

func NewPortPCPUFiltersConfigurationType() PortPCPUFiltersConfigurationType {
	obj := portPCPUFiltersConfigurationType{obj: &otg.PortPCPUFiltersConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *portPCPUFiltersConfigurationType) Msg() *otg.PortPCPUFiltersConfigurationType {
	return obj.obj
}

func (obj *portPCPUFiltersConfigurationType) SetMsg(msg *otg.PortPCPUFiltersConfigurationType) PortPCPUFiltersConfigurationType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *portPCPUFiltersConfigurationType) ToProto() (*otg.PortPCPUFiltersConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *portPCPUFiltersConfigurationType) FromProto(msg *otg.PortPCPUFiltersConfigurationType) (PortPCPUFiltersConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *portPCPUFiltersConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *portPCPUFiltersConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portPCPUFiltersConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portPCPUFiltersConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *portPCPUFiltersConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portPCPUFiltersConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *portPCPUFiltersConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *portPCPUFiltersConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *portPCPUFiltersConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *portPCPUFiltersConfigurationType) Clone() (PortPCPUFiltersConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPortPCPUFiltersConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *portPCPUFiltersConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// PortPCPUFiltersConfigurationType is tBD
type PortPCPUFiltersConfigurationType interface {
	Validation
	// Msg marshals PortPCPUFiltersConfigurationType to protobuf object *otg.PortPCPUFiltersConfigurationType
	// and doesn't set defaults
	Msg() *otg.PortPCPUFiltersConfigurationType
	// SetMsg unmarshals PortPCPUFiltersConfigurationType from protobuf object *otg.PortPCPUFiltersConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.PortPCPUFiltersConfigurationType) PortPCPUFiltersConfigurationType
	// ToProto marshals PortPCPUFiltersConfigurationType to protobuf object *otg.PortPCPUFiltersConfigurationType
	ToProto() (*otg.PortPCPUFiltersConfigurationType, error)
	// ToPbText marshals PortPCPUFiltersConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PortPCPUFiltersConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PortPCPUFiltersConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PortPCPUFiltersConfigurationType from protobuf object *otg.PortPCPUFiltersConfigurationType
	FromProto(msg *otg.PortPCPUFiltersConfigurationType) (PortPCPUFiltersConfigurationType, error)
	// FromPbText unmarshals PortPCPUFiltersConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PortPCPUFiltersConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PortPCPUFiltersConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates PortPCPUFiltersConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PortPCPUFiltersConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// PcpuFilterBlock returns PortPCPUFiltersConfigurationTypePcpuFilterBlockEnum, set in PortPCPUFiltersConfigurationType
	PcpuFilterBlock() PortPCPUFiltersConfigurationTypePcpuFilterBlockEnum
	// SetPcpuFilterBlock assigns PortPCPUFiltersConfigurationTypePcpuFilterBlockEnum provided by user to PortPCPUFiltersConfigurationType
	SetPcpuFilterBlock(value PortPCPUFiltersConfigurationTypePcpuFilterBlockEnum) PortPCPUFiltersConfigurationType
	// HasPcpuFilterBlock checks if PcpuFilterBlock has been set in PortPCPUFiltersConfigurationType
	HasPcpuFilterBlock() bool
	// AllFilters returns PortPCPUFiltersConfigurationTypeAllFiltersEnum, set in PortPCPUFiltersConfigurationType
	AllFilters() PortPCPUFiltersConfigurationTypeAllFiltersEnum
	// SetAllFilters assigns PortPCPUFiltersConfigurationTypeAllFiltersEnum provided by user to PortPCPUFiltersConfigurationType
	SetAllFilters(value PortPCPUFiltersConfigurationTypeAllFiltersEnum) PortPCPUFiltersConfigurationType
	// HasAllFilters checks if AllFilters has been set in PortPCPUFiltersConfigurationType
	HasAllFilters() bool
	// DropAis returns PortPCPUFiltersConfigurationTypeDropAisEnum, set in PortPCPUFiltersConfigurationType
	DropAis() PortPCPUFiltersConfigurationTypeDropAisEnum
	// SetDropAis assigns PortPCPUFiltersConfigurationTypeDropAisEnum provided by user to PortPCPUFiltersConfigurationType
	SetDropAis(value PortPCPUFiltersConfigurationTypeDropAisEnum) PortPCPUFiltersConfigurationType
	// HasDropAis checks if DropAis has been set in PortPCPUFiltersConfigurationType
	HasDropAis() bool
}

func (obj *portPCPUFiltersConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasPcpuFilterBlock() {

		member := Member{
			Name:  "pcpufilterblock",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Port+ePCPUFilterControl",
			Value: strconv.FormatInt(int64(obj.obj.PcpuFilterBlock.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasAllFilters() {

		member := Member{
			Name:  "allfilters",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Port+ePCPUFilterControl",
			Value: strconv.FormatInt(int64(obj.obj.AllFilters.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasDropAis() {

		member := Member{
			Name:  "dropais",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Port+ePCPUFilterControl",
			Value: strconv.FormatInt(int64(obj.obj.DropAis.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *portPCPUFiltersConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

type PortPCPUFiltersConfigurationTypePcpuFilterBlockEnum string

// Enum of PcpuFilterBlock on PortPCPUFiltersConfigurationType
var PortPCPUFiltersConfigurationTypePcpuFilterBlock = struct {
	KENABLE   PortPCPUFiltersConfigurationTypePcpuFilterBlockEnum
	KDISABLE  PortPCPUFiltersConfigurationTypePcpuFilterBlockEnum
	KNOACTION PortPCPUFiltersConfigurationTypePcpuFilterBlockEnum
}{
	KENABLE:   PortPCPUFiltersConfigurationTypePcpuFilterBlockEnum("kEnable"),
	KDISABLE:  PortPCPUFiltersConfigurationTypePcpuFilterBlockEnum("kDisable"),
	KNOACTION: PortPCPUFiltersConfigurationTypePcpuFilterBlockEnum("kNoAction"),
}

func (obj *portPCPUFiltersConfigurationType) PcpuFilterBlock() PortPCPUFiltersConfigurationTypePcpuFilterBlockEnum {
	return PortPCPUFiltersConfigurationTypePcpuFilterBlockEnum(obj.obj.PcpuFilterBlock.Enum().String())
}

// TBD
// PcpuFilterBlock returns a string
func (obj *portPCPUFiltersConfigurationType) HasPcpuFilterBlock() bool {
	return obj.obj.PcpuFilterBlock != nil
}

func (obj *portPCPUFiltersConfigurationType) SetPcpuFilterBlock(value PortPCPUFiltersConfigurationTypePcpuFilterBlockEnum) PortPCPUFiltersConfigurationType {
	intValue, ok := otg.PortPCPUFiltersConfigurationType_PcpuFilterBlock_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PortPCPUFiltersConfigurationTypePcpuFilterBlockEnum", string(value)))
		return obj
	}
	enumValue := otg.PortPCPUFiltersConfigurationType_PcpuFilterBlock_Enum(intValue)
	obj.obj.PcpuFilterBlock = &enumValue

	return obj
}

type PortPCPUFiltersConfigurationTypeAllFiltersEnum string

// Enum of AllFilters on PortPCPUFiltersConfigurationType
var PortPCPUFiltersConfigurationTypeAllFilters = struct {
	KENABLE   PortPCPUFiltersConfigurationTypeAllFiltersEnum
	KDISABLE  PortPCPUFiltersConfigurationTypeAllFiltersEnum
	KNOACTION PortPCPUFiltersConfigurationTypeAllFiltersEnum
}{
	KENABLE:   PortPCPUFiltersConfigurationTypeAllFiltersEnum("kEnable"),
	KDISABLE:  PortPCPUFiltersConfigurationTypeAllFiltersEnum("kDisable"),
	KNOACTION: PortPCPUFiltersConfigurationTypeAllFiltersEnum("kNoAction"),
}

func (obj *portPCPUFiltersConfigurationType) AllFilters() PortPCPUFiltersConfigurationTypeAllFiltersEnum {
	return PortPCPUFiltersConfigurationTypeAllFiltersEnum(obj.obj.AllFilters.Enum().String())
}

// TBD
// AllFilters returns a string
func (obj *portPCPUFiltersConfigurationType) HasAllFilters() bool {
	return obj.obj.AllFilters != nil
}

func (obj *portPCPUFiltersConfigurationType) SetAllFilters(value PortPCPUFiltersConfigurationTypeAllFiltersEnum) PortPCPUFiltersConfigurationType {
	intValue, ok := otg.PortPCPUFiltersConfigurationType_AllFilters_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PortPCPUFiltersConfigurationTypeAllFiltersEnum", string(value)))
		return obj
	}
	enumValue := otg.PortPCPUFiltersConfigurationType_AllFilters_Enum(intValue)
	obj.obj.AllFilters = &enumValue

	return obj
}

type PortPCPUFiltersConfigurationTypeDropAisEnum string

// Enum of DropAis on PortPCPUFiltersConfigurationType
var PortPCPUFiltersConfigurationTypeDropAis = struct {
	KENABLE   PortPCPUFiltersConfigurationTypeDropAisEnum
	KDISABLE  PortPCPUFiltersConfigurationTypeDropAisEnum
	KNOACTION PortPCPUFiltersConfigurationTypeDropAisEnum
}{
	KENABLE:   PortPCPUFiltersConfigurationTypeDropAisEnum("kEnable"),
	KDISABLE:  PortPCPUFiltersConfigurationTypeDropAisEnum("kDisable"),
	KNOACTION: PortPCPUFiltersConfigurationTypeDropAisEnum("kNoAction"),
}

func (obj *portPCPUFiltersConfigurationType) DropAis() PortPCPUFiltersConfigurationTypeDropAisEnum {
	return PortPCPUFiltersConfigurationTypeDropAisEnum(obj.obj.DropAis.Enum().String())
}

// TBD
// DropAis returns a string
func (obj *portPCPUFiltersConfigurationType) HasDropAis() bool {
	return obj.obj.DropAis != nil
}

func (obj *portPCPUFiltersConfigurationType) SetDropAis(value PortPCPUFiltersConfigurationTypeDropAisEnum) PortPCPUFiltersConfigurationType {
	intValue, ok := otg.PortPCPUFiltersConfigurationType_DropAis_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PortPCPUFiltersConfigurationTypeDropAisEnum", string(value)))
		return obj
	}
	enumValue := otg.PortPCPUFiltersConfigurationType_DropAis_Enum(intValue)
	obj.obj.DropAis = &enumValue

	return obj
}

func (obj *portPCPUFiltersConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *portPCPUFiltersConfigurationType) setDefault() {

}

// ***** ServerPulseActionList *****
type serverPulseActionList struct {
	validation
	obj                   *otg.ServerPulseActionList
	pulseActionListHolder ServerPulseActionListServerePulseActionIter
}

func NewServerPulseActionList() ServerPulseActionList {
	obj := serverPulseActionList{obj: &otg.ServerPulseActionList{}}
	obj.setDefault()
	return &obj
}

func (obj *serverPulseActionList) Msg() *otg.ServerPulseActionList {
	return obj.obj
}

func (obj *serverPulseActionList) SetMsg(msg *otg.ServerPulseActionList) ServerPulseActionList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *serverPulseActionList) ToProto() (*otg.ServerPulseActionList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *serverPulseActionList) FromProto(msg *otg.ServerPulseActionList) (ServerPulseActionList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *serverPulseActionList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *serverPulseActionList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *serverPulseActionList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *serverPulseActionList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *serverPulseActionList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *serverPulseActionList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *serverPulseActionList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *serverPulseActionList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *serverPulseActionList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *serverPulseActionList) Clone() (ServerPulseActionList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewServerPulseActionList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *serverPulseActionList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *serverPulseActionList) setNil() {
	obj.pulseActionListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ServerPulseActionList is tBD
type ServerPulseActionList interface {
	Validation
	// Msg marshals ServerPulseActionList to protobuf object *otg.ServerPulseActionList
	// and doesn't set defaults
	Msg() *otg.ServerPulseActionList
	// SetMsg unmarshals ServerPulseActionList from protobuf object *otg.ServerPulseActionList
	// and doesn't set defaults
	SetMsg(*otg.ServerPulseActionList) ServerPulseActionList
	// ToProto marshals ServerPulseActionList to protobuf object *otg.ServerPulseActionList
	ToProto() (*otg.ServerPulseActionList, error)
	// ToPbText marshals ServerPulseActionList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ServerPulseActionList to YAML text
	ToYaml() (string, error)
	// ToJson marshals ServerPulseActionList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ServerPulseActionList from protobuf object *otg.ServerPulseActionList
	FromProto(msg *otg.ServerPulseActionList) (ServerPulseActionList, error)
	// FromPbText unmarshals ServerPulseActionList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ServerPulseActionList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ServerPulseActionList from JSON text
	FromJson(value string) error
	// Validate validates ServerPulseActionList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ServerPulseActionList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// PulseActionList returns ServerPulseActionListServerePulseActionIterIter, set in ServerPulseActionList
	PulseActionList() ServerPulseActionListServerePulseActionIter
	setNil()
}

func (obj *serverPulseActionList) populateXml(xObj *Argument) error {

	if len(obj.PulseActionList().Items()) != 0 {
		for _, item := range obj.PulseActionList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *serverPulseActionList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PulseActionList returns a []ServerePulseAction
func (obj *serverPulseActionList) PulseActionList() ServerPulseActionListServerePulseActionIter {
	if len(obj.obj.PulseActionList) == 0 {
		obj.obj.PulseActionList = []*otg.ServerePulseAction{}
	}
	if obj.pulseActionListHolder == nil {
		obj.pulseActionListHolder = newServerPulseActionListServerePulseActionIter(&obj.obj.PulseActionList).setMsg(obj)
	}
	return obj.pulseActionListHolder
}

type serverPulseActionListServerePulseActionIter struct {
	obj                     *serverPulseActionList
	serverePulseActionSlice []ServerePulseAction
	fieldPtr                *[]*otg.ServerePulseAction
}

func newServerPulseActionListServerePulseActionIter(ptr *[]*otg.ServerePulseAction) ServerPulseActionListServerePulseActionIter {
	return &serverPulseActionListServerePulseActionIter{fieldPtr: ptr}
}

type ServerPulseActionListServerePulseActionIter interface {
	setMsg(*serverPulseActionList) ServerPulseActionListServerePulseActionIter
	Items() []ServerePulseAction
	Add() ServerePulseAction
	Append(items ...ServerePulseAction) ServerPulseActionListServerePulseActionIter
	Set(index int, newObj ServerePulseAction) ServerPulseActionListServerePulseActionIter
	Clear() ServerPulseActionListServerePulseActionIter
	clearHolderSlice() ServerPulseActionListServerePulseActionIter
	appendHolderSlice(item ServerePulseAction) ServerPulseActionListServerePulseActionIter
}

func (obj *serverPulseActionListServerePulseActionIter) setMsg(msg *serverPulseActionList) ServerPulseActionListServerePulseActionIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&serverePulseAction{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *serverPulseActionListServerePulseActionIter) Items() []ServerePulseAction {
	return obj.serverePulseActionSlice
}

func (obj *serverPulseActionListServerePulseActionIter) Add() ServerePulseAction {
	newObj := &otg.ServerePulseAction{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &serverePulseAction{obj: newObj}
	newLibObj.setDefault()
	obj.serverePulseActionSlice = append(obj.serverePulseActionSlice, newLibObj)
	return newLibObj
}

func (obj *serverPulseActionListServerePulseActionIter) Append(items ...ServerePulseAction) ServerPulseActionListServerePulseActionIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.serverePulseActionSlice = append(obj.serverePulseActionSlice, item)
	}
	return obj
}

func (obj *serverPulseActionListServerePulseActionIter) Set(index int, newObj ServerePulseAction) ServerPulseActionListServerePulseActionIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.serverePulseActionSlice[index] = newObj
	return obj
}
func (obj *serverPulseActionListServerePulseActionIter) Clear() ServerPulseActionListServerePulseActionIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.ServerePulseAction{}
		obj.serverePulseActionSlice = []ServerePulseAction{}
	}
	return obj
}
func (obj *serverPulseActionListServerePulseActionIter) clearHolderSlice() ServerPulseActionListServerePulseActionIter {
	if len(obj.serverePulseActionSlice) > 0 {
		obj.serverePulseActionSlice = []ServerePulseAction{}
	}
	return obj
}
func (obj *serverPulseActionListServerePulseActionIter) appendHolderSlice(item ServerePulseAction) ServerPulseActionListServerePulseActionIter {
	obj.serverePulseActionSlice = append(obj.serverePulseActionSlice, item)
	return obj
}

func (obj *serverPulseActionList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.PulseActionList) != 0 {

		if set_default {
			obj.PulseActionList().clearHolderSlice()
			for _, item := range obj.obj.PulseActionList {
				obj.PulseActionList().appendHolderSlice(&serverePulseAction{obj: item})
			}
		}
		for _, item := range obj.PulseActionList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *serverPulseActionList) setDefault() {

}

// ***** ServerePulseGenerator *****
type serverePulseGenerator struct {
	validation
	obj *otg.ServerePulseGenerator
}

func NewServerePulseGenerator() ServerePulseGenerator {
	obj := serverePulseGenerator{obj: &otg.ServerePulseGenerator{}}
	obj.setDefault()
	return &obj
}

func (obj *serverePulseGenerator) Msg() *otg.ServerePulseGenerator {
	return obj.obj
}

func (obj *serverePulseGenerator) SetMsg(msg *otg.ServerePulseGenerator) ServerePulseGenerator {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *serverePulseGenerator) ToProto() (*otg.ServerePulseGenerator, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *serverePulseGenerator) FromProto(msg *otg.ServerePulseGenerator) (ServerePulseGenerator, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *serverePulseGenerator) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *serverePulseGenerator) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *serverePulseGenerator) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *serverePulseGenerator) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *serverePulseGenerator) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *serverePulseGenerator) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *serverePulseGenerator) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *serverePulseGenerator) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *serverePulseGenerator) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *serverePulseGenerator) Clone() (ServerePulseGenerator, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewServerePulseGenerator()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *serverePulseGenerator) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// ServerePulseGenerator is description is TBD
type ServerePulseGenerator interface {
	Validation
	// Msg marshals ServerePulseGenerator to protobuf object *otg.ServerePulseGenerator
	// and doesn't set defaults
	Msg() *otg.ServerePulseGenerator
	// SetMsg unmarshals ServerePulseGenerator from protobuf object *otg.ServerePulseGenerator
	// and doesn't set defaults
	SetMsg(*otg.ServerePulseGenerator) ServerePulseGenerator
	// ToProto marshals ServerePulseGenerator to protobuf object *otg.ServerePulseGenerator
	ToProto() (*otg.ServerePulseGenerator, error)
	// ToPbText marshals ServerePulseGenerator to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ServerePulseGenerator to YAML text
	ToYaml() (string, error)
	// ToJson marshals ServerePulseGenerator to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ServerePulseGenerator from protobuf object *otg.ServerePulseGenerator
	FromProto(msg *otg.ServerePulseGenerator) (ServerePulseGenerator, error)
	// FromPbText unmarshals ServerePulseGenerator from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ServerePulseGenerator from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ServerePulseGenerator from JSON text
	FromJson(value string) error
	// Validate validates ServerePulseGenerator
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ServerePulseGenerator, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// EPulseGenerator returns ServerePulseGeneratorEPulseGeneratorEnum, set in ServerePulseGenerator
	EPulseGenerator() ServerePulseGeneratorEPulseGeneratorEnum
	// SetEPulseGenerator assigns ServerePulseGeneratorEPulseGeneratorEnum provided by user to ServerePulseGenerator
	SetEPulseGenerator(value ServerePulseGeneratorEPulseGeneratorEnum) ServerePulseGenerator
	// HasEPulseGenerator checks if EPulseGenerator has been set in ServerePulseGenerator
	HasEPulseGenerator() bool
}

func (obj *serverePulseGenerator) populateXml(xObj *Argument) error {

	if obj.HasEPulseGenerator() {

		member := Member{
			Name:  "epulsegenerator",
			Type:  "None",
			Value: strconv.FormatInt(int64(obj.obj.EPulseGenerator.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *serverePulseGenerator) populateFromXml(xObj *RetVal) error {

	return nil
}

type ServerePulseGeneratorEPulseGeneratorEnum string

// Enum of EPulseGenerator on ServerePulseGenerator
var ServerePulseGeneratorEPulseGenerator = struct {
	KNOPULSE ServerePulseGeneratorEPulseGeneratorEnum
	KPULSE   ServerePulseGeneratorEPulseGeneratorEnum
}{
	KNOPULSE: ServerePulseGeneratorEPulseGeneratorEnum("kNoPulse"),
	KPULSE:   ServerePulseGeneratorEPulseGeneratorEnum("kPulse"),
}

func (obj *serverePulseGenerator) EPulseGenerator() ServerePulseGeneratorEPulseGeneratorEnum {
	return ServerePulseGeneratorEPulseGeneratorEnum(obj.obj.EPulseGenerator.Enum().String())
}

// description is TBD
// EPulseGenerator returns a string
func (obj *serverePulseGenerator) HasEPulseGenerator() bool {
	return obj.obj.EPulseGenerator != nil
}

func (obj *serverePulseGenerator) SetEPulseGenerator(value ServerePulseGeneratorEPulseGeneratorEnum) ServerePulseGenerator {
	intValue, ok := otg.ServerePulseGenerator_EPulseGenerator_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on ServerePulseGeneratorEPulseGeneratorEnum", string(value)))
		return obj
	}
	enumValue := otg.ServerePulseGenerator_EPulseGenerator_Enum(intValue)
	obj.obj.EPulseGenerator = &enumValue

	return obj
}

func (obj *serverePulseGenerator) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *serverePulseGenerator) setDefault() {

}

// ***** PFTypeUTCTime *****
type pFTypeUTCTime struct {
	validation
	obj *otg.PFTypeUTCTime
}

func NewPFTypeUTCTime() PFTypeUTCTime {
	obj := pFTypeUTCTime{obj: &otg.PFTypeUTCTime{}}
	obj.setDefault()
	return &obj
}

func (obj *pFTypeUTCTime) Msg() *otg.PFTypeUTCTime {
	return obj.obj
}

func (obj *pFTypeUTCTime) SetMsg(msg *otg.PFTypeUTCTime) PFTypeUTCTime {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *pFTypeUTCTime) ToProto() (*otg.PFTypeUTCTime, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *pFTypeUTCTime) FromProto(msg *otg.PFTypeUTCTime) (PFTypeUTCTime, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *pFTypeUTCTime) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *pFTypeUTCTime) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *pFTypeUTCTime) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypeUTCTime) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *pFTypeUTCTime) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypeUTCTime) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *pFTypeUTCTime) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *pFTypeUTCTime) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *pFTypeUTCTime) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *pFTypeUTCTime) Clone() (PFTypeUTCTime, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPFTypeUTCTime()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *pFTypeUTCTime) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// PFTypeUTCTime is model time using Posix Time (http://en.wikipedia.org/wiki/Unix_time) as the apparent number of seconds since 1970-01-01 00:00:00 +0000 (UTC). Note that this is unable to describe time during a leap second event. A value of zero, or a negative value, indicates an illegal time.
type PFTypeUTCTime interface {
	Validation
	// Msg marshals PFTypeUTCTime to protobuf object *otg.PFTypeUTCTime
	// and doesn't set defaults
	Msg() *otg.PFTypeUTCTime
	// SetMsg unmarshals PFTypeUTCTime from protobuf object *otg.PFTypeUTCTime
	// and doesn't set defaults
	SetMsg(*otg.PFTypeUTCTime) PFTypeUTCTime
	// ToProto marshals PFTypeUTCTime to protobuf object *otg.PFTypeUTCTime
	ToProto() (*otg.PFTypeUTCTime, error)
	// ToPbText marshals PFTypeUTCTime to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PFTypeUTCTime to YAML text
	ToYaml() (string, error)
	// ToJson marshals PFTypeUTCTime to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PFTypeUTCTime from protobuf object *otg.PFTypeUTCTime
	FromProto(msg *otg.PFTypeUTCTime) (PFTypeUTCTime, error)
	// FromPbText unmarshals PFTypeUTCTime from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PFTypeUTCTime from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PFTypeUTCTime from JSON text
	FromJson(value string) error
	// Validate validates PFTypeUTCTime
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PFTypeUTCTime, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Time returns int64, set in PFTypeUTCTime.
	Time() int64
	// SetTime assigns int64 provided by user to PFTypeUTCTime
	SetTime(value int64) PFTypeUTCTime
	// HasTime checks if Time has been set in PFTypeUTCTime
	HasTime() bool
}

func (obj *pFTypeUTCTime) populateXml(xObj *Argument) error {

	if obj.HasTime() {

		member := Member{
			Name:  "time",
			Type:  "int64",
			Value: strconv.FormatInt(obj.Time(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *pFTypeUTCTime) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Time returns a int64
func (obj *pFTypeUTCTime) Time() int64 {

	return *obj.obj.Time

}

// TBD
// Time returns a int64
func (obj *pFTypeUTCTime) HasTime() bool {
	return obj.obj.Time != nil
}

// TBD
// SetTime sets the int64 value in the PFTypeUTCTime object
func (obj *pFTypeUTCTime) SetTime(value int64) PFTypeUTCTime {

	obj.obj.Time = &value
	return obj
}

func (obj *pFTypeUTCTime) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *pFTypeUTCTime) setDefault() {

}

// ***** ServerTimedActionList *****
type serverTimedActionList struct {
	validation
	obj                   *otg.ServerTimedActionList
	timedActionListHolder ServerTimedActionListServerTimedActionIter
}

func NewServerTimedActionList() ServerTimedActionList {
	obj := serverTimedActionList{obj: &otg.ServerTimedActionList{}}
	obj.setDefault()
	return &obj
}

func (obj *serverTimedActionList) Msg() *otg.ServerTimedActionList {
	return obj.obj
}

func (obj *serverTimedActionList) SetMsg(msg *otg.ServerTimedActionList) ServerTimedActionList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *serverTimedActionList) ToProto() (*otg.ServerTimedActionList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *serverTimedActionList) FromProto(msg *otg.ServerTimedActionList) (ServerTimedActionList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *serverTimedActionList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *serverTimedActionList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *serverTimedActionList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *serverTimedActionList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *serverTimedActionList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *serverTimedActionList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *serverTimedActionList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *serverTimedActionList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *serverTimedActionList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *serverTimedActionList) Clone() (ServerTimedActionList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewServerTimedActionList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *serverTimedActionList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *serverTimedActionList) setNil() {
	obj.timedActionListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ServerTimedActionList is tBD
type ServerTimedActionList interface {
	Validation
	// Msg marshals ServerTimedActionList to protobuf object *otg.ServerTimedActionList
	// and doesn't set defaults
	Msg() *otg.ServerTimedActionList
	// SetMsg unmarshals ServerTimedActionList from protobuf object *otg.ServerTimedActionList
	// and doesn't set defaults
	SetMsg(*otg.ServerTimedActionList) ServerTimedActionList
	// ToProto marshals ServerTimedActionList to protobuf object *otg.ServerTimedActionList
	ToProto() (*otg.ServerTimedActionList, error)
	// ToPbText marshals ServerTimedActionList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ServerTimedActionList to YAML text
	ToYaml() (string, error)
	// ToJson marshals ServerTimedActionList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ServerTimedActionList from protobuf object *otg.ServerTimedActionList
	FromProto(msg *otg.ServerTimedActionList) (ServerTimedActionList, error)
	// FromPbText unmarshals ServerTimedActionList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ServerTimedActionList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ServerTimedActionList from JSON text
	FromJson(value string) error
	// Validate validates ServerTimedActionList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ServerTimedActionList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// TimedActionList returns ServerTimedActionListServerTimedActionIterIter, set in ServerTimedActionList
	TimedActionList() ServerTimedActionListServerTimedActionIter
	setNil()
}

func (obj *serverTimedActionList) populateXml(xObj *Argument) error {

	if len(obj.TimedActionList().Items()) != 0 {
		for _, item := range obj.TimedActionList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *serverTimedActionList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// TimedActionList returns a []ServerTimedAction
func (obj *serverTimedActionList) TimedActionList() ServerTimedActionListServerTimedActionIter {
	if len(obj.obj.TimedActionList) == 0 {
		obj.obj.TimedActionList = []*otg.ServerTimedAction{}
	}
	if obj.timedActionListHolder == nil {
		obj.timedActionListHolder = newServerTimedActionListServerTimedActionIter(&obj.obj.TimedActionList).setMsg(obj)
	}
	return obj.timedActionListHolder
}

type serverTimedActionListServerTimedActionIter struct {
	obj                    *serverTimedActionList
	serverTimedActionSlice []ServerTimedAction
	fieldPtr               *[]*otg.ServerTimedAction
}

func newServerTimedActionListServerTimedActionIter(ptr *[]*otg.ServerTimedAction) ServerTimedActionListServerTimedActionIter {
	return &serverTimedActionListServerTimedActionIter{fieldPtr: ptr}
}

type ServerTimedActionListServerTimedActionIter interface {
	setMsg(*serverTimedActionList) ServerTimedActionListServerTimedActionIter
	Items() []ServerTimedAction
	Add() ServerTimedAction
	Append(items ...ServerTimedAction) ServerTimedActionListServerTimedActionIter
	Set(index int, newObj ServerTimedAction) ServerTimedActionListServerTimedActionIter
	Clear() ServerTimedActionListServerTimedActionIter
	clearHolderSlice() ServerTimedActionListServerTimedActionIter
	appendHolderSlice(item ServerTimedAction) ServerTimedActionListServerTimedActionIter
}

func (obj *serverTimedActionListServerTimedActionIter) setMsg(msg *serverTimedActionList) ServerTimedActionListServerTimedActionIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&serverTimedAction{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *serverTimedActionListServerTimedActionIter) Items() []ServerTimedAction {
	return obj.serverTimedActionSlice
}

func (obj *serverTimedActionListServerTimedActionIter) Add() ServerTimedAction {
	newObj := &otg.ServerTimedAction{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &serverTimedAction{obj: newObj}
	newLibObj.setDefault()
	obj.serverTimedActionSlice = append(obj.serverTimedActionSlice, newLibObj)
	return newLibObj
}

func (obj *serverTimedActionListServerTimedActionIter) Append(items ...ServerTimedAction) ServerTimedActionListServerTimedActionIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.serverTimedActionSlice = append(obj.serverTimedActionSlice, item)
	}
	return obj
}

func (obj *serverTimedActionListServerTimedActionIter) Set(index int, newObj ServerTimedAction) ServerTimedActionListServerTimedActionIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.serverTimedActionSlice[index] = newObj
	return obj
}
func (obj *serverTimedActionListServerTimedActionIter) Clear() ServerTimedActionListServerTimedActionIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.ServerTimedAction{}
		obj.serverTimedActionSlice = []ServerTimedAction{}
	}
	return obj
}
func (obj *serverTimedActionListServerTimedActionIter) clearHolderSlice() ServerTimedActionListServerTimedActionIter {
	if len(obj.serverTimedActionSlice) > 0 {
		obj.serverTimedActionSlice = []ServerTimedAction{}
	}
	return obj
}
func (obj *serverTimedActionListServerTimedActionIter) appendHolderSlice(item ServerTimedAction) ServerTimedActionListServerTimedActionIter {
	obj.serverTimedActionSlice = append(obj.serverTimedActionSlice, item)
	return obj
}

func (obj *serverTimedActionList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.TimedActionList) != 0 {

		if set_default {
			obj.TimedActionList().clearHolderSlice()
			for _, item := range obj.obj.TimedActionList {
				obj.TimedActionList().appendHolderSlice(&serverTimedAction{obj: item})
			}
		}
		for _, item := range obj.TimedActionList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *serverTimedActionList) setDefault() {

}

// ***** StreamTrafficConfigurationType *****
type streamTrafficConfigurationType struct {
	validation
	obj           *otg.StreamTrafficConfigurationType
	streamsHolder StreamStreamConfigurationList
}

func NewStreamTrafficConfigurationType() StreamTrafficConfigurationType {
	obj := streamTrafficConfigurationType{obj: &otg.StreamTrafficConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamTrafficConfigurationType) Msg() *otg.StreamTrafficConfigurationType {
	return obj.obj
}

func (obj *streamTrafficConfigurationType) SetMsg(msg *otg.StreamTrafficConfigurationType) StreamTrafficConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamTrafficConfigurationType) ToProto() (*otg.StreamTrafficConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamTrafficConfigurationType) FromProto(msg *otg.StreamTrafficConfigurationType) (StreamTrafficConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamTrafficConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamTrafficConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamTrafficConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamTrafficConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamTrafficConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamTrafficConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamTrafficConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamTrafficConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamTrafficConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamTrafficConfigurationType) Clone() (StreamTrafficConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamTrafficConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamTrafficConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamTrafficConfigurationType) setNil() {
	obj.streamsHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamTrafficConfigurationType is tBD
type StreamTrafficConfigurationType interface {
	Validation
	// Msg marshals StreamTrafficConfigurationType to protobuf object *otg.StreamTrafficConfigurationType
	// and doesn't set defaults
	Msg() *otg.StreamTrafficConfigurationType
	// SetMsg unmarshals StreamTrafficConfigurationType from protobuf object *otg.StreamTrafficConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.StreamTrafficConfigurationType) StreamTrafficConfigurationType
	// ToProto marshals StreamTrafficConfigurationType to protobuf object *otg.StreamTrafficConfigurationType
	ToProto() (*otg.StreamTrafficConfigurationType, error)
	// ToPbText marshals StreamTrafficConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamTrafficConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamTrafficConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamTrafficConfigurationType from protobuf object *otg.StreamTrafficConfigurationType
	FromProto(msg *otg.StreamTrafficConfigurationType) (StreamTrafficConfigurationType, error)
	// FromPbText unmarshals StreamTrafficConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamTrafficConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamTrafficConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates StreamTrafficConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamTrafficConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// GapControlMode returns StreamTrafficConfigurationTypeGapControlModeEnum, set in StreamTrafficConfigurationType
	GapControlMode() StreamTrafficConfigurationTypeGapControlModeEnum
	// SetGapControlMode assigns StreamTrafficConfigurationTypeGapControlModeEnum provided by user to StreamTrafficConfigurationType
	SetGapControlMode(value StreamTrafficConfigurationTypeGapControlModeEnum) StreamTrafficConfigurationType
	// HasGapControlMode checks if GapControlMode has been set in StreamTrafficConfigurationType
	HasGapControlMode() bool
	// Streams returns StreamStreamConfigurationList, set in StreamTrafficConfigurationType.
	// StreamStreamConfigurationList is tBD
	Streams() StreamStreamConfigurationList
	// SetStreams assigns StreamStreamConfigurationList provided by user to StreamTrafficConfigurationType.
	// StreamStreamConfigurationList is tBD
	SetStreams(value StreamStreamConfigurationList) StreamTrafficConfigurationType
	// HasStreams checks if Streams has been set in StreamTrafficConfigurationType
	HasStreams() bool
	setNil()
}

func (obj *streamTrafficConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasGapControlMode() {

		member := Member{
			Name:  "gapcontrolmode",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Stream+eGapControlMode",
			Value: strconv.FormatInt(int64(obj.obj.GapControlMode.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamTrafficConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

type StreamTrafficConfigurationTypeGapControlModeEnum string

// Enum of GapControlMode on StreamTrafficConfigurationType
var StreamTrafficConfigurationTypeGapControlMode = struct {
	KSTREAMGAPCONTROLFIXED   StreamTrafficConfigurationTypeGapControlModeEnum
	KSTREAMGAPCONTROLAVERAGE StreamTrafficConfigurationTypeGapControlModeEnum
}{
	KSTREAMGAPCONTROLFIXED:   StreamTrafficConfigurationTypeGapControlModeEnum("kStreamGapControlFixed"),
	KSTREAMGAPCONTROLAVERAGE: StreamTrafficConfigurationTypeGapControlModeEnum("kStreamGapControlAverage"),
}

func (obj *streamTrafficConfigurationType) GapControlMode() StreamTrafficConfigurationTypeGapControlModeEnum {
	return StreamTrafficConfigurationTypeGapControlModeEnum(obj.obj.GapControlMode.Enum().String())
}

// For ports that have the portFeatureGapControlMode capability, this   controls the manner in which minimum inter-packet gaps are enforced.
// GapControlMode returns a string
func (obj *streamTrafficConfigurationType) HasGapControlMode() bool {
	return obj.obj.GapControlMode != nil
}

func (obj *streamTrafficConfigurationType) SetGapControlMode(value StreamTrafficConfigurationTypeGapControlModeEnum) StreamTrafficConfigurationType {
	intValue, ok := otg.StreamTrafficConfigurationType_GapControlMode_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on StreamTrafficConfigurationTypeGapControlModeEnum", string(value)))
		return obj
	}
	enumValue := otg.StreamTrafficConfigurationType_GapControlMode_Enum(intValue)
	obj.obj.GapControlMode = &enumValue

	return obj
}

// A list of configurations for each of the streams. The number   of streams supported on this port is determined from   STREAM-COUNT.
// Streams returns a StreamStreamConfigurationList
func (obj *streamTrafficConfigurationType) Streams() StreamStreamConfigurationList {
	if obj.obj.Streams == nil {
		obj.obj.Streams = NewStreamStreamConfigurationList().Msg()
	}
	if obj.streamsHolder == nil {
		obj.streamsHolder = &streamStreamConfigurationList{obj: obj.obj.Streams}
	}
	return obj.streamsHolder
}

// A list of configurations for each of the streams. The number   of streams supported on this port is determined from   STREAM-COUNT.
// Streams returns a StreamStreamConfigurationList
func (obj *streamTrafficConfigurationType) HasStreams() bool {
	return obj.obj.Streams != nil
}

// A list of configurations for each of the streams. The number   of streams supported on this port is determined from   STREAM-COUNT.
// SetStreams sets the StreamStreamConfigurationList value in the StreamTrafficConfigurationType object
func (obj *streamTrafficConfigurationType) SetStreams(value StreamStreamConfigurationList) StreamTrafficConfigurationType {

	obj.streamsHolder = nil
	obj.obj.Streams = value.Msg()

	return obj
}

func (obj *streamTrafficConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Streams != nil {

		obj.Streams().validateObj(vObj, set_default)
	}

}

func (obj *streamTrafficConfigurationType) setDefault() {

}

// ***** StreamStreamUpdateConfigurationList *****
type streamStreamUpdateConfigurationList struct {
	validation
	obj                                 *otg.StreamStreamUpdateConfigurationList
	streamUpdateConfigurationListHolder StreamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter
}

func NewStreamStreamUpdateConfigurationList() StreamStreamUpdateConfigurationList {
	obj := streamStreamUpdateConfigurationList{obj: &otg.StreamStreamUpdateConfigurationList{}}
	obj.setDefault()
	return &obj
}

func (obj *streamStreamUpdateConfigurationList) Msg() *otg.StreamStreamUpdateConfigurationList {
	return obj.obj
}

func (obj *streamStreamUpdateConfigurationList) SetMsg(msg *otg.StreamStreamUpdateConfigurationList) StreamStreamUpdateConfigurationList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamStreamUpdateConfigurationList) ToProto() (*otg.StreamStreamUpdateConfigurationList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamStreamUpdateConfigurationList) FromProto(msg *otg.StreamStreamUpdateConfigurationList) (StreamStreamUpdateConfigurationList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamStreamUpdateConfigurationList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamStreamUpdateConfigurationList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamStreamUpdateConfigurationList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamStreamUpdateConfigurationList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamStreamUpdateConfigurationList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamStreamUpdateConfigurationList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamStreamUpdateConfigurationList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamStreamUpdateConfigurationList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamStreamUpdateConfigurationList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamStreamUpdateConfigurationList) Clone() (StreamStreamUpdateConfigurationList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamStreamUpdateConfigurationList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamStreamUpdateConfigurationList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamStreamUpdateConfigurationList) setNil() {
	obj.streamUpdateConfigurationListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamStreamUpdateConfigurationList is tBD
type StreamStreamUpdateConfigurationList interface {
	Validation
	// Msg marshals StreamStreamUpdateConfigurationList to protobuf object *otg.StreamStreamUpdateConfigurationList
	// and doesn't set defaults
	Msg() *otg.StreamStreamUpdateConfigurationList
	// SetMsg unmarshals StreamStreamUpdateConfigurationList from protobuf object *otg.StreamStreamUpdateConfigurationList
	// and doesn't set defaults
	SetMsg(*otg.StreamStreamUpdateConfigurationList) StreamStreamUpdateConfigurationList
	// ToProto marshals StreamStreamUpdateConfigurationList to protobuf object *otg.StreamStreamUpdateConfigurationList
	ToProto() (*otg.StreamStreamUpdateConfigurationList, error)
	// ToPbText marshals StreamStreamUpdateConfigurationList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamStreamUpdateConfigurationList to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamStreamUpdateConfigurationList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamStreamUpdateConfigurationList from protobuf object *otg.StreamStreamUpdateConfigurationList
	FromProto(msg *otg.StreamStreamUpdateConfigurationList) (StreamStreamUpdateConfigurationList, error)
	// FromPbText unmarshals StreamStreamUpdateConfigurationList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamStreamUpdateConfigurationList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamStreamUpdateConfigurationList from JSON text
	FromJson(value string) error
	// Validate validates StreamStreamUpdateConfigurationList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamStreamUpdateConfigurationList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// StreamUpdateConfigurationList returns StreamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIterIter, set in StreamStreamUpdateConfigurationList
	StreamUpdateConfigurationList() StreamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter
	setNil()
}

func (obj *streamStreamUpdateConfigurationList) populateXml(xObj *Argument) error {

	if len(obj.StreamUpdateConfigurationList().Items()) != 0 {
		for _, item := range obj.StreamUpdateConfigurationList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *streamStreamUpdateConfigurationList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// StreamUpdateConfigurationList returns a []StreamStreamUpdateConfigurationType
func (obj *streamStreamUpdateConfigurationList) StreamUpdateConfigurationList() StreamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter {
	if len(obj.obj.StreamUpdateConfigurationList) == 0 {
		obj.obj.StreamUpdateConfigurationList = []*otg.StreamStreamUpdateConfigurationType{}
	}
	if obj.streamUpdateConfigurationListHolder == nil {
		obj.streamUpdateConfigurationListHolder = newStreamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter(&obj.obj.StreamUpdateConfigurationList).setMsg(obj)
	}
	return obj.streamUpdateConfigurationListHolder
}

type streamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter struct {
	obj                                      *streamStreamUpdateConfigurationList
	streamStreamUpdateConfigurationTypeSlice []StreamStreamUpdateConfigurationType
	fieldPtr                                 *[]*otg.StreamStreamUpdateConfigurationType
}

func newStreamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter(ptr *[]*otg.StreamStreamUpdateConfigurationType) StreamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter {
	return &streamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter{fieldPtr: ptr}
}

type StreamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter interface {
	setMsg(*streamStreamUpdateConfigurationList) StreamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter
	Items() []StreamStreamUpdateConfigurationType
	Add() StreamStreamUpdateConfigurationType
	Append(items ...StreamStreamUpdateConfigurationType) StreamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter
	Set(index int, newObj StreamStreamUpdateConfigurationType) StreamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter
	Clear() StreamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter
	clearHolderSlice() StreamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter
	appendHolderSlice(item StreamStreamUpdateConfigurationType) StreamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter
}

func (obj *streamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter) setMsg(msg *streamStreamUpdateConfigurationList) StreamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&streamStreamUpdateConfigurationType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *streamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter) Items() []StreamStreamUpdateConfigurationType {
	return obj.streamStreamUpdateConfigurationTypeSlice
}

func (obj *streamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter) Add() StreamStreamUpdateConfigurationType {
	newObj := &otg.StreamStreamUpdateConfigurationType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &streamStreamUpdateConfigurationType{obj: newObj}
	newLibObj.setDefault()
	obj.streamStreamUpdateConfigurationTypeSlice = append(obj.streamStreamUpdateConfigurationTypeSlice, newLibObj)
	return newLibObj
}

func (obj *streamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter) Append(items ...StreamStreamUpdateConfigurationType) StreamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.streamStreamUpdateConfigurationTypeSlice = append(obj.streamStreamUpdateConfigurationTypeSlice, item)
	}
	return obj
}

func (obj *streamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter) Set(index int, newObj StreamStreamUpdateConfigurationType) StreamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.streamStreamUpdateConfigurationTypeSlice[index] = newObj
	return obj
}
func (obj *streamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter) Clear() StreamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.StreamStreamUpdateConfigurationType{}
		obj.streamStreamUpdateConfigurationTypeSlice = []StreamStreamUpdateConfigurationType{}
	}
	return obj
}
func (obj *streamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter) clearHolderSlice() StreamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter {
	if len(obj.streamStreamUpdateConfigurationTypeSlice) > 0 {
		obj.streamStreamUpdateConfigurationTypeSlice = []StreamStreamUpdateConfigurationType{}
	}
	return obj
}
func (obj *streamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter) appendHolderSlice(item StreamStreamUpdateConfigurationType) StreamStreamUpdateConfigurationListStreamStreamUpdateConfigurationTypeIter {
	obj.streamStreamUpdateConfigurationTypeSlice = append(obj.streamStreamUpdateConfigurationTypeSlice, item)
	return obj
}

func (obj *streamStreamUpdateConfigurationList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.StreamUpdateConfigurationList) != 0 {

		if set_default {
			obj.StreamUpdateConfigurationList().clearHolderSlice()
			for _, item := range obj.obj.StreamUpdateConfigurationList {
				obj.StreamUpdateConfigurationList().appendHolderSlice(&streamStreamUpdateConfigurationType{obj: item})
			}
		}
		for _, item := range obj.StreamUpdateConfigurationList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *streamStreamUpdateConfigurationList) setDefault() {

}

// ***** StreamBackgroundDataConfigurationType *****
type streamBackgroundDataConfigurationType struct {
	validation
	obj           *otg.StreamBackgroundDataConfigurationType
	settingHolder StreamBackgroundDataSettingList
}

func NewStreamBackgroundDataConfigurationType() StreamBackgroundDataConfigurationType {
	obj := streamBackgroundDataConfigurationType{obj: &otg.StreamBackgroundDataConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamBackgroundDataConfigurationType) Msg() *otg.StreamBackgroundDataConfigurationType {
	return obj.obj
}

func (obj *streamBackgroundDataConfigurationType) SetMsg(msg *otg.StreamBackgroundDataConfigurationType) StreamBackgroundDataConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamBackgroundDataConfigurationType) ToProto() (*otg.StreamBackgroundDataConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamBackgroundDataConfigurationType) FromProto(msg *otg.StreamBackgroundDataConfigurationType) (StreamBackgroundDataConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamBackgroundDataConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamBackgroundDataConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamBackgroundDataConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamBackgroundDataConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamBackgroundDataConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamBackgroundDataConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamBackgroundDataConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamBackgroundDataConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamBackgroundDataConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamBackgroundDataConfigurationType) Clone() (StreamBackgroundDataConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamBackgroundDataConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamBackgroundDataConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamBackgroundDataConfigurationType) setNil() {
	obj.settingHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamBackgroundDataConfigurationType is tBD
type StreamBackgroundDataConfigurationType interface {
	Validation
	// Msg marshals StreamBackgroundDataConfigurationType to protobuf object *otg.StreamBackgroundDataConfigurationType
	// and doesn't set defaults
	Msg() *otg.StreamBackgroundDataConfigurationType
	// SetMsg unmarshals StreamBackgroundDataConfigurationType from protobuf object *otg.StreamBackgroundDataConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.StreamBackgroundDataConfigurationType) StreamBackgroundDataConfigurationType
	// ToProto marshals StreamBackgroundDataConfigurationType to protobuf object *otg.StreamBackgroundDataConfigurationType
	ToProto() (*otg.StreamBackgroundDataConfigurationType, error)
	// ToPbText marshals StreamBackgroundDataConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamBackgroundDataConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamBackgroundDataConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamBackgroundDataConfigurationType from protobuf object *otg.StreamBackgroundDataConfigurationType
	FromProto(msg *otg.StreamBackgroundDataConfigurationType) (StreamBackgroundDataConfigurationType, error)
	// FromPbText unmarshals StreamBackgroundDataConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamBackgroundDataConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamBackgroundDataConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates StreamBackgroundDataConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamBackgroundDataConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Setting returns StreamBackgroundDataSettingList, set in StreamBackgroundDataConfigurationType.
	// StreamBackgroundDataSettingList is tBD
	Setting() StreamBackgroundDataSettingList
	// SetSetting assigns StreamBackgroundDataSettingList provided by user to StreamBackgroundDataConfigurationType.
	// StreamBackgroundDataSettingList is tBD
	SetSetting(value StreamBackgroundDataSettingList) StreamBackgroundDataConfigurationType
	// HasSetting checks if Setting has been set in StreamBackgroundDataConfigurationType
	HasSetting() bool
	setNil()
}

func (obj *streamBackgroundDataConfigurationType) populateXml(xObj *Argument) error {

	return nil
}

func (obj *streamBackgroundDataConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Setting returns a StreamBackgroundDataSettingList
func (obj *streamBackgroundDataConfigurationType) Setting() StreamBackgroundDataSettingList {
	if obj.obj.Setting == nil {
		obj.obj.Setting = NewStreamBackgroundDataSettingList().Msg()
	}
	if obj.settingHolder == nil {
		obj.settingHolder = &streamBackgroundDataSettingList{obj: obj.obj.Setting}
	}
	return obj.settingHolder
}

// TBD
// Setting returns a StreamBackgroundDataSettingList
func (obj *streamBackgroundDataConfigurationType) HasSetting() bool {
	return obj.obj.Setting != nil
}

// TBD
// SetSetting sets the StreamBackgroundDataSettingList value in the StreamBackgroundDataConfigurationType object
func (obj *streamBackgroundDataConfigurationType) SetSetting(value StreamBackgroundDataSettingList) StreamBackgroundDataConfigurationType {

	obj.settingHolder = nil
	obj.obj.Setting = value.Msg()

	return obj
}

func (obj *streamBackgroundDataConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Setting != nil {

		obj.Setting().validateObj(vObj, set_default)
	}

}

func (obj *streamBackgroundDataConfigurationType) setDefault() {

}

// ***** StreamValueListConfigurationType *****
type streamValueListConfigurationType struct {
	validation
	obj           *otg.StreamValueListConfigurationType
	settingHolder StreamStreamValueListSettingList
}

func NewStreamValueListConfigurationType() StreamValueListConfigurationType {
	obj := streamValueListConfigurationType{obj: &otg.StreamValueListConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamValueListConfigurationType) Msg() *otg.StreamValueListConfigurationType {
	return obj.obj
}

func (obj *streamValueListConfigurationType) SetMsg(msg *otg.StreamValueListConfigurationType) StreamValueListConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamValueListConfigurationType) ToProto() (*otg.StreamValueListConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamValueListConfigurationType) FromProto(msg *otg.StreamValueListConfigurationType) (StreamValueListConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamValueListConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamValueListConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamValueListConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamValueListConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamValueListConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamValueListConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamValueListConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamValueListConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamValueListConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamValueListConfigurationType) Clone() (StreamValueListConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamValueListConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamValueListConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamValueListConfigurationType) setNil() {
	obj.settingHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamValueListConfigurationType is tBD
type StreamValueListConfigurationType interface {
	Validation
	// Msg marshals StreamValueListConfigurationType to protobuf object *otg.StreamValueListConfigurationType
	// and doesn't set defaults
	Msg() *otg.StreamValueListConfigurationType
	// SetMsg unmarshals StreamValueListConfigurationType from protobuf object *otg.StreamValueListConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.StreamValueListConfigurationType) StreamValueListConfigurationType
	// ToProto marshals StreamValueListConfigurationType to protobuf object *otg.StreamValueListConfigurationType
	ToProto() (*otg.StreamValueListConfigurationType, error)
	// ToPbText marshals StreamValueListConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamValueListConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamValueListConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamValueListConfigurationType from protobuf object *otg.StreamValueListConfigurationType
	FromProto(msg *otg.StreamValueListConfigurationType) (StreamValueListConfigurationType, error)
	// FromPbText unmarshals StreamValueListConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamValueListConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamValueListConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates StreamValueListConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamValueListConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Setting returns StreamStreamValueListSettingList, set in StreamValueListConfigurationType.
	// StreamStreamValueListSettingList is tBD
	Setting() StreamStreamValueListSettingList
	// SetSetting assigns StreamStreamValueListSettingList provided by user to StreamValueListConfigurationType.
	// StreamStreamValueListSettingList is tBD
	SetSetting(value StreamStreamValueListSettingList) StreamValueListConfigurationType
	// HasSetting checks if Setting has been set in StreamValueListConfigurationType
	HasSetting() bool
	setNil()
}

func (obj *streamValueListConfigurationType) populateXml(xObj *Argument) error {

	return nil
}

func (obj *streamValueListConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Setting returns a StreamStreamValueListSettingList
func (obj *streamValueListConfigurationType) Setting() StreamStreamValueListSettingList {
	if obj.obj.Setting == nil {
		obj.obj.Setting = NewStreamStreamValueListSettingList().Msg()
	}
	if obj.settingHolder == nil {
		obj.settingHolder = &streamStreamValueListSettingList{obj: obj.obj.Setting}
	}
	return obj.settingHolder
}

// TBD
// Setting returns a StreamStreamValueListSettingList
func (obj *streamValueListConfigurationType) HasSetting() bool {
	return obj.obj.Setting != nil
}

// TBD
// SetSetting sets the StreamStreamValueListSettingList value in the StreamValueListConfigurationType object
func (obj *streamValueListConfigurationType) SetSetting(value StreamStreamValueListSettingList) StreamValueListConfigurationType {

	obj.settingHolder = nil
	obj.obj.Setting = value.Msg()

	return obj
}

func (obj *streamValueListConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Setting != nil {

		obj.Setting().validateObj(vObj, set_default)
	}

}

func (obj *streamValueListConfigurationType) setDefault() {

}

// ***** StreamRangeListConfigurationType *****
type streamRangeListConfigurationType struct {
	validation
	obj           *otg.StreamRangeListConfigurationType
	settingHolder StreamStreamRangeListSettingList
}

func NewStreamRangeListConfigurationType() StreamRangeListConfigurationType {
	obj := streamRangeListConfigurationType{obj: &otg.StreamRangeListConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamRangeListConfigurationType) Msg() *otg.StreamRangeListConfigurationType {
	return obj.obj
}

func (obj *streamRangeListConfigurationType) SetMsg(msg *otg.StreamRangeListConfigurationType) StreamRangeListConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamRangeListConfigurationType) ToProto() (*otg.StreamRangeListConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamRangeListConfigurationType) FromProto(msg *otg.StreamRangeListConfigurationType) (StreamRangeListConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamRangeListConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamRangeListConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamRangeListConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamRangeListConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamRangeListConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamRangeListConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamRangeListConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamRangeListConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamRangeListConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamRangeListConfigurationType) Clone() (StreamRangeListConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamRangeListConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamRangeListConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamRangeListConfigurationType) setNil() {
	obj.settingHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamRangeListConfigurationType is tBD
type StreamRangeListConfigurationType interface {
	Validation
	// Msg marshals StreamRangeListConfigurationType to protobuf object *otg.StreamRangeListConfigurationType
	// and doesn't set defaults
	Msg() *otg.StreamRangeListConfigurationType
	// SetMsg unmarshals StreamRangeListConfigurationType from protobuf object *otg.StreamRangeListConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.StreamRangeListConfigurationType) StreamRangeListConfigurationType
	// ToProto marshals StreamRangeListConfigurationType to protobuf object *otg.StreamRangeListConfigurationType
	ToProto() (*otg.StreamRangeListConfigurationType, error)
	// ToPbText marshals StreamRangeListConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamRangeListConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamRangeListConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamRangeListConfigurationType from protobuf object *otg.StreamRangeListConfigurationType
	FromProto(msg *otg.StreamRangeListConfigurationType) (StreamRangeListConfigurationType, error)
	// FromPbText unmarshals StreamRangeListConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamRangeListConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamRangeListConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates StreamRangeListConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamRangeListConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Setting returns StreamStreamRangeListSettingList, set in StreamRangeListConfigurationType.
	// StreamStreamRangeListSettingList is tBD
	Setting() StreamStreamRangeListSettingList
	// SetSetting assigns StreamStreamRangeListSettingList provided by user to StreamRangeListConfigurationType.
	// StreamStreamRangeListSettingList is tBD
	SetSetting(value StreamStreamRangeListSettingList) StreamRangeListConfigurationType
	// HasSetting checks if Setting has been set in StreamRangeListConfigurationType
	HasSetting() bool
	setNil()
}

func (obj *streamRangeListConfigurationType) populateXml(xObj *Argument) error {

	return nil
}

func (obj *streamRangeListConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Setting returns a StreamStreamRangeListSettingList
func (obj *streamRangeListConfigurationType) Setting() StreamStreamRangeListSettingList {
	if obj.obj.Setting == nil {
		obj.obj.Setting = NewStreamStreamRangeListSettingList().Msg()
	}
	if obj.settingHolder == nil {
		obj.settingHolder = &streamStreamRangeListSettingList{obj: obj.obj.Setting}
	}
	return obj.settingHolder
}

// TBD
// Setting returns a StreamStreamRangeListSettingList
func (obj *streamRangeListConfigurationType) HasSetting() bool {
	return obj.obj.Setting != nil
}

// TBD
// SetSetting sets the StreamStreamRangeListSettingList value in the StreamRangeListConfigurationType object
func (obj *streamRangeListConfigurationType) SetSetting(value StreamStreamRangeListSettingList) StreamRangeListConfigurationType {

	obj.settingHolder = nil
	obj.obj.Setting = value.Msg()

	return obj
}

func (obj *streamRangeListConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Setting != nil {

		obj.Setting().validateObj(vObj, set_default)
	}

}

func (obj *streamRangeListConfigurationType) setDefault() {

}

// ***** StreamKillBitListConfigurationType *****
type streamKillBitListConfigurationType struct {
	validation
	obj           *otg.StreamKillBitListConfigurationType
	settingHolder StreamKillBitListSettingList
}

func NewStreamKillBitListConfigurationType() StreamKillBitListConfigurationType {
	obj := streamKillBitListConfigurationType{obj: &otg.StreamKillBitListConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamKillBitListConfigurationType) Msg() *otg.StreamKillBitListConfigurationType {
	return obj.obj
}

func (obj *streamKillBitListConfigurationType) SetMsg(msg *otg.StreamKillBitListConfigurationType) StreamKillBitListConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamKillBitListConfigurationType) ToProto() (*otg.StreamKillBitListConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamKillBitListConfigurationType) FromProto(msg *otg.StreamKillBitListConfigurationType) (StreamKillBitListConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamKillBitListConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamKillBitListConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamKillBitListConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamKillBitListConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamKillBitListConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamKillBitListConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamKillBitListConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamKillBitListConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamKillBitListConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamKillBitListConfigurationType) Clone() (StreamKillBitListConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamKillBitListConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamKillBitListConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamKillBitListConfigurationType) setNil() {
	obj.settingHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamKillBitListConfigurationType is tBD
type StreamKillBitListConfigurationType interface {
	Validation
	// Msg marshals StreamKillBitListConfigurationType to protobuf object *otg.StreamKillBitListConfigurationType
	// and doesn't set defaults
	Msg() *otg.StreamKillBitListConfigurationType
	// SetMsg unmarshals StreamKillBitListConfigurationType from protobuf object *otg.StreamKillBitListConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.StreamKillBitListConfigurationType) StreamKillBitListConfigurationType
	// ToProto marshals StreamKillBitListConfigurationType to protobuf object *otg.StreamKillBitListConfigurationType
	ToProto() (*otg.StreamKillBitListConfigurationType, error)
	// ToPbText marshals StreamKillBitListConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamKillBitListConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamKillBitListConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamKillBitListConfigurationType from protobuf object *otg.StreamKillBitListConfigurationType
	FromProto(msg *otg.StreamKillBitListConfigurationType) (StreamKillBitListConfigurationType, error)
	// FromPbText unmarshals StreamKillBitListConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamKillBitListConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamKillBitListConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates StreamKillBitListConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamKillBitListConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Setting returns StreamKillBitListSettingList, set in StreamKillBitListConfigurationType.
	// StreamKillBitListSettingList is tBD
	Setting() StreamKillBitListSettingList
	// SetSetting assigns StreamKillBitListSettingList provided by user to StreamKillBitListConfigurationType.
	// StreamKillBitListSettingList is tBD
	SetSetting(value StreamKillBitListSettingList) StreamKillBitListConfigurationType
	// HasSetting checks if Setting has been set in StreamKillBitListConfigurationType
	HasSetting() bool
	setNil()
}

func (obj *streamKillBitListConfigurationType) populateXml(xObj *Argument) error {

	return nil
}

func (obj *streamKillBitListConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Setting returns a StreamKillBitListSettingList
func (obj *streamKillBitListConfigurationType) Setting() StreamKillBitListSettingList {
	if obj.obj.Setting == nil {
		obj.obj.Setting = NewStreamKillBitListSettingList().Msg()
	}
	if obj.settingHolder == nil {
		obj.settingHolder = &streamKillBitListSettingList{obj: obj.obj.Setting}
	}
	return obj.settingHolder
}

// TBD
// Setting returns a StreamKillBitListSettingList
func (obj *streamKillBitListConfigurationType) HasSetting() bool {
	return obj.obj.Setting != nil
}

// TBD
// SetSetting sets the StreamKillBitListSettingList value in the StreamKillBitListConfigurationType object
func (obj *streamKillBitListConfigurationType) SetSetting(value StreamKillBitListSettingList) StreamKillBitListConfigurationType {

	obj.settingHolder = nil
	obj.obj.Setting = value.Msg()

	return obj
}

func (obj *streamKillBitListConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Setting != nil {

		obj.Setting().validateObj(vObj, set_default)
	}

}

func (obj *streamKillBitListConfigurationType) setDefault() {

}

// ***** StreamStreamTableUdfDataTypeList *****
type streamStreamTableUdfDataTypeList struct {
	validation
	obj                              *otg.StreamStreamTableUdfDataTypeList
	streamTableUdfDataTypeListHolder StreamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter
}

func NewStreamStreamTableUdfDataTypeList() StreamStreamTableUdfDataTypeList {
	obj := streamStreamTableUdfDataTypeList{obj: &otg.StreamStreamTableUdfDataTypeList{}}
	obj.setDefault()
	return &obj
}

func (obj *streamStreamTableUdfDataTypeList) Msg() *otg.StreamStreamTableUdfDataTypeList {
	return obj.obj
}

func (obj *streamStreamTableUdfDataTypeList) SetMsg(msg *otg.StreamStreamTableUdfDataTypeList) StreamStreamTableUdfDataTypeList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamStreamTableUdfDataTypeList) ToProto() (*otg.StreamStreamTableUdfDataTypeList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamStreamTableUdfDataTypeList) FromProto(msg *otg.StreamStreamTableUdfDataTypeList) (StreamStreamTableUdfDataTypeList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamStreamTableUdfDataTypeList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamStreamTableUdfDataTypeList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamStreamTableUdfDataTypeList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamStreamTableUdfDataTypeList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamStreamTableUdfDataTypeList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamStreamTableUdfDataTypeList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamStreamTableUdfDataTypeList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamStreamTableUdfDataTypeList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamStreamTableUdfDataTypeList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamStreamTableUdfDataTypeList) Clone() (StreamStreamTableUdfDataTypeList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamStreamTableUdfDataTypeList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamStreamTableUdfDataTypeList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamStreamTableUdfDataTypeList) setNil() {
	obj.streamTableUdfDataTypeListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamStreamTableUdfDataTypeList is tBD
type StreamStreamTableUdfDataTypeList interface {
	Validation
	// Msg marshals StreamStreamTableUdfDataTypeList to protobuf object *otg.StreamStreamTableUdfDataTypeList
	// and doesn't set defaults
	Msg() *otg.StreamStreamTableUdfDataTypeList
	// SetMsg unmarshals StreamStreamTableUdfDataTypeList from protobuf object *otg.StreamStreamTableUdfDataTypeList
	// and doesn't set defaults
	SetMsg(*otg.StreamStreamTableUdfDataTypeList) StreamStreamTableUdfDataTypeList
	// ToProto marshals StreamStreamTableUdfDataTypeList to protobuf object *otg.StreamStreamTableUdfDataTypeList
	ToProto() (*otg.StreamStreamTableUdfDataTypeList, error)
	// ToPbText marshals StreamStreamTableUdfDataTypeList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamStreamTableUdfDataTypeList to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamStreamTableUdfDataTypeList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamStreamTableUdfDataTypeList from protobuf object *otg.StreamStreamTableUdfDataTypeList
	FromProto(msg *otg.StreamStreamTableUdfDataTypeList) (StreamStreamTableUdfDataTypeList, error)
	// FromPbText unmarshals StreamStreamTableUdfDataTypeList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamStreamTableUdfDataTypeList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamStreamTableUdfDataTypeList from JSON text
	FromJson(value string) error
	// Validate validates StreamStreamTableUdfDataTypeList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamStreamTableUdfDataTypeList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// StreamTableUdfDataTypeList returns StreamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIterIter, set in StreamStreamTableUdfDataTypeList
	StreamTableUdfDataTypeList() StreamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter
	setNil()
}

func (obj *streamStreamTableUdfDataTypeList) populateXml(xObj *Argument) error {

	if len(obj.StreamTableUdfDataTypeList().Items()) != 0 {
		for _, item := range obj.StreamTableUdfDataTypeList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *streamStreamTableUdfDataTypeList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// StreamTableUdfDataTypeList returns a []StreamStreamTableUdfDataType
func (obj *streamStreamTableUdfDataTypeList) StreamTableUdfDataTypeList() StreamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter {
	if len(obj.obj.StreamTableUdfDataTypeList) == 0 {
		obj.obj.StreamTableUdfDataTypeList = []*otg.StreamStreamTableUdfDataType{}
	}
	if obj.streamTableUdfDataTypeListHolder == nil {
		obj.streamTableUdfDataTypeListHolder = newStreamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter(&obj.obj.StreamTableUdfDataTypeList).setMsg(obj)
	}
	return obj.streamTableUdfDataTypeListHolder
}

type streamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter struct {
	obj                               *streamStreamTableUdfDataTypeList
	streamStreamTableUdfDataTypeSlice []StreamStreamTableUdfDataType
	fieldPtr                          *[]*otg.StreamStreamTableUdfDataType
}

func newStreamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter(ptr *[]*otg.StreamStreamTableUdfDataType) StreamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter {
	return &streamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter{fieldPtr: ptr}
}

type StreamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter interface {
	setMsg(*streamStreamTableUdfDataTypeList) StreamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter
	Items() []StreamStreamTableUdfDataType
	Add() StreamStreamTableUdfDataType
	Append(items ...StreamStreamTableUdfDataType) StreamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter
	Set(index int, newObj StreamStreamTableUdfDataType) StreamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter
	Clear() StreamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter
	clearHolderSlice() StreamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter
	appendHolderSlice(item StreamStreamTableUdfDataType) StreamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter
}

func (obj *streamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter) setMsg(msg *streamStreamTableUdfDataTypeList) StreamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&streamStreamTableUdfDataType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *streamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter) Items() []StreamStreamTableUdfDataType {
	return obj.streamStreamTableUdfDataTypeSlice
}

func (obj *streamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter) Add() StreamStreamTableUdfDataType {
	newObj := &otg.StreamStreamTableUdfDataType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &streamStreamTableUdfDataType{obj: newObj}
	newLibObj.setDefault()
	obj.streamStreamTableUdfDataTypeSlice = append(obj.streamStreamTableUdfDataTypeSlice, newLibObj)
	return newLibObj
}

func (obj *streamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter) Append(items ...StreamStreamTableUdfDataType) StreamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.streamStreamTableUdfDataTypeSlice = append(obj.streamStreamTableUdfDataTypeSlice, item)
	}
	return obj
}

func (obj *streamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter) Set(index int, newObj StreamStreamTableUdfDataType) StreamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.streamStreamTableUdfDataTypeSlice[index] = newObj
	return obj
}
func (obj *streamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter) Clear() StreamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.StreamStreamTableUdfDataType{}
		obj.streamStreamTableUdfDataTypeSlice = []StreamStreamTableUdfDataType{}
	}
	return obj
}
func (obj *streamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter) clearHolderSlice() StreamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter {
	if len(obj.streamStreamTableUdfDataTypeSlice) > 0 {
		obj.streamStreamTableUdfDataTypeSlice = []StreamStreamTableUdfDataType{}
	}
	return obj
}
func (obj *streamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter) appendHolderSlice(item StreamStreamTableUdfDataType) StreamStreamTableUdfDataTypeListStreamStreamTableUdfDataTypeIter {
	obj.streamStreamTableUdfDataTypeSlice = append(obj.streamStreamTableUdfDataTypeSlice, item)
	return obj
}

func (obj *streamStreamTableUdfDataTypeList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.StreamTableUdfDataTypeList) != 0 {

		if set_default {
			obj.StreamTableUdfDataTypeList().clearHolderSlice()
			for _, item := range obj.obj.StreamTableUdfDataTypeList {
				obj.StreamTableUdfDataTypeList().appendHolderSlice(&streamStreamTableUdfDataType{obj: item})
			}
		}
		for _, item := range obj.StreamTableUdfDataTypeList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *streamStreamTableUdfDataTypeList) setDefault() {

}

// ***** StreamKillBitListSettingList *****
type streamKillBitListSettingList struct {
	validation
	obj                          *otg.StreamKillBitListSettingList
	killBitListSettingListHolder StreamKillBitListSettingListStreamKillBitListSettingTypeIter
}

func NewStreamKillBitListSettingList() StreamKillBitListSettingList {
	obj := streamKillBitListSettingList{obj: &otg.StreamKillBitListSettingList{}}
	obj.setDefault()
	return &obj
}

func (obj *streamKillBitListSettingList) Msg() *otg.StreamKillBitListSettingList {
	return obj.obj
}

func (obj *streamKillBitListSettingList) SetMsg(msg *otg.StreamKillBitListSettingList) StreamKillBitListSettingList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamKillBitListSettingList) ToProto() (*otg.StreamKillBitListSettingList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamKillBitListSettingList) FromProto(msg *otg.StreamKillBitListSettingList) (StreamKillBitListSettingList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamKillBitListSettingList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamKillBitListSettingList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamKillBitListSettingList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamKillBitListSettingList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamKillBitListSettingList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamKillBitListSettingList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamKillBitListSettingList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamKillBitListSettingList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamKillBitListSettingList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamKillBitListSettingList) Clone() (StreamKillBitListSettingList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamKillBitListSettingList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamKillBitListSettingList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamKillBitListSettingList) setNil() {
	obj.killBitListSettingListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamKillBitListSettingList is tBD
type StreamKillBitListSettingList interface {
	Validation
	// Msg marshals StreamKillBitListSettingList to protobuf object *otg.StreamKillBitListSettingList
	// and doesn't set defaults
	Msg() *otg.StreamKillBitListSettingList
	// SetMsg unmarshals StreamKillBitListSettingList from protobuf object *otg.StreamKillBitListSettingList
	// and doesn't set defaults
	SetMsg(*otg.StreamKillBitListSettingList) StreamKillBitListSettingList
	// ToProto marshals StreamKillBitListSettingList to protobuf object *otg.StreamKillBitListSettingList
	ToProto() (*otg.StreamKillBitListSettingList, error)
	// ToPbText marshals StreamKillBitListSettingList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamKillBitListSettingList to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamKillBitListSettingList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamKillBitListSettingList from protobuf object *otg.StreamKillBitListSettingList
	FromProto(msg *otg.StreamKillBitListSettingList) (StreamKillBitListSettingList, error)
	// FromPbText unmarshals StreamKillBitListSettingList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamKillBitListSettingList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamKillBitListSettingList from JSON text
	FromJson(value string) error
	// Validate validates StreamKillBitListSettingList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamKillBitListSettingList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// KillBitListSettingList returns StreamKillBitListSettingListStreamKillBitListSettingTypeIterIter, set in StreamKillBitListSettingList
	KillBitListSettingList() StreamKillBitListSettingListStreamKillBitListSettingTypeIter
	setNil()
}

func (obj *streamKillBitListSettingList) populateXml(xObj *Argument) error {

	if len(obj.KillBitListSettingList().Items()) != 0 {
		for _, item := range obj.KillBitListSettingList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *streamKillBitListSettingList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// KillBitListSettingList returns a []StreamKillBitListSettingType
func (obj *streamKillBitListSettingList) KillBitListSettingList() StreamKillBitListSettingListStreamKillBitListSettingTypeIter {
	if len(obj.obj.KillBitListSettingList) == 0 {
		obj.obj.KillBitListSettingList = []*otg.StreamKillBitListSettingType{}
	}
	if obj.killBitListSettingListHolder == nil {
		obj.killBitListSettingListHolder = newStreamKillBitListSettingListStreamKillBitListSettingTypeIter(&obj.obj.KillBitListSettingList).setMsg(obj)
	}
	return obj.killBitListSettingListHolder
}

type streamKillBitListSettingListStreamKillBitListSettingTypeIter struct {
	obj                               *streamKillBitListSettingList
	streamKillBitListSettingTypeSlice []StreamKillBitListSettingType
	fieldPtr                          *[]*otg.StreamKillBitListSettingType
}

func newStreamKillBitListSettingListStreamKillBitListSettingTypeIter(ptr *[]*otg.StreamKillBitListSettingType) StreamKillBitListSettingListStreamKillBitListSettingTypeIter {
	return &streamKillBitListSettingListStreamKillBitListSettingTypeIter{fieldPtr: ptr}
}

type StreamKillBitListSettingListStreamKillBitListSettingTypeIter interface {
	setMsg(*streamKillBitListSettingList) StreamKillBitListSettingListStreamKillBitListSettingTypeIter
	Items() []StreamKillBitListSettingType
	Add() StreamKillBitListSettingType
	Append(items ...StreamKillBitListSettingType) StreamKillBitListSettingListStreamKillBitListSettingTypeIter
	Set(index int, newObj StreamKillBitListSettingType) StreamKillBitListSettingListStreamKillBitListSettingTypeIter
	Clear() StreamKillBitListSettingListStreamKillBitListSettingTypeIter
	clearHolderSlice() StreamKillBitListSettingListStreamKillBitListSettingTypeIter
	appendHolderSlice(item StreamKillBitListSettingType) StreamKillBitListSettingListStreamKillBitListSettingTypeIter
}

func (obj *streamKillBitListSettingListStreamKillBitListSettingTypeIter) setMsg(msg *streamKillBitListSettingList) StreamKillBitListSettingListStreamKillBitListSettingTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&streamKillBitListSettingType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *streamKillBitListSettingListStreamKillBitListSettingTypeIter) Items() []StreamKillBitListSettingType {
	return obj.streamKillBitListSettingTypeSlice
}

func (obj *streamKillBitListSettingListStreamKillBitListSettingTypeIter) Add() StreamKillBitListSettingType {
	newObj := &otg.StreamKillBitListSettingType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &streamKillBitListSettingType{obj: newObj}
	newLibObj.setDefault()
	obj.streamKillBitListSettingTypeSlice = append(obj.streamKillBitListSettingTypeSlice, newLibObj)
	return newLibObj
}

func (obj *streamKillBitListSettingListStreamKillBitListSettingTypeIter) Append(items ...StreamKillBitListSettingType) StreamKillBitListSettingListStreamKillBitListSettingTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.streamKillBitListSettingTypeSlice = append(obj.streamKillBitListSettingTypeSlice, item)
	}
	return obj
}

func (obj *streamKillBitListSettingListStreamKillBitListSettingTypeIter) Set(index int, newObj StreamKillBitListSettingType) StreamKillBitListSettingListStreamKillBitListSettingTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.streamKillBitListSettingTypeSlice[index] = newObj
	return obj
}
func (obj *streamKillBitListSettingListStreamKillBitListSettingTypeIter) Clear() StreamKillBitListSettingListStreamKillBitListSettingTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.StreamKillBitListSettingType{}
		obj.streamKillBitListSettingTypeSlice = []StreamKillBitListSettingType{}
	}
	return obj
}
func (obj *streamKillBitListSettingListStreamKillBitListSettingTypeIter) clearHolderSlice() StreamKillBitListSettingListStreamKillBitListSettingTypeIter {
	if len(obj.streamKillBitListSettingTypeSlice) > 0 {
		obj.streamKillBitListSettingTypeSlice = []StreamKillBitListSettingType{}
	}
	return obj
}
func (obj *streamKillBitListSettingListStreamKillBitListSettingTypeIter) appendHolderSlice(item StreamKillBitListSettingType) StreamKillBitListSettingListStreamKillBitListSettingTypeIter {
	obj.streamKillBitListSettingTypeSlice = append(obj.streamKillBitListSettingTypeSlice, item)
	return obj
}

func (obj *streamKillBitListSettingList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.KillBitListSettingList) != 0 {

		if set_default {
			obj.KillBitListSettingList().clearHolderSlice()
			for _, item := range obj.obj.KillBitListSettingList {
				obj.KillBitListSettingList().appendHolderSlice(&streamKillBitListSettingType{obj: item})
			}
		}
		for _, item := range obj.KillBitListSettingList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *streamKillBitListSettingList) setDefault() {

}

// ***** StreamStreamValueListSettingList *****
type streamStreamValueListSettingList struct {
	validation
	obj                              *otg.StreamStreamValueListSettingList
	streamValueListSettingListHolder StreamStreamValueListSettingListStreamStreamValueListSettingTypeIter
}

func NewStreamStreamValueListSettingList() StreamStreamValueListSettingList {
	obj := streamStreamValueListSettingList{obj: &otg.StreamStreamValueListSettingList{}}
	obj.setDefault()
	return &obj
}

func (obj *streamStreamValueListSettingList) Msg() *otg.StreamStreamValueListSettingList {
	return obj.obj
}

func (obj *streamStreamValueListSettingList) SetMsg(msg *otg.StreamStreamValueListSettingList) StreamStreamValueListSettingList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamStreamValueListSettingList) ToProto() (*otg.StreamStreamValueListSettingList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamStreamValueListSettingList) FromProto(msg *otg.StreamStreamValueListSettingList) (StreamStreamValueListSettingList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamStreamValueListSettingList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamStreamValueListSettingList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamStreamValueListSettingList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamStreamValueListSettingList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamStreamValueListSettingList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamStreamValueListSettingList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamStreamValueListSettingList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamStreamValueListSettingList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamStreamValueListSettingList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamStreamValueListSettingList) Clone() (StreamStreamValueListSettingList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamStreamValueListSettingList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamStreamValueListSettingList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamStreamValueListSettingList) setNil() {
	obj.streamValueListSettingListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamStreamValueListSettingList is tBD
type StreamStreamValueListSettingList interface {
	Validation
	// Msg marshals StreamStreamValueListSettingList to protobuf object *otg.StreamStreamValueListSettingList
	// and doesn't set defaults
	Msg() *otg.StreamStreamValueListSettingList
	// SetMsg unmarshals StreamStreamValueListSettingList from protobuf object *otg.StreamStreamValueListSettingList
	// and doesn't set defaults
	SetMsg(*otg.StreamStreamValueListSettingList) StreamStreamValueListSettingList
	// ToProto marshals StreamStreamValueListSettingList to protobuf object *otg.StreamStreamValueListSettingList
	ToProto() (*otg.StreamStreamValueListSettingList, error)
	// ToPbText marshals StreamStreamValueListSettingList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamStreamValueListSettingList to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamStreamValueListSettingList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamStreamValueListSettingList from protobuf object *otg.StreamStreamValueListSettingList
	FromProto(msg *otg.StreamStreamValueListSettingList) (StreamStreamValueListSettingList, error)
	// FromPbText unmarshals StreamStreamValueListSettingList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamStreamValueListSettingList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamStreamValueListSettingList from JSON text
	FromJson(value string) error
	// Validate validates StreamStreamValueListSettingList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamStreamValueListSettingList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// StreamValueListSettingList returns StreamStreamValueListSettingListStreamStreamValueListSettingTypeIterIter, set in StreamStreamValueListSettingList
	StreamValueListSettingList() StreamStreamValueListSettingListStreamStreamValueListSettingTypeIter
	setNil()
}

func (obj *streamStreamValueListSettingList) populateXml(xObj *Argument) error {

	if len(obj.StreamValueListSettingList().Items()) != 0 {
		for _, item := range obj.StreamValueListSettingList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *streamStreamValueListSettingList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// StreamValueListSettingList returns a []StreamStreamValueListSettingType
func (obj *streamStreamValueListSettingList) StreamValueListSettingList() StreamStreamValueListSettingListStreamStreamValueListSettingTypeIter {
	if len(obj.obj.StreamValueListSettingList) == 0 {
		obj.obj.StreamValueListSettingList = []*otg.StreamStreamValueListSettingType{}
	}
	if obj.streamValueListSettingListHolder == nil {
		obj.streamValueListSettingListHolder = newStreamStreamValueListSettingListStreamStreamValueListSettingTypeIter(&obj.obj.StreamValueListSettingList).setMsg(obj)
	}
	return obj.streamValueListSettingListHolder
}

type streamStreamValueListSettingListStreamStreamValueListSettingTypeIter struct {
	obj                                   *streamStreamValueListSettingList
	streamStreamValueListSettingTypeSlice []StreamStreamValueListSettingType
	fieldPtr                              *[]*otg.StreamStreamValueListSettingType
}

func newStreamStreamValueListSettingListStreamStreamValueListSettingTypeIter(ptr *[]*otg.StreamStreamValueListSettingType) StreamStreamValueListSettingListStreamStreamValueListSettingTypeIter {
	return &streamStreamValueListSettingListStreamStreamValueListSettingTypeIter{fieldPtr: ptr}
}

type StreamStreamValueListSettingListStreamStreamValueListSettingTypeIter interface {
	setMsg(*streamStreamValueListSettingList) StreamStreamValueListSettingListStreamStreamValueListSettingTypeIter
	Items() []StreamStreamValueListSettingType
	Add() StreamStreamValueListSettingType
	Append(items ...StreamStreamValueListSettingType) StreamStreamValueListSettingListStreamStreamValueListSettingTypeIter
	Set(index int, newObj StreamStreamValueListSettingType) StreamStreamValueListSettingListStreamStreamValueListSettingTypeIter
	Clear() StreamStreamValueListSettingListStreamStreamValueListSettingTypeIter
	clearHolderSlice() StreamStreamValueListSettingListStreamStreamValueListSettingTypeIter
	appendHolderSlice(item StreamStreamValueListSettingType) StreamStreamValueListSettingListStreamStreamValueListSettingTypeIter
}

func (obj *streamStreamValueListSettingListStreamStreamValueListSettingTypeIter) setMsg(msg *streamStreamValueListSettingList) StreamStreamValueListSettingListStreamStreamValueListSettingTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&streamStreamValueListSettingType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *streamStreamValueListSettingListStreamStreamValueListSettingTypeIter) Items() []StreamStreamValueListSettingType {
	return obj.streamStreamValueListSettingTypeSlice
}

func (obj *streamStreamValueListSettingListStreamStreamValueListSettingTypeIter) Add() StreamStreamValueListSettingType {
	newObj := &otg.StreamStreamValueListSettingType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &streamStreamValueListSettingType{obj: newObj}
	newLibObj.setDefault()
	obj.streamStreamValueListSettingTypeSlice = append(obj.streamStreamValueListSettingTypeSlice, newLibObj)
	return newLibObj
}

func (obj *streamStreamValueListSettingListStreamStreamValueListSettingTypeIter) Append(items ...StreamStreamValueListSettingType) StreamStreamValueListSettingListStreamStreamValueListSettingTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.streamStreamValueListSettingTypeSlice = append(obj.streamStreamValueListSettingTypeSlice, item)
	}
	return obj
}

func (obj *streamStreamValueListSettingListStreamStreamValueListSettingTypeIter) Set(index int, newObj StreamStreamValueListSettingType) StreamStreamValueListSettingListStreamStreamValueListSettingTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.streamStreamValueListSettingTypeSlice[index] = newObj
	return obj
}
func (obj *streamStreamValueListSettingListStreamStreamValueListSettingTypeIter) Clear() StreamStreamValueListSettingListStreamStreamValueListSettingTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.StreamStreamValueListSettingType{}
		obj.streamStreamValueListSettingTypeSlice = []StreamStreamValueListSettingType{}
	}
	return obj
}
func (obj *streamStreamValueListSettingListStreamStreamValueListSettingTypeIter) clearHolderSlice() StreamStreamValueListSettingListStreamStreamValueListSettingTypeIter {
	if len(obj.streamStreamValueListSettingTypeSlice) > 0 {
		obj.streamStreamValueListSettingTypeSlice = []StreamStreamValueListSettingType{}
	}
	return obj
}
func (obj *streamStreamValueListSettingListStreamStreamValueListSettingTypeIter) appendHolderSlice(item StreamStreamValueListSettingType) StreamStreamValueListSettingListStreamStreamValueListSettingTypeIter {
	obj.streamStreamValueListSettingTypeSlice = append(obj.streamStreamValueListSettingTypeSlice, item)
	return obj
}

func (obj *streamStreamValueListSettingList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.StreamValueListSettingList) != 0 {

		if set_default {
			obj.StreamValueListSettingList().clearHolderSlice()
			for _, item := range obj.obj.StreamValueListSettingList {
				obj.StreamValueListSettingList().appendHolderSlice(&streamStreamValueListSettingType{obj: item})
			}
		}
		for _, item := range obj.StreamValueListSettingList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *streamStreamValueListSettingList) setDefault() {

}

// ***** MacSecTxMacSecGlobalPortConfigType *****
type macSecTxMacSecGlobalPortConfigType struct {
	validation
	obj *otg.MacSecTxMacSecGlobalPortConfigType
}

func NewMacSecTxMacSecGlobalPortConfigType() MacSecTxMacSecGlobalPortConfigType {
	obj := macSecTxMacSecGlobalPortConfigType{obj: &otg.MacSecTxMacSecGlobalPortConfigType{}}
	obj.setDefault()
	return &obj
}

func (obj *macSecTxMacSecGlobalPortConfigType) Msg() *otg.MacSecTxMacSecGlobalPortConfigType {
	return obj.obj
}

func (obj *macSecTxMacSecGlobalPortConfigType) SetMsg(msg *otg.MacSecTxMacSecGlobalPortConfigType) MacSecTxMacSecGlobalPortConfigType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *macSecTxMacSecGlobalPortConfigType) ToProto() (*otg.MacSecTxMacSecGlobalPortConfigType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *macSecTxMacSecGlobalPortConfigType) FromProto(msg *otg.MacSecTxMacSecGlobalPortConfigType) (MacSecTxMacSecGlobalPortConfigType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *macSecTxMacSecGlobalPortConfigType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *macSecTxMacSecGlobalPortConfigType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *macSecTxMacSecGlobalPortConfigType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecTxMacSecGlobalPortConfigType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *macSecTxMacSecGlobalPortConfigType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecTxMacSecGlobalPortConfigType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *macSecTxMacSecGlobalPortConfigType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *macSecTxMacSecGlobalPortConfigType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *macSecTxMacSecGlobalPortConfigType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *macSecTxMacSecGlobalPortConfigType) Clone() (MacSecTxMacSecGlobalPortConfigType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewMacSecTxMacSecGlobalPortConfigType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *macSecTxMacSecGlobalPortConfigType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// MacSecTxMacSecGlobalPortConfigType is tBD
type MacSecTxMacSecGlobalPortConfigType interface {
	Validation
	// Msg marshals MacSecTxMacSecGlobalPortConfigType to protobuf object *otg.MacSecTxMacSecGlobalPortConfigType
	// and doesn't set defaults
	Msg() *otg.MacSecTxMacSecGlobalPortConfigType
	// SetMsg unmarshals MacSecTxMacSecGlobalPortConfigType from protobuf object *otg.MacSecTxMacSecGlobalPortConfigType
	// and doesn't set defaults
	SetMsg(*otg.MacSecTxMacSecGlobalPortConfigType) MacSecTxMacSecGlobalPortConfigType
	// ToProto marshals MacSecTxMacSecGlobalPortConfigType to protobuf object *otg.MacSecTxMacSecGlobalPortConfigType
	ToProto() (*otg.MacSecTxMacSecGlobalPortConfigType, error)
	// ToPbText marshals MacSecTxMacSecGlobalPortConfigType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals MacSecTxMacSecGlobalPortConfigType to YAML text
	ToYaml() (string, error)
	// ToJson marshals MacSecTxMacSecGlobalPortConfigType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals MacSecTxMacSecGlobalPortConfigType from protobuf object *otg.MacSecTxMacSecGlobalPortConfigType
	FromProto(msg *otg.MacSecTxMacSecGlobalPortConfigType) (MacSecTxMacSecGlobalPortConfigType, error)
	// FromPbText unmarshals MacSecTxMacSecGlobalPortConfigType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals MacSecTxMacSecGlobalPortConfigType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals MacSecTxMacSecGlobalPortConfigType from JSON text
	FromJson(value string) error
	// Validate validates MacSecTxMacSecGlobalPortConfigType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (MacSecTxMacSecGlobalPortConfigType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// EnableGlobalConfig returns bool, set in MacSecTxMacSecGlobalPortConfigType.
	EnableGlobalConfig() bool
	// SetEnableGlobalConfig assigns bool provided by user to MacSecTxMacSecGlobalPortConfigType
	SetEnableGlobalConfig(value bool) MacSecTxMacSecGlobalPortConfigType
	// HasEnableGlobalConfig checks if EnableGlobalConfig has been set in MacSecTxMacSecGlobalPortConfigType
	HasEnableGlobalConfig() bool
	// TxTriggerTimer returns int64, set in MacSecTxMacSecGlobalPortConfigType.
	TxTriggerTimer() int64
	// SetTxTriggerTimer assigns int64 provided by user to MacSecTxMacSecGlobalPortConfigType
	SetTxTriggerTimer(value int64) MacSecTxMacSecGlobalPortConfigType
	// HasTxTriggerTimer checks if TxTriggerTimer has been set in MacSecTxMacSecGlobalPortConfigType
	HasTxTriggerTimer() bool
}

func (obj *macSecTxMacSecGlobalPortConfigType) populateXml(xObj *Argument) error {

	if obj.HasEnableGlobalConfig() {
		var value string
		if obj.EnableGlobalConfig() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enableglobalconfig",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasTxTriggerTimer() {

		member := Member{
			Name:  "txtriggertimer",
			Type:  "int64",
			Value: strconv.FormatInt(obj.TxTriggerTimer(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *macSecTxMacSecGlobalPortConfigType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// EnableGlobalConfig returns a bool
func (obj *macSecTxMacSecGlobalPortConfigType) EnableGlobalConfig() bool {

	return *obj.obj.EnableGlobalConfig

}

// TBD
// EnableGlobalConfig returns a bool
func (obj *macSecTxMacSecGlobalPortConfigType) HasEnableGlobalConfig() bool {
	return obj.obj.EnableGlobalConfig != nil
}

// TBD
// SetEnableGlobalConfig sets the bool value in the MacSecTxMacSecGlobalPortConfigType object
func (obj *macSecTxMacSecGlobalPortConfigType) SetEnableGlobalConfig(value bool) MacSecTxMacSecGlobalPortConfigType {

	obj.obj.EnableGlobalConfig = &value
	return obj
}

// TBD
// TxTriggerTimer returns a int64
func (obj *macSecTxMacSecGlobalPortConfigType) TxTriggerTimer() int64 {

	return *obj.obj.TxTriggerTimer

}

// TBD
// TxTriggerTimer returns a int64
func (obj *macSecTxMacSecGlobalPortConfigType) HasTxTriggerTimer() bool {
	return obj.obj.TxTriggerTimer != nil
}

// TBD
// SetTxTriggerTimer sets the int64 value in the MacSecTxMacSecGlobalPortConfigType object
func (obj *macSecTxMacSecGlobalPortConfigType) SetTxTriggerTimer(value int64) MacSecTxMacSecGlobalPortConfigType {

	obj.obj.TxTriggerTimer = &value
	return obj
}

func (obj *macSecTxMacSecGlobalPortConfigType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *macSecTxMacSecGlobalPortConfigType) setDefault() {

}

// ***** MacSecRxMacSecGlobalPortConfigType *****
type macSecRxMacSecGlobalPortConfigType struct {
	validation
	obj                              *otg.MacSecRxMacSecGlobalPortConfigType
	rxMgidConfigHolder               MacSecRxMGIDConfigurationType
	unauthenticatedData0ConfigHolder MacSecUnauthenticatedDataConfigurationType
	unauthenticatedData1ConfigHolder MacSecUnauthenticatedDataConfigurationType
}

func NewMacSecRxMacSecGlobalPortConfigType() MacSecRxMacSecGlobalPortConfigType {
	obj := macSecRxMacSecGlobalPortConfigType{obj: &otg.MacSecRxMacSecGlobalPortConfigType{}}
	obj.setDefault()
	return &obj
}

func (obj *macSecRxMacSecGlobalPortConfigType) Msg() *otg.MacSecRxMacSecGlobalPortConfigType {
	return obj.obj
}

func (obj *macSecRxMacSecGlobalPortConfigType) SetMsg(msg *otg.MacSecRxMacSecGlobalPortConfigType) MacSecRxMacSecGlobalPortConfigType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *macSecRxMacSecGlobalPortConfigType) ToProto() (*otg.MacSecRxMacSecGlobalPortConfigType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *macSecRxMacSecGlobalPortConfigType) FromProto(msg *otg.MacSecRxMacSecGlobalPortConfigType) (MacSecRxMacSecGlobalPortConfigType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *macSecRxMacSecGlobalPortConfigType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *macSecRxMacSecGlobalPortConfigType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *macSecRxMacSecGlobalPortConfigType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecRxMacSecGlobalPortConfigType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *macSecRxMacSecGlobalPortConfigType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecRxMacSecGlobalPortConfigType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *macSecRxMacSecGlobalPortConfigType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *macSecRxMacSecGlobalPortConfigType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *macSecRxMacSecGlobalPortConfigType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *macSecRxMacSecGlobalPortConfigType) Clone() (MacSecRxMacSecGlobalPortConfigType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewMacSecRxMacSecGlobalPortConfigType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *macSecRxMacSecGlobalPortConfigType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *macSecRxMacSecGlobalPortConfigType) setNil() {
	obj.rxMgidConfigHolder = nil
	obj.unauthenticatedData0ConfigHolder = nil
	obj.unauthenticatedData1ConfigHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// MacSecRxMacSecGlobalPortConfigType is tBD
type MacSecRxMacSecGlobalPortConfigType interface {
	Validation
	// Msg marshals MacSecRxMacSecGlobalPortConfigType to protobuf object *otg.MacSecRxMacSecGlobalPortConfigType
	// and doesn't set defaults
	Msg() *otg.MacSecRxMacSecGlobalPortConfigType
	// SetMsg unmarshals MacSecRxMacSecGlobalPortConfigType from protobuf object *otg.MacSecRxMacSecGlobalPortConfigType
	// and doesn't set defaults
	SetMsg(*otg.MacSecRxMacSecGlobalPortConfigType) MacSecRxMacSecGlobalPortConfigType
	// ToProto marshals MacSecRxMacSecGlobalPortConfigType to protobuf object *otg.MacSecRxMacSecGlobalPortConfigType
	ToProto() (*otg.MacSecRxMacSecGlobalPortConfigType, error)
	// ToPbText marshals MacSecRxMacSecGlobalPortConfigType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals MacSecRxMacSecGlobalPortConfigType to YAML text
	ToYaml() (string, error)
	// ToJson marshals MacSecRxMacSecGlobalPortConfigType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals MacSecRxMacSecGlobalPortConfigType from protobuf object *otg.MacSecRxMacSecGlobalPortConfigType
	FromProto(msg *otg.MacSecRxMacSecGlobalPortConfigType) (MacSecRxMacSecGlobalPortConfigType, error)
	// FromPbText unmarshals MacSecRxMacSecGlobalPortConfigType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals MacSecRxMacSecGlobalPortConfigType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals MacSecRxMacSecGlobalPortConfigType from JSON text
	FromJson(value string) error
	// Validate validates MacSecRxMacSecGlobalPortConfigType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (MacSecRxMacSecGlobalPortConfigType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// EnableGlobalConfig returns bool, set in MacSecRxMacSecGlobalPortConfigType.
	EnableGlobalConfig() bool
	// SetEnableGlobalConfig assigns bool provided by user to MacSecRxMacSecGlobalPortConfigType
	SetEnableGlobalConfig(value bool) MacSecRxMacSecGlobalPortConfigType
	// HasEnableGlobalConfig checks if EnableGlobalConfig has been set in MacSecRxMacSecGlobalPortConfigType
	HasEnableGlobalConfig() bool
	// RxEgressMgidCaSource returns bool, set in MacSecRxMacSecGlobalPortConfigType.
	RxEgressMgidCaSource() bool
	// SetRxEgressMgidCaSource assigns bool provided by user to MacSecRxMacSecGlobalPortConfigType
	SetRxEgressMgidCaSource(value bool) MacSecRxMacSecGlobalPortConfigType
	// HasRxEgressMgidCaSource checks if RxEgressMgidCaSource has been set in MacSecRxMacSecGlobalPortConfigType
	HasRxEgressMgidCaSource() bool
	// RxMacSecTrafficType returns MacSecRxMacSecGlobalPortConfigTypeRxMacSecTrafficTypeEnum, set in MacSecRxMacSecGlobalPortConfigType
	RxMacSecTrafficType() MacSecRxMacSecGlobalPortConfigTypeRxMacSecTrafficTypeEnum
	// SetRxMacSecTrafficType assigns MacSecRxMacSecGlobalPortConfigTypeRxMacSecTrafficTypeEnum provided by user to MacSecRxMacSecGlobalPortConfigType
	SetRxMacSecTrafficType(value MacSecRxMacSecGlobalPortConfigTypeRxMacSecTrafficTypeEnum) MacSecRxMacSecGlobalPortConfigType
	// HasRxMacSecTrafficType checks if RxMacSecTrafficType has been set in MacSecRxMacSecGlobalPortConfigType
	HasRxMacSecTrafficType() bool
	// SectagOffset0 returns int32, set in MacSecRxMacSecGlobalPortConfigType.
	SectagOffset0() int32
	// SetSectagOffset0 assigns int32 provided by user to MacSecRxMacSecGlobalPortConfigType
	SetSectagOffset0(value int32) MacSecRxMacSecGlobalPortConfigType
	// HasSectagOffset0 checks if SectagOffset0 has been set in MacSecRxMacSecGlobalPortConfigType
	HasSectagOffset0() bool
	// SectagOffset1 returns int32, set in MacSecRxMacSecGlobalPortConfigType.
	SectagOffset1() int32
	// SetSectagOffset1 assigns int32 provided by user to MacSecRxMacSecGlobalPortConfigType
	SetSectagOffset1(value int32) MacSecRxMacSecGlobalPortConfigType
	// HasSectagOffset1 checks if SectagOffset1 has been set in MacSecRxMacSecGlobalPortConfigType
	HasSectagOffset1() bool
	// ReplayProtection returns bool, set in MacSecRxMacSecGlobalPortConfigType.
	ReplayProtection() bool
	// SetReplayProtection assigns bool provided by user to MacSecRxMacSecGlobalPortConfigType
	SetReplayProtection(value bool) MacSecRxMacSecGlobalPortConfigType
	// HasReplayProtection checks if ReplayProtection has been set in MacSecRxMacSecGlobalPortConfigType
	HasReplayProtection() bool
	// RxMgidConfig returns MacSecRxMGIDConfigurationType, set in MacSecRxMacSecGlobalPortConfigType.
	// MacSecRxMGIDConfigurationType is tBD
	RxMgidConfig() MacSecRxMGIDConfigurationType
	// SetRxMgidConfig assigns MacSecRxMGIDConfigurationType provided by user to MacSecRxMacSecGlobalPortConfigType.
	// MacSecRxMGIDConfigurationType is tBD
	SetRxMgidConfig(value MacSecRxMGIDConfigurationType) MacSecRxMacSecGlobalPortConfigType
	// HasRxMgidConfig checks if RxMgidConfig has been set in MacSecRxMacSecGlobalPortConfigType
	HasRxMgidConfig() bool
	// UnauthenticatedData0Config returns MacSecUnauthenticatedDataConfigurationType, set in MacSecRxMacSecGlobalPortConfigType.
	// MacSecUnauthenticatedDataConfigurationType is tBD
	UnauthenticatedData0Config() MacSecUnauthenticatedDataConfigurationType
	// SetUnauthenticatedData0Config assigns MacSecUnauthenticatedDataConfigurationType provided by user to MacSecRxMacSecGlobalPortConfigType.
	// MacSecUnauthenticatedDataConfigurationType is tBD
	SetUnauthenticatedData0Config(value MacSecUnauthenticatedDataConfigurationType) MacSecRxMacSecGlobalPortConfigType
	// HasUnauthenticatedData0Config checks if UnauthenticatedData0Config has been set in MacSecRxMacSecGlobalPortConfigType
	HasUnauthenticatedData0Config() bool
	// UnauthenticatedData1Config returns MacSecUnauthenticatedDataConfigurationType, set in MacSecRxMacSecGlobalPortConfigType.
	// MacSecUnauthenticatedDataConfigurationType is tBD
	UnauthenticatedData1Config() MacSecUnauthenticatedDataConfigurationType
	// SetUnauthenticatedData1Config assigns MacSecUnauthenticatedDataConfigurationType provided by user to MacSecRxMacSecGlobalPortConfigType.
	// MacSecUnauthenticatedDataConfigurationType is tBD
	SetUnauthenticatedData1Config(value MacSecUnauthenticatedDataConfigurationType) MacSecRxMacSecGlobalPortConfigType
	// HasUnauthenticatedData1Config checks if UnauthenticatedData1Config has been set in MacSecRxMacSecGlobalPortConfigType
	HasUnauthenticatedData1Config() bool
	setNil()
}

func (obj *macSecRxMacSecGlobalPortConfigType) populateXml(xObj *Argument) error {

	if obj.HasEnableGlobalConfig() {
		var value string
		if obj.EnableGlobalConfig() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enableglobalconfig",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasRxEgressMgidCaSource() {
		var value string
		if obj.RxEgressMgidCaSource() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "rxegressmgidcasource",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasRxMacSecTrafficType() {

		member := Member{
			Name:  "rxmacsectraffictype",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.MacSec+eMacSecTrafficType",
			Value: strconv.FormatInt(int64(obj.obj.RxMacSecTrafficType.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSectagOffset0() {

		member := Member{
			Name:  "sectagoffset0",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.SectagOffset0()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSectagOffset1() {

		member := Member{
			Name:  "sectagoffset1",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.SectagOffset1()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasReplayProtection() {
		var value string
		if obj.ReplayProtection() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "replayprotection",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *macSecRxMacSecGlobalPortConfigType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// EnableGlobalConfig returns a bool
func (obj *macSecRxMacSecGlobalPortConfigType) EnableGlobalConfig() bool {

	return *obj.obj.EnableGlobalConfig

}

// TBD
// EnableGlobalConfig returns a bool
func (obj *macSecRxMacSecGlobalPortConfigType) HasEnableGlobalConfig() bool {
	return obj.obj.EnableGlobalConfig != nil
}

// TBD
// SetEnableGlobalConfig sets the bool value in the MacSecRxMacSecGlobalPortConfigType object
func (obj *macSecRxMacSecGlobalPortConfigType) SetEnableGlobalConfig(value bool) MacSecRxMacSecGlobalPortConfigType {

	obj.obj.EnableGlobalConfig = &value
	return obj
}

// True = The SC Index (as determined by a brute force lookup) is used as the CA portion   of the Split MGID Field   False =  The CA portion of the Split MGID comes from the MGID * CA Extraction.
// RxEgressMgidCaSource returns a bool
func (obj *macSecRxMacSecGlobalPortConfigType) RxEgressMgidCaSource() bool {

	return *obj.obj.RxEgressMgidCaSource

}

// True = The SC Index (as determined by a brute force lookup) is used as the CA portion   of the Split MGID Field   False =  The CA portion of the Split MGID comes from the MGID * CA Extraction.
// RxEgressMgidCaSource returns a bool
func (obj *macSecRxMacSecGlobalPortConfigType) HasRxEgressMgidCaSource() bool {
	return obj.obj.RxEgressMgidCaSource != nil
}

// True = The SC Index (as determined by a brute force lookup) is used as the CA portion   of the Split MGID Field   False =  The CA portion of the Split MGID comes from the MGID * CA Extraction.
// SetRxEgressMgidCaSource sets the bool value in the MacSecRxMacSecGlobalPortConfigType object
func (obj *macSecRxMacSecGlobalPortConfigType) SetRxEgressMgidCaSource(value bool) MacSecRxMacSecGlobalPortConfigType {

	obj.obj.RxEgressMgidCaSource = &value
	return obj
}

type MacSecRxMacSecGlobalPortConfigTypeRxMacSecTrafficTypeEnum string

// Enum of RxMacSecTrafficType on MacSecRxMacSecGlobalPortConfigType
var MacSecRxMacSecGlobalPortConfigTypeRxMacSecTrafficType = struct {
	KINGRESS MacSecRxMacSecGlobalPortConfigTypeRxMacSecTrafficTypeEnum
	KEGRESS  MacSecRxMacSecGlobalPortConfigTypeRxMacSecTrafficTypeEnum
}{
	KINGRESS: MacSecRxMacSecGlobalPortConfigTypeRxMacSecTrafficTypeEnum("kIngress"),
	KEGRESS:  MacSecRxMacSecGlobalPortConfigTypeRxMacSecTrafficTypeEnum("kEgress"),
}

func (obj *macSecRxMacSecGlobalPortConfigType) RxMacSecTrafficType() MacSecRxMacSecGlobalPortConfigTypeRxMacSecTrafficTypeEnum {
	return MacSecRxMacSecGlobalPortConfigTypeRxMacSecTrafficTypeEnum(obj.obj.RxMacSecTrafficType.Enum().String())
}

// It can be either Egress or Ingress traffic.   One port can activate only one functionality.
// RxMacSecTrafficType returns a string
func (obj *macSecRxMacSecGlobalPortConfigType) HasRxMacSecTrafficType() bool {
	return obj.obj.RxMacSecTrafficType != nil
}

func (obj *macSecRxMacSecGlobalPortConfigType) SetRxMacSecTrafficType(value MacSecRxMacSecGlobalPortConfigTypeRxMacSecTrafficTypeEnum) MacSecRxMacSecGlobalPortConfigType {
	intValue, ok := otg.MacSecRxMacSecGlobalPortConfigType_RxMacSecTrafficType_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on MacSecRxMacSecGlobalPortConfigTypeRxMacSecTrafficTypeEnum", string(value)))
		return obj
	}
	enumValue := otg.MacSecRxMacSecGlobalPortConfigType_RxMacSecTrafficType_Enum(intValue)
	obj.obj.RxMacSecTrafficType = &enumValue

	return obj
}

// Offset from Start of Packet in bytes
// SectagOffset0 returns a int32
func (obj *macSecRxMacSecGlobalPortConfigType) SectagOffset0() int32 {

	return *obj.obj.SectagOffset0

}

// Offset from Start of Packet in bytes
// SectagOffset0 returns a int32
func (obj *macSecRxMacSecGlobalPortConfigType) HasSectagOffset0() bool {
	return obj.obj.SectagOffset0 != nil
}

// Offset from Start of Packet in bytes
// SetSectagOffset0 sets the int32 value in the MacSecRxMacSecGlobalPortConfigType object
func (obj *macSecRxMacSecGlobalPortConfigType) SetSectagOffset0(value int32) MacSecRxMacSecGlobalPortConfigType {

	obj.obj.SectagOffset0 = &value
	return obj
}

// Offset from Start of Packet in bytes
// SectagOffset1 returns a int32
func (obj *macSecRxMacSecGlobalPortConfigType) SectagOffset1() int32 {

	return *obj.obj.SectagOffset1

}

// Offset from Start of Packet in bytes
// SectagOffset1 returns a int32
func (obj *macSecRxMacSecGlobalPortConfigType) HasSectagOffset1() bool {
	return obj.obj.SectagOffset1 != nil
}

// Offset from Start of Packet in bytes
// SetSectagOffset1 sets the int32 value in the MacSecRxMacSecGlobalPortConfigType object
func (obj *macSecRxMacSecGlobalPortConfigType) SetSectagOffset1(value int32) MacSecRxMacSecGlobalPortConfigType {

	obj.obj.SectagOffset1 = &value
	return obj
}

// True = Replay Protection Enabled   False = Replay Protection Disabled
// ReplayProtection returns a bool
func (obj *macSecRxMacSecGlobalPortConfigType) ReplayProtection() bool {

	return *obj.obj.ReplayProtection

}

// True = Replay Protection Enabled   False = Replay Protection Disabled
// ReplayProtection returns a bool
func (obj *macSecRxMacSecGlobalPortConfigType) HasReplayProtection() bool {
	return obj.obj.ReplayProtection != nil
}

// True = Replay Protection Enabled   False = Replay Protection Disabled
// SetReplayProtection sets the bool value in the MacSecRxMacSecGlobalPortConfigType object
func (obj *macSecRxMacSecGlobalPortConfigType) SetReplayProtection(value bool) MacSecRxMacSecGlobalPortConfigType {

	obj.obj.ReplayProtection = &value
	return obj
}

// TBD
// RxMgidConfig returns a MacSecRxMGIDConfigurationType
func (obj *macSecRxMacSecGlobalPortConfigType) RxMgidConfig() MacSecRxMGIDConfigurationType {
	if obj.obj.RxMgidConfig == nil {
		obj.obj.RxMgidConfig = NewMacSecRxMGIDConfigurationType().Msg()
	}
	if obj.rxMgidConfigHolder == nil {
		obj.rxMgidConfigHolder = &macSecRxMGIDConfigurationType{obj: obj.obj.RxMgidConfig}
	}
	return obj.rxMgidConfigHolder
}

// TBD
// RxMgidConfig returns a MacSecRxMGIDConfigurationType
func (obj *macSecRxMacSecGlobalPortConfigType) HasRxMgidConfig() bool {
	return obj.obj.RxMgidConfig != nil
}

// TBD
// SetRxMgidConfig sets the MacSecRxMGIDConfigurationType value in the MacSecRxMacSecGlobalPortConfigType object
func (obj *macSecRxMacSecGlobalPortConfigType) SetRxMgidConfig(value MacSecRxMGIDConfigurationType) MacSecRxMacSecGlobalPortConfigType {

	obj.rxMgidConfigHolder = nil
	obj.obj.RxMgidConfig = value.Msg()

	return obj
}

// TBD
// UnauthenticatedData0Config returns a MacSecUnauthenticatedDataConfigurationType
func (obj *macSecRxMacSecGlobalPortConfigType) UnauthenticatedData0Config() MacSecUnauthenticatedDataConfigurationType {
	if obj.obj.UnauthenticatedData0Config == nil {
		obj.obj.UnauthenticatedData0Config = NewMacSecUnauthenticatedDataConfigurationType().Msg()
	}
	if obj.unauthenticatedData0ConfigHolder == nil {
		obj.unauthenticatedData0ConfigHolder = &macSecUnauthenticatedDataConfigurationType{obj: obj.obj.UnauthenticatedData0Config}
	}
	return obj.unauthenticatedData0ConfigHolder
}

// TBD
// UnauthenticatedData0Config returns a MacSecUnauthenticatedDataConfigurationType
func (obj *macSecRxMacSecGlobalPortConfigType) HasUnauthenticatedData0Config() bool {
	return obj.obj.UnauthenticatedData0Config != nil
}

// TBD
// SetUnauthenticatedData0Config sets the MacSecUnauthenticatedDataConfigurationType value in the MacSecRxMacSecGlobalPortConfigType object
func (obj *macSecRxMacSecGlobalPortConfigType) SetUnauthenticatedData0Config(value MacSecUnauthenticatedDataConfigurationType) MacSecRxMacSecGlobalPortConfigType {

	obj.unauthenticatedData0ConfigHolder = nil
	obj.obj.UnauthenticatedData0Config = value.Msg()

	return obj
}

// TBD
// UnauthenticatedData1Config returns a MacSecUnauthenticatedDataConfigurationType
func (obj *macSecRxMacSecGlobalPortConfigType) UnauthenticatedData1Config() MacSecUnauthenticatedDataConfigurationType {
	if obj.obj.UnauthenticatedData1Config == nil {
		obj.obj.UnauthenticatedData1Config = NewMacSecUnauthenticatedDataConfigurationType().Msg()
	}
	if obj.unauthenticatedData1ConfigHolder == nil {
		obj.unauthenticatedData1ConfigHolder = &macSecUnauthenticatedDataConfigurationType{obj: obj.obj.UnauthenticatedData1Config}
	}
	return obj.unauthenticatedData1ConfigHolder
}

// TBD
// UnauthenticatedData1Config returns a MacSecUnauthenticatedDataConfigurationType
func (obj *macSecRxMacSecGlobalPortConfigType) HasUnauthenticatedData1Config() bool {
	return obj.obj.UnauthenticatedData1Config != nil
}

// TBD
// SetUnauthenticatedData1Config sets the MacSecUnauthenticatedDataConfigurationType value in the MacSecRxMacSecGlobalPortConfigType object
func (obj *macSecRxMacSecGlobalPortConfigType) SetUnauthenticatedData1Config(value MacSecUnauthenticatedDataConfigurationType) MacSecRxMacSecGlobalPortConfigType {

	obj.unauthenticatedData1ConfigHolder = nil
	obj.obj.UnauthenticatedData1Config = value.Msg()

	return obj
}

func (obj *macSecRxMacSecGlobalPortConfigType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.RxMgidConfig != nil {

		obj.RxMgidConfig().validateObj(vObj, set_default)
	}

	if obj.obj.UnauthenticatedData0Config != nil {

		obj.UnauthenticatedData0Config().validateObj(vObj, set_default)
	}

	if obj.obj.UnauthenticatedData1Config != nil {

		obj.UnauthenticatedData1Config().validateObj(vObj, set_default)
	}

}

func (obj *macSecRxMacSecGlobalPortConfigType) setDefault() {

}

// ***** MacSecMacSecConfigurationType *****
type macSecMacSecConfigurationType struct {
	validation
	obj              *otg.MacSecMacSecConfigurationType
	txScConfigHolder MacSecTxScConfigurationList
	rxScConfigHolder MacSecRxScConfigurationList
}

func NewMacSecMacSecConfigurationType() MacSecMacSecConfigurationType {
	obj := macSecMacSecConfigurationType{obj: &otg.MacSecMacSecConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *macSecMacSecConfigurationType) Msg() *otg.MacSecMacSecConfigurationType {
	return obj.obj
}

func (obj *macSecMacSecConfigurationType) SetMsg(msg *otg.MacSecMacSecConfigurationType) MacSecMacSecConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *macSecMacSecConfigurationType) ToProto() (*otg.MacSecMacSecConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *macSecMacSecConfigurationType) FromProto(msg *otg.MacSecMacSecConfigurationType) (MacSecMacSecConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *macSecMacSecConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *macSecMacSecConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *macSecMacSecConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecMacSecConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *macSecMacSecConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecMacSecConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *macSecMacSecConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *macSecMacSecConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *macSecMacSecConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *macSecMacSecConfigurationType) Clone() (MacSecMacSecConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewMacSecMacSecConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *macSecMacSecConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *macSecMacSecConfigurationType) setNil() {
	obj.txScConfigHolder = nil
	obj.rxScConfigHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// MacSecMacSecConfigurationType is tBD
type MacSecMacSecConfigurationType interface {
	Validation
	// Msg marshals MacSecMacSecConfigurationType to protobuf object *otg.MacSecMacSecConfigurationType
	// and doesn't set defaults
	Msg() *otg.MacSecMacSecConfigurationType
	// SetMsg unmarshals MacSecMacSecConfigurationType from protobuf object *otg.MacSecMacSecConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.MacSecMacSecConfigurationType) MacSecMacSecConfigurationType
	// ToProto marshals MacSecMacSecConfigurationType to protobuf object *otg.MacSecMacSecConfigurationType
	ToProto() (*otg.MacSecMacSecConfigurationType, error)
	// ToPbText marshals MacSecMacSecConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals MacSecMacSecConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals MacSecMacSecConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals MacSecMacSecConfigurationType from protobuf object *otg.MacSecMacSecConfigurationType
	FromProto(msg *otg.MacSecMacSecConfigurationType) (MacSecMacSecConfigurationType, error)
	// FromPbText unmarshals MacSecMacSecConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals MacSecMacSecConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals MacSecMacSecConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates MacSecMacSecConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (MacSecMacSecConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// TxScConfig returns MacSecTxScConfigurationList, set in MacSecMacSecConfigurationType.
	// MacSecTxScConfigurationList is tBD
	TxScConfig() MacSecTxScConfigurationList
	// SetTxScConfig assigns MacSecTxScConfigurationList provided by user to MacSecMacSecConfigurationType.
	// MacSecTxScConfigurationList is tBD
	SetTxScConfig(value MacSecTxScConfigurationList) MacSecMacSecConfigurationType
	// HasTxScConfig checks if TxScConfig has been set in MacSecMacSecConfigurationType
	HasTxScConfig() bool
	// RxScConfig returns MacSecRxScConfigurationList, set in MacSecMacSecConfigurationType.
	// MacSecRxScConfigurationList is tBD
	RxScConfig() MacSecRxScConfigurationList
	// SetRxScConfig assigns MacSecRxScConfigurationList provided by user to MacSecMacSecConfigurationType.
	// MacSecRxScConfigurationList is tBD
	SetRxScConfig(value MacSecRxScConfigurationList) MacSecMacSecConfigurationType
	// HasRxScConfig checks if RxScConfig has been set in MacSecMacSecConfigurationType
	HasRxScConfig() bool
	setNil()
}

func (obj *macSecMacSecConfigurationType) populateXml(xObj *Argument) error {

	return nil
}

func (obj *macSecMacSecConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// TxScConfig returns a MacSecTxScConfigurationList
func (obj *macSecMacSecConfigurationType) TxScConfig() MacSecTxScConfigurationList {
	if obj.obj.TxScConfig == nil {
		obj.obj.TxScConfig = NewMacSecTxScConfigurationList().Msg()
	}
	if obj.txScConfigHolder == nil {
		obj.txScConfigHolder = &macSecTxScConfigurationList{obj: obj.obj.TxScConfig}
	}
	return obj.txScConfigHolder
}

// TBD
// TxScConfig returns a MacSecTxScConfigurationList
func (obj *macSecMacSecConfigurationType) HasTxScConfig() bool {
	return obj.obj.TxScConfig != nil
}

// TBD
// SetTxScConfig sets the MacSecTxScConfigurationList value in the MacSecMacSecConfigurationType object
func (obj *macSecMacSecConfigurationType) SetTxScConfig(value MacSecTxScConfigurationList) MacSecMacSecConfigurationType {

	obj.txScConfigHolder = nil
	obj.obj.TxScConfig = value.Msg()

	return obj
}

// TBD
// RxScConfig returns a MacSecRxScConfigurationList
func (obj *macSecMacSecConfigurationType) RxScConfig() MacSecRxScConfigurationList {
	if obj.obj.RxScConfig == nil {
		obj.obj.RxScConfig = NewMacSecRxScConfigurationList().Msg()
	}
	if obj.rxScConfigHolder == nil {
		obj.rxScConfigHolder = &macSecRxScConfigurationList{obj: obj.obj.RxScConfig}
	}
	return obj.rxScConfigHolder
}

// TBD
// RxScConfig returns a MacSecRxScConfigurationList
func (obj *macSecMacSecConfigurationType) HasRxScConfig() bool {
	return obj.obj.RxScConfig != nil
}

// TBD
// SetRxScConfig sets the MacSecRxScConfigurationList value in the MacSecMacSecConfigurationType object
func (obj *macSecMacSecConfigurationType) SetRxScConfig(value MacSecRxScConfigurationList) MacSecMacSecConfigurationType {

	obj.rxScConfigHolder = nil
	obj.obj.RxScConfig = value.Msg()

	return obj
}

func (obj *macSecMacSecConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.TxScConfig != nil {

		obj.TxScConfig().validateObj(vObj, set_default)
	}

	if obj.obj.RxScConfig != nil {

		obj.RxScConfig().validateObj(vObj, set_default)
	}

}

func (obj *macSecMacSecConfigurationType) setDefault() {

}

// ***** MacSecMacSecStreamControlTypeList *****
type macSecMacSecStreamControlTypeList struct {
	validation
	obj                               *otg.MacSecMacSecStreamControlTypeList
	macSecStreamControlTypeListHolder MacSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter
}

func NewMacSecMacSecStreamControlTypeList() MacSecMacSecStreamControlTypeList {
	obj := macSecMacSecStreamControlTypeList{obj: &otg.MacSecMacSecStreamControlTypeList{}}
	obj.setDefault()
	return &obj
}

func (obj *macSecMacSecStreamControlTypeList) Msg() *otg.MacSecMacSecStreamControlTypeList {
	return obj.obj
}

func (obj *macSecMacSecStreamControlTypeList) SetMsg(msg *otg.MacSecMacSecStreamControlTypeList) MacSecMacSecStreamControlTypeList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *macSecMacSecStreamControlTypeList) ToProto() (*otg.MacSecMacSecStreamControlTypeList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *macSecMacSecStreamControlTypeList) FromProto(msg *otg.MacSecMacSecStreamControlTypeList) (MacSecMacSecStreamControlTypeList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *macSecMacSecStreamControlTypeList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *macSecMacSecStreamControlTypeList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *macSecMacSecStreamControlTypeList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecMacSecStreamControlTypeList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *macSecMacSecStreamControlTypeList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecMacSecStreamControlTypeList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *macSecMacSecStreamControlTypeList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *macSecMacSecStreamControlTypeList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *macSecMacSecStreamControlTypeList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *macSecMacSecStreamControlTypeList) Clone() (MacSecMacSecStreamControlTypeList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewMacSecMacSecStreamControlTypeList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *macSecMacSecStreamControlTypeList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *macSecMacSecStreamControlTypeList) setNil() {
	obj.macSecStreamControlTypeListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// MacSecMacSecStreamControlTypeList is tBD
type MacSecMacSecStreamControlTypeList interface {
	Validation
	// Msg marshals MacSecMacSecStreamControlTypeList to protobuf object *otg.MacSecMacSecStreamControlTypeList
	// and doesn't set defaults
	Msg() *otg.MacSecMacSecStreamControlTypeList
	// SetMsg unmarshals MacSecMacSecStreamControlTypeList from protobuf object *otg.MacSecMacSecStreamControlTypeList
	// and doesn't set defaults
	SetMsg(*otg.MacSecMacSecStreamControlTypeList) MacSecMacSecStreamControlTypeList
	// ToProto marshals MacSecMacSecStreamControlTypeList to protobuf object *otg.MacSecMacSecStreamControlTypeList
	ToProto() (*otg.MacSecMacSecStreamControlTypeList, error)
	// ToPbText marshals MacSecMacSecStreamControlTypeList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals MacSecMacSecStreamControlTypeList to YAML text
	ToYaml() (string, error)
	// ToJson marshals MacSecMacSecStreamControlTypeList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals MacSecMacSecStreamControlTypeList from protobuf object *otg.MacSecMacSecStreamControlTypeList
	FromProto(msg *otg.MacSecMacSecStreamControlTypeList) (MacSecMacSecStreamControlTypeList, error)
	// FromPbText unmarshals MacSecMacSecStreamControlTypeList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals MacSecMacSecStreamControlTypeList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals MacSecMacSecStreamControlTypeList from JSON text
	FromJson(value string) error
	// Validate validates MacSecMacSecStreamControlTypeList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (MacSecMacSecStreamControlTypeList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// MacSecStreamControlTypeList returns MacSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIterIter, set in MacSecMacSecStreamControlTypeList
	MacSecStreamControlTypeList() MacSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter
	setNil()
}

func (obj *macSecMacSecStreamControlTypeList) populateXml(xObj *Argument) error {

	if len(obj.MacSecStreamControlTypeList().Items()) != 0 {
		for _, item := range obj.MacSecStreamControlTypeList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *macSecMacSecStreamControlTypeList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// MacSecStreamControlTypeList returns a []MacSecMacSecStreamControlType
func (obj *macSecMacSecStreamControlTypeList) MacSecStreamControlTypeList() MacSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter {
	if len(obj.obj.MacSecStreamControlTypeList) == 0 {
		obj.obj.MacSecStreamControlTypeList = []*otg.MacSecMacSecStreamControlType{}
	}
	if obj.macSecStreamControlTypeListHolder == nil {
		obj.macSecStreamControlTypeListHolder = newMacSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter(&obj.obj.MacSecStreamControlTypeList).setMsg(obj)
	}
	return obj.macSecStreamControlTypeListHolder
}

type macSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter struct {
	obj                                *macSecMacSecStreamControlTypeList
	macSecMacSecStreamControlTypeSlice []MacSecMacSecStreamControlType
	fieldPtr                           *[]*otg.MacSecMacSecStreamControlType
}

func newMacSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter(ptr *[]*otg.MacSecMacSecStreamControlType) MacSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter {
	return &macSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter{fieldPtr: ptr}
}

type MacSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter interface {
	setMsg(*macSecMacSecStreamControlTypeList) MacSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter
	Items() []MacSecMacSecStreamControlType
	Add() MacSecMacSecStreamControlType
	Append(items ...MacSecMacSecStreamControlType) MacSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter
	Set(index int, newObj MacSecMacSecStreamControlType) MacSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter
	Clear() MacSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter
	clearHolderSlice() MacSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter
	appendHolderSlice(item MacSecMacSecStreamControlType) MacSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter
}

func (obj *macSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter) setMsg(msg *macSecMacSecStreamControlTypeList) MacSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&macSecMacSecStreamControlType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *macSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter) Items() []MacSecMacSecStreamControlType {
	return obj.macSecMacSecStreamControlTypeSlice
}

func (obj *macSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter) Add() MacSecMacSecStreamControlType {
	newObj := &otg.MacSecMacSecStreamControlType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &macSecMacSecStreamControlType{obj: newObj}
	newLibObj.setDefault()
	obj.macSecMacSecStreamControlTypeSlice = append(obj.macSecMacSecStreamControlTypeSlice, newLibObj)
	return newLibObj
}

func (obj *macSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter) Append(items ...MacSecMacSecStreamControlType) MacSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.macSecMacSecStreamControlTypeSlice = append(obj.macSecMacSecStreamControlTypeSlice, item)
	}
	return obj
}

func (obj *macSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter) Set(index int, newObj MacSecMacSecStreamControlType) MacSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.macSecMacSecStreamControlTypeSlice[index] = newObj
	return obj
}
func (obj *macSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter) Clear() MacSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.MacSecMacSecStreamControlType{}
		obj.macSecMacSecStreamControlTypeSlice = []MacSecMacSecStreamControlType{}
	}
	return obj
}
func (obj *macSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter) clearHolderSlice() MacSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter {
	if len(obj.macSecMacSecStreamControlTypeSlice) > 0 {
		obj.macSecMacSecStreamControlTypeSlice = []MacSecMacSecStreamControlType{}
	}
	return obj
}
func (obj *macSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter) appendHolderSlice(item MacSecMacSecStreamControlType) MacSecMacSecStreamControlTypeListMacSecMacSecStreamControlTypeIter {
	obj.macSecMacSecStreamControlTypeSlice = append(obj.macSecMacSecStreamControlTypeSlice, item)
	return obj
}

func (obj *macSecMacSecStreamControlTypeList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.MacSecStreamControlTypeList) != 0 {

		if set_default {
			obj.MacSecStreamControlTypeList().clearHolderSlice()
			for _, item := range obj.obj.MacSecStreamControlTypeList {
				obj.MacSecStreamControlTypeList().appendHolderSlice(&macSecMacSecStreamControlType{obj: item})
			}
		}
		for _, item := range obj.MacSecStreamControlTypeList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *macSecMacSecStreamControlTypeList) setDefault() {

}

// ***** MacSecTxSaKeyConfigurationTypeList *****
type macSecTxSaKeyConfigurationTypeList struct {
	validation
	obj                                *otg.MacSecTxSaKeyConfigurationTypeList
	txSaKeyConfigurationTypeListHolder MacSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter
}

func NewMacSecTxSaKeyConfigurationTypeList() MacSecTxSaKeyConfigurationTypeList {
	obj := macSecTxSaKeyConfigurationTypeList{obj: &otg.MacSecTxSaKeyConfigurationTypeList{}}
	obj.setDefault()
	return &obj
}

func (obj *macSecTxSaKeyConfigurationTypeList) Msg() *otg.MacSecTxSaKeyConfigurationTypeList {
	return obj.obj
}

func (obj *macSecTxSaKeyConfigurationTypeList) SetMsg(msg *otg.MacSecTxSaKeyConfigurationTypeList) MacSecTxSaKeyConfigurationTypeList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *macSecTxSaKeyConfigurationTypeList) ToProto() (*otg.MacSecTxSaKeyConfigurationTypeList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *macSecTxSaKeyConfigurationTypeList) FromProto(msg *otg.MacSecTxSaKeyConfigurationTypeList) (MacSecTxSaKeyConfigurationTypeList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *macSecTxSaKeyConfigurationTypeList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *macSecTxSaKeyConfigurationTypeList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *macSecTxSaKeyConfigurationTypeList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecTxSaKeyConfigurationTypeList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *macSecTxSaKeyConfigurationTypeList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecTxSaKeyConfigurationTypeList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *macSecTxSaKeyConfigurationTypeList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *macSecTxSaKeyConfigurationTypeList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *macSecTxSaKeyConfigurationTypeList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *macSecTxSaKeyConfigurationTypeList) Clone() (MacSecTxSaKeyConfigurationTypeList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewMacSecTxSaKeyConfigurationTypeList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *macSecTxSaKeyConfigurationTypeList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *macSecTxSaKeyConfigurationTypeList) setNil() {
	obj.txSaKeyConfigurationTypeListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// MacSecTxSaKeyConfigurationTypeList is tBD
type MacSecTxSaKeyConfigurationTypeList interface {
	Validation
	// Msg marshals MacSecTxSaKeyConfigurationTypeList to protobuf object *otg.MacSecTxSaKeyConfigurationTypeList
	// and doesn't set defaults
	Msg() *otg.MacSecTxSaKeyConfigurationTypeList
	// SetMsg unmarshals MacSecTxSaKeyConfigurationTypeList from protobuf object *otg.MacSecTxSaKeyConfigurationTypeList
	// and doesn't set defaults
	SetMsg(*otg.MacSecTxSaKeyConfigurationTypeList) MacSecTxSaKeyConfigurationTypeList
	// ToProto marshals MacSecTxSaKeyConfigurationTypeList to protobuf object *otg.MacSecTxSaKeyConfigurationTypeList
	ToProto() (*otg.MacSecTxSaKeyConfigurationTypeList, error)
	// ToPbText marshals MacSecTxSaKeyConfigurationTypeList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals MacSecTxSaKeyConfigurationTypeList to YAML text
	ToYaml() (string, error)
	// ToJson marshals MacSecTxSaKeyConfigurationTypeList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals MacSecTxSaKeyConfigurationTypeList from protobuf object *otg.MacSecTxSaKeyConfigurationTypeList
	FromProto(msg *otg.MacSecTxSaKeyConfigurationTypeList) (MacSecTxSaKeyConfigurationTypeList, error)
	// FromPbText unmarshals MacSecTxSaKeyConfigurationTypeList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals MacSecTxSaKeyConfigurationTypeList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals MacSecTxSaKeyConfigurationTypeList from JSON text
	FromJson(value string) error
	// Validate validates MacSecTxSaKeyConfigurationTypeList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (MacSecTxSaKeyConfigurationTypeList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// TxSaKeyConfigurationTypeList returns MacSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIterIter, set in MacSecTxSaKeyConfigurationTypeList
	TxSaKeyConfigurationTypeList() MacSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter
	setNil()
}

func (obj *macSecTxSaKeyConfigurationTypeList) populateXml(xObj *Argument) error {

	if len(obj.TxSaKeyConfigurationTypeList().Items()) != 0 {
		for _, item := range obj.TxSaKeyConfigurationTypeList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *macSecTxSaKeyConfigurationTypeList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// TxSaKeyConfigurationTypeList returns a []MacSecTxSaKeyConfigurationType
func (obj *macSecTxSaKeyConfigurationTypeList) TxSaKeyConfigurationTypeList() MacSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter {
	if len(obj.obj.TxSaKeyConfigurationTypeList) == 0 {
		obj.obj.TxSaKeyConfigurationTypeList = []*otg.MacSecTxSaKeyConfigurationType{}
	}
	if obj.txSaKeyConfigurationTypeListHolder == nil {
		obj.txSaKeyConfigurationTypeListHolder = newMacSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter(&obj.obj.TxSaKeyConfigurationTypeList).setMsg(obj)
	}
	return obj.txSaKeyConfigurationTypeListHolder
}

type macSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter struct {
	obj                                 *macSecTxSaKeyConfigurationTypeList
	macSecTxSaKeyConfigurationTypeSlice []MacSecTxSaKeyConfigurationType
	fieldPtr                            *[]*otg.MacSecTxSaKeyConfigurationType
}

func newMacSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter(ptr *[]*otg.MacSecTxSaKeyConfigurationType) MacSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter {
	return &macSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter{fieldPtr: ptr}
}

type MacSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter interface {
	setMsg(*macSecTxSaKeyConfigurationTypeList) MacSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter
	Items() []MacSecTxSaKeyConfigurationType
	Add() MacSecTxSaKeyConfigurationType
	Append(items ...MacSecTxSaKeyConfigurationType) MacSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter
	Set(index int, newObj MacSecTxSaKeyConfigurationType) MacSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter
	Clear() MacSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter
	clearHolderSlice() MacSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter
	appendHolderSlice(item MacSecTxSaKeyConfigurationType) MacSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter
}

func (obj *macSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter) setMsg(msg *macSecTxSaKeyConfigurationTypeList) MacSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&macSecTxSaKeyConfigurationType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *macSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter) Items() []MacSecTxSaKeyConfigurationType {
	return obj.macSecTxSaKeyConfigurationTypeSlice
}

func (obj *macSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter) Add() MacSecTxSaKeyConfigurationType {
	newObj := &otg.MacSecTxSaKeyConfigurationType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &macSecTxSaKeyConfigurationType{obj: newObj}
	newLibObj.setDefault()
	obj.macSecTxSaKeyConfigurationTypeSlice = append(obj.macSecTxSaKeyConfigurationTypeSlice, newLibObj)
	return newLibObj
}

func (obj *macSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter) Append(items ...MacSecTxSaKeyConfigurationType) MacSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.macSecTxSaKeyConfigurationTypeSlice = append(obj.macSecTxSaKeyConfigurationTypeSlice, item)
	}
	return obj
}

func (obj *macSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter) Set(index int, newObj MacSecTxSaKeyConfigurationType) MacSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.macSecTxSaKeyConfigurationTypeSlice[index] = newObj
	return obj
}
func (obj *macSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter) Clear() MacSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.MacSecTxSaKeyConfigurationType{}
		obj.macSecTxSaKeyConfigurationTypeSlice = []MacSecTxSaKeyConfigurationType{}
	}
	return obj
}
func (obj *macSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter) clearHolderSlice() MacSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter {
	if len(obj.macSecTxSaKeyConfigurationTypeSlice) > 0 {
		obj.macSecTxSaKeyConfigurationTypeSlice = []MacSecTxSaKeyConfigurationType{}
	}
	return obj
}
func (obj *macSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter) appendHolderSlice(item MacSecTxSaKeyConfigurationType) MacSecTxSaKeyConfigurationTypeListMacSecTxSaKeyConfigurationTypeIter {
	obj.macSecTxSaKeyConfigurationTypeSlice = append(obj.macSecTxSaKeyConfigurationTypeSlice, item)
	return obj
}

func (obj *macSecTxSaKeyConfigurationTypeList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.TxSaKeyConfigurationTypeList) != 0 {

		if set_default {
			obj.TxSaKeyConfigurationTypeList().clearHolderSlice()
			for _, item := range obj.obj.TxSaKeyConfigurationTypeList {
				obj.TxSaKeyConfigurationTypeList().appendHolderSlice(&macSecTxSaKeyConfigurationType{obj: item})
			}
		}
		for _, item := range obj.TxSaKeyConfigurationTypeList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *macSecTxSaKeyConfigurationTypeList) setDefault() {

}

// ***** MacSecRxSaKeyConfigurationTypeList *****
type macSecRxSaKeyConfigurationTypeList struct {
	validation
	obj                                *otg.MacSecRxSaKeyConfigurationTypeList
	rxSaKeyConfigurationTypeListHolder MacSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter
}

func NewMacSecRxSaKeyConfigurationTypeList() MacSecRxSaKeyConfigurationTypeList {
	obj := macSecRxSaKeyConfigurationTypeList{obj: &otg.MacSecRxSaKeyConfigurationTypeList{}}
	obj.setDefault()
	return &obj
}

func (obj *macSecRxSaKeyConfigurationTypeList) Msg() *otg.MacSecRxSaKeyConfigurationTypeList {
	return obj.obj
}

func (obj *macSecRxSaKeyConfigurationTypeList) SetMsg(msg *otg.MacSecRxSaKeyConfigurationTypeList) MacSecRxSaKeyConfigurationTypeList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *macSecRxSaKeyConfigurationTypeList) ToProto() (*otg.MacSecRxSaKeyConfigurationTypeList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *macSecRxSaKeyConfigurationTypeList) FromProto(msg *otg.MacSecRxSaKeyConfigurationTypeList) (MacSecRxSaKeyConfigurationTypeList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *macSecRxSaKeyConfigurationTypeList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *macSecRxSaKeyConfigurationTypeList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *macSecRxSaKeyConfigurationTypeList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecRxSaKeyConfigurationTypeList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *macSecRxSaKeyConfigurationTypeList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecRxSaKeyConfigurationTypeList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *macSecRxSaKeyConfigurationTypeList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *macSecRxSaKeyConfigurationTypeList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *macSecRxSaKeyConfigurationTypeList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *macSecRxSaKeyConfigurationTypeList) Clone() (MacSecRxSaKeyConfigurationTypeList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewMacSecRxSaKeyConfigurationTypeList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *macSecRxSaKeyConfigurationTypeList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *macSecRxSaKeyConfigurationTypeList) setNil() {
	obj.rxSaKeyConfigurationTypeListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// MacSecRxSaKeyConfigurationTypeList is tBD
type MacSecRxSaKeyConfigurationTypeList interface {
	Validation
	// Msg marshals MacSecRxSaKeyConfigurationTypeList to protobuf object *otg.MacSecRxSaKeyConfigurationTypeList
	// and doesn't set defaults
	Msg() *otg.MacSecRxSaKeyConfigurationTypeList
	// SetMsg unmarshals MacSecRxSaKeyConfigurationTypeList from protobuf object *otg.MacSecRxSaKeyConfigurationTypeList
	// and doesn't set defaults
	SetMsg(*otg.MacSecRxSaKeyConfigurationTypeList) MacSecRxSaKeyConfigurationTypeList
	// ToProto marshals MacSecRxSaKeyConfigurationTypeList to protobuf object *otg.MacSecRxSaKeyConfigurationTypeList
	ToProto() (*otg.MacSecRxSaKeyConfigurationTypeList, error)
	// ToPbText marshals MacSecRxSaKeyConfigurationTypeList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals MacSecRxSaKeyConfigurationTypeList to YAML text
	ToYaml() (string, error)
	// ToJson marshals MacSecRxSaKeyConfigurationTypeList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals MacSecRxSaKeyConfigurationTypeList from protobuf object *otg.MacSecRxSaKeyConfigurationTypeList
	FromProto(msg *otg.MacSecRxSaKeyConfigurationTypeList) (MacSecRxSaKeyConfigurationTypeList, error)
	// FromPbText unmarshals MacSecRxSaKeyConfigurationTypeList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals MacSecRxSaKeyConfigurationTypeList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals MacSecRxSaKeyConfigurationTypeList from JSON text
	FromJson(value string) error
	// Validate validates MacSecRxSaKeyConfigurationTypeList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (MacSecRxSaKeyConfigurationTypeList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// RxSaKeyConfigurationTypeList returns MacSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIterIter, set in MacSecRxSaKeyConfigurationTypeList
	RxSaKeyConfigurationTypeList() MacSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter
	setNil()
}

func (obj *macSecRxSaKeyConfigurationTypeList) populateXml(xObj *Argument) error {

	if len(obj.RxSaKeyConfigurationTypeList().Items()) != 0 {
		for _, item := range obj.RxSaKeyConfigurationTypeList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *macSecRxSaKeyConfigurationTypeList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// RxSaKeyConfigurationTypeList returns a []MacSecRxSaKeyConfigurationType
func (obj *macSecRxSaKeyConfigurationTypeList) RxSaKeyConfigurationTypeList() MacSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter {
	if len(obj.obj.RxSaKeyConfigurationTypeList) == 0 {
		obj.obj.RxSaKeyConfigurationTypeList = []*otg.MacSecRxSaKeyConfigurationType{}
	}
	if obj.rxSaKeyConfigurationTypeListHolder == nil {
		obj.rxSaKeyConfigurationTypeListHolder = newMacSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter(&obj.obj.RxSaKeyConfigurationTypeList).setMsg(obj)
	}
	return obj.rxSaKeyConfigurationTypeListHolder
}

type macSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter struct {
	obj                                 *macSecRxSaKeyConfigurationTypeList
	macSecRxSaKeyConfigurationTypeSlice []MacSecRxSaKeyConfigurationType
	fieldPtr                            *[]*otg.MacSecRxSaKeyConfigurationType
}

func newMacSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter(ptr *[]*otg.MacSecRxSaKeyConfigurationType) MacSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter {
	return &macSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter{fieldPtr: ptr}
}

type MacSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter interface {
	setMsg(*macSecRxSaKeyConfigurationTypeList) MacSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter
	Items() []MacSecRxSaKeyConfigurationType
	Add() MacSecRxSaKeyConfigurationType
	Append(items ...MacSecRxSaKeyConfigurationType) MacSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter
	Set(index int, newObj MacSecRxSaKeyConfigurationType) MacSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter
	Clear() MacSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter
	clearHolderSlice() MacSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter
	appendHolderSlice(item MacSecRxSaKeyConfigurationType) MacSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter
}

func (obj *macSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter) setMsg(msg *macSecRxSaKeyConfigurationTypeList) MacSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&macSecRxSaKeyConfigurationType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *macSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter) Items() []MacSecRxSaKeyConfigurationType {
	return obj.macSecRxSaKeyConfigurationTypeSlice
}

func (obj *macSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter) Add() MacSecRxSaKeyConfigurationType {
	newObj := &otg.MacSecRxSaKeyConfigurationType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &macSecRxSaKeyConfigurationType{obj: newObj}
	newLibObj.setDefault()
	obj.macSecRxSaKeyConfigurationTypeSlice = append(obj.macSecRxSaKeyConfigurationTypeSlice, newLibObj)
	return newLibObj
}

func (obj *macSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter) Append(items ...MacSecRxSaKeyConfigurationType) MacSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.macSecRxSaKeyConfigurationTypeSlice = append(obj.macSecRxSaKeyConfigurationTypeSlice, item)
	}
	return obj
}

func (obj *macSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter) Set(index int, newObj MacSecRxSaKeyConfigurationType) MacSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.macSecRxSaKeyConfigurationTypeSlice[index] = newObj
	return obj
}
func (obj *macSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter) Clear() MacSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.MacSecRxSaKeyConfigurationType{}
		obj.macSecRxSaKeyConfigurationTypeSlice = []MacSecRxSaKeyConfigurationType{}
	}
	return obj
}
func (obj *macSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter) clearHolderSlice() MacSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter {
	if len(obj.macSecRxSaKeyConfigurationTypeSlice) > 0 {
		obj.macSecRxSaKeyConfigurationTypeSlice = []MacSecRxSaKeyConfigurationType{}
	}
	return obj
}
func (obj *macSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter) appendHolderSlice(item MacSecRxSaKeyConfigurationType) MacSecRxSaKeyConfigurationTypeListMacSecRxSaKeyConfigurationTypeIter {
	obj.macSecRxSaKeyConfigurationTypeSlice = append(obj.macSecRxSaKeyConfigurationTypeSlice, item)
	return obj
}

func (obj *macSecRxSaKeyConfigurationTypeList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.RxSaKeyConfigurationTypeList) != 0 {

		if set_default {
			obj.RxSaKeyConfigurationTypeList().clearHolderSlice()
			for _, item := range obj.obj.RxSaKeyConfigurationTypeList {
				obj.RxSaKeyConfigurationTypeList().appendHolderSlice(&macSecRxSaKeyConfigurationType{obj: item})
			}
		}
		for _, item := range obj.RxSaKeyConfigurationTypeList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *macSecRxSaKeyConfigurationTypeList) setDefault() {

}

// ***** ServerMacSecSaList *****
type serverMacSecSaList struct {
	validation
	obj                *otg.ServerMacSecSaList
	macSecSaListHolder ServerMacSecSaListIdTypeSecureChannelIdIter
}

func NewServerMacSecSaList() ServerMacSecSaList {
	obj := serverMacSecSaList{obj: &otg.ServerMacSecSaList{}}
	obj.setDefault()
	return &obj
}

func (obj *serverMacSecSaList) Msg() *otg.ServerMacSecSaList {
	return obj.obj
}

func (obj *serverMacSecSaList) SetMsg(msg *otg.ServerMacSecSaList) ServerMacSecSaList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *serverMacSecSaList) ToProto() (*otg.ServerMacSecSaList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *serverMacSecSaList) FromProto(msg *otg.ServerMacSecSaList) (ServerMacSecSaList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *serverMacSecSaList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *serverMacSecSaList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *serverMacSecSaList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *serverMacSecSaList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *serverMacSecSaList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *serverMacSecSaList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *serverMacSecSaList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *serverMacSecSaList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *serverMacSecSaList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *serverMacSecSaList) Clone() (ServerMacSecSaList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewServerMacSecSaList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *serverMacSecSaList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *serverMacSecSaList) setNil() {
	obj.macSecSaListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ServerMacSecSaList is tBD
type ServerMacSecSaList interface {
	Validation
	// Msg marshals ServerMacSecSaList to protobuf object *otg.ServerMacSecSaList
	// and doesn't set defaults
	Msg() *otg.ServerMacSecSaList
	// SetMsg unmarshals ServerMacSecSaList from protobuf object *otg.ServerMacSecSaList
	// and doesn't set defaults
	SetMsg(*otg.ServerMacSecSaList) ServerMacSecSaList
	// ToProto marshals ServerMacSecSaList to protobuf object *otg.ServerMacSecSaList
	ToProto() (*otg.ServerMacSecSaList, error)
	// ToPbText marshals ServerMacSecSaList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ServerMacSecSaList to YAML text
	ToYaml() (string, error)
	// ToJson marshals ServerMacSecSaList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ServerMacSecSaList from protobuf object *otg.ServerMacSecSaList
	FromProto(msg *otg.ServerMacSecSaList) (ServerMacSecSaList, error)
	// FromPbText unmarshals ServerMacSecSaList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ServerMacSecSaList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ServerMacSecSaList from JSON text
	FromJson(value string) error
	// Validate validates ServerMacSecSaList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ServerMacSecSaList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// MacSecSaList returns ServerMacSecSaListIdTypeSecureChannelIdIterIter, set in ServerMacSecSaList
	MacSecSaList() ServerMacSecSaListIdTypeSecureChannelIdIter
	setNil()
}

func (obj *serverMacSecSaList) populateXml(xObj *Argument) error {

	if len(obj.MacSecSaList().Items()) != 0 {
		for _, item := range obj.MacSecSaList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *serverMacSecSaList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// MacSecSaList returns a []IdTypeSecureChannelId
func (obj *serverMacSecSaList) MacSecSaList() ServerMacSecSaListIdTypeSecureChannelIdIter {
	if len(obj.obj.MacSecSaList) == 0 {
		obj.obj.MacSecSaList = []*otg.IdTypeSecureChannelId{}
	}
	if obj.macSecSaListHolder == nil {
		obj.macSecSaListHolder = newServerMacSecSaListIdTypeSecureChannelIdIter(&obj.obj.MacSecSaList).setMsg(obj)
	}
	return obj.macSecSaListHolder
}

type serverMacSecSaListIdTypeSecureChannelIdIter struct {
	obj                        *serverMacSecSaList
	idTypeSecureChannelIdSlice []IdTypeSecureChannelId
	fieldPtr                   *[]*otg.IdTypeSecureChannelId
}

func newServerMacSecSaListIdTypeSecureChannelIdIter(ptr *[]*otg.IdTypeSecureChannelId) ServerMacSecSaListIdTypeSecureChannelIdIter {
	return &serverMacSecSaListIdTypeSecureChannelIdIter{fieldPtr: ptr}
}

type ServerMacSecSaListIdTypeSecureChannelIdIter interface {
	setMsg(*serverMacSecSaList) ServerMacSecSaListIdTypeSecureChannelIdIter
	Items() []IdTypeSecureChannelId
	Add() IdTypeSecureChannelId
	Append(items ...IdTypeSecureChannelId) ServerMacSecSaListIdTypeSecureChannelIdIter
	Set(index int, newObj IdTypeSecureChannelId) ServerMacSecSaListIdTypeSecureChannelIdIter
	Clear() ServerMacSecSaListIdTypeSecureChannelIdIter
	clearHolderSlice() ServerMacSecSaListIdTypeSecureChannelIdIter
	appendHolderSlice(item IdTypeSecureChannelId) ServerMacSecSaListIdTypeSecureChannelIdIter
}

func (obj *serverMacSecSaListIdTypeSecureChannelIdIter) setMsg(msg *serverMacSecSaList) ServerMacSecSaListIdTypeSecureChannelIdIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&idTypeSecureChannelId{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *serverMacSecSaListIdTypeSecureChannelIdIter) Items() []IdTypeSecureChannelId {
	return obj.idTypeSecureChannelIdSlice
}

func (obj *serverMacSecSaListIdTypeSecureChannelIdIter) Add() IdTypeSecureChannelId {
	newObj := &otg.IdTypeSecureChannelId{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &idTypeSecureChannelId{obj: newObj}
	newLibObj.setDefault()
	obj.idTypeSecureChannelIdSlice = append(obj.idTypeSecureChannelIdSlice, newLibObj)
	return newLibObj
}

func (obj *serverMacSecSaListIdTypeSecureChannelIdIter) Append(items ...IdTypeSecureChannelId) ServerMacSecSaListIdTypeSecureChannelIdIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.idTypeSecureChannelIdSlice = append(obj.idTypeSecureChannelIdSlice, item)
	}
	return obj
}

func (obj *serverMacSecSaListIdTypeSecureChannelIdIter) Set(index int, newObj IdTypeSecureChannelId) ServerMacSecSaListIdTypeSecureChannelIdIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.idTypeSecureChannelIdSlice[index] = newObj
	return obj
}
func (obj *serverMacSecSaListIdTypeSecureChannelIdIter) Clear() ServerMacSecSaListIdTypeSecureChannelIdIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.IdTypeSecureChannelId{}
		obj.idTypeSecureChannelIdSlice = []IdTypeSecureChannelId{}
	}
	return obj
}
func (obj *serverMacSecSaListIdTypeSecureChannelIdIter) clearHolderSlice() ServerMacSecSaListIdTypeSecureChannelIdIter {
	if len(obj.idTypeSecureChannelIdSlice) > 0 {
		obj.idTypeSecureChannelIdSlice = []IdTypeSecureChannelId{}
	}
	return obj
}
func (obj *serverMacSecSaListIdTypeSecureChannelIdIter) appendHolderSlice(item IdTypeSecureChannelId) ServerMacSecSaListIdTypeSecureChannelIdIter {
	obj.idTypeSecureChannelIdSlice = append(obj.idTypeSecureChannelIdSlice, item)
	return obj
}

func (obj *serverMacSecSaList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.MacSecSaList) != 0 {

		if set_default {
			obj.MacSecSaList().clearHolderSlice()
			for _, item := range obj.obj.MacSecSaList {
				obj.MacSecSaList().appendHolderSlice(&idTypeSecureChannelId{obj: item})
			}
		}
		for _, item := range obj.MacSecSaList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *serverMacSecSaList) setDefault() {

}

// ***** MacSecSaKeyStateConfigurationList *****
type macSecSaKeyStateConfigurationList struct {
	validation
	obj                               *otg.MacSecSaKeyStateConfigurationList
	saKeyStateConfigurationListHolder MacSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter
}

func NewMacSecSaKeyStateConfigurationList() MacSecSaKeyStateConfigurationList {
	obj := macSecSaKeyStateConfigurationList{obj: &otg.MacSecSaKeyStateConfigurationList{}}
	obj.setDefault()
	return &obj
}

func (obj *macSecSaKeyStateConfigurationList) Msg() *otg.MacSecSaKeyStateConfigurationList {
	return obj.obj
}

func (obj *macSecSaKeyStateConfigurationList) SetMsg(msg *otg.MacSecSaKeyStateConfigurationList) MacSecSaKeyStateConfigurationList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *macSecSaKeyStateConfigurationList) ToProto() (*otg.MacSecSaKeyStateConfigurationList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *macSecSaKeyStateConfigurationList) FromProto(msg *otg.MacSecSaKeyStateConfigurationList) (MacSecSaKeyStateConfigurationList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *macSecSaKeyStateConfigurationList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *macSecSaKeyStateConfigurationList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *macSecSaKeyStateConfigurationList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecSaKeyStateConfigurationList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *macSecSaKeyStateConfigurationList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecSaKeyStateConfigurationList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *macSecSaKeyStateConfigurationList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *macSecSaKeyStateConfigurationList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *macSecSaKeyStateConfigurationList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *macSecSaKeyStateConfigurationList) Clone() (MacSecSaKeyStateConfigurationList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewMacSecSaKeyStateConfigurationList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *macSecSaKeyStateConfigurationList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *macSecSaKeyStateConfigurationList) setNil() {
	obj.saKeyStateConfigurationListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// MacSecSaKeyStateConfigurationList is tBD
type MacSecSaKeyStateConfigurationList interface {
	Validation
	// Msg marshals MacSecSaKeyStateConfigurationList to protobuf object *otg.MacSecSaKeyStateConfigurationList
	// and doesn't set defaults
	Msg() *otg.MacSecSaKeyStateConfigurationList
	// SetMsg unmarshals MacSecSaKeyStateConfigurationList from protobuf object *otg.MacSecSaKeyStateConfigurationList
	// and doesn't set defaults
	SetMsg(*otg.MacSecSaKeyStateConfigurationList) MacSecSaKeyStateConfigurationList
	// ToProto marshals MacSecSaKeyStateConfigurationList to protobuf object *otg.MacSecSaKeyStateConfigurationList
	ToProto() (*otg.MacSecSaKeyStateConfigurationList, error)
	// ToPbText marshals MacSecSaKeyStateConfigurationList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals MacSecSaKeyStateConfigurationList to YAML text
	ToYaml() (string, error)
	// ToJson marshals MacSecSaKeyStateConfigurationList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals MacSecSaKeyStateConfigurationList from protobuf object *otg.MacSecSaKeyStateConfigurationList
	FromProto(msg *otg.MacSecSaKeyStateConfigurationList) (MacSecSaKeyStateConfigurationList, error)
	// FromPbText unmarshals MacSecSaKeyStateConfigurationList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals MacSecSaKeyStateConfigurationList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals MacSecSaKeyStateConfigurationList from JSON text
	FromJson(value string) error
	// Validate validates MacSecSaKeyStateConfigurationList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (MacSecSaKeyStateConfigurationList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// SaKeyStateConfigurationList returns MacSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIterIter, set in MacSecSaKeyStateConfigurationList
	SaKeyStateConfigurationList() MacSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter
	setNil()
}

func (obj *macSecSaKeyStateConfigurationList) populateXml(xObj *Argument) error {

	if len(obj.SaKeyStateConfigurationList().Items()) != 0 {
		for _, item := range obj.SaKeyStateConfigurationList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *macSecSaKeyStateConfigurationList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// SaKeyStateConfigurationList returns a []MacSecSaKeyStateConfigurationType
func (obj *macSecSaKeyStateConfigurationList) SaKeyStateConfigurationList() MacSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter {
	if len(obj.obj.SaKeyStateConfigurationList) == 0 {
		obj.obj.SaKeyStateConfigurationList = []*otg.MacSecSaKeyStateConfigurationType{}
	}
	if obj.saKeyStateConfigurationListHolder == nil {
		obj.saKeyStateConfigurationListHolder = newMacSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter(&obj.obj.SaKeyStateConfigurationList).setMsg(obj)
	}
	return obj.saKeyStateConfigurationListHolder
}

type macSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter struct {
	obj                                    *macSecSaKeyStateConfigurationList
	macSecSaKeyStateConfigurationTypeSlice []MacSecSaKeyStateConfigurationType
	fieldPtr                               *[]*otg.MacSecSaKeyStateConfigurationType
}

func newMacSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter(ptr *[]*otg.MacSecSaKeyStateConfigurationType) MacSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter {
	return &macSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter{fieldPtr: ptr}
}

type MacSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter interface {
	setMsg(*macSecSaKeyStateConfigurationList) MacSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter
	Items() []MacSecSaKeyStateConfigurationType
	Add() MacSecSaKeyStateConfigurationType
	Append(items ...MacSecSaKeyStateConfigurationType) MacSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter
	Set(index int, newObj MacSecSaKeyStateConfigurationType) MacSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter
	Clear() MacSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter
	clearHolderSlice() MacSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter
	appendHolderSlice(item MacSecSaKeyStateConfigurationType) MacSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter
}

func (obj *macSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter) setMsg(msg *macSecSaKeyStateConfigurationList) MacSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&macSecSaKeyStateConfigurationType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *macSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter) Items() []MacSecSaKeyStateConfigurationType {
	return obj.macSecSaKeyStateConfigurationTypeSlice
}

func (obj *macSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter) Add() MacSecSaKeyStateConfigurationType {
	newObj := &otg.MacSecSaKeyStateConfigurationType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &macSecSaKeyStateConfigurationType{obj: newObj}
	newLibObj.setDefault()
	obj.macSecSaKeyStateConfigurationTypeSlice = append(obj.macSecSaKeyStateConfigurationTypeSlice, newLibObj)
	return newLibObj
}

func (obj *macSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter) Append(items ...MacSecSaKeyStateConfigurationType) MacSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.macSecSaKeyStateConfigurationTypeSlice = append(obj.macSecSaKeyStateConfigurationTypeSlice, item)
	}
	return obj
}

func (obj *macSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter) Set(index int, newObj MacSecSaKeyStateConfigurationType) MacSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.macSecSaKeyStateConfigurationTypeSlice[index] = newObj
	return obj
}
func (obj *macSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter) Clear() MacSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.MacSecSaKeyStateConfigurationType{}
		obj.macSecSaKeyStateConfigurationTypeSlice = []MacSecSaKeyStateConfigurationType{}
	}
	return obj
}
func (obj *macSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter) clearHolderSlice() MacSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter {
	if len(obj.macSecSaKeyStateConfigurationTypeSlice) > 0 {
		obj.macSecSaKeyStateConfigurationTypeSlice = []MacSecSaKeyStateConfigurationType{}
	}
	return obj
}
func (obj *macSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter) appendHolderSlice(item MacSecSaKeyStateConfigurationType) MacSecSaKeyStateConfigurationListMacSecSaKeyStateConfigurationTypeIter {
	obj.macSecSaKeyStateConfigurationTypeSlice = append(obj.macSecSaKeyStateConfigurationTypeSlice, item)
	return obj
}

func (obj *macSecSaKeyStateConfigurationList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.SaKeyStateConfigurationList) != 0 {

		if set_default {
			obj.SaKeyStateConfigurationList().clearHolderSlice()
			for _, item := range obj.obj.SaKeyStateConfigurationList {
				obj.SaKeyStateConfigurationList().appendHolderSlice(&macSecSaKeyStateConfigurationType{obj: item})
			}
		}
		for _, item := range obj.SaKeyStateConfigurationList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *macSecSaKeyStateConfigurationList) setDefault() {

}

// ***** MacSecRxMacSecUDSConfigList *****
type macSecRxMacSecUDSConfigList struct {
	validation
	obj                         *otg.MacSecRxMacSecUDSConfigList
	rxMacSecUdsConfigListHolder MacSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter
}

func NewMacSecRxMacSecUDSConfigList() MacSecRxMacSecUDSConfigList {
	obj := macSecRxMacSecUDSConfigList{obj: &otg.MacSecRxMacSecUDSConfigList{}}
	obj.setDefault()
	return &obj
}

func (obj *macSecRxMacSecUDSConfigList) Msg() *otg.MacSecRxMacSecUDSConfigList {
	return obj.obj
}

func (obj *macSecRxMacSecUDSConfigList) SetMsg(msg *otg.MacSecRxMacSecUDSConfigList) MacSecRxMacSecUDSConfigList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *macSecRxMacSecUDSConfigList) ToProto() (*otg.MacSecRxMacSecUDSConfigList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *macSecRxMacSecUDSConfigList) FromProto(msg *otg.MacSecRxMacSecUDSConfigList) (MacSecRxMacSecUDSConfigList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *macSecRxMacSecUDSConfigList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *macSecRxMacSecUDSConfigList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *macSecRxMacSecUDSConfigList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecRxMacSecUDSConfigList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *macSecRxMacSecUDSConfigList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecRxMacSecUDSConfigList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *macSecRxMacSecUDSConfigList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *macSecRxMacSecUDSConfigList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *macSecRxMacSecUDSConfigList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *macSecRxMacSecUDSConfigList) Clone() (MacSecRxMacSecUDSConfigList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewMacSecRxMacSecUDSConfigList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *macSecRxMacSecUDSConfigList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *macSecRxMacSecUDSConfigList) setNil() {
	obj.rxMacSecUdsConfigListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// MacSecRxMacSecUDSConfigList is tBD
type MacSecRxMacSecUDSConfigList interface {
	Validation
	// Msg marshals MacSecRxMacSecUDSConfigList to protobuf object *otg.MacSecRxMacSecUDSConfigList
	// and doesn't set defaults
	Msg() *otg.MacSecRxMacSecUDSConfigList
	// SetMsg unmarshals MacSecRxMacSecUDSConfigList from protobuf object *otg.MacSecRxMacSecUDSConfigList
	// and doesn't set defaults
	SetMsg(*otg.MacSecRxMacSecUDSConfigList) MacSecRxMacSecUDSConfigList
	// ToProto marshals MacSecRxMacSecUDSConfigList to protobuf object *otg.MacSecRxMacSecUDSConfigList
	ToProto() (*otg.MacSecRxMacSecUDSConfigList, error)
	// ToPbText marshals MacSecRxMacSecUDSConfigList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals MacSecRxMacSecUDSConfigList to YAML text
	ToYaml() (string, error)
	// ToJson marshals MacSecRxMacSecUDSConfigList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals MacSecRxMacSecUDSConfigList from protobuf object *otg.MacSecRxMacSecUDSConfigList
	FromProto(msg *otg.MacSecRxMacSecUDSConfigList) (MacSecRxMacSecUDSConfigList, error)
	// FromPbText unmarshals MacSecRxMacSecUDSConfigList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals MacSecRxMacSecUDSConfigList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals MacSecRxMacSecUDSConfigList from JSON text
	FromJson(value string) error
	// Validate validates MacSecRxMacSecUDSConfigList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (MacSecRxMacSecUDSConfigList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// RxMacSecUdsConfigList returns MacSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIterIter, set in MacSecRxMacSecUDSConfigList
	RxMacSecUdsConfigList() MacSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter
	setNil()
}

func (obj *macSecRxMacSecUDSConfigList) populateXml(xObj *Argument) error {

	if len(obj.RxMacSecUdsConfigList().Items()) != 0 {
		for _, item := range obj.RxMacSecUdsConfigList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *macSecRxMacSecUDSConfigList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// RxMacSecUdsConfigList returns a []MacSecRxMacSecUDSConfigType
func (obj *macSecRxMacSecUDSConfigList) RxMacSecUdsConfigList() MacSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter {
	if len(obj.obj.RxMacSecUdsConfigList) == 0 {
		obj.obj.RxMacSecUdsConfigList = []*otg.MacSecRxMacSecUDSConfigType{}
	}
	if obj.rxMacSecUdsConfigListHolder == nil {
		obj.rxMacSecUdsConfigListHolder = newMacSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter(&obj.obj.RxMacSecUdsConfigList).setMsg(obj)
	}
	return obj.rxMacSecUdsConfigListHolder
}

type macSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter struct {
	obj                              *macSecRxMacSecUDSConfigList
	macSecRxMacSecUDSConfigTypeSlice []MacSecRxMacSecUDSConfigType
	fieldPtr                         *[]*otg.MacSecRxMacSecUDSConfigType
}

func newMacSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter(ptr *[]*otg.MacSecRxMacSecUDSConfigType) MacSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter {
	return &macSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter{fieldPtr: ptr}
}

type MacSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter interface {
	setMsg(*macSecRxMacSecUDSConfigList) MacSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter
	Items() []MacSecRxMacSecUDSConfigType
	Add() MacSecRxMacSecUDSConfigType
	Append(items ...MacSecRxMacSecUDSConfigType) MacSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter
	Set(index int, newObj MacSecRxMacSecUDSConfigType) MacSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter
	Clear() MacSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter
	clearHolderSlice() MacSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter
	appendHolderSlice(item MacSecRxMacSecUDSConfigType) MacSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter
}

func (obj *macSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter) setMsg(msg *macSecRxMacSecUDSConfigList) MacSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&macSecRxMacSecUDSConfigType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *macSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter) Items() []MacSecRxMacSecUDSConfigType {
	return obj.macSecRxMacSecUDSConfigTypeSlice
}

func (obj *macSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter) Add() MacSecRxMacSecUDSConfigType {
	newObj := &otg.MacSecRxMacSecUDSConfigType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &macSecRxMacSecUDSConfigType{obj: newObj}
	newLibObj.setDefault()
	obj.macSecRxMacSecUDSConfigTypeSlice = append(obj.macSecRxMacSecUDSConfigTypeSlice, newLibObj)
	return newLibObj
}

func (obj *macSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter) Append(items ...MacSecRxMacSecUDSConfigType) MacSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.macSecRxMacSecUDSConfigTypeSlice = append(obj.macSecRxMacSecUDSConfigTypeSlice, item)
	}
	return obj
}

func (obj *macSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter) Set(index int, newObj MacSecRxMacSecUDSConfigType) MacSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.macSecRxMacSecUDSConfigTypeSlice[index] = newObj
	return obj
}
func (obj *macSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter) Clear() MacSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.MacSecRxMacSecUDSConfigType{}
		obj.macSecRxMacSecUDSConfigTypeSlice = []MacSecRxMacSecUDSConfigType{}
	}
	return obj
}
func (obj *macSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter) clearHolderSlice() MacSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter {
	if len(obj.macSecRxMacSecUDSConfigTypeSlice) > 0 {
		obj.macSecRxMacSecUDSConfigTypeSlice = []MacSecRxMacSecUDSConfigType{}
	}
	return obj
}
func (obj *macSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter) appendHolderSlice(item MacSecRxMacSecUDSConfigType) MacSecRxMacSecUDSConfigListMacSecRxMacSecUDSConfigTypeIter {
	obj.macSecRxMacSecUDSConfigTypeSlice = append(obj.macSecRxMacSecUDSConfigTypeSlice, item)
	return obj
}

func (obj *macSecRxMacSecUDSConfigList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.RxMacSecUdsConfigList) != 0 {

		if set_default {
			obj.RxMacSecUdsConfigList().clearHolderSlice()
			for _, item := range obj.obj.RxMacSecUdsConfigList {
				obj.RxMacSecUdsConfigList().appendHolderSlice(&macSecRxMacSecUDSConfigType{obj: item})
			}
		}
		for _, item := range obj.RxMacSecUdsConfigList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *macSecRxMacSecUDSConfigList) setDefault() {

}

// ***** IdTypeSlotId *****
type idTypeSlotId struct {
	validation
	obj *otg.IdTypeSlotId
}

func NewIdTypeSlotId() IdTypeSlotId {
	obj := idTypeSlotId{obj: &otg.IdTypeSlotId{}}
	obj.setDefault()
	return &obj
}

func (obj *idTypeSlotId) Msg() *otg.IdTypeSlotId {
	return obj.obj
}

func (obj *idTypeSlotId) SetMsg(msg *otg.IdTypeSlotId) IdTypeSlotId {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *idTypeSlotId) ToProto() (*otg.IdTypeSlotId, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *idTypeSlotId) FromProto(msg *otg.IdTypeSlotId) (IdTypeSlotId, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *idTypeSlotId) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *idTypeSlotId) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *idTypeSlotId) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *idTypeSlotId) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *idTypeSlotId) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *idTypeSlotId) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *idTypeSlotId) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *idTypeSlotId) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *idTypeSlotId) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *idTypeSlotId) Clone() (IdTypeSlotId, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewIdTypeSlotId()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *idTypeSlotId) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// IdTypeSlotId is tBD
type IdTypeSlotId interface {
	Validation
	// Msg marshals IdTypeSlotId to protobuf object *otg.IdTypeSlotId
	// and doesn't set defaults
	Msg() *otg.IdTypeSlotId
	// SetMsg unmarshals IdTypeSlotId from protobuf object *otg.IdTypeSlotId
	// and doesn't set defaults
	SetMsg(*otg.IdTypeSlotId) IdTypeSlotId
	// ToProto marshals IdTypeSlotId to protobuf object *otg.IdTypeSlotId
	ToProto() (*otg.IdTypeSlotId, error)
	// ToPbText marshals IdTypeSlotId to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals IdTypeSlotId to YAML text
	ToYaml() (string, error)
	// ToJson marshals IdTypeSlotId to JSON text
	ToJson() (string, error)
	// FromProto unmarshals IdTypeSlotId from protobuf object *otg.IdTypeSlotId
	FromProto(msg *otg.IdTypeSlotId) (IdTypeSlotId, error)
	// FromPbText unmarshals IdTypeSlotId from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals IdTypeSlotId from YAML text
	FromYaml(value string) error
	// FromJson unmarshals IdTypeSlotId from JSON text
	FromJson(value string) error
	// Validate validates IdTypeSlotId
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (IdTypeSlotId, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Id returns int32, set in IdTypeSlotId.
	Id() int32
	// SetId assigns int32 provided by user to IdTypeSlotId
	SetId(value int32) IdTypeSlotId
	// HasId checks if Id has been set in IdTypeSlotId
	HasId() bool
}

func (obj *idTypeSlotId) populateXml(xObj *Argument) error {

	if obj.HasId() {

		member := Member{
			Name:  "id",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Id()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *idTypeSlotId) populateFromXml(xObj *RetVal) error {

	return nil
}

// The SlotID is used by a VM machine to know the number of the slot   in which it was inserted in a virtual chassis.
// Id returns a int32
func (obj *idTypeSlotId) Id() int32 {

	return *obj.obj.Id

}

// The SlotID is used by a VM machine to know the number of the slot   in which it was inserted in a virtual chassis.
// Id returns a int32
func (obj *idTypeSlotId) HasId() bool {
	return obj.obj.Id != nil
}

// The SlotID is used by a VM machine to know the number of the slot   in which it was inserted in a virtual chassis.
// SetId sets the int32 value in the IdTypeSlotId object
func (obj *idTypeSlotId) SetId(value int32) IdTypeSlotId {

	obj.obj.Id = &value
	return obj
}

func (obj *idTypeSlotId) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *idTypeSlotId) setDefault() {

}

// ***** ServerVMPortInfo *****
type serverVMPortInfo struct {
	validation
	obj      *otg.ServerVMPortInfo
	idHolder IdTypePortId
}

func NewServerVMPortInfo() ServerVMPortInfo {
	obj := serverVMPortInfo{obj: &otg.ServerVMPortInfo{}}
	obj.setDefault()
	return &obj
}

func (obj *serverVMPortInfo) Msg() *otg.ServerVMPortInfo {
	return obj.obj
}

func (obj *serverVMPortInfo) SetMsg(msg *otg.ServerVMPortInfo) ServerVMPortInfo {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *serverVMPortInfo) ToProto() (*otg.ServerVMPortInfo, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *serverVMPortInfo) FromProto(msg *otg.ServerVMPortInfo) (ServerVMPortInfo, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *serverVMPortInfo) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *serverVMPortInfo) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *serverVMPortInfo) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *serverVMPortInfo) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *serverVMPortInfo) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *serverVMPortInfo) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *serverVMPortInfo) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *serverVMPortInfo) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *serverVMPortInfo) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *serverVMPortInfo) Clone() (ServerVMPortInfo, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewServerVMPortInfo()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *serverVMPortInfo) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *serverVMPortInfo) setNil() {
	obj.idHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ServerVMPortInfo is id, a unique identifier for the port. name, the name of the test interface. macAddress, the mac address of the test interface. macAddress, the mac address of the test interface. ipAddress, the ip address of the test interface. mtu, the mtu of the test interface. isPromiscuous, whether or not the test nic should be placed in promiscuous mode.
type ServerVMPortInfo interface {
	Validation
	// Msg marshals ServerVMPortInfo to protobuf object *otg.ServerVMPortInfo
	// and doesn't set defaults
	Msg() *otg.ServerVMPortInfo
	// SetMsg unmarshals ServerVMPortInfo from protobuf object *otg.ServerVMPortInfo
	// and doesn't set defaults
	SetMsg(*otg.ServerVMPortInfo) ServerVMPortInfo
	// ToProto marshals ServerVMPortInfo to protobuf object *otg.ServerVMPortInfo
	ToProto() (*otg.ServerVMPortInfo, error)
	// ToPbText marshals ServerVMPortInfo to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ServerVMPortInfo to YAML text
	ToYaml() (string, error)
	// ToJson marshals ServerVMPortInfo to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ServerVMPortInfo from protobuf object *otg.ServerVMPortInfo
	FromProto(msg *otg.ServerVMPortInfo) (ServerVMPortInfo, error)
	// FromPbText unmarshals ServerVMPortInfo from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ServerVMPortInfo from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ServerVMPortInfo from JSON text
	FromJson(value string) error
	// Validate validates ServerVMPortInfo
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ServerVMPortInfo, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Id returns IdTypePortId, set in ServerVMPortInfo.
	// IdTypePortId is tBD
	Id() IdTypePortId
	// SetId assigns IdTypePortId provided by user to ServerVMPortInfo.
	// IdTypePortId is tBD
	SetId(value IdTypePortId) ServerVMPortInfo
	// HasId checks if Id has been set in ServerVMPortInfo
	HasId() bool
	// Name returns string, set in ServerVMPortInfo.
	Name() string
	// SetName assigns string provided by user to ServerVMPortInfo
	SetName(value string) ServerVMPortInfo
	// HasName checks if Name has been set in ServerVMPortInfo
	HasName() bool
	// MacAddress returns string, set in ServerVMPortInfo.
	MacAddress() string
	// SetMacAddress assigns string provided by user to ServerVMPortInfo
	SetMacAddress(value string) ServerVMPortInfo
	// HasMacAddress checks if MacAddress has been set in ServerVMPortInfo
	HasMacAddress() bool
	// IpAddress returns string, set in ServerVMPortInfo.
	IpAddress() string
	// SetIpAddress assigns string provided by user to ServerVMPortInfo
	SetIpAddress(value string) ServerVMPortInfo
	// HasIpAddress checks if IpAddress has been set in ServerVMPortInfo
	HasIpAddress() bool
	// Mtu returns int32, set in ServerVMPortInfo.
	Mtu() int32
	// SetMtu assigns int32 provided by user to ServerVMPortInfo
	SetMtu(value int32) ServerVMPortInfo
	// HasMtu checks if Mtu has been set in ServerVMPortInfo
	HasMtu() bool
	// IsPromiscuous returns bool, set in ServerVMPortInfo.
	IsPromiscuous() bool
	// SetIsPromiscuous assigns bool provided by user to ServerVMPortInfo
	SetIsPromiscuous(value bool) ServerVMPortInfo
	// HasIsPromiscuous checks if IsPromiscuous has been set in ServerVMPortInfo
	HasIsPromiscuous() bool
	setNil()
}

func (obj *serverVMPortInfo) populateXml(xObj *Argument) error {

	if obj.HasName() {

		member := Member{
			Name:  "name",
			Type:  "string",
			Value: obj.Name(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasMacAddress() {

		member := Member{
			Name:  "macaddress",
			Type:  "string",
			Value: obj.MacAddress(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIpAddress() {

		member := Member{
			Name:  "ipaddress",
			Type:  "string",
			Value: obj.IpAddress(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasMtu() {

		member := Member{
			Name:  "mtu",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Mtu()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIsPromiscuous() {
		var value string
		if obj.IsPromiscuous() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "ispromiscuous",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *serverVMPortInfo) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Id returns a IdTypePortId
func (obj *serverVMPortInfo) Id() IdTypePortId {
	if obj.obj.Id == nil {
		obj.obj.Id = NewIdTypePortId().Msg()
	}
	if obj.idHolder == nil {
		obj.idHolder = &idTypePortId{obj: obj.obj.Id}
	}
	return obj.idHolder
}

// TBD
// Id returns a IdTypePortId
func (obj *serverVMPortInfo) HasId() bool {
	return obj.obj.Id != nil
}

// TBD
// SetId sets the IdTypePortId value in the ServerVMPortInfo object
func (obj *serverVMPortInfo) SetId(value IdTypePortId) ServerVMPortInfo {

	obj.idHolder = nil
	obj.obj.Id = value.Msg()

	return obj
}

// TBD
// Name returns a string
func (obj *serverVMPortInfo) Name() string {

	return *obj.obj.Name

}

// TBD
// Name returns a string
func (obj *serverVMPortInfo) HasName() bool {
	return obj.obj.Name != nil
}

// TBD
// SetName sets the string value in the ServerVMPortInfo object
func (obj *serverVMPortInfo) SetName(value string) ServerVMPortInfo {

	obj.obj.Name = &value
	return obj
}

// TBD
// MacAddress returns a string
func (obj *serverVMPortInfo) MacAddress() string {

	return *obj.obj.MacAddress

}

// TBD
// MacAddress returns a string
func (obj *serverVMPortInfo) HasMacAddress() bool {
	return obj.obj.MacAddress != nil
}

// TBD
// SetMacAddress sets the string value in the ServerVMPortInfo object
func (obj *serverVMPortInfo) SetMacAddress(value string) ServerVMPortInfo {

	obj.obj.MacAddress = &value
	return obj
}

// TBD
// IpAddress returns a string
func (obj *serverVMPortInfo) IpAddress() string {

	return *obj.obj.IpAddress

}

// TBD
// IpAddress returns a string
func (obj *serverVMPortInfo) HasIpAddress() bool {
	return obj.obj.IpAddress != nil
}

// TBD
// SetIpAddress sets the string value in the ServerVMPortInfo object
func (obj *serverVMPortInfo) SetIpAddress(value string) ServerVMPortInfo {

	obj.obj.IpAddress = &value
	return obj
}

// TBD
// Mtu returns a int32
func (obj *serverVMPortInfo) Mtu() int32 {

	return *obj.obj.Mtu

}

// TBD
// Mtu returns a int32
func (obj *serverVMPortInfo) HasMtu() bool {
	return obj.obj.Mtu != nil
}

// TBD
// SetMtu sets the int32 value in the ServerVMPortInfo object
func (obj *serverVMPortInfo) SetMtu(value int32) ServerVMPortInfo {

	obj.obj.Mtu = &value
	return obj
}

// TBD
// IsPromiscuous returns a bool
func (obj *serverVMPortInfo) IsPromiscuous() bool {

	return *obj.obj.IsPromiscuous

}

// TBD
// IsPromiscuous returns a bool
func (obj *serverVMPortInfo) HasIsPromiscuous() bool {
	return obj.obj.IsPromiscuous != nil
}

// TBD
// SetIsPromiscuous sets the bool value in the ServerVMPortInfo object
func (obj *serverVMPortInfo) SetIsPromiscuous(value bool) ServerVMPortInfo {

	obj.obj.IsPromiscuous = &value
	return obj
}

func (obj *serverVMPortInfo) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Id != nil {

		obj.Id().validateObj(vObj, set_default)
	}

}

func (obj *serverVMPortInfo) setDefault() {

}

// ***** Warning *****
type warning struct {
	validation
	obj *otg.Warning
}

func NewWarning() Warning {
	obj := warning{obj: &otg.Warning{}}
	obj.setDefault()
	return &obj
}

func (obj *warning) Msg() *otg.Warning {
	return obj.obj
}

func (obj *warning) SetMsg(msg *otg.Warning) Warning {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *warning) ToProto() (*otg.Warning, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *warning) FromProto(msg *otg.Warning) (Warning, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *warning) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *warning) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *warning) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *warning) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *warning) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *warning) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *warning) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *warning) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *warning) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *warning) Clone() (Warning, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewWarning()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *warning) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// Warning is a list of warnings that have occurred while executing the request.
type Warning interface {
	Validation
	// Msg marshals Warning to protobuf object *otg.Warning
	// and doesn't set defaults
	Msg() *otg.Warning
	// SetMsg unmarshals Warning from protobuf object *otg.Warning
	// and doesn't set defaults
	SetMsg(*otg.Warning) Warning
	// ToProto marshals Warning to protobuf object *otg.Warning
	ToProto() (*otg.Warning, error)
	// ToPbText marshals Warning to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals Warning to YAML text
	ToYaml() (string, error)
	// ToJson marshals Warning to JSON text
	ToJson() (string, error)
	// FromProto unmarshals Warning from protobuf object *otg.Warning
	FromProto(msg *otg.Warning) (Warning, error)
	// FromPbText unmarshals Warning from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals Warning from YAML text
	FromYaml(value string) error
	// FromJson unmarshals Warning from JSON text
	FromJson(value string) error
	// Validate validates Warning
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (Warning, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Warnings returns []string, set in Warning.
	Warnings() []string
	// SetWarnings assigns []string provided by user to Warning
	SetWarnings(value []string) Warning
}

func (obj *warning) populateXml(xObj *Argument) error {

	if len(obj.Warnings()) != 0 {
		for _, item := range obj.Warnings() {
			it := Item{
				Type:  "None",
				Value: item,
			}

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *warning) populateFromXml(xObj *RetVal) error {

	return nil
}

// A list of any system specific warnings that have occurred while executing the request.
// Warnings returns a []string
func (obj *warning) Warnings() []string {
	if obj.obj.Warnings == nil {
		obj.obj.Warnings = make([]string, 0)
	}
	return obj.obj.Warnings
}

// A list of any system specific warnings that have occurred while executing the request.
// SetWarnings sets the []string value in the Warning object
func (obj *warning) SetWarnings(value []string) Warning {

	if obj.obj.Warnings == nil {
		obj.obj.Warnings = make([]string, 0)
	}
	obj.obj.Warnings = value

	return obj
}

func (obj *warning) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *warning) setDefault() {

}

// ***** Error *****
type _error struct {
	validation
	obj *otg.Error
}

func NewError() Error {
	obj := _error{obj: &otg.Error{}}
	obj.setDefault()
	return &obj
}

func (obj *_error) Msg() *otg.Error {
	return obj.obj
}

func (obj *_error) SetMsg(msg *otg.Error) Error {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *_error) ToProto() (*otg.Error, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *_error) FromProto(msg *otg.Error) (Error, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *_error) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *_error) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *_error) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *_error) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *_error) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *_error) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *_error) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *_error) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *_error) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *_error) Clone() (Error, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewError()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *_error) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// Error is error response generated while serving API request.
type Error interface {
	Validation
	// Msg marshals Error to protobuf object *otg.Error
	// and doesn't set defaults
	Msg() *otg.Error
	// SetMsg unmarshals Error from protobuf object *otg.Error
	// and doesn't set defaults
	SetMsg(*otg.Error) Error
	// ToProto marshals Error to protobuf object *otg.Error
	ToProto() (*otg.Error, error)
	// ToPbText marshals Error to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals Error to YAML text
	ToYaml() (string, error)
	// ToJson marshals Error to JSON text
	ToJson() (string, error)
	// FromProto unmarshals Error from protobuf object *otg.Error
	FromProto(msg *otg.Error) (Error, error)
	// FromPbText unmarshals Error from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals Error from YAML text
	FromYaml(value string) error
	// FromJson unmarshals Error from JSON text
	FromJson(value string) error
	// Validate validates Error
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (Error, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Code returns int32, set in Error.
	Code() int32
	// SetCode assigns int32 provided by user to Error
	SetCode(value int32) Error
	// Kind returns ErrorKindEnum, set in Error
	Kind() ErrorKindEnum
	// SetKind assigns ErrorKindEnum provided by user to Error
	SetKind(value ErrorKindEnum) Error
	// HasKind checks if Kind has been set in Error
	HasKind() bool
	// Errors returns []string, set in Error.
	Errors() []string
	// SetErrors assigns []string provided by user to Error
	SetErrors(value []string) Error
	// implement Error function for implementingnative Error Interface.
	Error() string
}

func (obj *_error) Error() string {
	json, err := obj.ToJson()
	if err != nil {
		return fmt.Sprintf("could not convert Error to JSON: %v", err)
	}
	return json
}

func (obj *_error) populateXml(xObj *Argument) error {

	return nil
}

func (obj *_error) populateFromXml(xObj *RetVal) error {

	return nil
}

// Numeric status code based on the underlying transport being used. The API server MUST set this code explicitly based on following references: HTTP 4xx errors - https://datatracker.ietf.org/doc/html/rfc9110#section-15.5, HTTP 5xx errors: https://datatracker.ietf.org/doc/html/rfc9110#section-15.6, gRPC errors: https://grpc.github.io/grpc/core/md_doc_statuscodes.html
// Code returns a int32
func (obj *_error) Code() int32 {

	return *obj.obj.Code

}

// Numeric status code based on the underlying transport being used. The API server MUST set this code explicitly based on following references: HTTP 4xx errors - https://datatracker.ietf.org/doc/html/rfc9110#section-15.5, HTTP 5xx errors: https://datatracker.ietf.org/doc/html/rfc9110#section-15.6, gRPC errors: https://grpc.github.io/grpc/core/md_doc_statuscodes.html
// SetCode sets the int32 value in the Error object
func (obj *_error) SetCode(value int32) Error {

	obj.obj.Code = &value
	return obj
}

type ErrorKindEnum string

// Enum of Kind on Error
var ErrorKind = struct {
	VALIDATION ErrorKindEnum
	INTERNAL   ErrorKindEnum
}{
	VALIDATION: ErrorKindEnum("validation"),
	INTERNAL:   ErrorKindEnum("internal"),
}

func (obj *_error) Kind() ErrorKindEnum {
	return ErrorKindEnum(obj.obj.Kind.Enum().String())
}

// Classification of error originating from within API server that may not be mapped to the value in `code`. Absence of this field may indicate that the error did not originate from within API server.
// Kind returns a string
func (obj *_error) HasKind() bool {
	return obj.obj.Kind != nil
}

func (obj *_error) SetKind(value ErrorKindEnum) Error {
	intValue, ok := otg.Error_Kind_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on ErrorKindEnum", string(value)))
		return obj
	}
	enumValue := otg.Error_Kind_Enum(intValue)
	obj.obj.Kind = &enumValue

	return obj
}

// List of error messages generated while executing the request.
// Errors returns a []string
func (obj *_error) Errors() []string {
	if obj.obj.Errors == nil {
		obj.obj.Errors = make([]string, 0)
	}
	return obj.obj.Errors
}

// List of error messages generated while executing the request.
// SetErrors sets the []string value in the Error object
func (obj *_error) SetErrors(value []string) Error {

	if obj.obj.Errors == nil {
		obj.obj.Errors = make([]string, 0)
	}
	obj.obj.Errors = value

	return obj
}

func (obj *_error) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// Code is required
	if obj.obj.Code == nil {
		vObj.validationErrors = append(vObj.validationErrors, "Code is required field on interface Error")
	}
}

func (obj *_error) setDefault() {

}

// ***** ResponseInitRequest *****
type responseInitRequest struct {
	validation
	obj                   *otg.ResponseInitRequest
	providedVersionHolder PFTypeVersionType
}

func NewResponseInitRequest() ResponseInitRequest {
	obj := responseInitRequest{obj: &otg.ResponseInitRequest{}}
	obj.setDefault()
	return &obj
}

func (obj *responseInitRequest) Msg() *otg.ResponseInitRequest {
	return obj.obj
}

func (obj *responseInitRequest) SetMsg(msg *otg.ResponseInitRequest) ResponseInitRequest {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *responseInitRequest) ToProto() (*otg.ResponseInitRequest, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *responseInitRequest) FromProto(msg *otg.ResponseInitRequest) (ResponseInitRequest, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *responseInitRequest) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *responseInitRequest) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *responseInitRequest) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseInitRequest) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *responseInitRequest) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseInitRequest) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *responseInitRequest) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *responseInitRequest) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *responseInitRequest) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *responseInitRequest) Clone() (ResponseInitRequest, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewResponseInitRequest()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *responseInitRequest) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *responseInitRequest) FromRpfXml(rBytes []byte) error {
	res := ObjectResponse{}
	if err := xml.Unmarshal(rBytes, &res); err != nil {
		return err
	}
	if err := obj.populateFromXml(&res); err != nil {
		return err
	}
	return nil
}

func (obj *responseInitRequest) setNil() {
	obj.providedVersionHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ResponseInitRequest is description is TBD
type ResponseInitRequest interface {
	Validation
	// Msg marshals ResponseInitRequest to protobuf object *otg.ResponseInitRequest
	// and doesn't set defaults
	Msg() *otg.ResponseInitRequest
	// SetMsg unmarshals ResponseInitRequest from protobuf object *otg.ResponseInitRequest
	// and doesn't set defaults
	SetMsg(*otg.ResponseInitRequest) ResponseInitRequest
	// ToProto marshals ResponseInitRequest to protobuf object *otg.ResponseInitRequest
	ToProto() (*otg.ResponseInitRequest, error)
	// ToPbText marshals ResponseInitRequest to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ResponseInitRequest to YAML text
	ToYaml() (string, error)
	// ToJson marshals ResponseInitRequest to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ResponseInitRequest from protobuf object *otg.ResponseInitRequest
	FromProto(msg *otg.ResponseInitRequest) (ResponseInitRequest, error)
	// FromPbText unmarshals ResponseInitRequest from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ResponseInitRequest from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ResponseInitRequest from JSON text
	FromJson(value string) error
	// Validate validates ResponseInitRequest
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ResponseInitRequest, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*ObjectResponse) error
	FromRpfXml([]byte) error
	// ProvidedVersion returns PFTypeVersionType, set in ResponseInitRequest.
	// PFTypeVersionType is model the version used to identify the API. The release number components (Major.Minor release number) identifies the maturity of the API. A client compiled with release (A.B) can use a server providing release (C.D) iff A equals C and B less than or equal to D. In other words, an "old client" can use a "new server". The revision number components (Branch.Build revision number) identifies the particular revision of the API conforming to the API release number.
	ProvidedVersion() PFTypeVersionType
	// SetProvidedVersion assigns PFTypeVersionType provided by user to ResponseInitRequest.
	// PFTypeVersionType is model the version used to identify the API. The release number components (Major.Minor release number) identifies the maturity of the API. A client compiled with release (A.B) can use a server providing release (C.D) iff A equals C and B less than or equal to D. In other words, an "old client" can use a "new server". The revision number components (Branch.Build revision number) identifies the particular revision of the API conforming to the API release number.
	SetProvidedVersion(value PFTypeVersionType) ResponseInitRequest
	// HasProvidedVersion checks if ProvidedVersion has been set in ResponseInitRequest
	HasProvidedVersion() bool
	setNil()
}

func (obj *responseInitRequest) populateXml(xObj *Argument) error {

	return nil
}

func (obj *responseInitRequest) populateFromXml(xObj *ObjectResponse) error {

	if len(xObj.RetVal) != 1 {
		return fmt.Errorf("insufficient value in ResponseInitRequest")
	}

	return nil
}

// description is TBD
// ProvidedVersion returns a PFTypeVersionType
func (obj *responseInitRequest) ProvidedVersion() PFTypeVersionType {
	if obj.obj.ProvidedVersion == nil {
		obj.obj.ProvidedVersion = NewPFTypeVersionType().Msg()
	}
	if obj.providedVersionHolder == nil {
		obj.providedVersionHolder = &pFTypeVersionType{obj: obj.obj.ProvidedVersion}
	}
	return obj.providedVersionHolder
}

// description is TBD
// ProvidedVersion returns a PFTypeVersionType
func (obj *responseInitRequest) HasProvidedVersion() bool {
	return obj.obj.ProvidedVersion != nil
}

// description is TBD
// SetProvidedVersion sets the PFTypeVersionType value in the ResponseInitRequest object
func (obj *responseInitRequest) SetProvidedVersion(value PFTypeVersionType) ResponseInitRequest {

	obj.providedVersionHolder = nil
	obj.obj.ProvidedVersion = value.Msg()

	return obj
}

func (obj *responseInitRequest) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ProvidedVersion != nil {

		obj.ProvidedVersion().validateObj(vObj, set_default)
	}

}

func (obj *responseInitRequest) setDefault() {

}

// ***** ResponseStartDebugSession *****
type responseStartDebugSession struct {
	validation
	obj                            *otg.ResponseStartDebugSession
	portListInfoWithUniqueIdHolder DebugTopologyDebugPortInfoWithUniqueIdList
	interceptorInfoHolder          DebugTopologyInterceptorInfo
}

func NewResponseStartDebugSession() ResponseStartDebugSession {
	obj := responseStartDebugSession{obj: &otg.ResponseStartDebugSession{}}
	obj.setDefault()
	return &obj
}

func (obj *responseStartDebugSession) Msg() *otg.ResponseStartDebugSession {
	return obj.obj
}

func (obj *responseStartDebugSession) SetMsg(msg *otg.ResponseStartDebugSession) ResponseStartDebugSession {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *responseStartDebugSession) ToProto() (*otg.ResponseStartDebugSession, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *responseStartDebugSession) FromProto(msg *otg.ResponseStartDebugSession) (ResponseStartDebugSession, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *responseStartDebugSession) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *responseStartDebugSession) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *responseStartDebugSession) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseStartDebugSession) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *responseStartDebugSession) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseStartDebugSession) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *responseStartDebugSession) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *responseStartDebugSession) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *responseStartDebugSession) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *responseStartDebugSession) Clone() (ResponseStartDebugSession, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewResponseStartDebugSession()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *responseStartDebugSession) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *responseStartDebugSession) FromRpfXml(rBytes []byte) error {
	res := ObjectResponse{}
	if err := xml.Unmarshal(rBytes, &res); err != nil {
		return err
	}
	if err := obj.populateFromXml(&res); err != nil {
		return err
	}
	return nil
}

func (obj *responseStartDebugSession) setNil() {
	obj.portListInfoWithUniqueIdHolder = nil
	obj.interceptorInfoHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ResponseStartDebugSession is description is TBD
type ResponseStartDebugSession interface {
	Validation
	// Msg marshals ResponseStartDebugSession to protobuf object *otg.ResponseStartDebugSession
	// and doesn't set defaults
	Msg() *otg.ResponseStartDebugSession
	// SetMsg unmarshals ResponseStartDebugSession from protobuf object *otg.ResponseStartDebugSession
	// and doesn't set defaults
	SetMsg(*otg.ResponseStartDebugSession) ResponseStartDebugSession
	// ToProto marshals ResponseStartDebugSession to protobuf object *otg.ResponseStartDebugSession
	ToProto() (*otg.ResponseStartDebugSession, error)
	// ToPbText marshals ResponseStartDebugSession to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ResponseStartDebugSession to YAML text
	ToYaml() (string, error)
	// ToJson marshals ResponseStartDebugSession to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ResponseStartDebugSession from protobuf object *otg.ResponseStartDebugSession
	FromProto(msg *otg.ResponseStartDebugSession) (ResponseStartDebugSession, error)
	// FromPbText unmarshals ResponseStartDebugSession from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ResponseStartDebugSession from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ResponseStartDebugSession from JSON text
	FromJson(value string) error
	// Validate validates ResponseStartDebugSession
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ResponseStartDebugSession, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*ObjectResponse) error
	FromRpfXml([]byte) error
	// PortListInfoWithUniqueId returns DebugTopologyDebugPortInfoWithUniqueIdList, set in ResponseStartDebugSession.
	// DebugTopologyDebugPortInfoWithUniqueIdList is tBD
	PortListInfoWithUniqueId() DebugTopologyDebugPortInfoWithUniqueIdList
	// SetPortListInfoWithUniqueId assigns DebugTopologyDebugPortInfoWithUniqueIdList provided by user to ResponseStartDebugSession.
	// DebugTopologyDebugPortInfoWithUniqueIdList is tBD
	SetPortListInfoWithUniqueId(value DebugTopologyDebugPortInfoWithUniqueIdList) ResponseStartDebugSession
	// HasPortListInfoWithUniqueId checks if PortListInfoWithUniqueId has been set in ResponseStartDebugSession
	HasPortListInfoWithUniqueId() bool
	// InterceptorInfo returns DebugTopologyInterceptorInfo, set in ResponseStartDebugSession.
	// DebugTopologyInterceptorInfo is tBD
	InterceptorInfo() DebugTopologyInterceptorInfo
	// SetInterceptorInfo assigns DebugTopologyInterceptorInfo provided by user to ResponseStartDebugSession.
	// DebugTopologyInterceptorInfo is tBD
	SetInterceptorInfo(value DebugTopologyInterceptorInfo) ResponseStartDebugSession
	// HasInterceptorInfo checks if InterceptorInfo has been set in ResponseStartDebugSession
	HasInterceptorInfo() bool
	setNil()
}

func (obj *responseStartDebugSession) populateXml(xObj *Argument) error {

	return nil
}

func (obj *responseStartDebugSession) populateFromXml(xObj *ObjectResponse) error {

	if len(xObj.RetVal) != 2 {
		return fmt.Errorf("insufficient value in ResponseStartDebugSession")
	}

	return nil
}

// description is TBD
// PortListInfoWithUniqueId returns a DebugTopologyDebugPortInfoWithUniqueIdList
func (obj *responseStartDebugSession) PortListInfoWithUniqueId() DebugTopologyDebugPortInfoWithUniqueIdList {
	if obj.obj.PortListInfoWithUniqueId == nil {
		obj.obj.PortListInfoWithUniqueId = NewDebugTopologyDebugPortInfoWithUniqueIdList().Msg()
	}
	if obj.portListInfoWithUniqueIdHolder == nil {
		obj.portListInfoWithUniqueIdHolder = &debugTopologyDebugPortInfoWithUniqueIdList{obj: obj.obj.PortListInfoWithUniqueId}
	}
	return obj.portListInfoWithUniqueIdHolder
}

// description is TBD
// PortListInfoWithUniqueId returns a DebugTopologyDebugPortInfoWithUniqueIdList
func (obj *responseStartDebugSession) HasPortListInfoWithUniqueId() bool {
	return obj.obj.PortListInfoWithUniqueId != nil
}

// description is TBD
// SetPortListInfoWithUniqueId sets the DebugTopologyDebugPortInfoWithUniqueIdList value in the ResponseStartDebugSession object
func (obj *responseStartDebugSession) SetPortListInfoWithUniqueId(value DebugTopologyDebugPortInfoWithUniqueIdList) ResponseStartDebugSession {

	obj.portListInfoWithUniqueIdHolder = nil
	obj.obj.PortListInfoWithUniqueId = value.Msg()

	return obj
}

// description is TBD
// InterceptorInfo returns a DebugTopologyInterceptorInfo
func (obj *responseStartDebugSession) InterceptorInfo() DebugTopologyInterceptorInfo {
	if obj.obj.InterceptorInfo == nil {
		obj.obj.InterceptorInfo = NewDebugTopologyInterceptorInfo().Msg()
	}
	if obj.interceptorInfoHolder == nil {
		obj.interceptorInfoHolder = &debugTopologyInterceptorInfo{obj: obj.obj.InterceptorInfo}
	}
	return obj.interceptorInfoHolder
}

// description is TBD
// InterceptorInfo returns a DebugTopologyInterceptorInfo
func (obj *responseStartDebugSession) HasInterceptorInfo() bool {
	return obj.obj.InterceptorInfo != nil
}

// description is TBD
// SetInterceptorInfo sets the DebugTopologyInterceptorInfo value in the ResponseStartDebugSession object
func (obj *responseStartDebugSession) SetInterceptorInfo(value DebugTopologyInterceptorInfo) ResponseStartDebugSession {

	obj.interceptorInfoHolder = nil
	obj.obj.InterceptorInfo = value.Msg()

	return obj
}

func (obj *responseStartDebugSession) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortListInfoWithUniqueId != nil {

		obj.PortListInfoWithUniqueId().validateObj(vObj, set_default)
	}

	if obj.obj.InterceptorInfo != nil {

		obj.InterceptorInfo().validateObj(vObj, set_default)
	}

}

func (obj *responseStartDebugSession) setDefault() {

}

// ***** ResponseStopDebugSession *****
type responseStopDebugSession struct {
	validation
	obj                   *otg.ResponseStopDebugSession
	interceptorInfoHolder DebugTopologyInterceptorInfo
}

func NewResponseStopDebugSession() ResponseStopDebugSession {
	obj := responseStopDebugSession{obj: &otg.ResponseStopDebugSession{}}
	obj.setDefault()
	return &obj
}

func (obj *responseStopDebugSession) Msg() *otg.ResponseStopDebugSession {
	return obj.obj
}

func (obj *responseStopDebugSession) SetMsg(msg *otg.ResponseStopDebugSession) ResponseStopDebugSession {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *responseStopDebugSession) ToProto() (*otg.ResponseStopDebugSession, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *responseStopDebugSession) FromProto(msg *otg.ResponseStopDebugSession) (ResponseStopDebugSession, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *responseStopDebugSession) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *responseStopDebugSession) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *responseStopDebugSession) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseStopDebugSession) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *responseStopDebugSession) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseStopDebugSession) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *responseStopDebugSession) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *responseStopDebugSession) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *responseStopDebugSession) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *responseStopDebugSession) Clone() (ResponseStopDebugSession, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewResponseStopDebugSession()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *responseStopDebugSession) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *responseStopDebugSession) FromRpfXml(rBytes []byte) error {
	res := ObjectResponse{}
	if err := xml.Unmarshal(rBytes, &res); err != nil {
		return err
	}
	if err := obj.populateFromXml(&res); err != nil {
		return err
	}
	return nil
}

func (obj *responseStopDebugSession) setNil() {
	obj.interceptorInfoHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ResponseStopDebugSession is description is TBD
type ResponseStopDebugSession interface {
	Validation
	// Msg marshals ResponseStopDebugSession to protobuf object *otg.ResponseStopDebugSession
	// and doesn't set defaults
	Msg() *otg.ResponseStopDebugSession
	// SetMsg unmarshals ResponseStopDebugSession from protobuf object *otg.ResponseStopDebugSession
	// and doesn't set defaults
	SetMsg(*otg.ResponseStopDebugSession) ResponseStopDebugSession
	// ToProto marshals ResponseStopDebugSession to protobuf object *otg.ResponseStopDebugSession
	ToProto() (*otg.ResponseStopDebugSession, error)
	// ToPbText marshals ResponseStopDebugSession to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ResponseStopDebugSession to YAML text
	ToYaml() (string, error)
	// ToJson marshals ResponseStopDebugSession to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ResponseStopDebugSession from protobuf object *otg.ResponseStopDebugSession
	FromProto(msg *otg.ResponseStopDebugSession) (ResponseStopDebugSession, error)
	// FromPbText unmarshals ResponseStopDebugSession from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ResponseStopDebugSession from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ResponseStopDebugSession from JSON text
	FromJson(value string) error
	// Validate validates ResponseStopDebugSession
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ResponseStopDebugSession, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*ObjectResponse) error
	FromRpfXml([]byte) error
	// InterceptorInfo returns DebugTopologyInterceptorInfo, set in ResponseStopDebugSession.
	// DebugTopologyInterceptorInfo is tBD
	InterceptorInfo() DebugTopologyInterceptorInfo
	// SetInterceptorInfo assigns DebugTopologyInterceptorInfo provided by user to ResponseStopDebugSession.
	// DebugTopologyInterceptorInfo is tBD
	SetInterceptorInfo(value DebugTopologyInterceptorInfo) ResponseStopDebugSession
	// HasInterceptorInfo checks if InterceptorInfo has been set in ResponseStopDebugSession
	HasInterceptorInfo() bool
	setNil()
}

func (obj *responseStopDebugSession) populateXml(xObj *Argument) error {

	return nil
}

func (obj *responseStopDebugSession) populateFromXml(xObj *ObjectResponse) error {

	if len(xObj.RetVal) != 1 {
		return fmt.Errorf("insufficient value in ResponseStopDebugSession")
	}

	return nil
}

// description is TBD
// InterceptorInfo returns a DebugTopologyInterceptorInfo
func (obj *responseStopDebugSession) InterceptorInfo() DebugTopologyInterceptorInfo {
	if obj.obj.InterceptorInfo == nil {
		obj.obj.InterceptorInfo = NewDebugTopologyInterceptorInfo().Msg()
	}
	if obj.interceptorInfoHolder == nil {
		obj.interceptorInfoHolder = &debugTopologyInterceptorInfo{obj: obj.obj.InterceptorInfo}
	}
	return obj.interceptorInfoHolder
}

// description is TBD
// InterceptorInfo returns a DebugTopologyInterceptorInfo
func (obj *responseStopDebugSession) HasInterceptorInfo() bool {
	return obj.obj.InterceptorInfo != nil
}

// description is TBD
// SetInterceptorInfo sets the DebugTopologyInterceptorInfo value in the ResponseStopDebugSession object
func (obj *responseStopDebugSession) SetInterceptorInfo(value DebugTopologyInterceptorInfo) ResponseStopDebugSession {

	obj.interceptorInfoHolder = nil
	obj.obj.InterceptorInfo = value.Msg()

	return obj
}

func (obj *responseStopDebugSession) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.InterceptorInfo != nil {

		obj.InterceptorInfo().validateObj(vObj, set_default)
	}

}

func (obj *responseStopDebugSession) setDefault() {

}

// ***** ResponseFeatureRequest *****
type responseFeatureRequest struct {
	validation
	obj *otg.ResponseFeatureRequest
}

func NewResponseFeatureRequest() ResponseFeatureRequest {
	obj := responseFeatureRequest{obj: &otg.ResponseFeatureRequest{}}
	obj.setDefault()
	return &obj
}

func (obj *responseFeatureRequest) Msg() *otg.ResponseFeatureRequest {
	return obj.obj
}

func (obj *responseFeatureRequest) SetMsg(msg *otg.ResponseFeatureRequest) ResponseFeatureRequest {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *responseFeatureRequest) ToProto() (*otg.ResponseFeatureRequest, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *responseFeatureRequest) FromProto(msg *otg.ResponseFeatureRequest) (ResponseFeatureRequest, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *responseFeatureRequest) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *responseFeatureRequest) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *responseFeatureRequest) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseFeatureRequest) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *responseFeatureRequest) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseFeatureRequest) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *responseFeatureRequest) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *responseFeatureRequest) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *responseFeatureRequest) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *responseFeatureRequest) Clone() (ResponseFeatureRequest, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewResponseFeatureRequest()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *responseFeatureRequest) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *responseFeatureRequest) FromRpfXml(rBytes []byte) error {
	res := ObjectResponse{}
	if err := xml.Unmarshal(rBytes, &res); err != nil {
		return err
	}
	if err := obj.populateFromXml(&res); err != nil {
		return err
	}
	return nil
}

// ResponseFeatureRequest is description is TBD
type ResponseFeatureRequest interface {
	Validation
	// Msg marshals ResponseFeatureRequest to protobuf object *otg.ResponseFeatureRequest
	// and doesn't set defaults
	Msg() *otg.ResponseFeatureRequest
	// SetMsg unmarshals ResponseFeatureRequest from protobuf object *otg.ResponseFeatureRequest
	// and doesn't set defaults
	SetMsg(*otg.ResponseFeatureRequest) ResponseFeatureRequest
	// ToProto marshals ResponseFeatureRequest to protobuf object *otg.ResponseFeatureRequest
	ToProto() (*otg.ResponseFeatureRequest, error)
	// ToPbText marshals ResponseFeatureRequest to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ResponseFeatureRequest to YAML text
	ToYaml() (string, error)
	// ToJson marshals ResponseFeatureRequest to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ResponseFeatureRequest from protobuf object *otg.ResponseFeatureRequest
	FromProto(msg *otg.ResponseFeatureRequest) (ResponseFeatureRequest, error)
	// FromPbText unmarshals ResponseFeatureRequest from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ResponseFeatureRequest from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ResponseFeatureRequest from JSON text
	FromJson(value string) error
	// Validate validates ResponseFeatureRequest
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ResponseFeatureRequest, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*ObjectResponse) error
	FromRpfXml([]byte) error
	// Features returns string, set in ResponseFeatureRequest.
	Features() string
	// SetFeatures assigns string provided by user to ResponseFeatureRequest
	SetFeatures(value string) ResponseFeatureRequest
	// HasFeatures checks if Features has been set in ResponseFeatureRequest
	HasFeatures() bool
}

func (obj *responseFeatureRequest) populateXml(xObj *Argument) error {

	if obj.HasFeatures() {

		member := Member{
			Name:  "features",
			Type:  "string",
			Value: obj.Features(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *responseFeatureRequest) populateFromXml(xObj *ObjectResponse) error {

	if len(xObj.RetVal) != 1 {
		return fmt.Errorf("insufficient value in ResponseFeatureRequest")
	}

	if xObj.RetVal[0].Value != "" {
		retVal := xObj.RetVal[0].Value

		obj.SetFeatures(retVal)

	}

	return nil
}

// description is TBD
// Features returns a string
func (obj *responseFeatureRequest) Features() string {

	return *obj.obj.Features

}

// description is TBD
// Features returns a string
func (obj *responseFeatureRequest) HasFeatures() bool {
	return obj.obj.Features != nil
}

// description is TBD
// SetFeatures sets the string value in the ResponseFeatureRequest object
func (obj *responseFeatureRequest) SetFeatures(value string) ResponseFeatureRequest {

	obj.obj.Features = &value
	return obj
}

func (obj *responseFeatureRequest) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *responseFeatureRequest) setDefault() {

}

// ***** ResponseGetOwner *****
type responseGetOwner struct {
	validation
	obj        *otg.ResponseGetOwner
	infoHolder ServerOwnershipInfo
}

func NewResponseGetOwner() ResponseGetOwner {
	obj := responseGetOwner{obj: &otg.ResponseGetOwner{}}
	obj.setDefault()
	return &obj
}

func (obj *responseGetOwner) Msg() *otg.ResponseGetOwner {
	return obj.obj
}

func (obj *responseGetOwner) SetMsg(msg *otg.ResponseGetOwner) ResponseGetOwner {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *responseGetOwner) ToProto() (*otg.ResponseGetOwner, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *responseGetOwner) FromProto(msg *otg.ResponseGetOwner) (ResponseGetOwner, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *responseGetOwner) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *responseGetOwner) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *responseGetOwner) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseGetOwner) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *responseGetOwner) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseGetOwner) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *responseGetOwner) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *responseGetOwner) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *responseGetOwner) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *responseGetOwner) Clone() (ResponseGetOwner, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewResponseGetOwner()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *responseGetOwner) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *responseGetOwner) FromRpfXml(rBytes []byte) error {
	res := ObjectResponse{}
	if err := xml.Unmarshal(rBytes, &res); err != nil {
		return err
	}
	if err := obj.populateFromXml(&res); err != nil {
		return err
	}
	return nil
}

func (obj *responseGetOwner) setNil() {
	obj.infoHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ResponseGetOwner is description is TBD
type ResponseGetOwner interface {
	Validation
	// Msg marshals ResponseGetOwner to protobuf object *otg.ResponseGetOwner
	// and doesn't set defaults
	Msg() *otg.ResponseGetOwner
	// SetMsg unmarshals ResponseGetOwner from protobuf object *otg.ResponseGetOwner
	// and doesn't set defaults
	SetMsg(*otg.ResponseGetOwner) ResponseGetOwner
	// ToProto marshals ResponseGetOwner to protobuf object *otg.ResponseGetOwner
	ToProto() (*otg.ResponseGetOwner, error)
	// ToPbText marshals ResponseGetOwner to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ResponseGetOwner to YAML text
	ToYaml() (string, error)
	// ToJson marshals ResponseGetOwner to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ResponseGetOwner from protobuf object *otg.ResponseGetOwner
	FromProto(msg *otg.ResponseGetOwner) (ResponseGetOwner, error)
	// FromPbText unmarshals ResponseGetOwner from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ResponseGetOwner from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ResponseGetOwner from JSON text
	FromJson(value string) error
	// Validate validates ResponseGetOwner
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ResponseGetOwner, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*ObjectResponse) error
	FromRpfXml([]byte) error
	// Info returns ServerOwnershipInfo, set in ResponseGetOwner.
	// ServerOwnershipInfo is owner, the current owner, empty if not owned description, provided at the time ownership was taken duration, number of milliseconds this port has been owned by current owner.
	Info() ServerOwnershipInfo
	// SetInfo assigns ServerOwnershipInfo provided by user to ResponseGetOwner.
	// ServerOwnershipInfo is owner, the current owner, empty if not owned description, provided at the time ownership was taken duration, number of milliseconds this port has been owned by current owner.
	SetInfo(value ServerOwnershipInfo) ResponseGetOwner
	// HasInfo checks if Info has been set in ResponseGetOwner
	HasInfo() bool
	setNil()
}

func (obj *responseGetOwner) populateXml(xObj *Argument) error {

	return nil
}

func (obj *responseGetOwner) populateFromXml(xObj *ObjectResponse) error {

	if len(xObj.RetVal) != 1 {
		return fmt.Errorf("insufficient value in ResponseGetOwner")
	}

	return nil
}

// description is TBD
// Info returns a ServerOwnershipInfo
func (obj *responseGetOwner) Info() ServerOwnershipInfo {
	if obj.obj.Info == nil {
		obj.obj.Info = NewServerOwnershipInfo().Msg()
	}
	if obj.infoHolder == nil {
		obj.infoHolder = &serverOwnershipInfo{obj: obj.obj.Info}
	}
	return obj.infoHolder
}

// description is TBD
// Info returns a ServerOwnershipInfo
func (obj *responseGetOwner) HasInfo() bool {
	return obj.obj.Info != nil
}

// description is TBD
// SetInfo sets the ServerOwnershipInfo value in the ResponseGetOwner object
func (obj *responseGetOwner) SetInfo(value ServerOwnershipInfo) ResponseGetOwner {

	obj.infoHolder = nil
	obj.obj.Info = value.Msg()

	return obj
}

func (obj *responseGetOwner) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Info != nil {

		obj.Info().validateObj(vObj, set_default)
	}

}

func (obj *responseGetOwner) setDefault() {

}

// ***** ResponseGetCapturePacketCount *****
type responseGetCapturePacketCount struct {
	validation
	obj                   *otg.ResponseGetCapturePacketCount
	packetCountListHolder CapturePacketCountList
}

func NewResponseGetCapturePacketCount() ResponseGetCapturePacketCount {
	obj := responseGetCapturePacketCount{obj: &otg.ResponseGetCapturePacketCount{}}
	obj.setDefault()
	return &obj
}

func (obj *responseGetCapturePacketCount) Msg() *otg.ResponseGetCapturePacketCount {
	return obj.obj
}

func (obj *responseGetCapturePacketCount) SetMsg(msg *otg.ResponseGetCapturePacketCount) ResponseGetCapturePacketCount {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *responseGetCapturePacketCount) ToProto() (*otg.ResponseGetCapturePacketCount, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *responseGetCapturePacketCount) FromProto(msg *otg.ResponseGetCapturePacketCount) (ResponseGetCapturePacketCount, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *responseGetCapturePacketCount) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *responseGetCapturePacketCount) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *responseGetCapturePacketCount) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseGetCapturePacketCount) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *responseGetCapturePacketCount) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseGetCapturePacketCount) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *responseGetCapturePacketCount) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *responseGetCapturePacketCount) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *responseGetCapturePacketCount) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *responseGetCapturePacketCount) Clone() (ResponseGetCapturePacketCount, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewResponseGetCapturePacketCount()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *responseGetCapturePacketCount) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *responseGetCapturePacketCount) FromRpfXml(rBytes []byte) error {
	res := ObjectResponse{}
	if err := xml.Unmarshal(rBytes, &res); err != nil {
		return err
	}
	if err := obj.populateFromXml(&res); err != nil {
		return err
	}
	return nil
}

func (obj *responseGetCapturePacketCount) setNil() {
	obj.packetCountListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ResponseGetCapturePacketCount is description is TBD
type ResponseGetCapturePacketCount interface {
	Validation
	// Msg marshals ResponseGetCapturePacketCount to protobuf object *otg.ResponseGetCapturePacketCount
	// and doesn't set defaults
	Msg() *otg.ResponseGetCapturePacketCount
	// SetMsg unmarshals ResponseGetCapturePacketCount from protobuf object *otg.ResponseGetCapturePacketCount
	// and doesn't set defaults
	SetMsg(*otg.ResponseGetCapturePacketCount) ResponseGetCapturePacketCount
	// ToProto marshals ResponseGetCapturePacketCount to protobuf object *otg.ResponseGetCapturePacketCount
	ToProto() (*otg.ResponseGetCapturePacketCount, error)
	// ToPbText marshals ResponseGetCapturePacketCount to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ResponseGetCapturePacketCount to YAML text
	ToYaml() (string, error)
	// ToJson marshals ResponseGetCapturePacketCount to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ResponseGetCapturePacketCount from protobuf object *otg.ResponseGetCapturePacketCount
	FromProto(msg *otg.ResponseGetCapturePacketCount) (ResponseGetCapturePacketCount, error)
	// FromPbText unmarshals ResponseGetCapturePacketCount from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ResponseGetCapturePacketCount from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ResponseGetCapturePacketCount from JSON text
	FromJson(value string) error
	// Validate validates ResponseGetCapturePacketCount
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ResponseGetCapturePacketCount, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*ObjectResponse) error
	FromRpfXml([]byte) error
	// PacketCountList returns CapturePacketCountList, set in ResponseGetCapturePacketCount.
	// CapturePacketCountList is tBD
	PacketCountList() CapturePacketCountList
	// SetPacketCountList assigns CapturePacketCountList provided by user to ResponseGetCapturePacketCount.
	// CapturePacketCountList is tBD
	SetPacketCountList(value CapturePacketCountList) ResponseGetCapturePacketCount
	// HasPacketCountList checks if PacketCountList has been set in ResponseGetCapturePacketCount
	HasPacketCountList() bool
	setNil()
}

func (obj *responseGetCapturePacketCount) populateXml(xObj *Argument) error {

	return nil
}

func (obj *responseGetCapturePacketCount) populateFromXml(xObj *ObjectResponse) error {

	if len(xObj.RetVal) != 1 {
		return fmt.Errorf("insufficient value in ResponseGetCapturePacketCount")
	}

	return nil
}

// description is TBD
// PacketCountList returns a CapturePacketCountList
func (obj *responseGetCapturePacketCount) PacketCountList() CapturePacketCountList {
	if obj.obj.PacketCountList == nil {
		obj.obj.PacketCountList = NewCapturePacketCountList().Msg()
	}
	if obj.packetCountListHolder == nil {
		obj.packetCountListHolder = &capturePacketCountList{obj: obj.obj.PacketCountList}
	}
	return obj.packetCountListHolder
}

// description is TBD
// PacketCountList returns a CapturePacketCountList
func (obj *responseGetCapturePacketCount) HasPacketCountList() bool {
	return obj.obj.PacketCountList != nil
}

// description is TBD
// SetPacketCountList sets the CapturePacketCountList value in the ResponseGetCapturePacketCount object
func (obj *responseGetCapturePacketCount) SetPacketCountList(value CapturePacketCountList) ResponseGetCapturePacketCount {

	obj.packetCountListHolder = nil
	obj.obj.PacketCountList = value.Msg()

	return obj
}

func (obj *responseGetCapturePacketCount) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PacketCountList != nil {

		obj.PacketCountList().validateObj(vObj, set_default)
	}

}

func (obj *responseGetCapturePacketCount) setDefault() {

}

// ***** ResponseGetCaptureStatus *****
type responseGetCaptureStatus struct {
	validation
	obj              *otg.ResponseGetCaptureStatus
	statusListHolder CaptureStatusList
}

func NewResponseGetCaptureStatus() ResponseGetCaptureStatus {
	obj := responseGetCaptureStatus{obj: &otg.ResponseGetCaptureStatus{}}
	obj.setDefault()
	return &obj
}

func (obj *responseGetCaptureStatus) Msg() *otg.ResponseGetCaptureStatus {
	return obj.obj
}

func (obj *responseGetCaptureStatus) SetMsg(msg *otg.ResponseGetCaptureStatus) ResponseGetCaptureStatus {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *responseGetCaptureStatus) ToProto() (*otg.ResponseGetCaptureStatus, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *responseGetCaptureStatus) FromProto(msg *otg.ResponseGetCaptureStatus) (ResponseGetCaptureStatus, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *responseGetCaptureStatus) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *responseGetCaptureStatus) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *responseGetCaptureStatus) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseGetCaptureStatus) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *responseGetCaptureStatus) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseGetCaptureStatus) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *responseGetCaptureStatus) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *responseGetCaptureStatus) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *responseGetCaptureStatus) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *responseGetCaptureStatus) Clone() (ResponseGetCaptureStatus, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewResponseGetCaptureStatus()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *responseGetCaptureStatus) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *responseGetCaptureStatus) FromRpfXml(rBytes []byte) error {
	res := ObjectResponse{}
	if err := xml.Unmarshal(rBytes, &res); err != nil {
		return err
	}
	if err := obj.populateFromXml(&res); err != nil {
		return err
	}
	return nil
}

func (obj *responseGetCaptureStatus) setNil() {
	obj.statusListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ResponseGetCaptureStatus is description is TBD
type ResponseGetCaptureStatus interface {
	Validation
	// Msg marshals ResponseGetCaptureStatus to protobuf object *otg.ResponseGetCaptureStatus
	// and doesn't set defaults
	Msg() *otg.ResponseGetCaptureStatus
	// SetMsg unmarshals ResponseGetCaptureStatus from protobuf object *otg.ResponseGetCaptureStatus
	// and doesn't set defaults
	SetMsg(*otg.ResponseGetCaptureStatus) ResponseGetCaptureStatus
	// ToProto marshals ResponseGetCaptureStatus to protobuf object *otg.ResponseGetCaptureStatus
	ToProto() (*otg.ResponseGetCaptureStatus, error)
	// ToPbText marshals ResponseGetCaptureStatus to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ResponseGetCaptureStatus to YAML text
	ToYaml() (string, error)
	// ToJson marshals ResponseGetCaptureStatus to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ResponseGetCaptureStatus from protobuf object *otg.ResponseGetCaptureStatus
	FromProto(msg *otg.ResponseGetCaptureStatus) (ResponseGetCaptureStatus, error)
	// FromPbText unmarshals ResponseGetCaptureStatus from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ResponseGetCaptureStatus from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ResponseGetCaptureStatus from JSON text
	FromJson(value string) error
	// Validate validates ResponseGetCaptureStatus
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ResponseGetCaptureStatus, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*ObjectResponse) error
	FromRpfXml([]byte) error
	// StatusList returns CaptureStatusList, set in ResponseGetCaptureStatus.
	// CaptureStatusList is tBD
	StatusList() CaptureStatusList
	// SetStatusList assigns CaptureStatusList provided by user to ResponseGetCaptureStatus.
	// CaptureStatusList is tBD
	SetStatusList(value CaptureStatusList) ResponseGetCaptureStatus
	// HasStatusList checks if StatusList has been set in ResponseGetCaptureStatus
	HasStatusList() bool
	setNil()
}

func (obj *responseGetCaptureStatus) populateXml(xObj *Argument) error {

	return nil
}

func (obj *responseGetCaptureStatus) populateFromXml(xObj *ObjectResponse) error {

	if len(xObj.RetVal) != 1 {
		return fmt.Errorf("insufficient value in ResponseGetCaptureStatus")
	}

	return nil
}

// description is TBD
// StatusList returns a CaptureStatusList
func (obj *responseGetCaptureStatus) StatusList() CaptureStatusList {
	if obj.obj.StatusList == nil {
		obj.obj.StatusList = NewCaptureStatusList().Msg()
	}
	if obj.statusListHolder == nil {
		obj.statusListHolder = &captureStatusList{obj: obj.obj.StatusList}
	}
	return obj.statusListHolder
}

// description is TBD
// StatusList returns a CaptureStatusList
func (obj *responseGetCaptureStatus) HasStatusList() bool {
	return obj.obj.StatusList != nil
}

// description is TBD
// SetStatusList sets the CaptureStatusList value in the ResponseGetCaptureStatus object
func (obj *responseGetCaptureStatus) SetStatusList(value CaptureStatusList) ResponseGetCaptureStatus {

	obj.statusListHolder = nil
	obj.obj.StatusList = value.Msg()

	return obj
}

func (obj *responseGetCaptureStatus) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.StatusList != nil {

		obj.StatusList().validateObj(vObj, set_default)
	}

}

func (obj *responseGetCaptureStatus) setDefault() {

}

// ***** ResponseRetrieveCapture *****
type responseRetrieveCapture struct {
	validation
	obj          *otg.ResponseRetrieveCapture
	recordHolder CaptureRecordType
}

func NewResponseRetrieveCapture() ResponseRetrieveCapture {
	obj := responseRetrieveCapture{obj: &otg.ResponseRetrieveCapture{}}
	obj.setDefault()
	return &obj
}

func (obj *responseRetrieveCapture) Msg() *otg.ResponseRetrieveCapture {
	return obj.obj
}

func (obj *responseRetrieveCapture) SetMsg(msg *otg.ResponseRetrieveCapture) ResponseRetrieveCapture {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *responseRetrieveCapture) ToProto() (*otg.ResponseRetrieveCapture, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *responseRetrieveCapture) FromProto(msg *otg.ResponseRetrieveCapture) (ResponseRetrieveCapture, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *responseRetrieveCapture) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *responseRetrieveCapture) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *responseRetrieveCapture) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseRetrieveCapture) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *responseRetrieveCapture) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseRetrieveCapture) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *responseRetrieveCapture) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *responseRetrieveCapture) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *responseRetrieveCapture) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *responseRetrieveCapture) Clone() (ResponseRetrieveCapture, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewResponseRetrieveCapture()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *responseRetrieveCapture) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *responseRetrieveCapture) FromRpfXml(rBytes []byte) error {
	res := ObjectResponse{}
	if err := xml.Unmarshal(rBytes, &res); err != nil {
		return err
	}
	if err := obj.populateFromXml(&res); err != nil {
		return err
	}
	return nil
}

func (obj *responseRetrieveCapture) setNil() {
	obj.recordHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ResponseRetrieveCapture is description is TBD
type ResponseRetrieveCapture interface {
	Validation
	// Msg marshals ResponseRetrieveCapture to protobuf object *otg.ResponseRetrieveCapture
	// and doesn't set defaults
	Msg() *otg.ResponseRetrieveCapture
	// SetMsg unmarshals ResponseRetrieveCapture from protobuf object *otg.ResponseRetrieveCapture
	// and doesn't set defaults
	SetMsg(*otg.ResponseRetrieveCapture) ResponseRetrieveCapture
	// ToProto marshals ResponseRetrieveCapture to protobuf object *otg.ResponseRetrieveCapture
	ToProto() (*otg.ResponseRetrieveCapture, error)
	// ToPbText marshals ResponseRetrieveCapture to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ResponseRetrieveCapture to YAML text
	ToYaml() (string, error)
	// ToJson marshals ResponseRetrieveCapture to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ResponseRetrieveCapture from protobuf object *otg.ResponseRetrieveCapture
	FromProto(msg *otg.ResponseRetrieveCapture) (ResponseRetrieveCapture, error)
	// FromPbText unmarshals ResponseRetrieveCapture from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ResponseRetrieveCapture from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ResponseRetrieveCapture from JSON text
	FromJson(value string) error
	// Validate validates ResponseRetrieveCapture
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ResponseRetrieveCapture, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*ObjectResponse) error
	FromRpfXml([]byte) error
	// Record returns CaptureRecordType, set in ResponseRetrieveCapture.
	// CaptureRecordType is tBD
	Record() CaptureRecordType
	// SetRecord assigns CaptureRecordType provided by user to ResponseRetrieveCapture.
	// CaptureRecordType is tBD
	SetRecord(value CaptureRecordType) ResponseRetrieveCapture
	// HasRecord checks if Record has been set in ResponseRetrieveCapture
	HasRecord() bool
	setNil()
}

func (obj *responseRetrieveCapture) populateXml(xObj *Argument) error {

	return nil
}

func (obj *responseRetrieveCapture) populateFromXml(xObj *ObjectResponse) error {

	if len(xObj.RetVal) != 1 {
		return fmt.Errorf("insufficient value in ResponseRetrieveCapture")
	}

	return nil
}

// description is TBD
// Record returns a CaptureRecordType
func (obj *responseRetrieveCapture) Record() CaptureRecordType {
	if obj.obj.Record == nil {
		obj.obj.Record = NewCaptureRecordType().Msg()
	}
	if obj.recordHolder == nil {
		obj.recordHolder = &captureRecordType{obj: obj.obj.Record}
	}
	return obj.recordHolder
}

// description is TBD
// Record returns a CaptureRecordType
func (obj *responseRetrieveCapture) HasRecord() bool {
	return obj.obj.Record != nil
}

// description is TBD
// SetRecord sets the CaptureRecordType value in the ResponseRetrieveCapture object
func (obj *responseRetrieveCapture) SetRecord(value CaptureRecordType) ResponseRetrieveCapture {

	obj.recordHolder = nil
	obj.obj.Record = value.Msg()

	return obj
}

func (obj *responseRetrieveCapture) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Record != nil {

		obj.Record().validateObj(vObj, set_default)
	}

}

func (obj *responseRetrieveCapture) setDefault() {

}

// ***** ResponseGetCurrentServerTime *****
type responseGetCurrentServerTime struct {
	validation
	obj        *otg.ResponseGetCurrentServerTime
	timeHolder PFTypeUTCTime
}

func NewResponseGetCurrentServerTime() ResponseGetCurrentServerTime {
	obj := responseGetCurrentServerTime{obj: &otg.ResponseGetCurrentServerTime{}}
	obj.setDefault()
	return &obj
}

func (obj *responseGetCurrentServerTime) Msg() *otg.ResponseGetCurrentServerTime {
	return obj.obj
}

func (obj *responseGetCurrentServerTime) SetMsg(msg *otg.ResponseGetCurrentServerTime) ResponseGetCurrentServerTime {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *responseGetCurrentServerTime) ToProto() (*otg.ResponseGetCurrentServerTime, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *responseGetCurrentServerTime) FromProto(msg *otg.ResponseGetCurrentServerTime) (ResponseGetCurrentServerTime, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *responseGetCurrentServerTime) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *responseGetCurrentServerTime) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *responseGetCurrentServerTime) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseGetCurrentServerTime) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *responseGetCurrentServerTime) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseGetCurrentServerTime) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *responseGetCurrentServerTime) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *responseGetCurrentServerTime) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *responseGetCurrentServerTime) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *responseGetCurrentServerTime) Clone() (ResponseGetCurrentServerTime, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewResponseGetCurrentServerTime()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *responseGetCurrentServerTime) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *responseGetCurrentServerTime) FromRpfXml(rBytes []byte) error {
	res := ObjectResponse{}
	if err := xml.Unmarshal(rBytes, &res); err != nil {
		return err
	}
	if err := obj.populateFromXml(&res); err != nil {
		return err
	}
	return nil
}

func (obj *responseGetCurrentServerTime) setNil() {
	obj.timeHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ResponseGetCurrentServerTime is description is TBD
type ResponseGetCurrentServerTime interface {
	Validation
	// Msg marshals ResponseGetCurrentServerTime to protobuf object *otg.ResponseGetCurrentServerTime
	// and doesn't set defaults
	Msg() *otg.ResponseGetCurrentServerTime
	// SetMsg unmarshals ResponseGetCurrentServerTime from protobuf object *otg.ResponseGetCurrentServerTime
	// and doesn't set defaults
	SetMsg(*otg.ResponseGetCurrentServerTime) ResponseGetCurrentServerTime
	// ToProto marshals ResponseGetCurrentServerTime to protobuf object *otg.ResponseGetCurrentServerTime
	ToProto() (*otg.ResponseGetCurrentServerTime, error)
	// ToPbText marshals ResponseGetCurrentServerTime to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ResponseGetCurrentServerTime to YAML text
	ToYaml() (string, error)
	// ToJson marshals ResponseGetCurrentServerTime to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ResponseGetCurrentServerTime from protobuf object *otg.ResponseGetCurrentServerTime
	FromProto(msg *otg.ResponseGetCurrentServerTime) (ResponseGetCurrentServerTime, error)
	// FromPbText unmarshals ResponseGetCurrentServerTime from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ResponseGetCurrentServerTime from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ResponseGetCurrentServerTime from JSON text
	FromJson(value string) error
	// Validate validates ResponseGetCurrentServerTime
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ResponseGetCurrentServerTime, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*ObjectResponse) error
	FromRpfXml([]byte) error
	// Time returns PFTypeUTCTime, set in ResponseGetCurrentServerTime.
	// PFTypeUTCTime is model time using Posix Time (http://en.wikipedia.org/wiki/Unix_time) as the apparent number of seconds since 1970-01-01 00:00:00 +0000 (UTC). Note that this is unable to describe time during a leap second event. A value of zero, or a negative value, indicates an illegal time.
	Time() PFTypeUTCTime
	// SetTime assigns PFTypeUTCTime provided by user to ResponseGetCurrentServerTime.
	// PFTypeUTCTime is model time using Posix Time (http://en.wikipedia.org/wiki/Unix_time) as the apparent number of seconds since 1970-01-01 00:00:00 +0000 (UTC). Note that this is unable to describe time during a leap second event. A value of zero, or a negative value, indicates an illegal time.
	SetTime(value PFTypeUTCTime) ResponseGetCurrentServerTime
	// HasTime checks if Time has been set in ResponseGetCurrentServerTime
	HasTime() bool
	setNil()
}

func (obj *responseGetCurrentServerTime) populateXml(xObj *Argument) error {

	return nil
}

func (obj *responseGetCurrentServerTime) populateFromXml(xObj *ObjectResponse) error {

	if len(xObj.RetVal) != 1 {
		return fmt.Errorf("insufficient value in ResponseGetCurrentServerTime")
	}

	return nil
}

// description is TBD
// Time returns a PFTypeUTCTime
func (obj *responseGetCurrentServerTime) Time() PFTypeUTCTime {
	if obj.obj.Time == nil {
		obj.obj.Time = NewPFTypeUTCTime().Msg()
	}
	if obj.timeHolder == nil {
		obj.timeHolder = &pFTypeUTCTime{obj: obj.obj.Time}
	}
	return obj.timeHolder
}

// description is TBD
// Time returns a PFTypeUTCTime
func (obj *responseGetCurrentServerTime) HasTime() bool {
	return obj.obj.Time != nil
}

// description is TBD
// SetTime sets the PFTypeUTCTime value in the ResponseGetCurrentServerTime object
func (obj *responseGetCurrentServerTime) SetTime(value PFTypeUTCTime) ResponseGetCurrentServerTime {

	obj.timeHolder = nil
	obj.obj.Time = value.Msg()

	return obj
}

func (obj *responseGetCurrentServerTime) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Time != nil {

		obj.Time().validateObj(vObj, set_default)
	}

}

func (obj *responseGetCurrentServerTime) setDefault() {

}

// ***** ResponseGetNTPState *****
type responseGetNTPState struct {
	validation
	obj         *otg.ResponseGetNTPState
	stateHolder ServereNTPState
}

func NewResponseGetNTPState() ResponseGetNTPState {
	obj := responseGetNTPState{obj: &otg.ResponseGetNTPState{}}
	obj.setDefault()
	return &obj
}

func (obj *responseGetNTPState) Msg() *otg.ResponseGetNTPState {
	return obj.obj
}

func (obj *responseGetNTPState) SetMsg(msg *otg.ResponseGetNTPState) ResponseGetNTPState {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *responseGetNTPState) ToProto() (*otg.ResponseGetNTPState, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *responseGetNTPState) FromProto(msg *otg.ResponseGetNTPState) (ResponseGetNTPState, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *responseGetNTPState) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *responseGetNTPState) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *responseGetNTPState) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseGetNTPState) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *responseGetNTPState) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseGetNTPState) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *responseGetNTPState) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *responseGetNTPState) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *responseGetNTPState) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *responseGetNTPState) Clone() (ResponseGetNTPState, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewResponseGetNTPState()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *responseGetNTPState) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *responseGetNTPState) FromRpfXml(rBytes []byte) error {
	res := ObjectResponse{}
	if err := xml.Unmarshal(rBytes, &res); err != nil {
		return err
	}
	if err := obj.populateFromXml(&res); err != nil {
		return err
	}
	return nil
}

func (obj *responseGetNTPState) setNil() {
	obj.stateHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ResponseGetNTPState is description is TBD
type ResponseGetNTPState interface {
	Validation
	// Msg marshals ResponseGetNTPState to protobuf object *otg.ResponseGetNTPState
	// and doesn't set defaults
	Msg() *otg.ResponseGetNTPState
	// SetMsg unmarshals ResponseGetNTPState from protobuf object *otg.ResponseGetNTPState
	// and doesn't set defaults
	SetMsg(*otg.ResponseGetNTPState) ResponseGetNTPState
	// ToProto marshals ResponseGetNTPState to protobuf object *otg.ResponseGetNTPState
	ToProto() (*otg.ResponseGetNTPState, error)
	// ToPbText marshals ResponseGetNTPState to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ResponseGetNTPState to YAML text
	ToYaml() (string, error)
	// ToJson marshals ResponseGetNTPState to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ResponseGetNTPState from protobuf object *otg.ResponseGetNTPState
	FromProto(msg *otg.ResponseGetNTPState) (ResponseGetNTPState, error)
	// FromPbText unmarshals ResponseGetNTPState from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ResponseGetNTPState from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ResponseGetNTPState from JSON text
	FromJson(value string) error
	// Validate validates ResponseGetNTPState
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ResponseGetNTPState, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*ObjectResponse) error
	FromRpfXml([]byte) error
	// State returns ServereNTPState, set in ResponseGetNTPState.
	// ServereNTPState is description is TBD
	State() ServereNTPState
	// SetState assigns ServereNTPState provided by user to ResponseGetNTPState.
	// ServereNTPState is description is TBD
	SetState(value ServereNTPState) ResponseGetNTPState
	// HasState checks if State has been set in ResponseGetNTPState
	HasState() bool
	setNil()
}

func (obj *responseGetNTPState) populateXml(xObj *Argument) error {

	return nil
}

func (obj *responseGetNTPState) populateFromXml(xObj *ObjectResponse) error {

	if len(xObj.RetVal) != 1 {
		return fmt.Errorf("insufficient value in ResponseGetNTPState")
	}

	return nil
}

// description is TBD
// State returns a ServereNTPState
func (obj *responseGetNTPState) State() ServereNTPState {
	if obj.obj.State == nil {
		obj.obj.State = NewServereNTPState().Msg()
	}
	if obj.stateHolder == nil {
		obj.stateHolder = &servereNTPState{obj: obj.obj.State}
	}
	return obj.stateHolder
}

// description is TBD
// State returns a ServereNTPState
func (obj *responseGetNTPState) HasState() bool {
	return obj.obj.State != nil
}

// description is TBD
// SetState sets the ServereNTPState value in the ResponseGetNTPState object
func (obj *responseGetNTPState) SetState(value ServereNTPState) ResponseGetNTPState {

	obj.stateHolder = nil
	obj.obj.State = value.Msg()

	return obj
}

func (obj *responseGetNTPState) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.State != nil {

		obj.State().validateObj(vObj, set_default)
	}

}

func (obj *responseGetNTPState) setDefault() {

}

// ***** ResponseGetTimedActionTimestamp *****
type responseGetTimedActionTimestamp struct {
	validation
	obj *otg.ResponseGetTimedActionTimestamp
}

func NewResponseGetTimedActionTimestamp() ResponseGetTimedActionTimestamp {
	obj := responseGetTimedActionTimestamp{obj: &otg.ResponseGetTimedActionTimestamp{}}
	obj.setDefault()
	return &obj
}

func (obj *responseGetTimedActionTimestamp) Msg() *otg.ResponseGetTimedActionTimestamp {
	return obj.obj
}

func (obj *responseGetTimedActionTimestamp) SetMsg(msg *otg.ResponseGetTimedActionTimestamp) ResponseGetTimedActionTimestamp {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *responseGetTimedActionTimestamp) ToProto() (*otg.ResponseGetTimedActionTimestamp, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *responseGetTimedActionTimestamp) FromProto(msg *otg.ResponseGetTimedActionTimestamp) (ResponseGetTimedActionTimestamp, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *responseGetTimedActionTimestamp) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *responseGetTimedActionTimestamp) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *responseGetTimedActionTimestamp) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseGetTimedActionTimestamp) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *responseGetTimedActionTimestamp) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseGetTimedActionTimestamp) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *responseGetTimedActionTimestamp) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *responseGetTimedActionTimestamp) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *responseGetTimedActionTimestamp) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *responseGetTimedActionTimestamp) Clone() (ResponseGetTimedActionTimestamp, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewResponseGetTimedActionTimestamp()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *responseGetTimedActionTimestamp) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *responseGetTimedActionTimestamp) FromRpfXml(rBytes []byte) error {
	res := ObjectResponse{}
	if err := xml.Unmarshal(rBytes, &res); err != nil {
		return err
	}
	if err := obj.populateFromXml(&res); err != nil {
		return err
	}
	return nil
}

// ResponseGetTimedActionTimestamp is description is TBD
type ResponseGetTimedActionTimestamp interface {
	Validation
	// Msg marshals ResponseGetTimedActionTimestamp to protobuf object *otg.ResponseGetTimedActionTimestamp
	// and doesn't set defaults
	Msg() *otg.ResponseGetTimedActionTimestamp
	// SetMsg unmarshals ResponseGetTimedActionTimestamp from protobuf object *otg.ResponseGetTimedActionTimestamp
	// and doesn't set defaults
	SetMsg(*otg.ResponseGetTimedActionTimestamp) ResponseGetTimedActionTimestamp
	// ToProto marshals ResponseGetTimedActionTimestamp to protobuf object *otg.ResponseGetTimedActionTimestamp
	ToProto() (*otg.ResponseGetTimedActionTimestamp, error)
	// ToPbText marshals ResponseGetTimedActionTimestamp to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ResponseGetTimedActionTimestamp to YAML text
	ToYaml() (string, error)
	// ToJson marshals ResponseGetTimedActionTimestamp to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ResponseGetTimedActionTimestamp from protobuf object *otg.ResponseGetTimedActionTimestamp
	FromProto(msg *otg.ResponseGetTimedActionTimestamp) (ResponseGetTimedActionTimestamp, error)
	// FromPbText unmarshals ResponseGetTimedActionTimestamp from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ResponseGetTimedActionTimestamp from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ResponseGetTimedActionTimestamp from JSON text
	FromJson(value string) error
	// Validate validates ResponseGetTimedActionTimestamp
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ResponseGetTimedActionTimestamp, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*ObjectResponse) error
	FromRpfXml([]byte) error
	// Value returns int64, set in ResponseGetTimedActionTimestamp.
	Value() int64
	// SetValue assigns int64 provided by user to ResponseGetTimedActionTimestamp
	SetValue(value int64) ResponseGetTimedActionTimestamp
	// HasValue checks if Value has been set in ResponseGetTimedActionTimestamp
	HasValue() bool
}

func (obj *responseGetTimedActionTimestamp) populateXml(xObj *Argument) error {

	if obj.HasValue() {

		member := Member{
			Name:  "value",
			Type:  "int64",
			Value: strconv.FormatInt(obj.Value(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *responseGetTimedActionTimestamp) populateFromXml(xObj *ObjectResponse) error {

	if len(xObj.RetVal) != 1 {
		return fmt.Errorf("insufficient value in ResponseGetTimedActionTimestamp")
	}

	if xObj.RetVal[0].Value != "" {
		retVal := xObj.RetVal[0].Value

		v, err := strconv.ParseInt(retVal, 10, 64)
		if err != nil {
			return fmt.Errorf("could not parse string to int64: %v", err)
		}
		obj.SetValue(v)

	}

	return nil
}

// description is TBD
// Value returns a int64
func (obj *responseGetTimedActionTimestamp) Value() int64 {

	return *obj.obj.Value

}

// description is TBD
// Value returns a int64
func (obj *responseGetTimedActionTimestamp) HasValue() bool {
	return obj.obj.Value != nil
}

// description is TBD
// SetValue sets the int64 value in the ResponseGetTimedActionTimestamp object
func (obj *responseGetTimedActionTimestamp) SetValue(value int64) ResponseGetTimedActionTimestamp {

	obj.obj.Value = &value
	return obj
}

func (obj *responseGetTimedActionTimestamp) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *responseGetTimedActionTimestamp) setDefault() {

}

// ***** ResponseScheduleTimedActions *****
type responseScheduleTimedActions struct {
	validation
	obj *otg.ResponseScheduleTimedActions
}

func NewResponseScheduleTimedActions() ResponseScheduleTimedActions {
	obj := responseScheduleTimedActions{obj: &otg.ResponseScheduleTimedActions{}}
	obj.setDefault()
	return &obj
}

func (obj *responseScheduleTimedActions) Msg() *otg.ResponseScheduleTimedActions {
	return obj.obj
}

func (obj *responseScheduleTimedActions) SetMsg(msg *otg.ResponseScheduleTimedActions) ResponseScheduleTimedActions {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *responseScheduleTimedActions) ToProto() (*otg.ResponseScheduleTimedActions, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *responseScheduleTimedActions) FromProto(msg *otg.ResponseScheduleTimedActions) (ResponseScheduleTimedActions, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *responseScheduleTimedActions) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *responseScheduleTimedActions) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *responseScheduleTimedActions) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseScheduleTimedActions) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *responseScheduleTimedActions) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseScheduleTimedActions) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *responseScheduleTimedActions) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *responseScheduleTimedActions) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *responseScheduleTimedActions) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *responseScheduleTimedActions) Clone() (ResponseScheduleTimedActions, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewResponseScheduleTimedActions()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *responseScheduleTimedActions) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *responseScheduleTimedActions) FromRpfXml(rBytes []byte) error {
	res := ObjectResponse{}
	if err := xml.Unmarshal(rBytes, &res); err != nil {
		return err
	}
	if err := obj.populateFromXml(&res); err != nil {
		return err
	}
	return nil
}

// ResponseScheduleTimedActions is description is TBD
type ResponseScheduleTimedActions interface {
	Validation
	// Msg marshals ResponseScheduleTimedActions to protobuf object *otg.ResponseScheduleTimedActions
	// and doesn't set defaults
	Msg() *otg.ResponseScheduleTimedActions
	// SetMsg unmarshals ResponseScheduleTimedActions from protobuf object *otg.ResponseScheduleTimedActions
	// and doesn't set defaults
	SetMsg(*otg.ResponseScheduleTimedActions) ResponseScheduleTimedActions
	// ToProto marshals ResponseScheduleTimedActions to protobuf object *otg.ResponseScheduleTimedActions
	ToProto() (*otg.ResponseScheduleTimedActions, error)
	// ToPbText marshals ResponseScheduleTimedActions to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ResponseScheduleTimedActions to YAML text
	ToYaml() (string, error)
	// ToJson marshals ResponseScheduleTimedActions to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ResponseScheduleTimedActions from protobuf object *otg.ResponseScheduleTimedActions
	FromProto(msg *otg.ResponseScheduleTimedActions) (ResponseScheduleTimedActions, error)
	// FromPbText unmarshals ResponseScheduleTimedActions from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ResponseScheduleTimedActions from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ResponseScheduleTimedActions from JSON text
	FromJson(value string) error
	// Validate validates ResponseScheduleTimedActions
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ResponseScheduleTimedActions, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*ObjectResponse) error
	FromRpfXml([]byte) error
	// Error returns bool, set in ResponseScheduleTimedActions.
	Error() bool
	// SetError assigns bool provided by user to ResponseScheduleTimedActions
	SetError(value bool) ResponseScheduleTimedActions
	// HasError checks if Error has been set in ResponseScheduleTimedActions
	HasError() bool
	// ErrorMessage returns string, set in ResponseScheduleTimedActions.
	ErrorMessage() string
	// SetErrorMessage assigns string provided by user to ResponseScheduleTimedActions
	SetErrorMessage(value string) ResponseScheduleTimedActions
	// HasErrorMessage checks if ErrorMessage has been set in ResponseScheduleTimedActions
	HasErrorMessage() bool
}

func (obj *responseScheduleTimedActions) populateXml(xObj *Argument) error {

	if obj.HasError() {
		var value string
		if obj.Error() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "error",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasErrorMessage() {

		member := Member{
			Name:  "errormessage",
			Type:  "string",
			Value: obj.ErrorMessage(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *responseScheduleTimedActions) populateFromXml(xObj *ObjectResponse) error {

	if len(xObj.RetVal) != 2 {
		return fmt.Errorf("insufficient value in ResponseScheduleTimedActions")
	}

	if xObj.RetVal[0].Value != "" {
		retVal := xObj.RetVal[0].Value
		var value bool
		if retVal == "1" {
			{
				value = true
			}
		} else {
			{
				value = false
			}
		}

		obj.SetError(value)

	}

	if xObj.RetVal[1].Value != "" {
		retVal := xObj.RetVal[1].Value

		obj.SetErrorMessage(retVal)

	}

	return nil
}

// description is TBD
// Error returns a bool
func (obj *responseScheduleTimedActions) Error() bool {

	return *obj.obj.Error

}

// description is TBD
// Error returns a bool
func (obj *responseScheduleTimedActions) HasError() bool {
	return obj.obj.Error != nil
}

// description is TBD
// SetError sets the bool value in the ResponseScheduleTimedActions object
func (obj *responseScheduleTimedActions) SetError(value bool) ResponseScheduleTimedActions {

	obj.obj.Error = &value
	return obj
}

// description is TBD
// ErrorMessage returns a string
func (obj *responseScheduleTimedActions) ErrorMessage() string {

	return *obj.obj.ErrorMessage

}

// description is TBD
// ErrorMessage returns a string
func (obj *responseScheduleTimedActions) HasErrorMessage() bool {
	return obj.obj.ErrorMessage != nil
}

// description is TBD
// SetErrorMessage sets the string value in the ResponseScheduleTimedActions object
func (obj *responseScheduleTimedActions) SetErrorMessage(value string) ResponseScheduleTimedActions {

	obj.obj.ErrorMessage = &value
	return obj
}

func (obj *responseScheduleTimedActions) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *responseScheduleTimedActions) setDefault() {

}

// ***** ResponseConfigureUpdateStreams *****
type responseConfigureUpdateStreams struct {
	validation
	obj *otg.ResponseConfigureUpdateStreams
}

func NewResponseConfigureUpdateStreams() ResponseConfigureUpdateStreams {
	obj := responseConfigureUpdateStreams{obj: &otg.ResponseConfigureUpdateStreams{}}
	obj.setDefault()
	return &obj
}

func (obj *responseConfigureUpdateStreams) Msg() *otg.ResponseConfigureUpdateStreams {
	return obj.obj
}

func (obj *responseConfigureUpdateStreams) SetMsg(msg *otg.ResponseConfigureUpdateStreams) ResponseConfigureUpdateStreams {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *responseConfigureUpdateStreams) ToProto() (*otg.ResponseConfigureUpdateStreams, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *responseConfigureUpdateStreams) FromProto(msg *otg.ResponseConfigureUpdateStreams) (ResponseConfigureUpdateStreams, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *responseConfigureUpdateStreams) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *responseConfigureUpdateStreams) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *responseConfigureUpdateStreams) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseConfigureUpdateStreams) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *responseConfigureUpdateStreams) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseConfigureUpdateStreams) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *responseConfigureUpdateStreams) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *responseConfigureUpdateStreams) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *responseConfigureUpdateStreams) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *responseConfigureUpdateStreams) Clone() (ResponseConfigureUpdateStreams, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewResponseConfigureUpdateStreams()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *responseConfigureUpdateStreams) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *responseConfigureUpdateStreams) FromRpfXml(rBytes []byte) error {
	res := ObjectResponse{}
	if err := xml.Unmarshal(rBytes, &res); err != nil {
		return err
	}
	if err := obj.populateFromXml(&res); err != nil {
		return err
	}
	return nil
}

// ResponseConfigureUpdateStreams is description is TBD
type ResponseConfigureUpdateStreams interface {
	Validation
	// Msg marshals ResponseConfigureUpdateStreams to protobuf object *otg.ResponseConfigureUpdateStreams
	// and doesn't set defaults
	Msg() *otg.ResponseConfigureUpdateStreams
	// SetMsg unmarshals ResponseConfigureUpdateStreams from protobuf object *otg.ResponseConfigureUpdateStreams
	// and doesn't set defaults
	SetMsg(*otg.ResponseConfigureUpdateStreams) ResponseConfigureUpdateStreams
	// ToProto marshals ResponseConfigureUpdateStreams to protobuf object *otg.ResponseConfigureUpdateStreams
	ToProto() (*otg.ResponseConfigureUpdateStreams, error)
	// ToPbText marshals ResponseConfigureUpdateStreams to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ResponseConfigureUpdateStreams to YAML text
	ToYaml() (string, error)
	// ToJson marshals ResponseConfigureUpdateStreams to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ResponseConfigureUpdateStreams from protobuf object *otg.ResponseConfigureUpdateStreams
	FromProto(msg *otg.ResponseConfigureUpdateStreams) (ResponseConfigureUpdateStreams, error)
	// FromPbText unmarshals ResponseConfigureUpdateStreams from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ResponseConfigureUpdateStreams from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ResponseConfigureUpdateStreams from JSON text
	FromJson(value string) error
	// Validate validates ResponseConfigureUpdateStreams
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ResponseConfigureUpdateStreams, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*ObjectResponse) error
	FromRpfXml([]byte) error
	// Timestamp returns int64, set in ResponseConfigureUpdateStreams.
	Timestamp() int64
	// SetTimestamp assigns int64 provided by user to ResponseConfigureUpdateStreams
	SetTimestamp(value int64) ResponseConfigureUpdateStreams
	// HasTimestamp checks if Timestamp has been set in ResponseConfigureUpdateStreams
	HasTimestamp() bool
}

func (obj *responseConfigureUpdateStreams) populateXml(xObj *Argument) error {

	if obj.HasTimestamp() {

		member := Member{
			Name:  "timestamp",
			Type:  "int64",
			Value: strconv.FormatInt(obj.Timestamp(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *responseConfigureUpdateStreams) populateFromXml(xObj *ObjectResponse) error {

	if len(xObj.RetVal) != 1 {
		return fmt.Errorf("insufficient value in ResponseConfigureUpdateStreams")
	}

	if xObj.RetVal[0].Value != "" {
		retVal := xObj.RetVal[0].Value

		v, err := strconv.ParseInt(retVal, 10, 64)
		if err != nil {
			return fmt.Errorf("could not parse string to int64: %v", err)
		}
		obj.SetTimestamp(v)

	}

	return nil
}

// description is TBD
// Timestamp returns a int64
func (obj *responseConfigureUpdateStreams) Timestamp() int64 {

	return *obj.obj.Timestamp

}

// description is TBD
// Timestamp returns a int64
func (obj *responseConfigureUpdateStreams) HasTimestamp() bool {
	return obj.obj.Timestamp != nil
}

// description is TBD
// SetTimestamp sets the int64 value in the ResponseConfigureUpdateStreams object
func (obj *responseConfigureUpdateStreams) SetTimestamp(value int64) ResponseConfigureUpdateStreams {

	obj.obj.Timestamp = &value
	return obj
}

func (obj *responseConfigureUpdateStreams) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *responseConfigureUpdateStreams) setDefault() {

}

// ***** ResponseRefreshValueList *****
type responseRefreshValueList struct {
	validation
	obj                    *otg.ResponseRefreshValueList
	valueListUdfDataHolder StreamStreamValueListSettingList
}

func NewResponseRefreshValueList() ResponseRefreshValueList {
	obj := responseRefreshValueList{obj: &otg.ResponseRefreshValueList{}}
	obj.setDefault()
	return &obj
}

func (obj *responseRefreshValueList) Msg() *otg.ResponseRefreshValueList {
	return obj.obj
}

func (obj *responseRefreshValueList) SetMsg(msg *otg.ResponseRefreshValueList) ResponseRefreshValueList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *responseRefreshValueList) ToProto() (*otg.ResponseRefreshValueList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *responseRefreshValueList) FromProto(msg *otg.ResponseRefreshValueList) (ResponseRefreshValueList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *responseRefreshValueList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *responseRefreshValueList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *responseRefreshValueList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseRefreshValueList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *responseRefreshValueList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseRefreshValueList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *responseRefreshValueList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *responseRefreshValueList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *responseRefreshValueList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *responseRefreshValueList) Clone() (ResponseRefreshValueList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewResponseRefreshValueList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *responseRefreshValueList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *responseRefreshValueList) FromRpfXml(rBytes []byte) error {
	res := ObjectResponse{}
	if err := xml.Unmarshal(rBytes, &res); err != nil {
		return err
	}
	if err := obj.populateFromXml(&res); err != nil {
		return err
	}
	return nil
}

func (obj *responseRefreshValueList) setNil() {
	obj.valueListUdfDataHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ResponseRefreshValueList is description is TBD
type ResponseRefreshValueList interface {
	Validation
	// Msg marshals ResponseRefreshValueList to protobuf object *otg.ResponseRefreshValueList
	// and doesn't set defaults
	Msg() *otg.ResponseRefreshValueList
	// SetMsg unmarshals ResponseRefreshValueList from protobuf object *otg.ResponseRefreshValueList
	// and doesn't set defaults
	SetMsg(*otg.ResponseRefreshValueList) ResponseRefreshValueList
	// ToProto marshals ResponseRefreshValueList to protobuf object *otg.ResponseRefreshValueList
	ToProto() (*otg.ResponseRefreshValueList, error)
	// ToPbText marshals ResponseRefreshValueList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ResponseRefreshValueList to YAML text
	ToYaml() (string, error)
	// ToJson marshals ResponseRefreshValueList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ResponseRefreshValueList from protobuf object *otg.ResponseRefreshValueList
	FromProto(msg *otg.ResponseRefreshValueList) (ResponseRefreshValueList, error)
	// FromPbText unmarshals ResponseRefreshValueList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ResponseRefreshValueList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ResponseRefreshValueList from JSON text
	FromJson(value string) error
	// Validate validates ResponseRefreshValueList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ResponseRefreshValueList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*ObjectResponse) error
	FromRpfXml([]byte) error
	// ValueListUdfData returns StreamStreamValueListSettingList, set in ResponseRefreshValueList.
	// StreamStreamValueListSettingList is tBD
	ValueListUdfData() StreamStreamValueListSettingList
	// SetValueListUdfData assigns StreamStreamValueListSettingList provided by user to ResponseRefreshValueList.
	// StreamStreamValueListSettingList is tBD
	SetValueListUdfData(value StreamStreamValueListSettingList) ResponseRefreshValueList
	// HasValueListUdfData checks if ValueListUdfData has been set in ResponseRefreshValueList
	HasValueListUdfData() bool
	setNil()
}

func (obj *responseRefreshValueList) populateXml(xObj *Argument) error {

	return nil
}

func (obj *responseRefreshValueList) populateFromXml(xObj *ObjectResponse) error {

	if len(xObj.RetVal) != 1 {
		return fmt.Errorf("insufficient value in ResponseRefreshValueList")
	}

	return nil
}

// description is TBD
// ValueListUdfData returns a StreamStreamValueListSettingList
func (obj *responseRefreshValueList) ValueListUdfData() StreamStreamValueListSettingList {
	if obj.obj.ValueListUdfData == nil {
		obj.obj.ValueListUdfData = NewStreamStreamValueListSettingList().Msg()
	}
	if obj.valueListUdfDataHolder == nil {
		obj.valueListUdfDataHolder = &streamStreamValueListSettingList{obj: obj.obj.ValueListUdfData}
	}
	return obj.valueListUdfDataHolder
}

// description is TBD
// ValueListUdfData returns a StreamStreamValueListSettingList
func (obj *responseRefreshValueList) HasValueListUdfData() bool {
	return obj.obj.ValueListUdfData != nil
}

// description is TBD
// SetValueListUdfData sets the StreamStreamValueListSettingList value in the ResponseRefreshValueList object
func (obj *responseRefreshValueList) SetValueListUdfData(value StreamStreamValueListSettingList) ResponseRefreshValueList {

	obj.valueListUdfDataHolder = nil
	obj.obj.ValueListUdfData = value.Msg()

	return obj
}

func (obj *responseRefreshValueList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ValueListUdfData != nil {

		obj.ValueListUdfData().validateObj(vObj, set_default)
	}

}

func (obj *responseRefreshValueList) setDefault() {

}

// ***** ResponseGetMacSecSaKeyStatus *****
type responseGetMacSecSaKeyStatus struct {
	validation
	obj                           *otg.ResponseGetMacSecSaKeyStatus
	txMacSecSaKeyStatusListHolder MacSecTxMacSecSaKeyStatusTypeList
	rxMacSecSaKeyStatusListHolder MacSecRxMacSecSaKeyStatusTypeList
}

func NewResponseGetMacSecSaKeyStatus() ResponseGetMacSecSaKeyStatus {
	obj := responseGetMacSecSaKeyStatus{obj: &otg.ResponseGetMacSecSaKeyStatus{}}
	obj.setDefault()
	return &obj
}

func (obj *responseGetMacSecSaKeyStatus) Msg() *otg.ResponseGetMacSecSaKeyStatus {
	return obj.obj
}

func (obj *responseGetMacSecSaKeyStatus) SetMsg(msg *otg.ResponseGetMacSecSaKeyStatus) ResponseGetMacSecSaKeyStatus {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *responseGetMacSecSaKeyStatus) ToProto() (*otg.ResponseGetMacSecSaKeyStatus, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *responseGetMacSecSaKeyStatus) FromProto(msg *otg.ResponseGetMacSecSaKeyStatus) (ResponseGetMacSecSaKeyStatus, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *responseGetMacSecSaKeyStatus) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *responseGetMacSecSaKeyStatus) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *responseGetMacSecSaKeyStatus) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseGetMacSecSaKeyStatus) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *responseGetMacSecSaKeyStatus) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseGetMacSecSaKeyStatus) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *responseGetMacSecSaKeyStatus) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *responseGetMacSecSaKeyStatus) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *responseGetMacSecSaKeyStatus) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *responseGetMacSecSaKeyStatus) Clone() (ResponseGetMacSecSaKeyStatus, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewResponseGetMacSecSaKeyStatus()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *responseGetMacSecSaKeyStatus) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *responseGetMacSecSaKeyStatus) FromRpfXml(rBytes []byte) error {
	res := ObjectResponse{}
	if err := xml.Unmarshal(rBytes, &res); err != nil {
		return err
	}
	if err := obj.populateFromXml(&res); err != nil {
		return err
	}
	return nil
}

func (obj *responseGetMacSecSaKeyStatus) setNil() {
	obj.txMacSecSaKeyStatusListHolder = nil
	obj.rxMacSecSaKeyStatusListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ResponseGetMacSecSaKeyStatus is description is TBD
type ResponseGetMacSecSaKeyStatus interface {
	Validation
	// Msg marshals ResponseGetMacSecSaKeyStatus to protobuf object *otg.ResponseGetMacSecSaKeyStatus
	// and doesn't set defaults
	Msg() *otg.ResponseGetMacSecSaKeyStatus
	// SetMsg unmarshals ResponseGetMacSecSaKeyStatus from protobuf object *otg.ResponseGetMacSecSaKeyStatus
	// and doesn't set defaults
	SetMsg(*otg.ResponseGetMacSecSaKeyStatus) ResponseGetMacSecSaKeyStatus
	// ToProto marshals ResponseGetMacSecSaKeyStatus to protobuf object *otg.ResponseGetMacSecSaKeyStatus
	ToProto() (*otg.ResponseGetMacSecSaKeyStatus, error)
	// ToPbText marshals ResponseGetMacSecSaKeyStatus to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ResponseGetMacSecSaKeyStatus to YAML text
	ToYaml() (string, error)
	// ToJson marshals ResponseGetMacSecSaKeyStatus to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ResponseGetMacSecSaKeyStatus from protobuf object *otg.ResponseGetMacSecSaKeyStatus
	FromProto(msg *otg.ResponseGetMacSecSaKeyStatus) (ResponseGetMacSecSaKeyStatus, error)
	// FromPbText unmarshals ResponseGetMacSecSaKeyStatus from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ResponseGetMacSecSaKeyStatus from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ResponseGetMacSecSaKeyStatus from JSON text
	FromJson(value string) error
	// Validate validates ResponseGetMacSecSaKeyStatus
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ResponseGetMacSecSaKeyStatus, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*ObjectResponse) error
	FromRpfXml([]byte) error
	// TxMacSecSaKeyStatusList returns MacSecTxMacSecSaKeyStatusTypeList, set in ResponseGetMacSecSaKeyStatus.
	// MacSecTxMacSecSaKeyStatusTypeList is tBD
	TxMacSecSaKeyStatusList() MacSecTxMacSecSaKeyStatusTypeList
	// SetTxMacSecSaKeyStatusList assigns MacSecTxMacSecSaKeyStatusTypeList provided by user to ResponseGetMacSecSaKeyStatus.
	// MacSecTxMacSecSaKeyStatusTypeList is tBD
	SetTxMacSecSaKeyStatusList(value MacSecTxMacSecSaKeyStatusTypeList) ResponseGetMacSecSaKeyStatus
	// HasTxMacSecSaKeyStatusList checks if TxMacSecSaKeyStatusList has been set in ResponseGetMacSecSaKeyStatus
	HasTxMacSecSaKeyStatusList() bool
	// RxMacSecSaKeyStatusList returns MacSecRxMacSecSaKeyStatusTypeList, set in ResponseGetMacSecSaKeyStatus.
	// MacSecRxMacSecSaKeyStatusTypeList is tBD
	RxMacSecSaKeyStatusList() MacSecRxMacSecSaKeyStatusTypeList
	// SetRxMacSecSaKeyStatusList assigns MacSecRxMacSecSaKeyStatusTypeList provided by user to ResponseGetMacSecSaKeyStatus.
	// MacSecRxMacSecSaKeyStatusTypeList is tBD
	SetRxMacSecSaKeyStatusList(value MacSecRxMacSecSaKeyStatusTypeList) ResponseGetMacSecSaKeyStatus
	// HasRxMacSecSaKeyStatusList checks if RxMacSecSaKeyStatusList has been set in ResponseGetMacSecSaKeyStatus
	HasRxMacSecSaKeyStatusList() bool
	setNil()
}

func (obj *responseGetMacSecSaKeyStatus) populateXml(xObj *Argument) error {

	return nil
}

func (obj *responseGetMacSecSaKeyStatus) populateFromXml(xObj *ObjectResponse) error {

	if len(xObj.RetVal) != 2 {
		return fmt.Errorf("insufficient value in ResponseGetMacSecSaKeyStatus")
	}

	return nil
}

// description is TBD
// TxMacSecSaKeyStatusList returns a MacSecTxMacSecSaKeyStatusTypeList
func (obj *responseGetMacSecSaKeyStatus) TxMacSecSaKeyStatusList() MacSecTxMacSecSaKeyStatusTypeList {
	if obj.obj.TxMacSecSaKeyStatusList == nil {
		obj.obj.TxMacSecSaKeyStatusList = NewMacSecTxMacSecSaKeyStatusTypeList().Msg()
	}
	if obj.txMacSecSaKeyStatusListHolder == nil {
		obj.txMacSecSaKeyStatusListHolder = &macSecTxMacSecSaKeyStatusTypeList{obj: obj.obj.TxMacSecSaKeyStatusList}
	}
	return obj.txMacSecSaKeyStatusListHolder
}

// description is TBD
// TxMacSecSaKeyStatusList returns a MacSecTxMacSecSaKeyStatusTypeList
func (obj *responseGetMacSecSaKeyStatus) HasTxMacSecSaKeyStatusList() bool {
	return obj.obj.TxMacSecSaKeyStatusList != nil
}

// description is TBD
// SetTxMacSecSaKeyStatusList sets the MacSecTxMacSecSaKeyStatusTypeList value in the ResponseGetMacSecSaKeyStatus object
func (obj *responseGetMacSecSaKeyStatus) SetTxMacSecSaKeyStatusList(value MacSecTxMacSecSaKeyStatusTypeList) ResponseGetMacSecSaKeyStatus {

	obj.txMacSecSaKeyStatusListHolder = nil
	obj.obj.TxMacSecSaKeyStatusList = value.Msg()

	return obj
}

// description is TBD
// RxMacSecSaKeyStatusList returns a MacSecRxMacSecSaKeyStatusTypeList
func (obj *responseGetMacSecSaKeyStatus) RxMacSecSaKeyStatusList() MacSecRxMacSecSaKeyStatusTypeList {
	if obj.obj.RxMacSecSaKeyStatusList == nil {
		obj.obj.RxMacSecSaKeyStatusList = NewMacSecRxMacSecSaKeyStatusTypeList().Msg()
	}
	if obj.rxMacSecSaKeyStatusListHolder == nil {
		obj.rxMacSecSaKeyStatusListHolder = &macSecRxMacSecSaKeyStatusTypeList{obj: obj.obj.RxMacSecSaKeyStatusList}
	}
	return obj.rxMacSecSaKeyStatusListHolder
}

// description is TBD
// RxMacSecSaKeyStatusList returns a MacSecRxMacSecSaKeyStatusTypeList
func (obj *responseGetMacSecSaKeyStatus) HasRxMacSecSaKeyStatusList() bool {
	return obj.obj.RxMacSecSaKeyStatusList != nil
}

// description is TBD
// SetRxMacSecSaKeyStatusList sets the MacSecRxMacSecSaKeyStatusTypeList value in the ResponseGetMacSecSaKeyStatus object
func (obj *responseGetMacSecSaKeyStatus) SetRxMacSecSaKeyStatusList(value MacSecRxMacSecSaKeyStatusTypeList) ResponseGetMacSecSaKeyStatus {

	obj.rxMacSecSaKeyStatusListHolder = nil
	obj.obj.RxMacSecSaKeyStatusList = value.Msg()

	return obj
}

func (obj *responseGetMacSecSaKeyStatus) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.TxMacSecSaKeyStatusList != nil {

		obj.TxMacSecSaKeyStatusList().validateObj(vObj, set_default)
	}

	if obj.obj.RxMacSecSaKeyStatusList != nil {

		obj.RxMacSecSaKeyStatusList().validateObj(vObj, set_default)
	}

}

func (obj *responseGetMacSecSaKeyStatus) setDefault() {

}

// ***** ResponseGetStatCatalog *****
type responseGetStatCatalog struct {
	validation
	obj               *otg.ResponseGetStatCatalog
	catalogItemHolder StatCatalogStHtgCatalogItem
}

func NewResponseGetStatCatalog() ResponseGetStatCatalog {
	obj := responseGetStatCatalog{obj: &otg.ResponseGetStatCatalog{}}
	obj.setDefault()
	return &obj
}

func (obj *responseGetStatCatalog) Msg() *otg.ResponseGetStatCatalog {
	return obj.obj
}

func (obj *responseGetStatCatalog) SetMsg(msg *otg.ResponseGetStatCatalog) ResponseGetStatCatalog {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *responseGetStatCatalog) ToProto() (*otg.ResponseGetStatCatalog, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *responseGetStatCatalog) FromProto(msg *otg.ResponseGetStatCatalog) (ResponseGetStatCatalog, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *responseGetStatCatalog) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *responseGetStatCatalog) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *responseGetStatCatalog) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseGetStatCatalog) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *responseGetStatCatalog) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *responseGetStatCatalog) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *responseGetStatCatalog) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *responseGetStatCatalog) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *responseGetStatCatalog) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *responseGetStatCatalog) Clone() (ResponseGetStatCatalog, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewResponseGetStatCatalog()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *responseGetStatCatalog) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *responseGetStatCatalog) FromRpfXml(rBytes []byte) error {
	res := ObjectResponse{}
	if err := xml.Unmarshal(rBytes, &res); err != nil {
		return err
	}
	if err := obj.populateFromXml(&res); err != nil {
		return err
	}
	return nil
}

func (obj *responseGetStatCatalog) setNil() {
	obj.catalogItemHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ResponseGetStatCatalog is description is TBD
type ResponseGetStatCatalog interface {
	Validation
	// Msg marshals ResponseGetStatCatalog to protobuf object *otg.ResponseGetStatCatalog
	// and doesn't set defaults
	Msg() *otg.ResponseGetStatCatalog
	// SetMsg unmarshals ResponseGetStatCatalog from protobuf object *otg.ResponseGetStatCatalog
	// and doesn't set defaults
	SetMsg(*otg.ResponseGetStatCatalog) ResponseGetStatCatalog
	// ToProto marshals ResponseGetStatCatalog to protobuf object *otg.ResponseGetStatCatalog
	ToProto() (*otg.ResponseGetStatCatalog, error)
	// ToPbText marshals ResponseGetStatCatalog to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ResponseGetStatCatalog to YAML text
	ToYaml() (string, error)
	// ToJson marshals ResponseGetStatCatalog to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ResponseGetStatCatalog from protobuf object *otg.ResponseGetStatCatalog
	FromProto(msg *otg.ResponseGetStatCatalog) (ResponseGetStatCatalog, error)
	// FromPbText unmarshals ResponseGetStatCatalog from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ResponseGetStatCatalog from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ResponseGetStatCatalog from JSON text
	FromJson(value string) error
	// Validate validates ResponseGetStatCatalog
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ResponseGetStatCatalog, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*ObjectResponse) error
	FromRpfXml([]byte) error
	// CatalogItem returns StatCatalogStHtgCatalogItem, set in ResponseGetStatCatalog.
	// StatCatalogStHtgCatalogItem is tBD
	CatalogItem() StatCatalogStHtgCatalogItem
	// SetCatalogItem assigns StatCatalogStHtgCatalogItem provided by user to ResponseGetStatCatalog.
	// StatCatalogStHtgCatalogItem is tBD
	SetCatalogItem(value StatCatalogStHtgCatalogItem) ResponseGetStatCatalog
	// HasCatalogItem checks if CatalogItem has been set in ResponseGetStatCatalog
	HasCatalogItem() bool
	setNil()
}

func (obj *responseGetStatCatalog) populateXml(xObj *Argument) error {

	return nil
}

func (obj *responseGetStatCatalog) populateFromXml(xObj *ObjectResponse) error {

	if len(xObj.RetVal) != 1 {
		return fmt.Errorf("insufficient value in ResponseGetStatCatalog")
	}

	return nil
}

// description is TBD
// CatalogItem returns a StatCatalogStHtgCatalogItem
func (obj *responseGetStatCatalog) CatalogItem() StatCatalogStHtgCatalogItem {
	if obj.obj.CatalogItem == nil {
		obj.obj.CatalogItem = NewStatCatalogStHtgCatalogItem().Msg()
	}
	if obj.catalogItemHolder == nil {
		obj.catalogItemHolder = &statCatalogStHtgCatalogItem{obj: obj.obj.CatalogItem}
	}
	return obj.catalogItemHolder
}

// description is TBD
// CatalogItem returns a StatCatalogStHtgCatalogItem
func (obj *responseGetStatCatalog) HasCatalogItem() bool {
	return obj.obj.CatalogItem != nil
}

// description is TBD
// SetCatalogItem sets the StatCatalogStHtgCatalogItem value in the ResponseGetStatCatalog object
func (obj *responseGetStatCatalog) SetCatalogItem(value StatCatalogStHtgCatalogItem) ResponseGetStatCatalog {

	obj.catalogItemHolder = nil
	obj.obj.CatalogItem = value.Msg()

	return obj
}

func (obj *responseGetStatCatalog) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.CatalogItem != nil {

		obj.CatalogItem().validateObj(vObj, set_default)
	}

}

func (obj *responseGetStatCatalog) setDefault() {

}

// ***** Version *****
type version struct {
	validation
	obj *otg.Version
}

func NewVersion() Version {
	obj := version{obj: &otg.Version{}}
	obj.setDefault()
	return &obj
}

func (obj *version) Msg() *otg.Version {
	return obj.obj
}

func (obj *version) SetMsg(msg *otg.Version) Version {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *version) ToProto() (*otg.Version, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *version) FromProto(msg *otg.Version) (Version, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *version) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *version) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *version) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *version) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *version) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *version) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *version) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *version) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *version) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *version) Clone() (Version, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewVersion()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *version) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// Version is version details
type Version interface {
	Validation
	// Msg marshals Version to protobuf object *otg.Version
	// and doesn't set defaults
	Msg() *otg.Version
	// SetMsg unmarshals Version from protobuf object *otg.Version
	// and doesn't set defaults
	SetMsg(*otg.Version) Version
	// ToProto marshals Version to protobuf object *otg.Version
	ToProto() (*otg.Version, error)
	// ToPbText marshals Version to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals Version to YAML text
	ToYaml() (string, error)
	// ToJson marshals Version to JSON text
	ToJson() (string, error)
	// FromProto unmarshals Version from protobuf object *otg.Version
	FromProto(msg *otg.Version) (Version, error)
	// FromPbText unmarshals Version from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals Version from YAML text
	FromYaml(value string) error
	// FromJson unmarshals Version from JSON text
	FromJson(value string) error
	// Validate validates Version
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (Version, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ApiSpecVersion returns string, set in Version.
	ApiSpecVersion() string
	// SetApiSpecVersion assigns string provided by user to Version
	SetApiSpecVersion(value string) Version
	// HasApiSpecVersion checks if ApiSpecVersion has been set in Version
	HasApiSpecVersion() bool
	// SdkVersion returns string, set in Version.
	SdkVersion() string
	// SetSdkVersion assigns string provided by user to Version
	SetSdkVersion(value string) Version
	// HasSdkVersion checks if SdkVersion has been set in Version
	HasSdkVersion() bool
	// AppVersion returns string, set in Version.
	AppVersion() string
	// SetAppVersion assigns string provided by user to Version
	SetAppVersion(value string) Version
	// HasAppVersion checks if AppVersion has been set in Version
	HasAppVersion() bool
}

func (obj *version) populateXml(xObj *Argument) error {

	if obj.HasApiSpecVersion() {

		member := Member{
			Name: "apispecversion",
			Type: "None",
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSdkVersion() {

		member := Member{
			Name: "sdkversion",
			Type: "None",
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasAppVersion() {

		member := Member{
			Name: "appversion",
			Type: "None",
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *version) populateFromXml(xObj *RetVal) error {

	return nil
}

// Version of API specification
// ApiSpecVersion returns a string
func (obj *version) ApiSpecVersion() string {

	return *obj.obj.ApiSpecVersion

}

// Version of API specification
// ApiSpecVersion returns a string
func (obj *version) HasApiSpecVersion() bool {
	return obj.obj.ApiSpecVersion != nil
}

// Version of API specification
// SetApiSpecVersion sets the string value in the Version object
func (obj *version) SetApiSpecVersion(value string) Version {

	obj.obj.ApiSpecVersion = &value
	return obj
}

// Version of SDK generated from API specification
// SdkVersion returns a string
func (obj *version) SdkVersion() string {

	return *obj.obj.SdkVersion

}

// Version of SDK generated from API specification
// SdkVersion returns a string
func (obj *version) HasSdkVersion() bool {
	return obj.obj.SdkVersion != nil
}

// Version of SDK generated from API specification
// SetSdkVersion sets the string value in the Version object
func (obj *version) SetSdkVersion(value string) Version {

	obj.obj.SdkVersion = &value
	return obj
}

// Version of application consuming or serving the API
// AppVersion returns a string
func (obj *version) AppVersion() string {

	return *obj.obj.AppVersion

}

// Version of application consuming or serving the API
// AppVersion returns a string
func (obj *version) HasAppVersion() bool {
	return obj.obj.AppVersion != nil
}

// Version of application consuming or serving the API
// SetAppVersion sets the string value in the Version object
func (obj *version) SetAppVersion(value string) Version {

	obj.obj.AppVersion = &value
	return obj
}

func (obj *version) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *version) setDefault() {
	if obj.obj.ApiSpecVersion == nil {
		obj.SetApiSpecVersion("")
	}
	if obj.obj.SdkVersion == nil {
		obj.SetSdkVersion("")
	}
	if obj.obj.AppVersion == nil {
		obj.SetAppVersion("")
	}

}

// ***** PFTypeReleaseType *****
type pFTypeReleaseType struct {
	validation
	obj *otg.PFTypeReleaseType
}

func NewPFTypeReleaseType() PFTypeReleaseType {
	obj := pFTypeReleaseType{obj: &otg.PFTypeReleaseType{}}
	obj.setDefault()
	return &obj
}

func (obj *pFTypeReleaseType) Msg() *otg.PFTypeReleaseType {
	return obj.obj
}

func (obj *pFTypeReleaseType) SetMsg(msg *otg.PFTypeReleaseType) PFTypeReleaseType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *pFTypeReleaseType) ToProto() (*otg.PFTypeReleaseType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *pFTypeReleaseType) FromProto(msg *otg.PFTypeReleaseType) (PFTypeReleaseType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *pFTypeReleaseType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *pFTypeReleaseType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *pFTypeReleaseType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypeReleaseType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *pFTypeReleaseType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypeReleaseType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *pFTypeReleaseType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *pFTypeReleaseType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *pFTypeReleaseType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *pFTypeReleaseType) Clone() (PFTypeReleaseType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPFTypeReleaseType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *pFTypeReleaseType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// PFTypeReleaseType is tBD
type PFTypeReleaseType interface {
	Validation
	// Msg marshals PFTypeReleaseType to protobuf object *otg.PFTypeReleaseType
	// and doesn't set defaults
	Msg() *otg.PFTypeReleaseType
	// SetMsg unmarshals PFTypeReleaseType from protobuf object *otg.PFTypeReleaseType
	// and doesn't set defaults
	SetMsg(*otg.PFTypeReleaseType) PFTypeReleaseType
	// ToProto marshals PFTypeReleaseType to protobuf object *otg.PFTypeReleaseType
	ToProto() (*otg.PFTypeReleaseType, error)
	// ToPbText marshals PFTypeReleaseType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PFTypeReleaseType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PFTypeReleaseType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PFTypeReleaseType from protobuf object *otg.PFTypeReleaseType
	FromProto(msg *otg.PFTypeReleaseType) (PFTypeReleaseType, error)
	// FromPbText unmarshals PFTypeReleaseType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PFTypeReleaseType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PFTypeReleaseType from JSON text
	FromJson(value string) error
	// Validate validates PFTypeReleaseType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PFTypeReleaseType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Major returns int32, set in PFTypeReleaseType.
	Major() int32
	// SetMajor assigns int32 provided by user to PFTypeReleaseType
	SetMajor(value int32) PFTypeReleaseType
	// HasMajor checks if Major has been set in PFTypeReleaseType
	HasMajor() bool
	// Minor returns int32, set in PFTypeReleaseType.
	Minor() int32
	// SetMinor assigns int32 provided by user to PFTypeReleaseType
	SetMinor(value int32) PFTypeReleaseType
	// HasMinor checks if Minor has been set in PFTypeReleaseType
	HasMinor() bool
}

func (obj *pFTypeReleaseType) populateXml(xObj *Argument) error {

	if obj.HasMajor() {

		member := Member{
			Name:  "major",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Major()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasMinor() {

		member := Member{
			Name:  "minor",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Minor()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *pFTypeReleaseType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Major returns a int32
func (obj *pFTypeReleaseType) Major() int32 {

	return *obj.obj.Major

}

// TBD
// Major returns a int32
func (obj *pFTypeReleaseType) HasMajor() bool {
	return obj.obj.Major != nil
}

// TBD
// SetMajor sets the int32 value in the PFTypeReleaseType object
func (obj *pFTypeReleaseType) SetMajor(value int32) PFTypeReleaseType {

	obj.obj.Major = &value
	return obj
}

// TBD
// Minor returns a int32
func (obj *pFTypeReleaseType) Minor() int32 {

	return *obj.obj.Minor

}

// TBD
// Minor returns a int32
func (obj *pFTypeReleaseType) HasMinor() bool {
	return obj.obj.Minor != nil
}

// TBD
// SetMinor sets the int32 value in the PFTypeReleaseType object
func (obj *pFTypeReleaseType) SetMinor(value int32) PFTypeReleaseType {

	obj.obj.Minor = &value
	return obj
}

func (obj *pFTypeReleaseType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *pFTypeReleaseType) setDefault() {

}

// ***** PFTypeRevisionType *****
type pFTypeRevisionType struct {
	validation
	obj *otg.PFTypeRevisionType
}

func NewPFTypeRevisionType() PFTypeRevisionType {
	obj := pFTypeRevisionType{obj: &otg.PFTypeRevisionType{}}
	obj.setDefault()
	return &obj
}

func (obj *pFTypeRevisionType) Msg() *otg.PFTypeRevisionType {
	return obj.obj
}

func (obj *pFTypeRevisionType) SetMsg(msg *otg.PFTypeRevisionType) PFTypeRevisionType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *pFTypeRevisionType) ToProto() (*otg.PFTypeRevisionType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *pFTypeRevisionType) FromProto(msg *otg.PFTypeRevisionType) (PFTypeRevisionType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *pFTypeRevisionType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *pFTypeRevisionType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *pFTypeRevisionType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypeRevisionType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *pFTypeRevisionType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypeRevisionType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *pFTypeRevisionType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *pFTypeRevisionType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *pFTypeRevisionType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *pFTypeRevisionType) Clone() (PFTypeRevisionType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPFTypeRevisionType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *pFTypeRevisionType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// PFTypeRevisionType is tBD
type PFTypeRevisionType interface {
	Validation
	// Msg marshals PFTypeRevisionType to protobuf object *otg.PFTypeRevisionType
	// and doesn't set defaults
	Msg() *otg.PFTypeRevisionType
	// SetMsg unmarshals PFTypeRevisionType from protobuf object *otg.PFTypeRevisionType
	// and doesn't set defaults
	SetMsg(*otg.PFTypeRevisionType) PFTypeRevisionType
	// ToProto marshals PFTypeRevisionType to protobuf object *otg.PFTypeRevisionType
	ToProto() (*otg.PFTypeRevisionType, error)
	// ToPbText marshals PFTypeRevisionType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PFTypeRevisionType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PFTypeRevisionType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PFTypeRevisionType from protobuf object *otg.PFTypeRevisionType
	FromProto(msg *otg.PFTypeRevisionType) (PFTypeRevisionType, error)
	// FromPbText unmarshals PFTypeRevisionType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PFTypeRevisionType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PFTypeRevisionType from JSON text
	FromJson(value string) error
	// Validate validates PFTypeRevisionType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PFTypeRevisionType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Branch returns int32, set in PFTypeRevisionType.
	Branch() int32
	// SetBranch assigns int32 provided by user to PFTypeRevisionType
	SetBranch(value int32) PFTypeRevisionType
	// HasBranch checks if Branch has been set in PFTypeRevisionType
	HasBranch() bool
	// Build returns int32, set in PFTypeRevisionType.
	Build() int32
	// SetBuild assigns int32 provided by user to PFTypeRevisionType
	SetBuild(value int32) PFTypeRevisionType
	// HasBuild checks if Build has been set in PFTypeRevisionType
	HasBuild() bool
}

func (obj *pFTypeRevisionType) populateXml(xObj *Argument) error {

	if obj.HasBranch() {

		member := Member{
			Name:  "branch",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Branch()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasBuild() {

		member := Member{
			Name:  "build",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Build()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *pFTypeRevisionType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Branch returns a int32
func (obj *pFTypeRevisionType) Branch() int32 {

	return *obj.obj.Branch

}

// TBD
// Branch returns a int32
func (obj *pFTypeRevisionType) HasBranch() bool {
	return obj.obj.Branch != nil
}

// TBD
// SetBranch sets the int32 value in the PFTypeRevisionType object
func (obj *pFTypeRevisionType) SetBranch(value int32) PFTypeRevisionType {

	obj.obj.Branch = &value
	return obj
}

// TBD
// Build returns a int32
func (obj *pFTypeRevisionType) Build() int32 {

	return *obj.obj.Build

}

// TBD
// Build returns a int32
func (obj *pFTypeRevisionType) HasBuild() bool {
	return obj.obj.Build != nil
}

// TBD
// SetBuild sets the int32 value in the PFTypeRevisionType object
func (obj *pFTypeRevisionType) SetBuild(value int32) PFTypeRevisionType {

	obj.obj.Build = &value
	return obj
}

func (obj *pFTypeRevisionType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *pFTypeRevisionType) setDefault() {

}

// ***** DebugTopologyDebugPortInfo *****
type debugTopologyDebugPortInfo struct {
	validation
	obj              *otg.DebugTopologyDebugPortInfo
	topologyHolder   DebugTopologyDebugPortTopologyInfo
	connectionHolder DebugTopologyDebugPortConnectionInfo
}

func NewDebugTopologyDebugPortInfo() DebugTopologyDebugPortInfo {
	obj := debugTopologyDebugPortInfo{obj: &otg.DebugTopologyDebugPortInfo{}}
	obj.setDefault()
	return &obj
}

func (obj *debugTopologyDebugPortInfo) Msg() *otg.DebugTopologyDebugPortInfo {
	return obj.obj
}

func (obj *debugTopologyDebugPortInfo) SetMsg(msg *otg.DebugTopologyDebugPortInfo) DebugTopologyDebugPortInfo {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *debugTopologyDebugPortInfo) ToProto() (*otg.DebugTopologyDebugPortInfo, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *debugTopologyDebugPortInfo) FromProto(msg *otg.DebugTopologyDebugPortInfo) (DebugTopologyDebugPortInfo, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *debugTopologyDebugPortInfo) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *debugTopologyDebugPortInfo) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *debugTopologyDebugPortInfo) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *debugTopologyDebugPortInfo) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *debugTopologyDebugPortInfo) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *debugTopologyDebugPortInfo) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *debugTopologyDebugPortInfo) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *debugTopologyDebugPortInfo) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *debugTopologyDebugPortInfo) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *debugTopologyDebugPortInfo) Clone() (DebugTopologyDebugPortInfo, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewDebugTopologyDebugPortInfo()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *debugTopologyDebugPortInfo) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *debugTopologyDebugPortInfo) setNil() {
	obj.topologyHolder = nil
	obj.connectionHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// DebugTopologyDebugPortInfo is tBD
type DebugTopologyDebugPortInfo interface {
	Validation
	// Msg marshals DebugTopologyDebugPortInfo to protobuf object *otg.DebugTopologyDebugPortInfo
	// and doesn't set defaults
	Msg() *otg.DebugTopologyDebugPortInfo
	// SetMsg unmarshals DebugTopologyDebugPortInfo from protobuf object *otg.DebugTopologyDebugPortInfo
	// and doesn't set defaults
	SetMsg(*otg.DebugTopologyDebugPortInfo) DebugTopologyDebugPortInfo
	// ToProto marshals DebugTopologyDebugPortInfo to protobuf object *otg.DebugTopologyDebugPortInfo
	ToProto() (*otg.DebugTopologyDebugPortInfo, error)
	// ToPbText marshals DebugTopologyDebugPortInfo to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals DebugTopologyDebugPortInfo to YAML text
	ToYaml() (string, error)
	// ToJson marshals DebugTopologyDebugPortInfo to JSON text
	ToJson() (string, error)
	// FromProto unmarshals DebugTopologyDebugPortInfo from protobuf object *otg.DebugTopologyDebugPortInfo
	FromProto(msg *otg.DebugTopologyDebugPortInfo) (DebugTopologyDebugPortInfo, error)
	// FromPbText unmarshals DebugTopologyDebugPortInfo from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals DebugTopologyDebugPortInfo from YAML text
	FromYaml(value string) error
	// FromJson unmarshals DebugTopologyDebugPortInfo from JSON text
	FromJson(value string) error
	// Validate validates DebugTopologyDebugPortInfo
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (DebugTopologyDebugPortInfo, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Topology returns DebugTopologyDebugPortTopologyInfo, set in DebugTopologyDebugPortInfo.
	// DebugTopologyDebugPortTopologyInfo is tBD
	Topology() DebugTopologyDebugPortTopologyInfo
	// SetTopology assigns DebugTopologyDebugPortTopologyInfo provided by user to DebugTopologyDebugPortInfo.
	// DebugTopologyDebugPortTopologyInfo is tBD
	SetTopology(value DebugTopologyDebugPortTopologyInfo) DebugTopologyDebugPortInfo
	// HasTopology checks if Topology has been set in DebugTopologyDebugPortInfo
	HasTopology() bool
	// Connection returns DebugTopologyDebugPortConnectionInfo, set in DebugTopologyDebugPortInfo.
	// DebugTopologyDebugPortConnectionInfo is tBD
	Connection() DebugTopologyDebugPortConnectionInfo
	// SetConnection assigns DebugTopologyDebugPortConnectionInfo provided by user to DebugTopologyDebugPortInfo.
	// DebugTopologyDebugPortConnectionInfo is tBD
	SetConnection(value DebugTopologyDebugPortConnectionInfo) DebugTopologyDebugPortInfo
	// HasConnection checks if Connection has been set in DebugTopologyDebugPortInfo
	HasConnection() bool
	setNil()
}

func (obj *debugTopologyDebugPortInfo) populateXml(xObj *Argument) error {

	return nil
}

func (obj *debugTopologyDebugPortInfo) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Topology returns a DebugTopologyDebugPortTopologyInfo
func (obj *debugTopologyDebugPortInfo) Topology() DebugTopologyDebugPortTopologyInfo {
	if obj.obj.Topology == nil {
		obj.obj.Topology = NewDebugTopologyDebugPortTopologyInfo().Msg()
	}
	if obj.topologyHolder == nil {
		obj.topologyHolder = &debugTopologyDebugPortTopologyInfo{obj: obj.obj.Topology}
	}
	return obj.topologyHolder
}

// TBD
// Topology returns a DebugTopologyDebugPortTopologyInfo
func (obj *debugTopologyDebugPortInfo) HasTopology() bool {
	return obj.obj.Topology != nil
}

// TBD
// SetTopology sets the DebugTopologyDebugPortTopologyInfo value in the DebugTopologyDebugPortInfo object
func (obj *debugTopologyDebugPortInfo) SetTopology(value DebugTopologyDebugPortTopologyInfo) DebugTopologyDebugPortInfo {

	obj.topologyHolder = nil
	obj.obj.Topology = value.Msg()

	return obj
}

// TBD
// Connection returns a DebugTopologyDebugPortConnectionInfo
func (obj *debugTopologyDebugPortInfo) Connection() DebugTopologyDebugPortConnectionInfo {
	if obj.obj.Connection == nil {
		obj.obj.Connection = NewDebugTopologyDebugPortConnectionInfo().Msg()
	}
	if obj.connectionHolder == nil {
		obj.connectionHolder = &debugTopologyDebugPortConnectionInfo{obj: obj.obj.Connection}
	}
	return obj.connectionHolder
}

// TBD
// Connection returns a DebugTopologyDebugPortConnectionInfo
func (obj *debugTopologyDebugPortInfo) HasConnection() bool {
	return obj.obj.Connection != nil
}

// TBD
// SetConnection sets the DebugTopologyDebugPortConnectionInfo value in the DebugTopologyDebugPortInfo object
func (obj *debugTopologyDebugPortInfo) SetConnection(value DebugTopologyDebugPortConnectionInfo) DebugTopologyDebugPortInfo {

	obj.connectionHolder = nil
	obj.obj.Connection = value.Msg()

	return obj
}

func (obj *debugTopologyDebugPortInfo) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Topology != nil {

		obj.Topology().validateObj(vObj, set_default)
	}

	if obj.obj.Connection != nil {

		obj.Connection().validateObj(vObj, set_default)
	}

}

func (obj *debugTopologyDebugPortInfo) setDefault() {

}

// ***** ServereEvent *****
type servereEvent struct {
	validation
	obj *otg.ServereEvent
}

func NewServereEvent() ServereEvent {
	obj := servereEvent{obj: &otg.ServereEvent{}}
	obj.setDefault()
	return &obj
}

func (obj *servereEvent) Msg() *otg.ServereEvent {
	return obj.obj
}

func (obj *servereEvent) SetMsg(msg *otg.ServereEvent) ServereEvent {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *servereEvent) ToProto() (*otg.ServereEvent, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *servereEvent) FromProto(msg *otg.ServereEvent) (ServereEvent, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *servereEvent) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *servereEvent) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *servereEvent) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *servereEvent) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *servereEvent) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *servereEvent) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *servereEvent) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *servereEvent) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *servereEvent) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *servereEvent) Clone() (ServereEvent, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewServereEvent()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *servereEvent) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// ServereEvent is description is TBD
type ServereEvent interface {
	Validation
	// Msg marshals ServereEvent to protobuf object *otg.ServereEvent
	// and doesn't set defaults
	Msg() *otg.ServereEvent
	// SetMsg unmarshals ServereEvent from protobuf object *otg.ServereEvent
	// and doesn't set defaults
	SetMsg(*otg.ServereEvent) ServereEvent
	// ToProto marshals ServereEvent to protobuf object *otg.ServereEvent
	ToProto() (*otg.ServereEvent, error)
	// ToPbText marshals ServereEvent to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ServereEvent to YAML text
	ToYaml() (string, error)
	// ToJson marshals ServereEvent to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ServereEvent from protobuf object *otg.ServereEvent
	FromProto(msg *otg.ServereEvent) (ServereEvent, error)
	// FromPbText unmarshals ServereEvent from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ServereEvent from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ServereEvent from JSON text
	FromJson(value string) error
	// Validate validates ServereEvent
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ServereEvent, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// EEvent returns ServereEventEEventEnum, set in ServereEvent
	EEvent() ServereEventEEventEnum
	// SetEEvent assigns ServereEventEEventEnum provided by user to ServereEvent
	SetEEvent(value ServereEventEEventEnum) ServereEvent
	// HasEEvent checks if EEvent has been set in ServereEvent
	HasEEvent() bool
}

func (obj *servereEvent) populateXml(xObj *Argument) error {

	if obj.HasEEvent() {

		member := Member{
			Name:  "eevent",
			Type:  "None",
			Value: strconv.FormatInt(int64(obj.obj.EEvent.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *servereEvent) populateFromXml(xObj *RetVal) error {

	return nil
}

type ServereEventEEventEnum string

// Enum of EEvent on ServereEvent
var ServereEventEEvent = struct {
	KOWNERSHIP  ServereEventEEventEnum
	KLINK       ServereEventEEventEnum
	KCPUSTATUS  ServereEventEEventEnum
	KCAPTURE    ServereEventEEventEnum
	KTRANSMIT   ServereEventEEventEnum
	KSTREAMRATE ServereEventEEventEnum
	KLINESPEED  ServereEventEEventEnum
}{
	KOWNERSHIP:  ServereEventEEventEnum("kOwnership"),
	KLINK:       ServereEventEEventEnum("kLink"),
	KCPUSTATUS:  ServereEventEEventEnum("kCPUStatus"),
	KCAPTURE:    ServereEventEEventEnum("kCapture"),
	KTRANSMIT:   ServereEventEEventEnum("kTransmit"),
	KSTREAMRATE: ServereEventEEventEnum("kStreamRate"),
	KLINESPEED:  ServereEventEEventEnum("kLineSpeed"),
}

func (obj *servereEvent) EEvent() ServereEventEEventEnum {
	return ServereEventEEventEnum(obj.obj.EEvent.Enum().String())
}

// description is TBD
// EEvent returns a string
func (obj *servereEvent) HasEEvent() bool {
	return obj.obj.EEvent != nil
}

func (obj *servereEvent) SetEEvent(value ServereEventEEventEnum) ServereEvent {
	intValue, ok := otg.ServereEvent_EEvent_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on ServereEventEEventEnum", string(value)))
		return obj
	}
	enumValue := otg.ServereEvent_EEvent_Enum(intValue)
	obj.obj.EEvent = &enumValue

	return obj
}

func (obj *servereEvent) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *servereEvent) setDefault() {

}

// ***** PortBasicConfigurationType *****
type portBasicConfigurationType struct {
	validation
	obj *otg.PortBasicConfigurationType
}

func NewPortBasicConfigurationType() PortBasicConfigurationType {
	obj := portBasicConfigurationType{obj: &otg.PortBasicConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *portBasicConfigurationType) Msg() *otg.PortBasicConfigurationType {
	return obj.obj
}

func (obj *portBasicConfigurationType) SetMsg(msg *otg.PortBasicConfigurationType) PortBasicConfigurationType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *portBasicConfigurationType) ToProto() (*otg.PortBasicConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *portBasicConfigurationType) FromProto(msg *otg.PortBasicConfigurationType) (PortBasicConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *portBasicConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *portBasicConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portBasicConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portBasicConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *portBasicConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portBasicConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *portBasicConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *portBasicConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *portBasicConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *portBasicConfigurationType) Clone() (PortBasicConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPortBasicConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *portBasicConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// PortBasicConfigurationType is tBD
type PortBasicConfigurationType interface {
	Validation
	// Msg marshals PortBasicConfigurationType to protobuf object *otg.PortBasicConfigurationType
	// and doesn't set defaults
	Msg() *otg.PortBasicConfigurationType
	// SetMsg unmarshals PortBasicConfigurationType from protobuf object *otg.PortBasicConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.PortBasicConfigurationType) PortBasicConfigurationType
	// ToProto marshals PortBasicConfigurationType to protobuf object *otg.PortBasicConfigurationType
	ToProto() (*otg.PortBasicConfigurationType, error)
	// ToPbText marshals PortBasicConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PortBasicConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PortBasicConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PortBasicConfigurationType from protobuf object *otg.PortBasicConfigurationType
	FromProto(msg *otg.PortBasicConfigurationType) (PortBasicConfigurationType, error)
	// FromPbText unmarshals PortBasicConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PortBasicConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PortBasicConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates PortBasicConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PortBasicConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Loopback returns PortBasicConfigurationTypeLoopbackEnum, set in PortBasicConfigurationType
	Loopback() PortBasicConfigurationTypeLoopbackEnum
	// SetLoopback assigns PortBasicConfigurationTypeLoopbackEnum provided by user to PortBasicConfigurationType
	SetLoopback(value PortBasicConfigurationTypeLoopbackEnum) PortBasicConfigurationType
	// HasLoopback checks if Loopback has been set in PortBasicConfigurationType
	HasLoopback() bool
	// PortMode returns PortBasicConfigurationTypePortModeEnum, set in PortBasicConfigurationType
	PortMode() PortBasicConfigurationTypePortModeEnum
	// SetPortMode assigns PortBasicConfigurationTypePortModeEnum provided by user to PortBasicConfigurationType
	SetPortMode(value PortBasicConfigurationTypePortModeEnum) PortBasicConfigurationType
	// HasPortMode checks if PortMode has been set in PortBasicConfigurationType
	HasPortMode() bool
	// EnableSimulateCableDisconnect returns bool, set in PortBasicConfigurationType.
	EnableSimulateCableDisconnect() bool
	// SetEnableSimulateCableDisconnect assigns bool provided by user to PortBasicConfigurationType
	SetEnableSimulateCableDisconnect(value bool) PortBasicConfigurationType
	// HasEnableSimulateCableDisconnect checks if EnableSimulateCableDisconnect has been set in PortBasicConfigurationType
	HasEnableSimulateCableDisconnect() bool
	// EnableTransparentDynamicRateChange returns bool, set in PortBasicConfigurationType.
	EnableTransparentDynamicRateChange() bool
	// SetEnableTransparentDynamicRateChange assigns bool provided by user to PortBasicConfigurationType
	SetEnableTransparentDynamicRateChange(value bool) PortBasicConfigurationType
	// HasEnableTransparentDynamicRateChange checks if EnableTransparentDynamicRateChange has been set in PortBasicConfigurationType
	HasEnableTransparentDynamicRateChange() bool
	// IntrinsicLatencyAdjustment returns bool, set in PortBasicConfigurationType.
	IntrinsicLatencyAdjustment() bool
	// SetIntrinsicLatencyAdjustment assigns bool provided by user to PortBasicConfigurationType
	SetIntrinsicLatencyAdjustment(value bool) PortBasicConfigurationType
	// HasIntrinsicLatencyAdjustment checks if IntrinsicLatencyAdjustment has been set in PortBasicConfigurationType
	HasIntrinsicLatencyAdjustment() bool
	// InstrumentationMode returns PortBasicConfigurationTypeInstrumentationModeEnum, set in PortBasicConfigurationType
	InstrumentationMode() PortBasicConfigurationTypeInstrumentationModeEnum
	// SetInstrumentationMode assigns PortBasicConfigurationTypeInstrumentationModeEnum provided by user to PortBasicConfigurationType
	SetInstrumentationMode(value PortBasicConfigurationTypeInstrumentationModeEnum) PortBasicConfigurationType
	// HasInstrumentationMode checks if InstrumentationMode has been set in PortBasicConfigurationType
	HasInstrumentationMode() bool
}

func (obj *portBasicConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasLoopback() {

		member := Member{
			Name:  "loopback",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Port+eLoopback",
			Value: strconv.FormatInt(int64(obj.obj.Loopback.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasPortMode() {

		member := Member{
			Name:  "portmode",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Port+ePortMode",
			Value: strconv.FormatInt(int64(obj.obj.PortMode.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableSimulateCableDisconnect() {
		var value string
		if obj.EnableSimulateCableDisconnect() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablesimulatecabledisconnect",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableTransparentDynamicRateChange() {
		var value string
		if obj.EnableTransparentDynamicRateChange() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enabletransparentdynamicratechange",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIntrinsicLatencyAdjustment() {
		var value string
		if obj.IntrinsicLatencyAdjustment() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "intrinsiclatencyadjustment",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasInstrumentationMode() {

		member := Member{
			Name:  "instrumentationmode",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Port+eInstrumentationMode",
			Value: strconv.FormatInt(int64(obj.obj.InstrumentationMode.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *portBasicConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

type PortBasicConfigurationTypeLoopbackEnum string

// Enum of Loopback on PortBasicConfigurationType
var PortBasicConfigurationTypeLoopback = struct {
	KNORMAL       PortBasicConfigurationTypeLoopbackEnum
	KLOOPBACK     PortBasicConfigurationTypeLoopbackEnum
	KLINELOOPBACK PortBasicConfigurationTypeLoopbackEnum
}{
	KNORMAL:       PortBasicConfigurationTypeLoopbackEnum("kNormal"),
	KLOOPBACK:     PortBasicConfigurationTypeLoopbackEnum("kLoopback"),
	KLINELOOPBACK: PortBasicConfigurationTypeLoopbackEnum("kLineLoopback"),
}

func (obj *portBasicConfigurationType) Loopback() PortBasicConfigurationTypeLoopbackEnum {
	return PortBasicConfigurationTypeLoopbackEnum(obj.obj.Loopback.Enum().String())
}

// TBD
// Loopback returns a string
func (obj *portBasicConfigurationType) HasLoopback() bool {
	return obj.obj.Loopback != nil
}

func (obj *portBasicConfigurationType) SetLoopback(value PortBasicConfigurationTypeLoopbackEnum) PortBasicConfigurationType {
	intValue, ok := otg.PortBasicConfigurationType_Loopback_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PortBasicConfigurationTypeLoopbackEnum", string(value)))
		return obj
	}
	enumValue := otg.PortBasicConfigurationType_Loopback_Enum(intValue)
	obj.obj.Loopback = &enumValue

	return obj
}

type PortBasicConfigurationTypePortModeEnum string

// Enum of PortMode on PortBasicConfigurationType
var PortBasicConfigurationTypePortMode = struct {
	KMODEETHERNET PortBasicConfigurationTypePortModeEnum
	KMODE10GIGWAN PortBasicConfigurationTypePortModeEnum
	KMODE10GIGLAN PortBasicConfigurationTypePortModeEnum
}{
	KMODEETHERNET: PortBasicConfigurationTypePortModeEnum("kModeEthernet"),
	KMODE10GIGWAN: PortBasicConfigurationTypePortModeEnum("kMode10GigWan"),
	KMODE10GIGLAN: PortBasicConfigurationTypePortModeEnum("kMode10GigLan"),
}

func (obj *portBasicConfigurationType) PortMode() PortBasicConfigurationTypePortModeEnum {
	return PortBasicConfigurationTypePortModeEnum(obj.obj.PortMode.Enum().String())
}

// TBD
// PortMode returns a string
func (obj *portBasicConfigurationType) HasPortMode() bool {
	return obj.obj.PortMode != nil
}

func (obj *portBasicConfigurationType) SetPortMode(value PortBasicConfigurationTypePortModeEnum) PortBasicConfigurationType {
	intValue, ok := otg.PortBasicConfigurationType_PortMode_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PortBasicConfigurationTypePortModeEnum", string(value)))
		return obj
	}
	enumValue := otg.PortBasicConfigurationType_PortMode_Enum(intValue)
	obj.obj.PortMode = &enumValue

	return obj
}

// TBD
// EnableSimulateCableDisconnect returns a bool
func (obj *portBasicConfigurationType) EnableSimulateCableDisconnect() bool {

	return *obj.obj.EnableSimulateCableDisconnect

}

// TBD
// EnableSimulateCableDisconnect returns a bool
func (obj *portBasicConfigurationType) HasEnableSimulateCableDisconnect() bool {
	return obj.obj.EnableSimulateCableDisconnect != nil
}

// TBD
// SetEnableSimulateCableDisconnect sets the bool value in the PortBasicConfigurationType object
func (obj *portBasicConfigurationType) SetEnableSimulateCableDisconnect(value bool) PortBasicConfigurationType {

	obj.obj.EnableSimulateCableDisconnect = &value
	return obj
}

// TBD
// EnableTransparentDynamicRateChange returns a bool
func (obj *portBasicConfigurationType) EnableTransparentDynamicRateChange() bool {

	return *obj.obj.EnableTransparentDynamicRateChange

}

// TBD
// EnableTransparentDynamicRateChange returns a bool
func (obj *portBasicConfigurationType) HasEnableTransparentDynamicRateChange() bool {
	return obj.obj.EnableTransparentDynamicRateChange != nil
}

// TBD
// SetEnableTransparentDynamicRateChange sets the bool value in the PortBasicConfigurationType object
func (obj *portBasicConfigurationType) SetEnableTransparentDynamicRateChange(value bool) PortBasicConfigurationType {

	obj.obj.EnableTransparentDynamicRateChange = &value
	return obj
}

// TBD
// IntrinsicLatencyAdjustment returns a bool
func (obj *portBasicConfigurationType) IntrinsicLatencyAdjustment() bool {

	return *obj.obj.IntrinsicLatencyAdjustment

}

// TBD
// IntrinsicLatencyAdjustment returns a bool
func (obj *portBasicConfigurationType) HasIntrinsicLatencyAdjustment() bool {
	return obj.obj.IntrinsicLatencyAdjustment != nil
}

// TBD
// SetIntrinsicLatencyAdjustment sets the bool value in the PortBasicConfigurationType object
func (obj *portBasicConfigurationType) SetIntrinsicLatencyAdjustment(value bool) PortBasicConfigurationType {

	obj.obj.IntrinsicLatencyAdjustment = &value
	return obj
}

type PortBasicConfigurationTypeInstrumentationModeEnum string

// Enum of InstrumentationMode on PortBasicConfigurationType
var PortBasicConfigurationTypeInstrumentationMode = struct {
	KMODEENDOFFRAME PortBasicConfigurationTypeInstrumentationModeEnum
	KMODEFLOATING   PortBasicConfigurationTypeInstrumentationModeEnum
}{
	KMODEENDOFFRAME: PortBasicConfigurationTypeInstrumentationModeEnum("kModeEndOfFrame"),
	KMODEFLOATING:   PortBasicConfigurationTypeInstrumentationModeEnum("kModeFloating"),
}

func (obj *portBasicConfigurationType) InstrumentationMode() PortBasicConfigurationTypeInstrumentationModeEnum {
	return PortBasicConfigurationTypeInstrumentationModeEnum(obj.obj.InstrumentationMode.Enum().String())
}

// TBD
// InstrumentationMode returns a string
func (obj *portBasicConfigurationType) HasInstrumentationMode() bool {
	return obj.obj.InstrumentationMode != nil
}

func (obj *portBasicConfigurationType) SetInstrumentationMode(value PortBasicConfigurationTypeInstrumentationModeEnum) PortBasicConfigurationType {
	intValue, ok := otg.PortBasicConfigurationType_InstrumentationMode_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PortBasicConfigurationTypeInstrumentationModeEnum", string(value)))
		return obj
	}
	enumValue := otg.PortBasicConfigurationType_InstrumentationMode_Enum(intValue)
	obj.obj.InstrumentationMode = &enumValue

	return obj
}

func (obj *portBasicConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *portBasicConfigurationType) setDefault() {

}

// ***** PortTransmitConfigurationType *****
type portTransmitConfigurationType struct {
	validation
	obj                          *otg.PortTransmitConfigurationType
	transmitClockDeviationHolder PFTypePartsPerMillionType
	preEmphasisHolder            PFTypePercentType
}

func NewPortTransmitConfigurationType() PortTransmitConfigurationType {
	obj := portTransmitConfigurationType{obj: &otg.PortTransmitConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *portTransmitConfigurationType) Msg() *otg.PortTransmitConfigurationType {
	return obj.obj
}

func (obj *portTransmitConfigurationType) SetMsg(msg *otg.PortTransmitConfigurationType) PortTransmitConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *portTransmitConfigurationType) ToProto() (*otg.PortTransmitConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *portTransmitConfigurationType) FromProto(msg *otg.PortTransmitConfigurationType) (PortTransmitConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *portTransmitConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *portTransmitConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portTransmitConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portTransmitConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *portTransmitConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portTransmitConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *portTransmitConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *portTransmitConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *portTransmitConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *portTransmitConfigurationType) Clone() (PortTransmitConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPortTransmitConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *portTransmitConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *portTransmitConfigurationType) setNil() {
	obj.transmitClockDeviationHolder = nil
	obj.preEmphasisHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// PortTransmitConfigurationType is tBD
type PortTransmitConfigurationType interface {
	Validation
	// Msg marshals PortTransmitConfigurationType to protobuf object *otg.PortTransmitConfigurationType
	// and doesn't set defaults
	Msg() *otg.PortTransmitConfigurationType
	// SetMsg unmarshals PortTransmitConfigurationType from protobuf object *otg.PortTransmitConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.PortTransmitConfigurationType) PortTransmitConfigurationType
	// ToProto marshals PortTransmitConfigurationType to protobuf object *otg.PortTransmitConfigurationType
	ToProto() (*otg.PortTransmitConfigurationType, error)
	// ToPbText marshals PortTransmitConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PortTransmitConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PortTransmitConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PortTransmitConfigurationType from protobuf object *otg.PortTransmitConfigurationType
	FromProto(msg *otg.PortTransmitConfigurationType) (PortTransmitConfigurationType, error)
	// FromPbText unmarshals PortTransmitConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PortTransmitConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PortTransmitConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates PortTransmitConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PortTransmitConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// TransmitMode returns PortTransmitConfigurationTypeTransmitModeEnum, set in PortTransmitConfigurationType
	TransmitMode() PortTransmitConfigurationTypeTransmitModeEnum
	// SetTransmitMode assigns PortTransmitConfigurationTypeTransmitModeEnum provided by user to PortTransmitConfigurationType
	SetTransmitMode(value PortTransmitConfigurationTypeTransmitModeEnum) PortTransmitConfigurationType
	// HasTransmitMode checks if TransmitMode has been set in PortTransmitConfigurationType
	HasTransmitMode() bool
	// EnableRepeatableLastRandomPattern returns bool, set in PortTransmitConfigurationType.
	EnableRepeatableLastRandomPattern() bool
	// SetEnableRepeatableLastRandomPattern assigns bool provided by user to PortTransmitConfigurationType
	SetEnableRepeatableLastRandomPattern(value bool) PortTransmitConfigurationType
	// HasEnableRepeatableLastRandomPattern checks if EnableRepeatableLastRandomPattern has been set in PortTransmitConfigurationType
	HasEnableRepeatableLastRandomPattern() bool
	// TransmitClockDeviation returns PFTypePartsPerMillionType, set in PortTransmitConfigurationType.
	// PFTypePartsPerMillionType is model a ppm ratio using a fixed point representation. A value of 80.1 ppm would be represented as (80 + 100000 / 1e6).
	TransmitClockDeviation() PFTypePartsPerMillionType
	// SetTransmitClockDeviation assigns PFTypePartsPerMillionType provided by user to PortTransmitConfigurationType.
	// PFTypePartsPerMillionType is model a ppm ratio using a fixed point representation. A value of 80.1 ppm would be represented as (80 + 100000 / 1e6).
	SetTransmitClockDeviation(value PFTypePartsPerMillionType) PortTransmitConfigurationType
	// HasTransmitClockDeviation checks if TransmitClockDeviation has been set in PortTransmitConfigurationType
	HasTransmitClockDeviation() bool
	// TransmitClockMode returns PortTransmitConfigurationTypeTransmitClockModeEnum, set in PortTransmitConfigurationType
	TransmitClockMode() PortTransmitConfigurationTypeTransmitClockModeEnum
	// SetTransmitClockMode assigns PortTransmitConfigurationTypeTransmitClockModeEnum provided by user to PortTransmitConfigurationType
	SetTransmitClockMode(value PortTransmitConfigurationTypeTransmitClockModeEnum) PortTransmitConfigurationType
	// HasTransmitClockMode checks if TransmitClockMode has been set in PortTransmitConfigurationType
	HasTransmitClockMode() bool
	// PreEmphasis returns PFTypePercentType, set in PortTransmitConfigurationType.
	// PFTypePercentType is model a percentage using a fixed point representation. A value of 40.5% would be represented as (40 + 500000 / 1e6).
	PreEmphasis() PFTypePercentType
	// SetPreEmphasis assigns PFTypePercentType provided by user to PortTransmitConfigurationType.
	// PFTypePercentType is model a percentage using a fixed point representation. A value of 40.5% would be represented as (40 + 500000 / 1e6).
	SetPreEmphasis(value PFTypePercentType) PortTransmitConfigurationType
	// HasPreEmphasis checks if PreEmphasis has been set in PortTransmitConfigurationType
	HasPreEmphasis() bool
	// IgnoreLinkStatus returns bool, set in PortTransmitConfigurationType.
	IgnoreLinkStatus() bool
	// SetIgnoreLinkStatus assigns bool provided by user to PortTransmitConfigurationType
	SetIgnoreLinkStatus(value bool) PortTransmitConfigurationType
	// HasIgnoreLinkStatus checks if IgnoreLinkStatus has been set in PortTransmitConfigurationType
	HasIgnoreLinkStatus() bool
	setNil()
}

func (obj *portTransmitConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasTransmitMode() {

		member := Member{
			Name:  "transmitmode",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Port+eTxMode",
			Value: strconv.FormatInt(int64(obj.obj.TransmitMode.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableRepeatableLastRandomPattern() {
		var value string
		if obj.EnableRepeatableLastRandomPattern() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablerepeatablelastrandompattern",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasTransmitClockMode() {

		member := Member{
			Name:  "transmitclockmode",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Port+eTxClockMode",
			Value: strconv.FormatInt(int64(obj.obj.TransmitClockMode.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIgnoreLinkStatus() {
		var value string
		if obj.IgnoreLinkStatus() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "ignorelinkstatus",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *portTransmitConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

type PortTransmitConfigurationTypeTransmitModeEnum string

// Enum of TransmitMode on PortTransmitConfigurationType
var PortTransmitConfigurationTypeTransmitMode = struct {
	KPACKETSTREAMS     PortTransmitConfigurationTypeTransmitModeEnum
	KPACKETFLOWS       PortTransmitConfigurationTypeTransmitModeEnum
	KADVANCEDSCHEDULER PortTransmitConfigurationTypeTransmitModeEnum
	KECHO              PortTransmitConfigurationTypeTransmitModeEnum
}{
	KPACKETSTREAMS:     PortTransmitConfigurationTypeTransmitModeEnum("kPacketStreams"),
	KPACKETFLOWS:       PortTransmitConfigurationTypeTransmitModeEnum("kPacketFlows"),
	KADVANCEDSCHEDULER: PortTransmitConfigurationTypeTransmitModeEnum("kAdvancedScheduler"),
	KECHO:              PortTransmitConfigurationTypeTransmitModeEnum("kEcho"),
}

func (obj *portTransmitConfigurationType) TransmitMode() PortTransmitConfigurationTypeTransmitModeEnum {
	return PortTransmitConfigurationTypeTransmitModeEnum(obj.obj.TransmitMode.Enum().String())
}

// TBD
// TransmitMode returns a string
func (obj *portTransmitConfigurationType) HasTransmitMode() bool {
	return obj.obj.TransmitMode != nil
}

func (obj *portTransmitConfigurationType) SetTransmitMode(value PortTransmitConfigurationTypeTransmitModeEnum) PortTransmitConfigurationType {
	intValue, ok := otg.PortTransmitConfigurationType_TransmitMode_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PortTransmitConfigurationTypeTransmitModeEnum", string(value)))
		return obj
	}
	enumValue := otg.PortTransmitConfigurationType_TransmitMode_Enum(intValue)
	obj.obj.TransmitMode = &enumValue

	return obj
}

// TBD
// EnableRepeatableLastRandomPattern returns a bool
func (obj *portTransmitConfigurationType) EnableRepeatableLastRandomPattern() bool {

	return *obj.obj.EnableRepeatableLastRandomPattern

}

// TBD
// EnableRepeatableLastRandomPattern returns a bool
func (obj *portTransmitConfigurationType) HasEnableRepeatableLastRandomPattern() bool {
	return obj.obj.EnableRepeatableLastRandomPattern != nil
}

// TBD
// SetEnableRepeatableLastRandomPattern sets the bool value in the PortTransmitConfigurationType object
func (obj *portTransmitConfigurationType) SetEnableRepeatableLastRandomPattern(value bool) PortTransmitConfigurationType {

	obj.obj.EnableRepeatableLastRandomPattern = &value
	return obj
}

// TBD
// TransmitClockDeviation returns a PFTypePartsPerMillionType
func (obj *portTransmitConfigurationType) TransmitClockDeviation() PFTypePartsPerMillionType {
	if obj.obj.TransmitClockDeviation == nil {
		obj.obj.TransmitClockDeviation = NewPFTypePartsPerMillionType().Msg()
	}
	if obj.transmitClockDeviationHolder == nil {
		obj.transmitClockDeviationHolder = &pFTypePartsPerMillionType{obj: obj.obj.TransmitClockDeviation}
	}
	return obj.transmitClockDeviationHolder
}

// TBD
// TransmitClockDeviation returns a PFTypePartsPerMillionType
func (obj *portTransmitConfigurationType) HasTransmitClockDeviation() bool {
	return obj.obj.TransmitClockDeviation != nil
}

// TBD
// SetTransmitClockDeviation sets the PFTypePartsPerMillionType value in the PortTransmitConfigurationType object
func (obj *portTransmitConfigurationType) SetTransmitClockDeviation(value PFTypePartsPerMillionType) PortTransmitConfigurationType {

	obj.transmitClockDeviationHolder = nil
	obj.obj.TransmitClockDeviation = value.Msg()

	return obj
}

type PortTransmitConfigurationTypeTransmitClockModeEnum string

// Enum of TransmitClockMode on PortTransmitConfigurationType
var PortTransmitConfigurationTypeTransmitClockMode = struct {
	KINTERNAL PortTransmitConfigurationTypeTransmitClockModeEnum
	KEXTERNAL PortTransmitConfigurationTypeTransmitClockModeEnum
}{
	KINTERNAL: PortTransmitConfigurationTypeTransmitClockModeEnum("kInternal"),
	KEXTERNAL: PortTransmitConfigurationTypeTransmitClockModeEnum("kExternal"),
}

func (obj *portTransmitConfigurationType) TransmitClockMode() PortTransmitConfigurationTypeTransmitClockModeEnum {
	return PortTransmitConfigurationTypeTransmitClockModeEnum(obj.obj.TransmitClockMode.Enum().String())
}

// TBD
// TransmitClockMode returns a string
func (obj *portTransmitConfigurationType) HasTransmitClockMode() bool {
	return obj.obj.TransmitClockMode != nil
}

func (obj *portTransmitConfigurationType) SetTransmitClockMode(value PortTransmitConfigurationTypeTransmitClockModeEnum) PortTransmitConfigurationType {
	intValue, ok := otg.PortTransmitConfigurationType_TransmitClockMode_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PortTransmitConfigurationTypeTransmitClockModeEnum", string(value)))
		return obj
	}
	enumValue := otg.PortTransmitConfigurationType_TransmitClockMode_Enum(intValue)
	obj.obj.TransmitClockMode = &enumValue

	return obj
}

// TBD
// PreEmphasis returns a PFTypePercentType
func (obj *portTransmitConfigurationType) PreEmphasis() PFTypePercentType {
	if obj.obj.PreEmphasis == nil {
		obj.obj.PreEmphasis = NewPFTypePercentType().Msg()
	}
	if obj.preEmphasisHolder == nil {
		obj.preEmphasisHolder = &pFTypePercentType{obj: obj.obj.PreEmphasis}
	}
	return obj.preEmphasisHolder
}

// TBD
// PreEmphasis returns a PFTypePercentType
func (obj *portTransmitConfigurationType) HasPreEmphasis() bool {
	return obj.obj.PreEmphasis != nil
}

// TBD
// SetPreEmphasis sets the PFTypePercentType value in the PortTransmitConfigurationType object
func (obj *portTransmitConfigurationType) SetPreEmphasis(value PFTypePercentType) PortTransmitConfigurationType {

	obj.preEmphasisHolder = nil
	obj.obj.PreEmphasis = value.Msg()

	return obj
}

// TBD
// IgnoreLinkStatus returns a bool
func (obj *portTransmitConfigurationType) IgnoreLinkStatus() bool {

	return *obj.obj.IgnoreLinkStatus

}

// TBD
// IgnoreLinkStatus returns a bool
func (obj *portTransmitConfigurationType) HasIgnoreLinkStatus() bool {
	return obj.obj.IgnoreLinkStatus != nil
}

// TBD
// SetIgnoreLinkStatus sets the bool value in the PortTransmitConfigurationType object
func (obj *portTransmitConfigurationType) SetIgnoreLinkStatus(value bool) PortTransmitConfigurationType {

	obj.obj.IgnoreLinkStatus = &value
	return obj
}

func (obj *portTransmitConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.TransmitClockDeviation != nil {

		obj.TransmitClockDeviation().validateObj(vObj, set_default)
	}

	if obj.obj.PreEmphasis != nil {

		obj.PreEmphasis().validateObj(vObj, set_default)
	}

}

func (obj *portTransmitConfigurationType) setDefault() {

}

// ***** PortPauseConfigurationType *****
type portPauseConfigurationType struct {
	validation
	obj                         *otg.PortPauseConfigurationType
	directedAddressHolder       PFTypeMacAddressType
	multicastPauseAddressHolder PFTypeMacAddressType
}

func NewPortPauseConfigurationType() PortPauseConfigurationType {
	obj := portPauseConfigurationType{obj: &otg.PortPauseConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *portPauseConfigurationType) Msg() *otg.PortPauseConfigurationType {
	return obj.obj
}

func (obj *portPauseConfigurationType) SetMsg(msg *otg.PortPauseConfigurationType) PortPauseConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *portPauseConfigurationType) ToProto() (*otg.PortPauseConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *portPauseConfigurationType) FromProto(msg *otg.PortPauseConfigurationType) (PortPauseConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *portPauseConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *portPauseConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portPauseConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portPauseConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *portPauseConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portPauseConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *portPauseConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *portPauseConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *portPauseConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *portPauseConfigurationType) Clone() (PortPauseConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPortPauseConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *portPauseConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *portPauseConfigurationType) setNil() {
	obj.directedAddressHolder = nil
	obj.multicastPauseAddressHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// PortPauseConfigurationType is tBD
type PortPauseConfigurationType interface {
	Validation
	// Msg marshals PortPauseConfigurationType to protobuf object *otg.PortPauseConfigurationType
	// and doesn't set defaults
	Msg() *otg.PortPauseConfigurationType
	// SetMsg unmarshals PortPauseConfigurationType from protobuf object *otg.PortPauseConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.PortPauseConfigurationType) PortPauseConfigurationType
	// ToProto marshals PortPauseConfigurationType to protobuf object *otg.PortPauseConfigurationType
	ToProto() (*otg.PortPauseConfigurationType, error)
	// ToPbText marshals PortPauseConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PortPauseConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PortPauseConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PortPauseConfigurationType from protobuf object *otg.PortPauseConfigurationType
	FromProto(msg *otg.PortPauseConfigurationType) (PortPauseConfigurationType, error)
	// FromPbText unmarshals PortPauseConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PortPauseConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PortPauseConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates PortPauseConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PortPauseConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// FlowControl returns PortPauseConfigurationTypeFlowControlEnum, set in PortPauseConfigurationType
	FlowControl() PortPauseConfigurationTypeFlowControlEnum
	// SetFlowControl assigns PortPauseConfigurationTypeFlowControlEnum provided by user to PortPauseConfigurationType
	SetFlowControl(value PortPauseConfigurationTypeFlowControlEnum) PortPauseConfigurationType
	// HasFlowControl checks if FlowControl has been set in PortPauseConfigurationType
	HasFlowControl() bool
	// DirectedAddress returns PFTypeMacAddressType, set in PortPauseConfigurationType.
	// PFTypeMacAddressType is the MAC address comprises 48 bits (6 octets) usually denoted using hexadecimal radix as 01:23:45:67:89:ab. The representation is held in the least significant 48 bits of an int64. The most significant 16 bits will be ignored.
	DirectedAddress() PFTypeMacAddressType
	// SetDirectedAddress assigns PFTypeMacAddressType provided by user to PortPauseConfigurationType.
	// PFTypeMacAddressType is the MAC address comprises 48 bits (6 octets) usually denoted using hexadecimal radix as 01:23:45:67:89:ab. The representation is held in the least significant 48 bits of an int64. The most significant 16 bits will be ignored.
	SetDirectedAddress(value PFTypeMacAddressType) PortPauseConfigurationType
	// HasDirectedAddress checks if DirectedAddress has been set in PortPauseConfigurationType
	HasDirectedAddress() bool
	// MulticastPauseAddress returns PFTypeMacAddressType, set in PortPauseConfigurationType.
	// PFTypeMacAddressType is the MAC address comprises 48 bits (6 octets) usually denoted using hexadecimal radix as 01:23:45:67:89:ab. The representation is held in the least significant 48 bits of an int64. The most significant 16 bits will be ignored.
	MulticastPauseAddress() PFTypeMacAddressType
	// SetMulticastPauseAddress assigns PFTypeMacAddressType provided by user to PortPauseConfigurationType.
	// PFTypeMacAddressType is the MAC address comprises 48 bits (6 octets) usually denoted using hexadecimal radix as 01:23:45:67:89:ab. The representation is held in the least significant 48 bits of an int64. The most significant 16 bits will be ignored.
	SetMulticastPauseAddress(value PFTypeMacAddressType) PortPauseConfigurationType
	// HasMulticastPauseAddress checks if MulticastPauseAddress has been set in PortPauseConfigurationType
	HasMulticastPauseAddress() bool
	setNil()
}

func (obj *portPauseConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasFlowControl() {

		member := Member{
			Name:  "flowcontrol",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Port+eFlowControl",
			Value: strconv.FormatInt(int64(obj.obj.FlowControl.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *portPauseConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

type PortPauseConfigurationTypeFlowControlEnum string

// Enum of FlowControl on PortPauseConfigurationType
var PortPauseConfigurationTypeFlowControl = struct {
	KDISABLED    PortPauseConfigurationTypeFlowControlEnum
	KIEEE8023X   PortPauseConfigurationTypeFlowControlEnum
	KIEEE8021QBB PortPauseConfigurationTypeFlowControlEnum
}{
	KDISABLED:    PortPauseConfigurationTypeFlowControlEnum("kDisabled"),
	KIEEE8023X:   PortPauseConfigurationTypeFlowControlEnum("kIEEE8023x"),
	KIEEE8021QBB: PortPauseConfigurationTypeFlowControlEnum("kIEEE8021Qbb"),
}

func (obj *portPauseConfigurationType) FlowControl() PortPauseConfigurationTypeFlowControlEnum {
	return PortPauseConfigurationTypeFlowControlEnum(obj.obj.FlowControl.Enum().String())
}

// TBD
// FlowControl returns a string
func (obj *portPauseConfigurationType) HasFlowControl() bool {
	return obj.obj.FlowControl != nil
}

func (obj *portPauseConfigurationType) SetFlowControl(value PortPauseConfigurationTypeFlowControlEnum) PortPauseConfigurationType {
	intValue, ok := otg.PortPauseConfigurationType_FlowControl_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PortPauseConfigurationTypeFlowControlEnum", string(value)))
		return obj
	}
	enumValue := otg.PortPauseConfigurationType_FlowControl_Enum(intValue)
	obj.obj.FlowControl = &enumValue

	return obj
}

// TBD
// DirectedAddress returns a PFTypeMacAddressType
func (obj *portPauseConfigurationType) DirectedAddress() PFTypeMacAddressType {
	if obj.obj.DirectedAddress == nil {
		obj.obj.DirectedAddress = NewPFTypeMacAddressType().Msg()
	}
	if obj.directedAddressHolder == nil {
		obj.directedAddressHolder = &pFTypeMacAddressType{obj: obj.obj.DirectedAddress}
	}
	return obj.directedAddressHolder
}

// TBD
// DirectedAddress returns a PFTypeMacAddressType
func (obj *portPauseConfigurationType) HasDirectedAddress() bool {
	return obj.obj.DirectedAddress != nil
}

// TBD
// SetDirectedAddress sets the PFTypeMacAddressType value in the PortPauseConfigurationType object
func (obj *portPauseConfigurationType) SetDirectedAddress(value PFTypeMacAddressType) PortPauseConfigurationType {

	obj.directedAddressHolder = nil
	obj.obj.DirectedAddress = value.Msg()

	return obj
}

// TBD
// MulticastPauseAddress returns a PFTypeMacAddressType
func (obj *portPauseConfigurationType) MulticastPauseAddress() PFTypeMacAddressType {
	if obj.obj.MulticastPauseAddress == nil {
		obj.obj.MulticastPauseAddress = NewPFTypeMacAddressType().Msg()
	}
	if obj.multicastPauseAddressHolder == nil {
		obj.multicastPauseAddressHolder = &pFTypeMacAddressType{obj: obj.obj.MulticastPauseAddress}
	}
	return obj.multicastPauseAddressHolder
}

// TBD
// MulticastPauseAddress returns a PFTypeMacAddressType
func (obj *portPauseConfigurationType) HasMulticastPauseAddress() bool {
	return obj.obj.MulticastPauseAddress != nil
}

// TBD
// SetMulticastPauseAddress sets the PFTypeMacAddressType value in the PortPauseConfigurationType object
func (obj *portPauseConfigurationType) SetMulticastPauseAddress(value PFTypeMacAddressType) PortPauseConfigurationType {

	obj.multicastPauseAddressHolder = nil
	obj.obj.MulticastPauseAddress = value.Msg()

	return obj
}

func (obj *portPauseConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.DirectedAddress != nil {

		obj.DirectedAddress().validateObj(vObj, set_default)
	}

	if obj.obj.MulticastPauseAddress != nil {

		obj.MulticastPauseAddress().validateObj(vObj, set_default)
	}

}

func (obj *portPauseConfigurationType) setDefault() {

}

// ***** PortEthernetConfigurationType *****
type portEthernetConfigurationType struct {
	validation
	obj *otg.PortEthernetConfigurationType
}

func NewPortEthernetConfigurationType() PortEthernetConfigurationType {
	obj := portEthernetConfigurationType{obj: &otg.PortEthernetConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *portEthernetConfigurationType) Msg() *otg.PortEthernetConfigurationType {
	return obj.obj
}

func (obj *portEthernetConfigurationType) SetMsg(msg *otg.PortEthernetConfigurationType) PortEthernetConfigurationType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *portEthernetConfigurationType) ToProto() (*otg.PortEthernetConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *portEthernetConfigurationType) FromProto(msg *otg.PortEthernetConfigurationType) (PortEthernetConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *portEthernetConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *portEthernetConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portEthernetConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portEthernetConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *portEthernetConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portEthernetConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *portEthernetConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *portEthernetConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *portEthernetConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *portEthernetConfigurationType) Clone() (PortEthernetConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPortEthernetConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *portEthernetConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// PortEthernetConfigurationType is tBD
type PortEthernetConfigurationType interface {
	Validation
	// Msg marshals PortEthernetConfigurationType to protobuf object *otg.PortEthernetConfigurationType
	// and doesn't set defaults
	Msg() *otg.PortEthernetConfigurationType
	// SetMsg unmarshals PortEthernetConfigurationType from protobuf object *otg.PortEthernetConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.PortEthernetConfigurationType) PortEthernetConfigurationType
	// ToProto marshals PortEthernetConfigurationType to protobuf object *otg.PortEthernetConfigurationType
	ToProto() (*otg.PortEthernetConfigurationType, error)
	// ToPbText marshals PortEthernetConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PortEthernetConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PortEthernetConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PortEthernetConfigurationType from protobuf object *otg.PortEthernetConfigurationType
	FromProto(msg *otg.PortEthernetConfigurationType) (PortEthernetConfigurationType, error)
	// FromPbText unmarshals PortEthernetConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PortEthernetConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PortEthernetConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates PortEthernetConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PortEthernetConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Advertise1000FullDuplex returns bool, set in PortEthernetConfigurationType.
	Advertise1000FullDuplex() bool
	// SetAdvertise1000FullDuplex assigns bool provided by user to PortEthernetConfigurationType
	SetAdvertise1000FullDuplex(value bool) PortEthernetConfigurationType
	// HasAdvertise1000FullDuplex checks if Advertise1000FullDuplex has been set in PortEthernetConfigurationType
	HasAdvertise1000FullDuplex() bool
	// AdvertiseAbilities returns PortEthernetConfigurationTypeAdvertiseAbilitiesEnum, set in PortEthernetConfigurationType
	AdvertiseAbilities() PortEthernetConfigurationTypeAdvertiseAbilitiesEnum
	// SetAdvertiseAbilities assigns PortEthernetConfigurationTypeAdvertiseAbilitiesEnum provided by user to PortEthernetConfigurationType
	SetAdvertiseAbilities(value PortEthernetConfigurationTypeAdvertiseAbilitiesEnum) PortEthernetConfigurationType
	// HasAdvertiseAbilities checks if AdvertiseAbilities has been set in PortEthernetConfigurationType
	HasAdvertiseAbilities() bool
	// RxTxMode returns PortEthernetConfigurationTypeRxTxModeEnum, set in PortEthernetConfigurationType
	RxTxMode() PortEthernetConfigurationTypeRxTxModeEnum
	// SetRxTxMode assigns PortEthernetConfigurationTypeRxTxModeEnum provided by user to PortEthernetConfigurationType
	SetRxTxMode(value PortEthernetConfigurationTypeRxTxModeEnum) PortEthernetConfigurationType
	// HasRxTxMode checks if RxTxMode has been set in PortEthernetConfigurationType
	HasRxTxMode() bool
	// PrimarySecondary returns PortEthernetConfigurationTypePrimarySecondaryEnum, set in PortEthernetConfigurationType
	PrimarySecondary() PortEthernetConfigurationTypePrimarySecondaryEnum
	// SetPrimarySecondary assigns PortEthernetConfigurationTypePrimarySecondaryEnum provided by user to PortEthernetConfigurationType
	SetPrimarySecondary(value PortEthernetConfigurationTypePrimarySecondaryEnum) PortEthernetConfigurationType
	// HasPrimarySecondary checks if PrimarySecondary has been set in PortEthernetConfigurationType
	HasPrimarySecondary() bool
	// PrimarySecondaryTimeoutEnable returns bool, set in PortEthernetConfigurationType.
	PrimarySecondaryTimeoutEnable() bool
	// SetPrimarySecondaryTimeoutEnable assigns bool provided by user to PortEthernetConfigurationType
	SetPrimarySecondaryTimeoutEnable(value bool) PortEthernetConfigurationType
	// HasPrimarySecondaryTimeoutEnable checks if PrimarySecondaryTimeoutEnable has been set in PortEthernetConfigurationType
	HasPrimarySecondaryTimeoutEnable() bool
	// PmaClock returns PortEthernetConfigurationTypePmaClockEnum, set in PortEthernetConfigurationType
	PmaClock() PortEthernetConfigurationTypePmaClockEnum
	// SetPmaClock assigns PortEthernetConfigurationTypePmaClockEnum provided by user to PortEthernetConfigurationType
	SetPmaClock(value PortEthernetConfigurationTypePmaClockEnum) PortEthernetConfigurationType
	// HasPmaClock checks if PmaClock has been set in PortEthernetConfigurationType
	HasPmaClock() bool
	// EnableManualAutoNegotiate returns bool, set in PortEthernetConfigurationType.
	EnableManualAutoNegotiate() bool
	// SetEnableManualAutoNegotiate assigns bool provided by user to PortEthernetConfigurationType
	SetEnableManualAutoNegotiate(value bool) PortEthernetConfigurationType
	// HasEnableManualAutoNegotiate checks if EnableManualAutoNegotiate has been set in PortEthernetConfigurationType
	HasEnableManualAutoNegotiate() bool
	// EnablePhyPolling returns bool, set in PortEthernetConfigurationType.
	EnablePhyPolling() bool
	// SetEnablePhyPolling assigns bool provided by user to PortEthernetConfigurationType
	SetEnablePhyPolling(value bool) PortEthernetConfigurationType
	// HasEnablePhyPolling checks if EnablePhyPolling has been set in PortEthernetConfigurationType
	HasEnablePhyPolling() bool
}

func (obj *portEthernetConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasAdvertise1000FullDuplex() {
		var value string
		if obj.Advertise1000FullDuplex() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "advertise1000fullduplex",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasAdvertiseAbilities() {

		member := Member{
			Name:  "advertiseabilities",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Port+eAdvertiseAbilities",
			Value: strconv.FormatInt(int64(obj.obj.AdvertiseAbilities.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasRxTxMode() {

		member := Member{
			Name:  "rxtxmode",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Port+eRxTxMode",
			Value: strconv.FormatInt(int64(obj.obj.RxTxMode.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasPrimarySecondary() {

		member := Member{
			Name:  "primarysecondary",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Port+ePrimarySecondary",
			Value: strconv.FormatInt(int64(obj.obj.PrimarySecondary.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasPrimarySecondaryTimeoutEnable() {
		var value string
		if obj.PrimarySecondaryTimeoutEnable() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "primarysecondarytimeoutenable",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasPmaClock() {

		member := Member{
			Name:  "pmaclock",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Port+ePmaClock",
			Value: strconv.FormatInt(int64(obj.obj.PmaClock.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableManualAutoNegotiate() {
		var value string
		if obj.EnableManualAutoNegotiate() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablemanualautonegotiate",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnablePhyPolling() {
		var value string
		if obj.EnablePhyPolling() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablephypolling",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *portEthernetConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Advertise1000FullDuplex returns a bool
func (obj *portEthernetConfigurationType) Advertise1000FullDuplex() bool {

	return *obj.obj.Advertise1000FullDuplex

}

// TBD
// Advertise1000FullDuplex returns a bool
func (obj *portEthernetConfigurationType) HasAdvertise1000FullDuplex() bool {
	return obj.obj.Advertise1000FullDuplex != nil
}

// TBD
// SetAdvertise1000FullDuplex sets the bool value in the PortEthernetConfigurationType object
func (obj *portEthernetConfigurationType) SetAdvertise1000FullDuplex(value bool) PortEthernetConfigurationType {

	obj.obj.Advertise1000FullDuplex = &value
	return obj
}

type PortEthernetConfigurationTypeAdvertiseAbilitiesEnum string

// Enum of AdvertiseAbilities on PortEthernetConfigurationType
var PortEthernetConfigurationTypeAdvertiseAbilities = struct {
	KNONE             PortEthernetConfigurationTypeAdvertiseAbilitiesEnum
	KSEND             PortEthernetConfigurationTypeAdvertiseAbilitiesEnum
	KSENDANDRECEIVE   PortEthernetConfigurationTypeAdvertiseAbilitiesEnum
	KSENDANDORRECEIVE PortEthernetConfigurationTypeAdvertiseAbilitiesEnum
}{
	KNONE:             PortEthernetConfigurationTypeAdvertiseAbilitiesEnum("kNone"),
	KSEND:             PortEthernetConfigurationTypeAdvertiseAbilitiesEnum("kSend"),
	KSENDANDRECEIVE:   PortEthernetConfigurationTypeAdvertiseAbilitiesEnum("kSendAndReceive"),
	KSENDANDORRECEIVE: PortEthernetConfigurationTypeAdvertiseAbilitiesEnum("kSendAndOrReceive"),
}

func (obj *portEthernetConfigurationType) AdvertiseAbilities() PortEthernetConfigurationTypeAdvertiseAbilitiesEnum {
	return PortEthernetConfigurationTypeAdvertiseAbilitiesEnum(obj.obj.AdvertiseAbilities.Enum().String())
}

// TBD
// AdvertiseAbilities returns a string
func (obj *portEthernetConfigurationType) HasAdvertiseAbilities() bool {
	return obj.obj.AdvertiseAbilities != nil
}

func (obj *portEthernetConfigurationType) SetAdvertiseAbilities(value PortEthernetConfigurationTypeAdvertiseAbilitiesEnum) PortEthernetConfigurationType {
	intValue, ok := otg.PortEthernetConfigurationType_AdvertiseAbilities_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PortEthernetConfigurationTypeAdvertiseAbilitiesEnum", string(value)))
		return obj
	}
	enumValue := otg.PortEthernetConfigurationType_AdvertiseAbilities_Enum(intValue)
	obj.obj.AdvertiseAbilities = &enumValue

	return obj
}

type PortEthernetConfigurationTypeRxTxModeEnum string

// Enum of RxTxMode on PortEthernetConfigurationType
var PortEthernetConfigurationTypeRxTxMode = struct {
	KGIGNORMAL          PortEthernetConfigurationTypeRxTxModeEnum
	KGIGLOOPBACK        PortEthernetConfigurationTypeRxTxModeEnum
	KGIGCABLEDISCONNECT PortEthernetConfigurationTypeRxTxModeEnum
}{
	KGIGNORMAL:          PortEthernetConfigurationTypeRxTxModeEnum("kGigNormal"),
	KGIGLOOPBACK:        PortEthernetConfigurationTypeRxTxModeEnum("kGigLoopback"),
	KGIGCABLEDISCONNECT: PortEthernetConfigurationTypeRxTxModeEnum("kGigCableDisconnect"),
}

func (obj *portEthernetConfigurationType) RxTxMode() PortEthernetConfigurationTypeRxTxModeEnum {
	return PortEthernetConfigurationTypeRxTxModeEnum(obj.obj.RxTxMode.Enum().String())
}

// TBD
// RxTxMode returns a string
func (obj *portEthernetConfigurationType) HasRxTxMode() bool {
	return obj.obj.RxTxMode != nil
}

func (obj *portEthernetConfigurationType) SetRxTxMode(value PortEthernetConfigurationTypeRxTxModeEnum) PortEthernetConfigurationType {
	intValue, ok := otg.PortEthernetConfigurationType_RxTxMode_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PortEthernetConfigurationTypeRxTxModeEnum", string(value)))
		return obj
	}
	enumValue := otg.PortEthernetConfigurationType_RxTxMode_Enum(intValue)
	obj.obj.RxTxMode = &enumValue

	return obj
}

type PortEthernetConfigurationTypePrimarySecondaryEnum string

// Enum of PrimarySecondary on PortEthernetConfigurationType
var PortEthernetConfigurationTypePrimarySecondary = struct {
	KNEGOTIATEEITHER        PortEthernetConfigurationTypePrimarySecondaryEnum
	KNEGOTIATEPORTPRIMARY   PortEthernetConfigurationTypePrimarySecondaryEnum
	KNEGOTIATEPORTSECONDARY PortEthernetConfigurationTypePrimarySecondaryEnum
}{
	KNEGOTIATEEITHER:        PortEthernetConfigurationTypePrimarySecondaryEnum("kNegotiateEither"),
	KNEGOTIATEPORTPRIMARY:   PortEthernetConfigurationTypePrimarySecondaryEnum("kNegotiatePortPrimary"),
	KNEGOTIATEPORTSECONDARY: PortEthernetConfigurationTypePrimarySecondaryEnum("kNegotiatePortSecondary"),
}

func (obj *portEthernetConfigurationType) PrimarySecondary() PortEthernetConfigurationTypePrimarySecondaryEnum {
	return PortEthernetConfigurationTypePrimarySecondaryEnum(obj.obj.PrimarySecondary.Enum().String())
}

// TBD
// PrimarySecondary returns a string
func (obj *portEthernetConfigurationType) HasPrimarySecondary() bool {
	return obj.obj.PrimarySecondary != nil
}

func (obj *portEthernetConfigurationType) SetPrimarySecondary(value PortEthernetConfigurationTypePrimarySecondaryEnum) PortEthernetConfigurationType {
	intValue, ok := otg.PortEthernetConfigurationType_PrimarySecondary_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PortEthernetConfigurationTypePrimarySecondaryEnum", string(value)))
		return obj
	}
	enumValue := otg.PortEthernetConfigurationType_PrimarySecondary_Enum(intValue)
	obj.obj.PrimarySecondary = &enumValue

	return obj
}

// TBD
// PrimarySecondaryTimeoutEnable returns a bool
func (obj *portEthernetConfigurationType) PrimarySecondaryTimeoutEnable() bool {

	return *obj.obj.PrimarySecondaryTimeoutEnable

}

// TBD
// PrimarySecondaryTimeoutEnable returns a bool
func (obj *portEthernetConfigurationType) HasPrimarySecondaryTimeoutEnable() bool {
	return obj.obj.PrimarySecondaryTimeoutEnable != nil
}

// TBD
// SetPrimarySecondaryTimeoutEnable sets the bool value in the PortEthernetConfigurationType object
func (obj *portEthernetConfigurationType) SetPrimarySecondaryTimeoutEnable(value bool) PortEthernetConfigurationType {

	obj.obj.PrimarySecondaryTimeoutEnable = &value
	return obj
}

type PortEthernetConfigurationTypePmaClockEnum string

// Enum of PmaClock on PortEthernetConfigurationType
var PortEthernetConfigurationTypePmaClock = struct {
	KAUTONEGOTIATE PortEthernetConfigurationTypePmaClockEnum
	KPRIMARY       PortEthernetConfigurationTypePmaClockEnum
	KSECONDARY     PortEthernetConfigurationTypePmaClockEnum
}{
	KAUTONEGOTIATE: PortEthernetConfigurationTypePmaClockEnum("kAutoNegotiate"),
	KPRIMARY:       PortEthernetConfigurationTypePmaClockEnum("kPrimary"),
	KSECONDARY:     PortEthernetConfigurationTypePmaClockEnum("kSecondary"),
}

func (obj *portEthernetConfigurationType) PmaClock() PortEthernetConfigurationTypePmaClockEnum {
	return PortEthernetConfigurationTypePmaClockEnum(obj.obj.PmaClock.Enum().String())
}

// TBD
// PmaClock returns a string
func (obj *portEthernetConfigurationType) HasPmaClock() bool {
	return obj.obj.PmaClock != nil
}

func (obj *portEthernetConfigurationType) SetPmaClock(value PortEthernetConfigurationTypePmaClockEnum) PortEthernetConfigurationType {
	intValue, ok := otg.PortEthernetConfigurationType_PmaClock_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PortEthernetConfigurationTypePmaClockEnum", string(value)))
		return obj
	}
	enumValue := otg.PortEthernetConfigurationType_PmaClock_Enum(intValue)
	obj.obj.PmaClock = &enumValue

	return obj
}

// TBD
// EnableManualAutoNegotiate returns a bool
func (obj *portEthernetConfigurationType) EnableManualAutoNegotiate() bool {

	return *obj.obj.EnableManualAutoNegotiate

}

// TBD
// EnableManualAutoNegotiate returns a bool
func (obj *portEthernetConfigurationType) HasEnableManualAutoNegotiate() bool {
	return obj.obj.EnableManualAutoNegotiate != nil
}

// TBD
// SetEnableManualAutoNegotiate sets the bool value in the PortEthernetConfigurationType object
func (obj *portEthernetConfigurationType) SetEnableManualAutoNegotiate(value bool) PortEthernetConfigurationType {

	obj.obj.EnableManualAutoNegotiate = &value
	return obj
}

// TBD
// EnablePhyPolling returns a bool
func (obj *portEthernetConfigurationType) EnablePhyPolling() bool {

	return *obj.obj.EnablePhyPolling

}

// TBD
// EnablePhyPolling returns a bool
func (obj *portEthernetConfigurationType) HasEnablePhyPolling() bool {
	return obj.obj.EnablePhyPolling != nil
}

// TBD
// SetEnablePhyPolling sets the bool value in the PortEthernetConfigurationType object
func (obj *portEthernetConfigurationType) SetEnablePhyPolling(value bool) PortEthernetConfigurationType {

	obj.obj.EnablePhyPolling = &value
	return obj
}

func (obj *portEthernetConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *portEthernetConfigurationType) setDefault() {

}

// ***** PortDataCenterConfigurationType *****
type portDataCenterConfigurationType struct {
	validation
	obj *otg.PortDataCenterConfigurationType
}

func NewPortDataCenterConfigurationType() PortDataCenterConfigurationType {
	obj := portDataCenterConfigurationType{obj: &otg.PortDataCenterConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *portDataCenterConfigurationType) Msg() *otg.PortDataCenterConfigurationType {
	return obj.obj
}

func (obj *portDataCenterConfigurationType) SetMsg(msg *otg.PortDataCenterConfigurationType) PortDataCenterConfigurationType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *portDataCenterConfigurationType) ToProto() (*otg.PortDataCenterConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *portDataCenterConfigurationType) FromProto(msg *otg.PortDataCenterConfigurationType) (PortDataCenterConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *portDataCenterConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *portDataCenterConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portDataCenterConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portDataCenterConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *portDataCenterConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portDataCenterConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *portDataCenterConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *portDataCenterConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *portDataCenterConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *portDataCenterConfigurationType) Clone() (PortDataCenterConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPortDataCenterConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *portDataCenterConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// PortDataCenterConfigurationType is tBD
type PortDataCenterConfigurationType interface {
	Validation
	// Msg marshals PortDataCenterConfigurationType to protobuf object *otg.PortDataCenterConfigurationType
	// and doesn't set defaults
	Msg() *otg.PortDataCenterConfigurationType
	// SetMsg unmarshals PortDataCenterConfigurationType from protobuf object *otg.PortDataCenterConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.PortDataCenterConfigurationType) PortDataCenterConfigurationType
	// ToProto marshals PortDataCenterConfigurationType to protobuf object *otg.PortDataCenterConfigurationType
	ToProto() (*otg.PortDataCenterConfigurationType, error)
	// ToPbText marshals PortDataCenterConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PortDataCenterConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PortDataCenterConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PortDataCenterConfigurationType from protobuf object *otg.PortDataCenterConfigurationType
	FromProto(msg *otg.PortDataCenterConfigurationType) (PortDataCenterConfigurationType, error)
	// FromPbText unmarshals PortDataCenterConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PortDataCenterConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PortDataCenterConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates PortDataCenterConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PortDataCenterConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// DataCenterMode returns PortDataCenterConfigurationTypeDataCenterModeEnum, set in PortDataCenterConfigurationType
	DataCenterMode() PortDataCenterConfigurationTypeDataCenterModeEnum
	// SetDataCenterMode assigns PortDataCenterConfigurationTypeDataCenterModeEnum provided by user to PortDataCenterConfigurationType
	SetDataCenterMode(value PortDataCenterConfigurationTypeDataCenterModeEnum) PortDataCenterConfigurationType
	// HasDataCenterMode checks if DataCenterMode has been set in PortDataCenterConfigurationType
	HasDataCenterMode() bool
}

func (obj *portDataCenterConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasDataCenterMode() {

		member := Member{
			Name:  "datacentermode",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Port+eDataCenterMode",
			Value: strconv.FormatInt(int64(obj.obj.DataCenterMode.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *portDataCenterConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

type PortDataCenterConfigurationTypeDataCenterModeEnum string

// Enum of DataCenterMode on PortDataCenterConfigurationType
var PortDataCenterConfigurationTypeDataCenterMode = struct {
	KNOMAPPING            PortDataCenterConfigurationTypeDataCenterModeEnum
	KONEPRIORITYMAPPING   PortDataCenterConfigurationTypeDataCenterModeEnum
	KTWOPRIORITYMAPPING   PortDataCenterConfigurationTypeDataCenterModeEnum
	KFOURPRIORITYMAPPING  PortDataCenterConfigurationTypeDataCenterModeEnum
	KEIGHTPRIORITYMAPPING PortDataCenterConfigurationTypeDataCenterModeEnum
}{
	KNOMAPPING:            PortDataCenterConfigurationTypeDataCenterModeEnum("kNoMapping"),
	KONEPRIORITYMAPPING:   PortDataCenterConfigurationTypeDataCenterModeEnum("kOnePriorityMapping"),
	KTWOPRIORITYMAPPING:   PortDataCenterConfigurationTypeDataCenterModeEnum("kTwoPriorityMapping"),
	KFOURPRIORITYMAPPING:  PortDataCenterConfigurationTypeDataCenterModeEnum("kFourPriorityMapping"),
	KEIGHTPRIORITYMAPPING: PortDataCenterConfigurationTypeDataCenterModeEnum("kEightPriorityMapping"),
}

func (obj *portDataCenterConfigurationType) DataCenterMode() PortDataCenterConfigurationTypeDataCenterModeEnum {
	return PortDataCenterConfigurationTypeDataCenterModeEnum(obj.obj.DataCenterMode.Enum().String())
}

// TBD
// DataCenterMode returns a string
func (obj *portDataCenterConfigurationType) HasDataCenterMode() bool {
	return obj.obj.DataCenterMode != nil
}

func (obj *portDataCenterConfigurationType) SetDataCenterMode(value PortDataCenterConfigurationTypeDataCenterModeEnum) PortDataCenterConfigurationType {
	intValue, ok := otg.PortDataCenterConfigurationType_DataCenterMode_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PortDataCenterConfigurationTypeDataCenterModeEnum", string(value)))
		return obj
	}
	enumValue := otg.PortDataCenterConfigurationType_DataCenterMode_Enum(intValue)
	obj.obj.DataCenterMode = &enumValue

	return obj
}

func (obj *portDataCenterConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *portDataCenterConfigurationType) setDefault() {

}

// ***** PortPfcConfigurationType *****
type portPfcConfigurationType struct {
	validation
	obj                    *otg.PortPfcConfigurationType
	priorityQueueMapHolder PortPfcPriorityQueueMapType
}

func NewPortPfcConfigurationType() PortPfcConfigurationType {
	obj := portPfcConfigurationType{obj: &otg.PortPfcConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *portPfcConfigurationType) Msg() *otg.PortPfcConfigurationType {
	return obj.obj
}

func (obj *portPfcConfigurationType) SetMsg(msg *otg.PortPfcConfigurationType) PortPfcConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *portPfcConfigurationType) ToProto() (*otg.PortPfcConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *portPfcConfigurationType) FromProto(msg *otg.PortPfcConfigurationType) (PortPfcConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *portPfcConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *portPfcConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portPfcConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portPfcConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *portPfcConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portPfcConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *portPfcConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *portPfcConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *portPfcConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *portPfcConfigurationType) Clone() (PortPfcConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPortPfcConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *portPfcConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *portPfcConfigurationType) setNil() {
	obj.priorityQueueMapHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// PortPfcConfigurationType is tBD
type PortPfcConfigurationType interface {
	Validation
	// Msg marshals PortPfcConfigurationType to protobuf object *otg.PortPfcConfigurationType
	// and doesn't set defaults
	Msg() *otg.PortPfcConfigurationType
	// SetMsg unmarshals PortPfcConfigurationType from protobuf object *otg.PortPfcConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.PortPfcConfigurationType) PortPfcConfigurationType
	// ToProto marshals PortPfcConfigurationType to protobuf object *otg.PortPfcConfigurationType
	ToProto() (*otg.PortPfcConfigurationType, error)
	// ToPbText marshals PortPfcConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PortPfcConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PortPfcConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PortPfcConfigurationType from protobuf object *otg.PortPfcConfigurationType
	FromProto(msg *otg.PortPfcConfigurationType) (PortPfcConfigurationType, error)
	// FromPbText unmarshals PortPfcConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PortPfcConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PortPfcConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates PortPfcConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PortPfcConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// PriorityQueueMap returns PortPfcPriorityQueueMapType, set in PortPfcConfigurationType.
	// PortPfcPriorityQueueMapType is tBD
	PriorityQueueMap() PortPfcPriorityQueueMapType
	// SetPriorityQueueMap assigns PortPfcPriorityQueueMapType provided by user to PortPfcConfigurationType.
	// PortPfcPriorityQueueMapType is tBD
	SetPriorityQueueMap(value PortPfcPriorityQueueMapType) PortPfcConfigurationType
	// HasPriorityQueueMap checks if PriorityQueueMap has been set in PortPfcConfigurationType
	HasPriorityQueueMap() bool
	// ResponseDelayQuanta returns int32, set in PortPfcConfigurationType.
	ResponseDelayQuanta() int32
	// SetResponseDelayQuanta assigns int32 provided by user to PortPfcConfigurationType
	SetResponseDelayQuanta(value int32) PortPfcConfigurationType
	// HasResponseDelayQuanta checks if ResponseDelayQuanta has been set in PortPfcConfigurationType
	HasResponseDelayQuanta() bool
	setNil()
}

func (obj *portPfcConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasResponseDelayQuanta() {

		member := Member{
			Name:  "responsedelayquanta",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.ResponseDelayQuanta()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *portPfcConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// PriorityQueueMap returns a PortPfcPriorityQueueMapType
func (obj *portPfcConfigurationType) PriorityQueueMap() PortPfcPriorityQueueMapType {
	if obj.obj.PriorityQueueMap == nil {
		obj.obj.PriorityQueueMap = NewPortPfcPriorityQueueMapType().Msg()
	}
	if obj.priorityQueueMapHolder == nil {
		obj.priorityQueueMapHolder = &portPfcPriorityQueueMapType{obj: obj.obj.PriorityQueueMap}
	}
	return obj.priorityQueueMapHolder
}

// TBD
// PriorityQueueMap returns a PortPfcPriorityQueueMapType
func (obj *portPfcConfigurationType) HasPriorityQueueMap() bool {
	return obj.obj.PriorityQueueMap != nil
}

// TBD
// SetPriorityQueueMap sets the PortPfcPriorityQueueMapType value in the PortPfcConfigurationType object
func (obj *portPfcConfigurationType) SetPriorityQueueMap(value PortPfcPriorityQueueMapType) PortPfcConfigurationType {

	obj.priorityQueueMapHolder = nil
	obj.obj.PriorityQueueMap = value.Msg()

	return obj
}

// Configure the PFC response delay. Set to -1 to disable.
// ResponseDelayQuanta returns a int32
func (obj *portPfcConfigurationType) ResponseDelayQuanta() int32 {

	return *obj.obj.ResponseDelayQuanta

}

// Configure the PFC response delay. Set to -1 to disable.
// ResponseDelayQuanta returns a int32
func (obj *portPfcConfigurationType) HasResponseDelayQuanta() bool {
	return obj.obj.ResponseDelayQuanta != nil
}

// Configure the PFC response delay. Set to -1 to disable.
// SetResponseDelayQuanta sets the int32 value in the PortPfcConfigurationType object
func (obj *portPfcConfigurationType) SetResponseDelayQuanta(value int32) PortPfcConfigurationType {

	obj.obj.ResponseDelayQuanta = &value
	return obj
}

func (obj *portPfcConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PriorityQueueMap != nil {

		obj.PriorityQueueMap().validateObj(vObj, set_default)
	}

}

func (obj *portPfcConfigurationType) setDefault() {

}

// ***** PortTxLaneConfigurationType *****
type portTxLaneConfigurationType struct {
	validation
	obj                 *otg.PortTxLaneConfigurationType
	txLaneMappingHolder PortTxLaneMappingType
}

func NewPortTxLaneConfigurationType() PortTxLaneConfigurationType {
	obj := portTxLaneConfigurationType{obj: &otg.PortTxLaneConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *portTxLaneConfigurationType) Msg() *otg.PortTxLaneConfigurationType {
	return obj.obj
}

func (obj *portTxLaneConfigurationType) SetMsg(msg *otg.PortTxLaneConfigurationType) PortTxLaneConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *portTxLaneConfigurationType) ToProto() (*otg.PortTxLaneConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *portTxLaneConfigurationType) FromProto(msg *otg.PortTxLaneConfigurationType) (PortTxLaneConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *portTxLaneConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *portTxLaneConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portTxLaneConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portTxLaneConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *portTxLaneConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portTxLaneConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *portTxLaneConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *portTxLaneConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *portTxLaneConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *portTxLaneConfigurationType) Clone() (PortTxLaneConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPortTxLaneConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *portTxLaneConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *portTxLaneConfigurationType) setNil() {
	obj.txLaneMappingHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// PortTxLaneConfigurationType is tBD
type PortTxLaneConfigurationType interface {
	Validation
	// Msg marshals PortTxLaneConfigurationType to protobuf object *otg.PortTxLaneConfigurationType
	// and doesn't set defaults
	Msg() *otg.PortTxLaneConfigurationType
	// SetMsg unmarshals PortTxLaneConfigurationType from protobuf object *otg.PortTxLaneConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.PortTxLaneConfigurationType) PortTxLaneConfigurationType
	// ToProto marshals PortTxLaneConfigurationType to protobuf object *otg.PortTxLaneConfigurationType
	ToProto() (*otg.PortTxLaneConfigurationType, error)
	// ToPbText marshals PortTxLaneConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PortTxLaneConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PortTxLaneConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PortTxLaneConfigurationType from protobuf object *otg.PortTxLaneConfigurationType
	FromProto(msg *otg.PortTxLaneConfigurationType) (PortTxLaneConfigurationType, error)
	// FromPbText unmarshals PortTxLaneConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PortTxLaneConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PortTxLaneConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates PortTxLaneConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PortTxLaneConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// TxLaneMapping returns PortTxLaneMappingType, set in PortTxLaneConfigurationType.
	// PortTxLaneMappingType is tBD
	TxLaneMapping() PortTxLaneMappingType
	// SetTxLaneMapping assigns PortTxLaneMappingType provided by user to PortTxLaneConfigurationType.
	// PortTxLaneMappingType is tBD
	SetTxLaneMapping(value PortTxLaneMappingType) PortTxLaneConfigurationType
	// HasTxLaneMapping checks if TxLaneMapping has been set in PortTxLaneConfigurationType
	HasTxLaneMapping() bool
	setNil()
}

func (obj *portTxLaneConfigurationType) populateXml(xObj *Argument) error {

	return nil
}

func (obj *portTxLaneConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// TxLaneMapping returns a PortTxLaneMappingType
func (obj *portTxLaneConfigurationType) TxLaneMapping() PortTxLaneMappingType {
	if obj.obj.TxLaneMapping == nil {
		obj.obj.TxLaneMapping = NewPortTxLaneMappingType().Msg()
	}
	if obj.txLaneMappingHolder == nil {
		obj.txLaneMappingHolder = &portTxLaneMappingType{obj: obj.obj.TxLaneMapping}
	}
	return obj.txLaneMappingHolder
}

// TBD
// TxLaneMapping returns a PortTxLaneMappingType
func (obj *portTxLaneConfigurationType) HasTxLaneMapping() bool {
	return obj.obj.TxLaneMapping != nil
}

// TBD
// SetTxLaneMapping sets the PortTxLaneMappingType value in the PortTxLaneConfigurationType object
func (obj *portTxLaneConfigurationType) SetTxLaneMapping(value PortTxLaneMappingType) PortTxLaneConfigurationType {

	obj.txLaneMappingHolder = nil
	obj.obj.TxLaneMapping = value.Msg()

	return obj
}

func (obj *portTxLaneConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.TxLaneMapping != nil {

		obj.TxLaneMapping().validateObj(vObj, set_default)
	}

}

func (obj *portTxLaneConfigurationType) setDefault() {

}

// ***** CaptureConfigurationType *****
type captureConfigurationType struct {
	validation
	obj               *otg.CaptureConfigurationType
	settingsHolder    CaptureSettingsType
	patternsHolder    CapturePatternList
	expressionsHolder CaptureExpressionList
}

func NewCaptureConfigurationType() CaptureConfigurationType {
	obj := captureConfigurationType{obj: &otg.CaptureConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *captureConfigurationType) Msg() *otg.CaptureConfigurationType {
	return obj.obj
}

func (obj *captureConfigurationType) SetMsg(msg *otg.CaptureConfigurationType) CaptureConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *captureConfigurationType) ToProto() (*otg.CaptureConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *captureConfigurationType) FromProto(msg *otg.CaptureConfigurationType) (CaptureConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *captureConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *captureConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *captureConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *captureConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *captureConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *captureConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *captureConfigurationType) Clone() (CaptureConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewCaptureConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *captureConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *captureConfigurationType) setNil() {
	obj.settingsHolder = nil
	obj.patternsHolder = nil
	obj.expressionsHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// CaptureConfigurationType is tBD
type CaptureConfigurationType interface {
	Validation
	// Msg marshals CaptureConfigurationType to protobuf object *otg.CaptureConfigurationType
	// and doesn't set defaults
	Msg() *otg.CaptureConfigurationType
	// SetMsg unmarshals CaptureConfigurationType from protobuf object *otg.CaptureConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.CaptureConfigurationType) CaptureConfigurationType
	// ToProto marshals CaptureConfigurationType to protobuf object *otg.CaptureConfigurationType
	ToProto() (*otg.CaptureConfigurationType, error)
	// ToPbText marshals CaptureConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals CaptureConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals CaptureConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals CaptureConfigurationType from protobuf object *otg.CaptureConfigurationType
	FromProto(msg *otg.CaptureConfigurationType) (CaptureConfigurationType, error)
	// FromPbText unmarshals CaptureConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals CaptureConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals CaptureConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates CaptureConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (CaptureConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Direction returns CaptureConfigurationTypeDirectionEnum, set in CaptureConfigurationType
	Direction() CaptureConfigurationTypeDirectionEnum
	// SetDirection assigns CaptureConfigurationTypeDirectionEnum provided by user to CaptureConfigurationType
	SetDirection(value CaptureConfigurationTypeDirectionEnum) CaptureConfigurationType
	// HasDirection checks if Direction has been set in CaptureConfigurationType
	HasDirection() bool
	// Settings returns CaptureSettingsType, set in CaptureConfigurationType.
	// CaptureSettingsType is tBD
	Settings() CaptureSettingsType
	// SetSettings assigns CaptureSettingsType provided by user to CaptureConfigurationType.
	// CaptureSettingsType is tBD
	SetSettings(value CaptureSettingsType) CaptureConfigurationType
	// HasSettings checks if Settings has been set in CaptureConfigurationType
	HasSettings() bool
	// Patterns returns CapturePatternList, set in CaptureConfigurationType.
	// CapturePatternList is tBD
	Patterns() CapturePatternList
	// SetPatterns assigns CapturePatternList provided by user to CaptureConfigurationType.
	// CapturePatternList is tBD
	SetPatterns(value CapturePatternList) CaptureConfigurationType
	// HasPatterns checks if Patterns has been set in CaptureConfigurationType
	HasPatterns() bool
	// Expressions returns CaptureExpressionList, set in CaptureConfigurationType.
	// CaptureExpressionList is tBD
	Expressions() CaptureExpressionList
	// SetExpressions assigns CaptureExpressionList provided by user to CaptureConfigurationType.
	// CaptureExpressionList is tBD
	SetExpressions(value CaptureExpressionList) CaptureConfigurationType
	// HasExpressions checks if Expressions has been set in CaptureConfigurationType
	HasExpressions() bool
	// Rxsharedstat1 returns CaptureConfigurationTypeRxsharedstat1Enum, set in CaptureConfigurationType
	Rxsharedstat1() CaptureConfigurationTypeRxsharedstat1Enum
	// SetRxsharedstat1 assigns CaptureConfigurationTypeRxsharedstat1Enum provided by user to CaptureConfigurationType
	SetRxsharedstat1(value CaptureConfigurationTypeRxsharedstat1Enum) CaptureConfigurationType
	// HasRxsharedstat1 checks if Rxsharedstat1 has been set in CaptureConfigurationType
	HasRxsharedstat1() bool
	// Rxsharedstat2 returns CaptureConfigurationTypeRxsharedstat2Enum, set in CaptureConfigurationType
	Rxsharedstat2() CaptureConfigurationTypeRxsharedstat2Enum
	// SetRxsharedstat2 assigns CaptureConfigurationTypeRxsharedstat2Enum provided by user to CaptureConfigurationType
	SetRxsharedstat2(value CaptureConfigurationTypeRxsharedstat2Enum) CaptureConfigurationType
	// HasRxsharedstat2 checks if Rxsharedstat2 has been set in CaptureConfigurationType
	HasRxsharedstat2() bool
	setNil()
}

func (obj *captureConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasDirection() {

		member := Member{
			Name:  "direction",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Capture+eDirection",
			Value: strconv.FormatInt(int64(obj.obj.Direction.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasRxsharedstat1() {

		member := Member{
			Name:  "rxsharedstat1",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Capture+eRXSharedStats",
			Value: strconv.FormatInt(int64(obj.obj.Rxsharedstat1.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasRxsharedstat2() {

		member := Member{
			Name:  "rxsharedstat2",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Capture+eRXSharedStats",
			Value: strconv.FormatInt(int64(obj.obj.Rxsharedstat2.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *captureConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

type CaptureConfigurationTypeDirectionEnum string

// Enum of Direction on CaptureConfigurationType
var CaptureConfigurationTypeDirection = struct {
	KRX            CaptureConfigurationTypeDirectionEnum
	KTX            CaptureConfigurationTypeDirectionEnum
	KBIDIRECTIONAL CaptureConfigurationTypeDirectionEnum
}{
	KRX:            CaptureConfigurationTypeDirectionEnum("kRx"),
	KTX:            CaptureConfigurationTypeDirectionEnum("kTx"),
	KBIDIRECTIONAL: CaptureConfigurationTypeDirectionEnum("kBidirectional"),
}

func (obj *captureConfigurationType) Direction() CaptureConfigurationTypeDirectionEnum {
	return CaptureConfigurationTypeDirectionEnum(obj.obj.Direction.Enum().String())
}

// TBD
// Direction returns a string
func (obj *captureConfigurationType) HasDirection() bool {
	return obj.obj.Direction != nil
}

func (obj *captureConfigurationType) SetDirection(value CaptureConfigurationTypeDirectionEnum) CaptureConfigurationType {
	intValue, ok := otg.CaptureConfigurationType_Direction_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on CaptureConfigurationTypeDirectionEnum", string(value)))
		return obj
	}
	enumValue := otg.CaptureConfigurationType_Direction_Enum(intValue)
	obj.obj.Direction = &enumValue

	return obj
}

// TBD
// Settings returns a CaptureSettingsType
func (obj *captureConfigurationType) Settings() CaptureSettingsType {
	if obj.obj.Settings == nil {
		obj.obj.Settings = NewCaptureSettingsType().Msg()
	}
	if obj.settingsHolder == nil {
		obj.settingsHolder = &captureSettingsType{obj: obj.obj.Settings}
	}
	return obj.settingsHolder
}

// TBD
// Settings returns a CaptureSettingsType
func (obj *captureConfigurationType) HasSettings() bool {
	return obj.obj.Settings != nil
}

// TBD
// SetSettings sets the CaptureSettingsType value in the CaptureConfigurationType object
func (obj *captureConfigurationType) SetSettings(value CaptureSettingsType) CaptureConfigurationType {

	obj.settingsHolder = nil
	obj.obj.Settings = value.Msg()

	return obj
}

// TBD
// Patterns returns a CapturePatternList
func (obj *captureConfigurationType) Patterns() CapturePatternList {
	if obj.obj.Patterns == nil {
		obj.obj.Patterns = NewCapturePatternList().Msg()
	}
	if obj.patternsHolder == nil {
		obj.patternsHolder = &capturePatternList{obj: obj.obj.Patterns}
	}
	return obj.patternsHolder
}

// TBD
// Patterns returns a CapturePatternList
func (obj *captureConfigurationType) HasPatterns() bool {
	return obj.obj.Patterns != nil
}

// TBD
// SetPatterns sets the CapturePatternList value in the CaptureConfigurationType object
func (obj *captureConfigurationType) SetPatterns(value CapturePatternList) CaptureConfigurationType {

	obj.patternsHolder = nil
	obj.obj.Patterns = value.Msg()

	return obj
}

// TBD
// Expressions returns a CaptureExpressionList
func (obj *captureConfigurationType) Expressions() CaptureExpressionList {
	if obj.obj.Expressions == nil {
		obj.obj.Expressions = NewCaptureExpressionList().Msg()
	}
	if obj.expressionsHolder == nil {
		obj.expressionsHolder = &captureExpressionList{obj: obj.obj.Expressions}
	}
	return obj.expressionsHolder
}

// TBD
// Expressions returns a CaptureExpressionList
func (obj *captureConfigurationType) HasExpressions() bool {
	return obj.obj.Expressions != nil
}

// TBD
// SetExpressions sets the CaptureExpressionList value in the CaptureConfigurationType object
func (obj *captureConfigurationType) SetExpressions(value CaptureExpressionList) CaptureConfigurationType {

	obj.expressionsHolder = nil
	obj.obj.Expressions = value.Msg()

	return obj
}

type CaptureConfigurationTypeRxsharedstat1Enum string

// Enum of Rxsharedstat1 on CaptureConfigurationType
var CaptureConfigurationTypeRxsharedstat1 = struct {
	KINVALIDDELIMITER    CaptureConfigurationTypeRxsharedstat1Enum
	KINVALIDFRAMES       CaptureConfigurationTypeRxsharedstat1Enum
	KINVALIDSIZE         CaptureConfigurationTypeRxsharedstat1Enum
	KNORMALSIZEBADFCCRC  CaptureConfigurationTypeRxsharedstat1Enum
	KNORMALSIZEGOODFCCRC CaptureConfigurationTypeRxsharedstat1Enum
	KUNDERSIZEBADFCCRC   CaptureConfigurationTypeRxsharedstat1Enum
	KUNDERSIZEGOODFCCRC  CaptureConfigurationTypeRxsharedstat1Enum
	KVALIDFRAMES         CaptureConfigurationTypeRxsharedstat1Enum
}{
	KINVALIDDELIMITER:    CaptureConfigurationTypeRxsharedstat1Enum("kInvalidDelimiter"),
	KINVALIDFRAMES:       CaptureConfigurationTypeRxsharedstat1Enum("kInvalidFrames"),
	KINVALIDSIZE:         CaptureConfigurationTypeRxsharedstat1Enum("kInvalidSize"),
	KNORMALSIZEBADFCCRC:  CaptureConfigurationTypeRxsharedstat1Enum("kNormalSizeBadFCCRC"),
	KNORMALSIZEGOODFCCRC: CaptureConfigurationTypeRxsharedstat1Enum("kNormalSizeGoodFCCRC"),
	KUNDERSIZEBADFCCRC:   CaptureConfigurationTypeRxsharedstat1Enum("kUndersizeBadFCCRC"),
	KUNDERSIZEGOODFCCRC:  CaptureConfigurationTypeRxsharedstat1Enum("kUndersizeGoodFCCRC"),
	KVALIDFRAMES:         CaptureConfigurationTypeRxsharedstat1Enum("kValidFrames"),
}

func (obj *captureConfigurationType) Rxsharedstat1() CaptureConfigurationTypeRxsharedstat1Enum {
	return CaptureConfigurationTypeRxsharedstat1Enum(obj.obj.Rxsharedstat1.Enum().String())
}

// Rx Shared Stat 1
// Rxsharedstat1 returns a string
func (obj *captureConfigurationType) HasRxsharedstat1() bool {
	return obj.obj.Rxsharedstat1 != nil
}

func (obj *captureConfigurationType) SetRxsharedstat1(value CaptureConfigurationTypeRxsharedstat1Enum) CaptureConfigurationType {
	intValue, ok := otg.CaptureConfigurationType_Rxsharedstat1_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on CaptureConfigurationTypeRxsharedstat1Enum", string(value)))
		return obj
	}
	enumValue := otg.CaptureConfigurationType_Rxsharedstat1_Enum(intValue)
	obj.obj.Rxsharedstat1 = &enumValue

	return obj
}

type CaptureConfigurationTypeRxsharedstat2Enum string

// Enum of Rxsharedstat2 on CaptureConfigurationType
var CaptureConfigurationTypeRxsharedstat2 = struct {
	KINVALIDDELIMITER    CaptureConfigurationTypeRxsharedstat2Enum
	KINVALIDFRAMES       CaptureConfigurationTypeRxsharedstat2Enum
	KINVALIDSIZE         CaptureConfigurationTypeRxsharedstat2Enum
	KNORMALSIZEBADFCCRC  CaptureConfigurationTypeRxsharedstat2Enum
	KNORMALSIZEGOODFCCRC CaptureConfigurationTypeRxsharedstat2Enum
	KUNDERSIZEBADFCCRC   CaptureConfigurationTypeRxsharedstat2Enum
	KUNDERSIZEGOODFCCRC  CaptureConfigurationTypeRxsharedstat2Enum
	KVALIDFRAMES         CaptureConfigurationTypeRxsharedstat2Enum
}{
	KINVALIDDELIMITER:    CaptureConfigurationTypeRxsharedstat2Enum("kInvalidDelimiter"),
	KINVALIDFRAMES:       CaptureConfigurationTypeRxsharedstat2Enum("kInvalidFrames"),
	KINVALIDSIZE:         CaptureConfigurationTypeRxsharedstat2Enum("kInvalidSize"),
	KNORMALSIZEBADFCCRC:  CaptureConfigurationTypeRxsharedstat2Enum("kNormalSizeBadFCCRC"),
	KNORMALSIZEGOODFCCRC: CaptureConfigurationTypeRxsharedstat2Enum("kNormalSizeGoodFCCRC"),
	KUNDERSIZEBADFCCRC:   CaptureConfigurationTypeRxsharedstat2Enum("kUndersizeBadFCCRC"),
	KUNDERSIZEGOODFCCRC:  CaptureConfigurationTypeRxsharedstat2Enum("kUndersizeGoodFCCRC"),
	KVALIDFRAMES:         CaptureConfigurationTypeRxsharedstat2Enum("kValidFrames"),
}

func (obj *captureConfigurationType) Rxsharedstat2() CaptureConfigurationTypeRxsharedstat2Enum {
	return CaptureConfigurationTypeRxsharedstat2Enum(obj.obj.Rxsharedstat2.Enum().String())
}

// Rx Shared Stat 2
// Rxsharedstat2 returns a string
func (obj *captureConfigurationType) HasRxsharedstat2() bool {
	return obj.obj.Rxsharedstat2 != nil
}

func (obj *captureConfigurationType) SetRxsharedstat2(value CaptureConfigurationTypeRxsharedstat2Enum) CaptureConfigurationType {
	intValue, ok := otg.CaptureConfigurationType_Rxsharedstat2_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on CaptureConfigurationTypeRxsharedstat2Enum", string(value)))
		return obj
	}
	enumValue := otg.CaptureConfigurationType_Rxsharedstat2_Enum(intValue)
	obj.obj.Rxsharedstat2 = &enumValue

	return obj
}

func (obj *captureConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Settings != nil {

		obj.Settings().validateObj(vObj, set_default)
	}

	if obj.obj.Patterns != nil {

		obj.Patterns().validateObj(vObj, set_default)
	}

	if obj.obj.Expressions != nil {

		obj.Expressions().validateObj(vObj, set_default)
	}

}

func (obj *captureConfigurationType) setDefault() {

}

// ***** PacketGroupPGIDRange *****
type packetGroupPGIDRange struct {
	validation
	obj         *otg.PacketGroupPGIDRange
	startHolder IdTypePacketGroupId
	endHolder   IdTypePacketGroupId
}

func NewPacketGroupPGIDRange() PacketGroupPGIDRange {
	obj := packetGroupPGIDRange{obj: &otg.PacketGroupPGIDRange{}}
	obj.setDefault()
	return &obj
}

func (obj *packetGroupPGIDRange) Msg() *otg.PacketGroupPGIDRange {
	return obj.obj
}

func (obj *packetGroupPGIDRange) SetMsg(msg *otg.PacketGroupPGIDRange) PacketGroupPGIDRange {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *packetGroupPGIDRange) ToProto() (*otg.PacketGroupPGIDRange, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *packetGroupPGIDRange) FromProto(msg *otg.PacketGroupPGIDRange) (PacketGroupPGIDRange, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *packetGroupPGIDRange) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *packetGroupPGIDRange) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *packetGroupPGIDRange) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *packetGroupPGIDRange) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *packetGroupPGIDRange) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *packetGroupPGIDRange) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *packetGroupPGIDRange) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *packetGroupPGIDRange) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *packetGroupPGIDRange) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *packetGroupPGIDRange) Clone() (PacketGroupPGIDRange, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPacketGroupPGIDRange()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *packetGroupPGIDRange) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *packetGroupPGIDRange) setNil() {
	obj.startHolder = nil
	obj.endHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// PacketGroupPGIDRange is tBD
type PacketGroupPGIDRange interface {
	Validation
	// Msg marshals PacketGroupPGIDRange to protobuf object *otg.PacketGroupPGIDRange
	// and doesn't set defaults
	Msg() *otg.PacketGroupPGIDRange
	// SetMsg unmarshals PacketGroupPGIDRange from protobuf object *otg.PacketGroupPGIDRange
	// and doesn't set defaults
	SetMsg(*otg.PacketGroupPGIDRange) PacketGroupPGIDRange
	// ToProto marshals PacketGroupPGIDRange to protobuf object *otg.PacketGroupPGIDRange
	ToProto() (*otg.PacketGroupPGIDRange, error)
	// ToPbText marshals PacketGroupPGIDRange to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PacketGroupPGIDRange to YAML text
	ToYaml() (string, error)
	// ToJson marshals PacketGroupPGIDRange to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PacketGroupPGIDRange from protobuf object *otg.PacketGroupPGIDRange
	FromProto(msg *otg.PacketGroupPGIDRange) (PacketGroupPGIDRange, error)
	// FromPbText unmarshals PacketGroupPGIDRange from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PacketGroupPGIDRange from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PacketGroupPGIDRange from JSON text
	FromJson(value string) error
	// Validate validates PacketGroupPGIDRange
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PacketGroupPGIDRange, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Start returns IdTypePacketGroupId, set in PacketGroupPGIDRange.
	// IdTypePacketGroupId is tBD
	Start() IdTypePacketGroupId
	// SetStart assigns IdTypePacketGroupId provided by user to PacketGroupPGIDRange.
	// IdTypePacketGroupId is tBD
	SetStart(value IdTypePacketGroupId) PacketGroupPGIDRange
	// HasStart checks if Start has been set in PacketGroupPGIDRange
	HasStart() bool
	// End returns IdTypePacketGroupId, set in PacketGroupPGIDRange.
	// IdTypePacketGroupId is tBD
	End() IdTypePacketGroupId
	// SetEnd assigns IdTypePacketGroupId provided by user to PacketGroupPGIDRange.
	// IdTypePacketGroupId is tBD
	SetEnd(value IdTypePacketGroupId) PacketGroupPGIDRange
	// HasEnd checks if End has been set in PacketGroupPGIDRange
	HasEnd() bool
	setNil()
}

func (obj *packetGroupPGIDRange) populateXml(xObj *Argument) error {

	return nil
}

func (obj *packetGroupPGIDRange) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Start returns a IdTypePacketGroupId
func (obj *packetGroupPGIDRange) Start() IdTypePacketGroupId {
	if obj.obj.Start == nil {
		obj.obj.Start = NewIdTypePacketGroupId().Msg()
	}
	if obj.startHolder == nil {
		obj.startHolder = &idTypePacketGroupId{obj: obj.obj.Start}
	}
	return obj.startHolder
}

// TBD
// Start returns a IdTypePacketGroupId
func (obj *packetGroupPGIDRange) HasStart() bool {
	return obj.obj.Start != nil
}

// TBD
// SetStart sets the IdTypePacketGroupId value in the PacketGroupPGIDRange object
func (obj *packetGroupPGIDRange) SetStart(value IdTypePacketGroupId) PacketGroupPGIDRange {

	obj.startHolder = nil
	obj.obj.Start = value.Msg()

	return obj
}

// TBD
// End returns a IdTypePacketGroupId
func (obj *packetGroupPGIDRange) End() IdTypePacketGroupId {
	if obj.obj.End == nil {
		obj.obj.End = NewIdTypePacketGroupId().Msg()
	}
	if obj.endHolder == nil {
		obj.endHolder = &idTypePacketGroupId{obj: obj.obj.End}
	}
	return obj.endHolder
}

// TBD
// End returns a IdTypePacketGroupId
func (obj *packetGroupPGIDRange) HasEnd() bool {
	return obj.obj.End != nil
}

// TBD
// SetEnd sets the IdTypePacketGroupId value in the PacketGroupPGIDRange object
func (obj *packetGroupPGIDRange) SetEnd(value IdTypePacketGroupId) PacketGroupPGIDRange {

	obj.endHolder = nil
	obj.obj.End = value.Msg()

	return obj
}

func (obj *packetGroupPGIDRange) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {

		obj.Start().validateObj(vObj, set_default)
	}

	if obj.obj.End != nil {

		obj.End().validateObj(vObj, set_default)
	}

}

func (obj *packetGroupPGIDRange) setDefault() {

}

// ***** PortRxModeSet *****
type portRxModeSet struct {
	validation
	obj             *otg.PortRxModeSet
	rxModeSetHolder PortRxModeSetPorteRxModeIter
}

func NewPortRxModeSet() PortRxModeSet {
	obj := portRxModeSet{obj: &otg.PortRxModeSet{}}
	obj.setDefault()
	return &obj
}

func (obj *portRxModeSet) Msg() *otg.PortRxModeSet {
	return obj.obj
}

func (obj *portRxModeSet) SetMsg(msg *otg.PortRxModeSet) PortRxModeSet {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *portRxModeSet) ToProto() (*otg.PortRxModeSet, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *portRxModeSet) FromProto(msg *otg.PortRxModeSet) (PortRxModeSet, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *portRxModeSet) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *portRxModeSet) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portRxModeSet) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portRxModeSet) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *portRxModeSet) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portRxModeSet) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *portRxModeSet) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *portRxModeSet) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *portRxModeSet) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *portRxModeSet) Clone() (PortRxModeSet, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPortRxModeSet()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *portRxModeSet) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *portRxModeSet) setNil() {
	obj.rxModeSetHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// PortRxModeSet is tBD
type PortRxModeSet interface {
	Validation
	// Msg marshals PortRxModeSet to protobuf object *otg.PortRxModeSet
	// and doesn't set defaults
	Msg() *otg.PortRxModeSet
	// SetMsg unmarshals PortRxModeSet from protobuf object *otg.PortRxModeSet
	// and doesn't set defaults
	SetMsg(*otg.PortRxModeSet) PortRxModeSet
	// ToProto marshals PortRxModeSet to protobuf object *otg.PortRxModeSet
	ToProto() (*otg.PortRxModeSet, error)
	// ToPbText marshals PortRxModeSet to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PortRxModeSet to YAML text
	ToYaml() (string, error)
	// ToJson marshals PortRxModeSet to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PortRxModeSet from protobuf object *otg.PortRxModeSet
	FromProto(msg *otg.PortRxModeSet) (PortRxModeSet, error)
	// FromPbText unmarshals PortRxModeSet from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PortRxModeSet from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PortRxModeSet from JSON text
	FromJson(value string) error
	// Validate validates PortRxModeSet
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PortRxModeSet, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// RxModeSet returns PortRxModeSetPorteRxModeIterIter, set in PortRxModeSet
	RxModeSet() PortRxModeSetPorteRxModeIter
	setNil()
}

func (obj *portRxModeSet) populateXml(xObj *Argument) error {

	if len(obj.RxModeSet().Items()) != 0 {
		for _, item := range obj.RxModeSet().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *portRxModeSet) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// RxModeSet returns a []PorteRxMode
func (obj *portRxModeSet) RxModeSet() PortRxModeSetPorteRxModeIter {
	if len(obj.obj.RxModeSet) == 0 {
		obj.obj.RxModeSet = []*otg.PorteRxMode{}
	}
	if obj.rxModeSetHolder == nil {
		obj.rxModeSetHolder = newPortRxModeSetPorteRxModeIter(&obj.obj.RxModeSet).setMsg(obj)
	}
	return obj.rxModeSetHolder
}

type portRxModeSetPorteRxModeIter struct {
	obj              *portRxModeSet
	porteRxModeSlice []PorteRxMode
	fieldPtr         *[]*otg.PorteRxMode
}

func newPortRxModeSetPorteRxModeIter(ptr *[]*otg.PorteRxMode) PortRxModeSetPorteRxModeIter {
	return &portRxModeSetPorteRxModeIter{fieldPtr: ptr}
}

type PortRxModeSetPorteRxModeIter interface {
	setMsg(*portRxModeSet) PortRxModeSetPorteRxModeIter
	Items() []PorteRxMode
	Add() PorteRxMode
	Append(items ...PorteRxMode) PortRxModeSetPorteRxModeIter
	Set(index int, newObj PorteRxMode) PortRxModeSetPorteRxModeIter
	Clear() PortRxModeSetPorteRxModeIter
	clearHolderSlice() PortRxModeSetPorteRxModeIter
	appendHolderSlice(item PorteRxMode) PortRxModeSetPorteRxModeIter
}

func (obj *portRxModeSetPorteRxModeIter) setMsg(msg *portRxModeSet) PortRxModeSetPorteRxModeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&porteRxMode{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *portRxModeSetPorteRxModeIter) Items() []PorteRxMode {
	return obj.porteRxModeSlice
}

func (obj *portRxModeSetPorteRxModeIter) Add() PorteRxMode {
	newObj := &otg.PorteRxMode{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &porteRxMode{obj: newObj}
	newLibObj.setDefault()
	obj.porteRxModeSlice = append(obj.porteRxModeSlice, newLibObj)
	return newLibObj
}

func (obj *portRxModeSetPorteRxModeIter) Append(items ...PorteRxMode) PortRxModeSetPorteRxModeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.porteRxModeSlice = append(obj.porteRxModeSlice, item)
	}
	return obj
}

func (obj *portRxModeSetPorteRxModeIter) Set(index int, newObj PorteRxMode) PortRxModeSetPorteRxModeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.porteRxModeSlice[index] = newObj
	return obj
}
func (obj *portRxModeSetPorteRxModeIter) Clear() PortRxModeSetPorteRxModeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.PorteRxMode{}
		obj.porteRxModeSlice = []PorteRxMode{}
	}
	return obj
}
func (obj *portRxModeSetPorteRxModeIter) clearHolderSlice() PortRxModeSetPorteRxModeIter {
	if len(obj.porteRxModeSlice) > 0 {
		obj.porteRxModeSlice = []PorteRxMode{}
	}
	return obj
}
func (obj *portRxModeSetPorteRxModeIter) appendHolderSlice(item PorteRxMode) PortRxModeSetPorteRxModeIter {
	obj.porteRxModeSlice = append(obj.porteRxModeSlice, item)
	return obj
}

func (obj *portRxModeSet) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.RxModeSet) != 0 {

		if set_default {
			obj.RxModeSet().clearHolderSlice()
			for _, item := range obj.obj.RxModeSet {
				obj.RxModeSet().appendHolderSlice(&porteRxMode{obj: item})
			}
		}
		for _, item := range obj.RxModeSet().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *portRxModeSet) setDefault() {

}

// ***** PFTypeMilliSecondsType *****
type pFTypeMilliSecondsType struct {
	validation
	obj *otg.PFTypeMilliSecondsType
}

func NewPFTypeMilliSecondsType() PFTypeMilliSecondsType {
	obj := pFTypeMilliSecondsType{obj: &otg.PFTypeMilliSecondsType{}}
	obj.setDefault()
	return &obj
}

func (obj *pFTypeMilliSecondsType) Msg() *otg.PFTypeMilliSecondsType {
	return obj.obj
}

func (obj *pFTypeMilliSecondsType) SetMsg(msg *otg.PFTypeMilliSecondsType) PFTypeMilliSecondsType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *pFTypeMilliSecondsType) ToProto() (*otg.PFTypeMilliSecondsType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *pFTypeMilliSecondsType) FromProto(msg *otg.PFTypeMilliSecondsType) (PFTypeMilliSecondsType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *pFTypeMilliSecondsType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *pFTypeMilliSecondsType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *pFTypeMilliSecondsType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypeMilliSecondsType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *pFTypeMilliSecondsType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypeMilliSecondsType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *pFTypeMilliSecondsType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *pFTypeMilliSecondsType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *pFTypeMilliSecondsType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *pFTypeMilliSecondsType) Clone() (PFTypeMilliSecondsType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPFTypeMilliSecondsType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *pFTypeMilliSecondsType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// PFTypeMilliSecondsType is model a duration in milliseconds using a plain integer. This allows signed durations up to 300000 years to expressed.
type PFTypeMilliSecondsType interface {
	Validation
	// Msg marshals PFTypeMilliSecondsType to protobuf object *otg.PFTypeMilliSecondsType
	// and doesn't set defaults
	Msg() *otg.PFTypeMilliSecondsType
	// SetMsg unmarshals PFTypeMilliSecondsType from protobuf object *otg.PFTypeMilliSecondsType
	// and doesn't set defaults
	SetMsg(*otg.PFTypeMilliSecondsType) PFTypeMilliSecondsType
	// ToProto marshals PFTypeMilliSecondsType to protobuf object *otg.PFTypeMilliSecondsType
	ToProto() (*otg.PFTypeMilliSecondsType, error)
	// ToPbText marshals PFTypeMilliSecondsType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PFTypeMilliSecondsType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PFTypeMilliSecondsType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PFTypeMilliSecondsType from protobuf object *otg.PFTypeMilliSecondsType
	FromProto(msg *otg.PFTypeMilliSecondsType) (PFTypeMilliSecondsType, error)
	// FromPbText unmarshals PFTypeMilliSecondsType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PFTypeMilliSecondsType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PFTypeMilliSecondsType from JSON text
	FromJson(value string) error
	// Validate validates PFTypeMilliSecondsType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PFTypeMilliSecondsType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// MilliSeconds returns int64, set in PFTypeMilliSecondsType.
	MilliSeconds() int64
	// SetMilliSeconds assigns int64 provided by user to PFTypeMilliSecondsType
	SetMilliSeconds(value int64) PFTypeMilliSecondsType
	// HasMilliSeconds checks if MilliSeconds has been set in PFTypeMilliSecondsType
	HasMilliSeconds() bool
}

func (obj *pFTypeMilliSecondsType) populateXml(xObj *Argument) error {

	if obj.HasMilliSeconds() {

		member := Member{
			Name:  "milliseconds",
			Type:  "int64",
			Value: strconv.FormatInt(obj.MilliSeconds(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *pFTypeMilliSecondsType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// MilliSeconds returns a int64
func (obj *pFTypeMilliSecondsType) MilliSeconds() int64 {

	return *obj.obj.MilliSeconds

}

// TBD
// MilliSeconds returns a int64
func (obj *pFTypeMilliSecondsType) HasMilliSeconds() bool {
	return obj.obj.MilliSeconds != nil
}

// TBD
// SetMilliSeconds sets the int64 value in the PFTypeMilliSecondsType object
func (obj *pFTypeMilliSecondsType) SetMilliSeconds(value int64) PFTypeMilliSecondsType {

	obj.obj.MilliSeconds = &value
	return obj
}

func (obj *pFTypeMilliSecondsType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *pFTypeMilliSecondsType) setDefault() {

}

// ***** PacketGroupConfigurationType *****
type packetGroupConfigurationType struct {
	validation
	obj                     *otg.PacketGroupConfigurationType
	latencyBinsHolder       PacketGroupLatencyBinList
	sizeBinsRxHolder        PacketGroupSizeBinsType
	splitPacketGroupsHolder PacketGroupSplitPacketGroupList
}

func NewPacketGroupConfigurationType() PacketGroupConfigurationType {
	obj := packetGroupConfigurationType{obj: &otg.PacketGroupConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *packetGroupConfigurationType) Msg() *otg.PacketGroupConfigurationType {
	return obj.obj
}

func (obj *packetGroupConfigurationType) SetMsg(msg *otg.PacketGroupConfigurationType) PacketGroupConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *packetGroupConfigurationType) ToProto() (*otg.PacketGroupConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *packetGroupConfigurationType) FromProto(msg *otg.PacketGroupConfigurationType) (PacketGroupConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *packetGroupConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *packetGroupConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *packetGroupConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *packetGroupConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *packetGroupConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *packetGroupConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *packetGroupConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *packetGroupConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *packetGroupConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *packetGroupConfigurationType) Clone() (PacketGroupConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPacketGroupConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *packetGroupConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *packetGroupConfigurationType) setNil() {
	obj.latencyBinsHolder = nil
	obj.sizeBinsRxHolder = nil
	obj.splitPacketGroupsHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// PacketGroupConfigurationType is tBD
type PacketGroupConfigurationType interface {
	Validation
	// Msg marshals PacketGroupConfigurationType to protobuf object *otg.PacketGroupConfigurationType
	// and doesn't set defaults
	Msg() *otg.PacketGroupConfigurationType
	// SetMsg unmarshals PacketGroupConfigurationType from protobuf object *otg.PacketGroupConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.PacketGroupConfigurationType) PacketGroupConfigurationType
	// ToProto marshals PacketGroupConfigurationType to protobuf object *otg.PacketGroupConfigurationType
	ToProto() (*otg.PacketGroupConfigurationType, error)
	// ToPbText marshals PacketGroupConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PacketGroupConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PacketGroupConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PacketGroupConfigurationType from protobuf object *otg.PacketGroupConfigurationType
	FromProto(msg *otg.PacketGroupConfigurationType) (PacketGroupConfigurationType, error)
	// FromPbText unmarshals PacketGroupConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PacketGroupConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PacketGroupConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates PacketGroupConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PacketGroupConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// DelayVariationMode returns PacketGroupConfigurationTypeDelayVariationModeEnum, set in PacketGroupConfigurationType
	DelayVariationMode() PacketGroupConfigurationTypeDelayVariationModeEnum
	// SetDelayVariationMode assigns PacketGroupConfigurationTypeDelayVariationModeEnum provided by user to PacketGroupConfigurationType
	SetDelayVariationMode(value PacketGroupConfigurationTypeDelayVariationModeEnum) PacketGroupConfigurationType
	// HasDelayVariationMode checks if DelayVariationMode has been set in PacketGroupConfigurationType
	HasDelayVariationMode() bool
	// Enable128KBinMode returns bool, set in PacketGroupConfigurationType.
	Enable128KBinMode() bool
	// SetEnable128KBinMode assigns bool provided by user to PacketGroupConfigurationType
	SetEnable128KBinMode(value bool) PacketGroupConfigurationType
	// HasEnable128KBinMode checks if Enable128KBinMode has been set in PacketGroupConfigurationType
	HasEnable128KBinMode() bool
	// EnableGroupIdMask returns bool, set in PacketGroupConfigurationType.
	EnableGroupIdMask() bool
	// SetEnableGroupIdMask assigns bool provided by user to PacketGroupConfigurationType
	SetEnableGroupIdMask(value bool) PacketGroupConfigurationType
	// HasEnableGroupIdMask checks if EnableGroupIdMask has been set in PacketGroupConfigurationType
	HasEnableGroupIdMask() bool
	// EnableInsertPgid returns bool, set in PacketGroupConfigurationType.
	EnableInsertPgid() bool
	// SetEnableInsertPgid assigns bool provided by user to PacketGroupConfigurationType
	SetEnableInsertPgid(value bool) PacketGroupConfigurationType
	// HasEnableInsertPgid checks if EnableInsertPgid has been set in PacketGroupConfigurationType
	HasEnableInsertPgid() bool
	// EnableLastBitTimeStamp returns bool, set in PacketGroupConfigurationType.
	EnableLastBitTimeStamp() bool
	// SetEnableLastBitTimeStamp assigns bool provided by user to PacketGroupConfigurationType
	SetEnableLastBitTimeStamp(value bool) PacketGroupConfigurationType
	// HasEnableLastBitTimeStamp checks if EnableLastBitTimeStamp has been set in PacketGroupConfigurationType
	HasEnableLastBitTimeStamp() bool
	// EnableLatencyBins returns bool, set in PacketGroupConfigurationType.
	EnableLatencyBins() bool
	// SetEnableLatencyBins assigns bool provided by user to PacketGroupConfigurationType
	SetEnableLatencyBins(value bool) PacketGroupConfigurationType
	// HasEnableLatencyBins checks if EnableLatencyBins has been set in PacketGroupConfigurationType
	HasEnableLatencyBins() bool
	// EnableReArmFirstTimeStamp returns bool, set in PacketGroupConfigurationType.
	EnableReArmFirstTimeStamp() bool
	// SetEnableReArmFirstTimeStamp assigns bool provided by user to PacketGroupConfigurationType
	SetEnableReArmFirstTimeStamp(value bool) PacketGroupConfigurationType
	// HasEnableReArmFirstTimeStamp checks if EnableReArmFirstTimeStamp has been set in PacketGroupConfigurationType
	HasEnableReArmFirstTimeStamp() bool
	// EnableRxFilter returns bool, set in PacketGroupConfigurationType.
	EnableRxFilter() bool
	// SetEnableRxFilter assigns bool provided by user to PacketGroupConfigurationType
	SetEnableRxFilter(value bool) PacketGroupConfigurationType
	// HasEnableRxFilter checks if EnableRxFilter has been set in PacketGroupConfigurationType
	HasEnableRxFilter() bool
	// EnableSignatureMask returns bool, set in PacketGroupConfigurationType.
	EnableSignatureMask() bool
	// SetEnableSignatureMask assigns bool provided by user to PacketGroupConfigurationType
	SetEnableSignatureMask(value bool) PacketGroupConfigurationType
	// HasEnableSignatureMask checks if EnableSignatureMask has been set in PacketGroupConfigurationType
	HasEnableSignatureMask() bool
	// GroupId returns int32, set in PacketGroupConfigurationType.
	GroupId() int32
	// SetGroupId assigns int32 provided by user to PacketGroupConfigurationType
	SetGroupId(value int32) PacketGroupConfigurationType
	// HasGroupId checks if GroupId has been set in PacketGroupConfigurationType
	HasGroupId() bool
	// GroupIdMask returns int32, set in PacketGroupConfigurationType.
	GroupIdMask() int32
	// SetGroupIdMask assigns int32 provided by user to PacketGroupConfigurationType
	SetGroupIdMask(value int32) PacketGroupConfigurationType
	// HasGroupIdMask checks if GroupIdMask has been set in PacketGroupConfigurationType
	HasGroupIdMask() bool
	// GroupIdMode returns PacketGroupConfigurationTypeGroupIdModeEnum, set in PacketGroupConfigurationType
	GroupIdMode() PacketGroupConfigurationTypeGroupIdModeEnum
	// SetGroupIdMode assigns PacketGroupConfigurationTypeGroupIdModeEnum provided by user to PacketGroupConfigurationType
	SetGroupIdMode(value PacketGroupConfigurationTypeGroupIdModeEnum) PacketGroupConfigurationType
	// HasGroupIdMode checks if GroupIdMode has been set in PacketGroupConfigurationType
	HasGroupIdMode() bool
	// GroupIdOffset returns int32, set in PacketGroupConfigurationType.
	GroupIdOffset() int32
	// SetGroupIdOffset assigns int32 provided by user to PacketGroupConfigurationType
	SetGroupIdOffset(value int32) PacketGroupConfigurationType
	// HasGroupIdOffset checks if GroupIdOffset has been set in PacketGroupConfigurationType
	HasGroupIdOffset() bool
	// HeaderFilter returns string, set in PacketGroupConfigurationType.
	HeaderFilter() string
	// SetHeaderFilter assigns string provided by user to PacketGroupConfigurationType
	SetHeaderFilter(value string) PacketGroupConfigurationType
	// HasHeaderFilter checks if HeaderFilter has been set in PacketGroupConfigurationType
	HasHeaderFilter() bool
	// HeaderFilterMask returns string, set in PacketGroupConfigurationType.
	HeaderFilterMask() string
	// SetHeaderFilterMask assigns string provided by user to PacketGroupConfigurationType
	SetHeaderFilterMask(value string) PacketGroupConfigurationType
	// HasHeaderFilterMask checks if HeaderFilterMask has been set in PacketGroupConfigurationType
	HasHeaderFilterMask() bool
	// IgnoreSignature returns bool, set in PacketGroupConfigurationType.
	IgnoreSignature() bool
	// SetIgnoreSignature assigns bool provided by user to PacketGroupConfigurationType
	SetIgnoreSignature(value bool) PacketGroupConfigurationType
	// HasIgnoreSignature checks if IgnoreSignature has been set in PacketGroupConfigurationType
	HasIgnoreSignature() bool
	// UpdateTimeStampMode returns PacketGroupConfigurationTypeUpdateTimeStampModeEnum, set in PacketGroupConfigurationType
	UpdateTimeStampMode() PacketGroupConfigurationTypeUpdateTimeStampModeEnum
	// SetUpdateTimeStampMode assigns PacketGroupConfigurationTypeUpdateTimeStampModeEnum provided by user to PacketGroupConfigurationType
	SetUpdateTimeStampMode(value PacketGroupConfigurationTypeUpdateTimeStampModeEnum) PacketGroupConfigurationType
	// HasUpdateTimeStampMode checks if UpdateTimeStampMode has been set in PacketGroupConfigurationType
	HasUpdateTimeStampMode() bool
	// InsertSequenceSignature returns bool, set in PacketGroupConfigurationType.
	InsertSequenceSignature() bool
	// SetInsertSequenceSignature assigns bool provided by user to PacketGroupConfigurationType
	SetInsertSequenceSignature(value bool) PacketGroupConfigurationType
	// HasInsertSequenceSignature checks if InsertSequenceSignature has been set in PacketGroupConfigurationType
	HasInsertSequenceSignature() bool
	// InsertSignature returns bool, set in PacketGroupConfigurationType.
	InsertSignature() bool
	// SetInsertSignature assigns bool provided by user to PacketGroupConfigurationType
	SetInsertSignature(value bool) PacketGroupConfigurationType
	// HasInsertSignature checks if InsertSignature has been set in PacketGroupConfigurationType
	HasInsertSignature() bool
	// IeeePreambleMatch returns bool, set in PacketGroupConfigurationType.
	IeeePreambleMatch() bool
	// SetIeeePreambleMatch assigns bool provided by user to PacketGroupConfigurationType
	SetIeeePreambleMatch(value bool) PacketGroupConfigurationType
	// HasIeeePreambleMatch checks if IeeePreambleMatch has been set in PacketGroupConfigurationType
	HasIeeePreambleMatch() bool
	// LatencyBins returns PacketGroupLatencyBinList, set in PacketGroupConfigurationType.
	// PacketGroupLatencyBinList is tBD
	LatencyBins() PacketGroupLatencyBinList
	// SetLatencyBins assigns PacketGroupLatencyBinList provided by user to PacketGroupConfigurationType.
	// PacketGroupLatencyBinList is tBD
	SetLatencyBins(value PacketGroupLatencyBinList) PacketGroupConfigurationType
	// HasLatencyBins checks if LatencyBins has been set in PacketGroupConfigurationType
	HasLatencyBins() bool
	// SizeBinsRx returns PacketGroupSizeBinsType, set in PacketGroupConfigurationType.
	// PacketGroupSizeBinsType is tBD
	SizeBinsRx() PacketGroupSizeBinsType
	// SetSizeBinsRx assigns PacketGroupSizeBinsType provided by user to PacketGroupConfigurationType.
	// PacketGroupSizeBinsType is tBD
	SetSizeBinsRx(value PacketGroupSizeBinsType) PacketGroupConfigurationType
	// HasSizeBinsRx checks if SizeBinsRx has been set in PacketGroupConfigurationType
	HasSizeBinsRx() bool
	// LatencyControl returns PacketGroupConfigurationTypeLatencyControlEnum, set in PacketGroupConfigurationType
	LatencyControl() PacketGroupConfigurationTypeLatencyControlEnum
	// SetLatencyControl assigns PacketGroupConfigurationTypeLatencyControlEnum provided by user to PacketGroupConfigurationType
	SetLatencyControl(value PacketGroupConfigurationTypeLatencyControlEnum) PacketGroupConfigurationType
	// HasLatencyControl checks if LatencyControl has been set in PacketGroupConfigurationType
	HasLatencyControl() bool
	// MeasurementMode returns PacketGroupConfigurationTypeMeasurementModeEnum, set in PacketGroupConfigurationType
	MeasurementMode() PacketGroupConfigurationTypeMeasurementModeEnum
	// SetMeasurementMode assigns PacketGroupConfigurationTypeMeasurementModeEnum provided by user to PacketGroupConfigurationType
	SetMeasurementMode(value PacketGroupConfigurationTypeMeasurementModeEnum) PacketGroupConfigurationType
	// HasMeasurementMode checks if MeasurementMode has been set in PacketGroupConfigurationType
	HasMeasurementMode() bool
	// PreambleSize returns int32, set in PacketGroupConfigurationType.
	PreambleSize() int32
	// SetPreambleSize assigns int32 provided by user to PacketGroupConfigurationType
	SetPreambleSize(value int32) PacketGroupConfigurationType
	// HasPreambleSize checks if PreambleSize has been set in PacketGroupConfigurationType
	HasPreambleSize() bool
	// SeqAdvTrackingLateThreshold returns int32, set in PacketGroupConfigurationType.
	SeqAdvTrackingLateThreshold() int32
	// SetSeqAdvTrackingLateThreshold assigns int32 provided by user to PacketGroupConfigurationType
	SetSeqAdvTrackingLateThreshold(value int32) PacketGroupConfigurationType
	// HasSeqAdvTrackingLateThreshold checks if SeqAdvTrackingLateThreshold has been set in PacketGroupConfigurationType
	HasSeqAdvTrackingLateThreshold() bool
	// SequenceErrorThreshold returns int32, set in PacketGroupConfigurationType.
	SequenceErrorThreshold() int32
	// SetSequenceErrorThreshold assigns int32 provided by user to PacketGroupConfigurationType
	SetSequenceErrorThreshold(value int32) PacketGroupConfigurationType
	// HasSequenceErrorThreshold checks if SequenceErrorThreshold has been set in PacketGroupConfigurationType
	HasSequenceErrorThreshold() bool
	// SequenceCheckingMode returns PacketGroupConfigurationTypeSequenceCheckingModeEnum, set in PacketGroupConfigurationType
	SequenceCheckingMode() PacketGroupConfigurationTypeSequenceCheckingModeEnum
	// SetSequenceCheckingMode assigns PacketGroupConfigurationTypeSequenceCheckingModeEnum provided by user to PacketGroupConfigurationType
	SetSequenceCheckingMode(value PacketGroupConfigurationTypeSequenceCheckingModeEnum) PacketGroupConfigurationType
	// HasSequenceCheckingMode checks if SequenceCheckingMode has been set in PacketGroupConfigurationType
	HasSequenceCheckingMode() bool
	// SequenceNumberOffset returns int32, set in PacketGroupConfigurationType.
	SequenceNumberOffset() int32
	// SetSequenceNumberOffset assigns int32 provided by user to PacketGroupConfigurationType
	SetSequenceNumberOffset(value int32) PacketGroupConfigurationType
	// HasSequenceNumberOffset checks if SequenceNumberOffset has been set in PacketGroupConfigurationType
	HasSequenceNumberOffset() bool
	// Signature returns string, set in PacketGroupConfigurationType.
	Signature() string
	// SetSignature assigns string provided by user to PacketGroupConfigurationType
	SetSignature(value string) PacketGroupConfigurationType
	// HasSignature checks if Signature has been set in PacketGroupConfigurationType
	HasSignature() bool
	// SignatureMask returns string, set in PacketGroupConfigurationType.
	SignatureMask() string
	// SetSignatureMask assigns string provided by user to PacketGroupConfigurationType
	SetSignatureMask(value string) PacketGroupConfigurationType
	// HasSignatureMask checks if SignatureMask has been set in PacketGroupConfigurationType
	HasSignatureMask() bool
	// SignatureOffset returns int32, set in PacketGroupConfigurationType.
	SignatureOffset() int32
	// SetSignatureOffset assigns int32 provided by user to PacketGroupConfigurationType
	SetSignatureOffset(value int32) PacketGroupConfigurationType
	// HasSignatureOffset checks if SignatureOffset has been set in PacketGroupConfigurationType
	HasSignatureOffset() bool
	// SplitPacketGroups returns PacketGroupSplitPacketGroupList, set in PacketGroupConfigurationType.
	// PacketGroupSplitPacketGroupList is tBD
	SplitPacketGroups() PacketGroupSplitPacketGroupList
	// SetSplitPacketGroups assigns PacketGroupSplitPacketGroupList provided by user to PacketGroupConfigurationType.
	// PacketGroupSplitPacketGroupList is tBD
	SetSplitPacketGroups(value PacketGroupSplitPacketGroupList) PacketGroupConfigurationType
	// HasSplitPacketGroups checks if SplitPacketGroups has been set in PacketGroupConfigurationType
	HasSplitPacketGroups() bool
	// PgidStatMode returns PacketGroupConfigurationTypePgidStatModeEnum, set in PacketGroupConfigurationType
	PgidStatMode() PacketGroupConfigurationTypePgidStatModeEnum
	// SetPgidStatMode assigns PacketGroupConfigurationTypePgidStatModeEnum provided by user to PacketGroupConfigurationType
	SetPgidStatMode(value PacketGroupConfigurationTypePgidStatModeEnum) PacketGroupConfigurationType
	// HasPgidStatMode checks if PgidStatMode has been set in PacketGroupConfigurationType
	HasPgidStatMode() bool
	setNil()
}

func (obj *packetGroupConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasDelayVariationMode() {

		member := Member{
			Name:  "delayvariationmode",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.PacketGroup+eDelayVariationMode",
			Value: strconv.FormatInt(int64(obj.obj.DelayVariationMode.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnable128KBinMode() {
		var value string
		if obj.Enable128KBinMode() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enable128kbinmode",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableGroupIdMask() {
		var value string
		if obj.EnableGroupIdMask() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablegroupidmask",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableInsertPgid() {
		var value string
		if obj.EnableInsertPgid() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enableinsertpgid",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableLastBitTimeStamp() {
		var value string
		if obj.EnableLastBitTimeStamp() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablelastbittimestamp",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableLatencyBins() {
		var value string
		if obj.EnableLatencyBins() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablelatencybins",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableReArmFirstTimeStamp() {
		var value string
		if obj.EnableReArmFirstTimeStamp() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablerearmfirsttimestamp",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableRxFilter() {
		var value string
		if obj.EnableRxFilter() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablerxfilter",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableSignatureMask() {
		var value string
		if obj.EnableSignatureMask() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablesignaturemask",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasGroupId() {

		member := Member{
			Name:  "groupid",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.GroupId()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasGroupIdMask() {

		member := Member{
			Name:  "groupidmask",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.GroupIdMask()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasGroupIdMode() {

		member := Member{
			Name:  "groupidmode",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.PacketGroup+eGroupIdMode",
			Value: strconv.FormatInt(int64(obj.obj.GroupIdMode.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasGroupIdOffset() {

		member := Member{
			Name:  "groupidoffset",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.GroupIdOffset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasHeaderFilter() {

		member := Member{
			Name:  "headerfilter",
			Type:  "octets",
			Value: obj.HeaderFilter(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasHeaderFilterMask() {

		member := Member{
			Name:  "headerfiltermask",
			Type:  "octets",
			Value: obj.HeaderFilterMask(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIgnoreSignature() {
		var value string
		if obj.IgnoreSignature() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "ignoresignature",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasUpdateTimeStampMode() {

		member := Member{
			Name:  "updatetimestampmode",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.PacketGroup+eTimeStampMode",
			Value: strconv.FormatInt(int64(obj.obj.UpdateTimeStampMode.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasInsertSequenceSignature() {
		var value string
		if obj.InsertSequenceSignature() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "insertsequencesignature",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasInsertSignature() {
		var value string
		if obj.InsertSignature() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "insertsignature",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIeeePreambleMatch() {
		var value string
		if obj.IeeePreambleMatch() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "ieeepreamblematch",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasLatencyControl() {

		member := Member{
			Name:  "latencycontrol",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.PacketGroup+eLatencyControl",
			Value: strconv.FormatInt(int64(obj.obj.LatencyControl.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasMeasurementMode() {

		member := Member{
			Name:  "measurementmode",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.PacketGroup+eMeasurementMode",
			Value: strconv.FormatInt(int64(obj.obj.MeasurementMode.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasPreambleSize() {

		member := Member{
			Name:  "preamblesize",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.PreambleSize()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSeqAdvTrackingLateThreshold() {

		member := Member{
			Name:  "seqadvtrackinglatethreshold",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.SeqAdvTrackingLateThreshold()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSequenceErrorThreshold() {

		member := Member{
			Name:  "sequenceerrorthreshold",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.SequenceErrorThreshold()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSequenceCheckingMode() {

		member := Member{
			Name:  "sequencecheckingmode",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.PacketGroup+eSequenceCheckingMode",
			Value: strconv.FormatInt(int64(obj.obj.SequenceCheckingMode.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSequenceNumberOffset() {

		member := Member{
			Name:  "sequencenumberoffset",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.SequenceNumberOffset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSignature() {

		member := Member{
			Name:  "signature",
			Type:  "octets",
			Value: obj.Signature(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSignatureMask() {

		member := Member{
			Name:  "signaturemask",
			Type:  "octets",
			Value: obj.SignatureMask(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSignatureOffset() {

		member := Member{
			Name:  "signatureoffset",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.SignatureOffset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasPgidStatMode() {

		member := Member{
			Name:  "pgidstatmode",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.PacketGroup+ePGIDStatMode",
			Value: strconv.FormatInt(int64(obj.obj.PgidStatMode.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *packetGroupConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

type PacketGroupConfigurationTypeDelayVariationModeEnum string

// Enum of DelayVariationMode on PacketGroupConfigurationType
var PacketGroupConfigurationTypeDelayVariationMode = struct {
	KDELAYVARIATIONWITHSEQUENCEERRORS PacketGroupConfigurationTypeDelayVariationModeEnum
	KDELAYVARIATIONWITHLATENCYMINMAX  PacketGroupConfigurationTypeDelayVariationModeEnum
	KDELAYVARIATIONWITHLATENCYAVG     PacketGroupConfigurationTypeDelayVariationModeEnum
}{
	KDELAYVARIATIONWITHSEQUENCEERRORS: PacketGroupConfigurationTypeDelayVariationModeEnum("kDelayVariationWithSequenceErrors"),
	KDELAYVARIATIONWITHLATENCYMINMAX:  PacketGroupConfigurationTypeDelayVariationModeEnum("kDelayVariationWithLatencyMinMax"),
	KDELAYVARIATIONWITHLATENCYAVG:     PacketGroupConfigurationTypeDelayVariationModeEnum("kDelayVariationWithLatencyAvg"),
}

func (obj *packetGroupConfigurationType) DelayVariationMode() PacketGroupConfigurationTypeDelayVariationModeEnum {
	return PacketGroupConfigurationTypeDelayVariationModeEnum(obj.obj.DelayVariationMode.Enum().String())
}

// Selects Delay Variation measurement mode (under Latency/Jitter   Measurement). This is only available when measurementMode is set to   packetGroupModeDelayVariation.   Note: When Delay Variation mode is selected, then under Sequence   Checking the only available option is Threshold Sequence Checking.
// DelayVariationMode returns a string
func (obj *packetGroupConfigurationType) HasDelayVariationMode() bool {
	return obj.obj.DelayVariationMode != nil
}

func (obj *packetGroupConfigurationType) SetDelayVariationMode(value PacketGroupConfigurationTypeDelayVariationModeEnum) PacketGroupConfigurationType {
	intValue, ok := otg.PacketGroupConfigurationType_DelayVariationMode_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PacketGroupConfigurationTypeDelayVariationModeEnum", string(value)))
		return obj
	}
	enumValue := otg.PacketGroupConfigurationType_DelayVariationMode_Enum(intValue)
	obj.obj.DelayVariationMode = &enumValue

	return obj
}

// If true, then the length of the packet group ID field is increased to 17 bits.
// Enable128KBinMode returns a bool
func (obj *packetGroupConfigurationType) Enable128KBinMode() bool {

	return *obj.obj.Enable128KBinMode

}

// If true, then the length of the packet group ID field is increased to 17 bits.
// Enable128KBinMode returns a bool
func (obj *packetGroupConfigurationType) HasEnable128KBinMode() bool {
	return obj.obj.Enable128KBinMode != nil
}

// If true, then the length of the packet group ID field is increased to 17 bits.
// SetEnable128KBinMode sets the bool value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetEnable128KBinMode(value bool) PacketGroupConfigurationType {

	obj.obj.Enable128KBinMode = &value
	return obj
}

// Enables the use of the groupId mask.
// EnableGroupIdMask returns a bool
func (obj *packetGroupConfigurationType) EnableGroupIdMask() bool {

	return *obj.obj.EnableGroupIdMask

}

// Enables the use of the groupId mask.
// EnableGroupIdMask returns a bool
func (obj *packetGroupConfigurationType) HasEnableGroupIdMask() bool {
	return obj.obj.EnableGroupIdMask != nil
}

// Enables the use of the groupId mask.
// SetEnableGroupIdMask sets the bool value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetEnableGroupIdMask(value bool) PacketGroupConfigurationType {

	obj.obj.EnableGroupIdMask = &value
	return obj
}

// Enables inserting the PGID into the packet.
// EnableInsertPgid returns a bool
func (obj *packetGroupConfigurationType) EnableInsertPgid() bool {

	return *obj.obj.EnableInsertPgid

}

// Enables inserting the PGID into the packet.
// EnableInsertPgid returns a bool
func (obj *packetGroupConfigurationType) HasEnableInsertPgid() bool {
	return obj.obj.EnableInsertPgid != nil
}

// Enables inserting the PGID into the packet.
// SetEnableInsertPgid sets the bool value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetEnableInsertPgid(value bool) PacketGroupConfigurationType {

	obj.obj.EnableInsertPgid = &value
	return obj
}

// If true, enables selection of last bit time stamp. If false,   the first bit time stamp is used.
// EnableLastBitTimeStamp returns a bool
func (obj *packetGroupConfigurationType) EnableLastBitTimeStamp() bool {

	return *obj.obj.EnableLastBitTimeStamp

}

// If true, enables selection of last bit time stamp. If false,   the first bit time stamp is used.
// EnableLastBitTimeStamp returns a bool
func (obj *packetGroupConfigurationType) HasEnableLastBitTimeStamp() bool {
	return obj.obj.EnableLastBitTimeStamp != nil
}

// If true, enables selection of last bit time stamp. If false,   the first bit time stamp is used.
// SetEnableLastBitTimeStamp sets the bool value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetEnableLastBitTimeStamp(value bool) PacketGroupConfigurationType {

	obj.obj.EnableLastBitTimeStamp = &value
	return obj
}

// Enables the use of latency bins on receive.
// EnableLatencyBins returns a bool
func (obj *packetGroupConfigurationType) EnableLatencyBins() bool {

	return *obj.obj.EnableLatencyBins

}

// Enables the use of latency bins on receive.
// EnableLatencyBins returns a bool
func (obj *packetGroupConfigurationType) HasEnableLatencyBins() bool {
	return obj.obj.EnableLatencyBins != nil
}

// Enables the use of latency bins on receive.
// SetEnableLatencyBins sets the bool value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetEnableLatencyBins(value bool) PacketGroupConfigurationType {

	obj.obj.EnableLatencyBins = &value
	return obj
}

// Enables the use of re-arm first time stamp.
// EnableReArmFirstTimeStamp returns a bool
func (obj *packetGroupConfigurationType) EnableReArmFirstTimeStamp() bool {

	return *obj.obj.EnableReArmFirstTimeStamp

}

// Enables the use of re-arm first time stamp.
// EnableReArmFirstTimeStamp returns a bool
func (obj *packetGroupConfigurationType) HasEnableReArmFirstTimeStamp() bool {
	return obj.obj.EnableReArmFirstTimeStamp != nil
}

// Enables the use of re-arm first time stamp.
// SetEnableReArmFirstTimeStamp sets the bool value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetEnableReArmFirstTimeStamp(value bool) PacketGroupConfigurationType {

	obj.obj.EnableReArmFirstTimeStamp = &value
	return obj
}

// Enables the use of the headerFilterMask mask.
// EnableRxFilter returns a bool
func (obj *packetGroupConfigurationType) EnableRxFilter() bool {

	return *obj.obj.EnableRxFilter

}

// Enables the use of the headerFilterMask mask.
// EnableRxFilter returns a bool
func (obj *packetGroupConfigurationType) HasEnableRxFilter() bool {
	return obj.obj.EnableRxFilter != nil
}

// Enables the use of the headerFilterMask mask.
// SetEnableRxFilter sets the bool value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetEnableRxFilter(value bool) PacketGroupConfigurationType {

	obj.obj.EnableRxFilter = &value
	return obj
}

// Enables the use of the signatureMask mask.
// EnableSignatureMask returns a bool
func (obj *packetGroupConfigurationType) EnableSignatureMask() bool {

	return *obj.obj.EnableSignatureMask

}

// Enables the use of the signatureMask mask.
// EnableSignatureMask returns a bool
func (obj *packetGroupConfigurationType) HasEnableSignatureMask() bool {
	return obj.obj.EnableSignatureMask != nil
}

// Enables the use of the signatureMask mask.
// SetEnableSignatureMask sets the bool value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetEnableSignatureMask(value bool) PacketGroupConfigurationType {

	obj.obj.EnableSignatureMask = &value
	return obj
}

// Unique value used to identify one packet group for another.   Up to 57344 different packet groups may be defined.
// GroupId returns a int32
func (obj *packetGroupConfigurationType) GroupId() int32 {

	return *obj.obj.GroupId

}

// Unique value used to identify one packet group for another.   Up to 57344 different packet groups may be defined.
// GroupId returns a int32
func (obj *packetGroupConfigurationType) HasGroupId() bool {
	return obj.obj.GroupId != nil
}

// Unique value used to identify one packet group for another.   Up to 57344 different packet groups may be defined.
// SetGroupId sets the int32 value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetGroupId(value int32) PacketGroupConfigurationType {

	obj.obj.GroupId = &value
	return obj
}

// A 16-bit mask applied to the packet group ID.   Bits set in the mask are cleared in the received group ID.
// GroupIdMask returns a int32
func (obj *packetGroupConfigurationType) GroupIdMask() int32 {

	return *obj.obj.GroupIdMask

}

// A 16-bit mask applied to the packet group ID.   Bits set in the mask are cleared in the received group ID.
// GroupIdMask returns a int32
func (obj *packetGroupConfigurationType) HasGroupIdMask() bool {
	return obj.obj.GroupIdMask != nil
}

// A 16-bit mask applied to the packet group ID.   Bits set in the mask are cleared in the received group ID.
// SetGroupIdMask sets the int32 value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetGroupIdMask(value int32) PacketGroupConfigurationType {

	obj.obj.GroupIdMask = &value
	return obj
}

type PacketGroupConfigurationTypeGroupIdModeEnum string

// Enum of GroupIdMode on PacketGroupConfigurationType
var PacketGroupConfigurationTypeGroupIdMode = struct {
	KPACKETGROUPCUSTOM           PacketGroupConfigurationTypeGroupIdModeEnum
	KPACKETGROUPDSCP             PacketGroupConfigurationTypeGroupIdModeEnum
	KPACKETGROUPIPV6TRAFFICCLASS PacketGroupConfigurationTypeGroupIdModeEnum
	KPACKETGROUPMPLSEXP          PacketGroupConfigurationTypeGroupIdModeEnum
	KPACKETGROUPSPLIT            PacketGroupConfigurationTypeGroupIdModeEnum
}{
	KPACKETGROUPCUSTOM:           PacketGroupConfigurationTypeGroupIdModeEnum("kPacketGroupCustom"),
	KPACKETGROUPDSCP:             PacketGroupConfigurationTypeGroupIdModeEnum("kPacketGroupDscp"),
	KPACKETGROUPIPV6TRAFFICCLASS: PacketGroupConfigurationTypeGroupIdModeEnum("kPacketGroupIpV6TrafficClass"),
	KPACKETGROUPMPLSEXP:          PacketGroupConfigurationTypeGroupIdModeEnum("kPacketGroupMplsExp"),
	KPACKETGROUPSPLIT:            PacketGroupConfigurationTypeGroupIdModeEnum("kPacketGroupSplit"),
}

func (obj *packetGroupConfigurationType) GroupIdMode() PacketGroupConfigurationTypeGroupIdModeEnum {
	return PacketGroupConfigurationTypeGroupIdModeEnum(obj.obj.GroupIdMode.Enum().String())
}

// This option provides a convenience mechanism for setting   the groupIdOffset and groupIdMask.
// GroupIdMode returns a string
func (obj *packetGroupConfigurationType) HasGroupIdMode() bool {
	return obj.obj.GroupIdMode != nil
}

func (obj *packetGroupConfigurationType) SetGroupIdMode(value PacketGroupConfigurationTypeGroupIdModeEnum) PacketGroupConfigurationType {
	intValue, ok := otg.PacketGroupConfigurationType_GroupIdMode_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PacketGroupConfigurationTypeGroupIdModeEnum", string(value)))
		return obj
	}
	enumValue := otg.PacketGroupConfigurationType_GroupIdMode_Enum(intValue)
	obj.obj.GroupIdMode = &enumValue

	return obj
}

// The offset, within the packet, of the group id value.
// GroupIdOffset returns a int32
func (obj *packetGroupConfigurationType) GroupIdOffset() int32 {

	return *obj.obj.GroupIdOffset

}

// The offset, within the packet, of the group id value.
// GroupIdOffset returns a int32
func (obj *packetGroupConfigurationType) HasGroupIdOffset() bool {
	return obj.obj.GroupIdOffset != nil
}

// The offset, within the packet, of the group id value.
// SetGroupIdOffset sets the int32 value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetGroupIdOffset(value int32) PacketGroupConfigurationType {

	obj.obj.GroupIdOffset = &value
	return obj
}

// A set of 16 bytes used to match the header of packets to be   considered for signature masking.
// HeaderFilter returns a string
func (obj *packetGroupConfigurationType) HeaderFilter() string {

	return *obj.obj.HeaderFilter

}

// A set of 16 bytes used to match the header of packets to be   considered for signature masking.
// HeaderFilter returns a string
func (obj *packetGroupConfigurationType) HasHeaderFilter() bool {
	return obj.obj.HeaderFilter != nil
}

// A set of 16 bytes used to match the header of packets to be   considered for signature masking.
// SetHeaderFilter sets the string value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetHeaderFilter(value string) PacketGroupConfigurationType {

	obj.obj.HeaderFilter = &value
	return obj
}

// A mask to be applied to the HeaderFilter. Bits set in the mask are ignored in the match.
// HeaderFilterMask returns a string
func (obj *packetGroupConfigurationType) HeaderFilterMask() string {

	return *obj.obj.HeaderFilterMask

}

// A mask to be applied to the HeaderFilter. Bits set in the mask are ignored in the match.
// HeaderFilterMask returns a string
func (obj *packetGroupConfigurationType) HasHeaderFilterMask() bool {
	return obj.obj.HeaderFilterMask != nil
}

// A mask to be applied to the HeaderFilter. Bits set in the mask are ignored in the match.
// SetHeaderFilterMask sets the string value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetHeaderFilterMask(value string) PacketGroupConfigurationType {

	obj.obj.HeaderFilterMask = &value
	return obj
}

// In receive mode, the signature field is not matched and all   packets are counted.
// IgnoreSignature returns a bool
func (obj *packetGroupConfigurationType) IgnoreSignature() bool {

	return *obj.obj.IgnoreSignature

}

// In receive mode, the signature field is not matched and all   packets are counted.
// IgnoreSignature returns a bool
func (obj *packetGroupConfigurationType) HasIgnoreSignature() bool {
	return obj.obj.IgnoreSignature != nil
}

// In receive mode, the signature field is not matched and all   packets are counted.
// SetIgnoreSignature sets the bool value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetIgnoreSignature(value bool) PacketGroupConfigurationType {

	obj.obj.IgnoreSignature = &value
	return obj
}

type PacketGroupConfigurationTypeUpdateTimeStampModeEnum string

// Enum of UpdateTimeStampMode on PacketGroupConfigurationType
var PacketGroupConfigurationTypeUpdateTimeStampMode = struct {
	KTIMESTAMPFORENTIREPGID PacketGroupConfigurationTypeUpdateTimeStampModeEnum
	KUPDATETIMESTAMPONERROR PacketGroupConfigurationTypeUpdateTimeStampModeEnum
}{
	KTIMESTAMPFORENTIREPGID: PacketGroupConfigurationTypeUpdateTimeStampModeEnum("kTimeStampForEntirePGID"),
	KUPDATETIMESTAMPONERROR: PacketGroupConfigurationTypeUpdateTimeStampModeEnum("kUpdateTimeStampOnError"),
}

func (obj *packetGroupConfigurationType) UpdateTimeStampMode() PacketGroupConfigurationTypeUpdateTimeStampModeEnum {
	return PacketGroupConfigurationTypeUpdateTimeStampModeEnum(obj.obj.UpdateTimeStampMode.Enum().String())
}

// (1)First/Last Timestamp will be updated on Sequence Checking Error.   (0)Otherwise First/Last Timestamp updated on every Frame received.
// UpdateTimeStampMode returns a string
func (obj *packetGroupConfigurationType) HasUpdateTimeStampMode() bool {
	return obj.obj.UpdateTimeStampMode != nil
}

func (obj *packetGroupConfigurationType) SetUpdateTimeStampMode(value PacketGroupConfigurationTypeUpdateTimeStampModeEnum) PacketGroupConfigurationType {
	intValue, ok := otg.PacketGroupConfigurationType_UpdateTimeStampMode_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PacketGroupConfigurationTypeUpdateTimeStampModeEnum", string(value)))
		return obj
	}
	enumValue := otg.PacketGroupConfigurationType_UpdateTimeStampMode_Enum(intValue)
	obj.obj.UpdateTimeStampMode = &enumValue

	return obj
}

// Inserts a sequence signature into the packet as indicated by   signatureOffset, signatureValue, groupIdOffset, signatureNumberOffset   and allocateUdf.
// InsertSequenceSignature returns a bool
func (obj *packetGroupConfigurationType) InsertSequenceSignature() bool {

	return *obj.obj.InsertSequenceSignature

}

// Inserts a sequence signature into the packet as indicated by   signatureOffset, signatureValue, groupIdOffset, signatureNumberOffset   and allocateUdf.
// InsertSequenceSignature returns a bool
func (obj *packetGroupConfigurationType) HasInsertSequenceSignature() bool {
	return obj.obj.InsertSequenceSignature != nil
}

// Inserts a sequence signature into the packet as indicated by   signatureOffset, signatureValue, groupIdOffset, signatureNumberOffset   and allocateUdf.
// SetInsertSequenceSignature sets the bool value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetInsertSequenceSignature(value bool) PacketGroupConfigurationType {

	obj.obj.InsertSequenceSignature = &value
	return obj
}

// Inserts the packet group signature into the transmitted stream.   Note: For calculating latency values need to configure stream config -fir true.
// InsertSignature returns a bool
func (obj *packetGroupConfigurationType) InsertSignature() bool {

	return *obj.obj.InsertSignature

}

// Inserts the packet group signature into the transmitted stream.   Note: For calculating latency values need to configure stream config -fir true.
// InsertSignature returns a bool
func (obj *packetGroupConfigurationType) HasInsertSignature() bool {
	return obj.obj.InsertSignature != nil
}

// Inserts the packet group signature into the transmitted stream.   Note: For calculating latency values need to configure stream config -fir true.
// SetInsertSignature sets the bool value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetInsertSignature(value bool) PacketGroupConfigurationType {

	obj.obj.InsertSignature = &value
	return obj
}

// Allow preambles that are IEEE standard to match.
// IeeePreambleMatch returns a bool
func (obj *packetGroupConfigurationType) IeeePreambleMatch() bool {

	return *obj.obj.IeeePreambleMatch

}

// Allow preambles that are IEEE standard to match.
// IeeePreambleMatch returns a bool
func (obj *packetGroupConfigurationType) HasIeeePreambleMatch() bool {
	return obj.obj.IeeePreambleMatch != nil
}

// Allow preambles that are IEEE standard to match.
// SetIeeePreambleMatch sets the bool value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetIeeePreambleMatch(value bool) PacketGroupConfigurationType {

	obj.obj.IeeePreambleMatch = &value
	return obj
}

// If enableLatencyBins is true, this list of latencies (in milliseconds) indicates   the dividing line between latency bins. There is one fewer   dividing times than latency bins. The first bin always starts   at 0 and the last bin always ends at the maximum possible latency.   The list is sorted before use. There must not be any duplicate values.
// LatencyBins returns a PacketGroupLatencyBinList
func (obj *packetGroupConfigurationType) LatencyBins() PacketGroupLatencyBinList {
	if obj.obj.LatencyBins == nil {
		obj.obj.LatencyBins = NewPacketGroupLatencyBinList().Msg()
	}
	if obj.latencyBinsHolder == nil {
		obj.latencyBinsHolder = &packetGroupLatencyBinList{obj: obj.obj.LatencyBins}
	}
	return obj.latencyBinsHolder
}

// If enableLatencyBins is true, this list of latencies (in milliseconds) indicates   the dividing line between latency bins. There is one fewer   dividing times than latency bins. The first bin always starts   at 0 and the last bin always ends at the maximum possible latency.   The list is sorted before use. There must not be any duplicate values.
// LatencyBins returns a PacketGroupLatencyBinList
func (obj *packetGroupConfigurationType) HasLatencyBins() bool {
	return obj.obj.LatencyBins != nil
}

// If enableLatencyBins is true, this list of latencies (in milliseconds) indicates   the dividing line between latency bins. There is one fewer   dividing times than latency bins. The first bin always starts   at 0 and the last bin always ends at the maximum possible latency.   The list is sorted before use. There must not be any duplicate values.
// SetLatencyBins sets the PacketGroupLatencyBinList value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetLatencyBins(value PacketGroupLatencyBinList) PacketGroupConfigurationType {

	obj.latencyBinsHolder = nil
	obj.obj.LatencyBins = value.Msg()

	return obj
}

// If enableSizeBins is true, the corresponding list will contain integer   frame size values in ascending order.
// SizeBinsRx returns a PacketGroupSizeBinsType
func (obj *packetGroupConfigurationType) SizeBinsRx() PacketGroupSizeBinsType {
	if obj.obj.SizeBinsRx == nil {
		obj.obj.SizeBinsRx = NewPacketGroupSizeBinsType().Msg()
	}
	if obj.sizeBinsRxHolder == nil {
		obj.sizeBinsRxHolder = &packetGroupSizeBinsType{obj: obj.obj.SizeBinsRx}
	}
	return obj.sizeBinsRxHolder
}

// If enableSizeBins is true, the corresponding list will contain integer   frame size values in ascending order.
// SizeBinsRx returns a PacketGroupSizeBinsType
func (obj *packetGroupConfigurationType) HasSizeBinsRx() bool {
	return obj.obj.SizeBinsRx != nil
}

// If enableSizeBins is true, the corresponding list will contain integer   frame size values in ascending order.
// SetSizeBinsRx sets the PacketGroupSizeBinsType value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetSizeBinsRx(value PacketGroupSizeBinsType) PacketGroupConfigurationType {

	obj.sizeBinsRxHolder = nil
	obj.obj.SizeBinsRx = value.Msg()

	return obj
}

type PacketGroupConfigurationTypeLatencyControlEnum string

// Enum of LatencyControl on PacketGroupConfigurationType
var PacketGroupConfigurationTypeLatencyControl = struct {
	KCUTTHROUGH         PacketGroupConfigurationTypeLatencyControlEnum
	KSTOREANDFORWARD    PacketGroupConfigurationTypeLatencyControlEnum
	KINTERARRIVALJITTER PacketGroupConfigurationTypeLatencyControlEnum
	KFIRSTINLASTOUT     PacketGroupConfigurationTypeLatencyControlEnum
	KLASTINLASTOUT      PacketGroupConfigurationTypeLatencyControlEnum
}{
	KCUTTHROUGH:         PacketGroupConfigurationTypeLatencyControlEnum("kCutThrough"),
	KSTOREANDFORWARD:    PacketGroupConfigurationTypeLatencyControlEnum("kStoreAndForward"),
	KINTERARRIVALJITTER: PacketGroupConfigurationTypeLatencyControlEnum("kInterArrivalJitter"),
	KFIRSTINLASTOUT:     PacketGroupConfigurationTypeLatencyControlEnum("kFirstInLastOut"),
	KLASTINLASTOUT:      PacketGroupConfigurationTypeLatencyControlEnum("kLastInLastOut"),
}

func (obj *packetGroupConfigurationType) LatencyControl() PacketGroupConfigurationTypeLatencyControlEnum {
	return PacketGroupConfigurationTypeLatencyControlEnum(obj.obj.LatencyControl.Enum().String())
}

// Defines the mechanism used to calculate latency.
// LatencyControl returns a string
func (obj *packetGroupConfigurationType) HasLatencyControl() bool {
	return obj.obj.LatencyControl != nil
}

func (obj *packetGroupConfigurationType) SetLatencyControl(value PacketGroupConfigurationTypeLatencyControlEnum) PacketGroupConfigurationType {
	intValue, ok := otg.PacketGroupConfigurationType_LatencyControl_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PacketGroupConfigurationTypeLatencyControlEnum", string(value)))
		return obj
	}
	enumValue := otg.PacketGroupConfigurationType_LatencyControl_Enum(intValue)
	obj.obj.LatencyControl = &enumValue

	return obj
}

type PacketGroupConfigurationTypeMeasurementModeEnum string

// Enum of MeasurementMode on PacketGroupConfigurationType
var PacketGroupConfigurationTypeMeasurementMode = struct {
	KPACKETGROUPMODELATENCY          PacketGroupConfigurationTypeMeasurementModeEnum
	KPACKETGROUPMODEINTERARRIVALTIME PacketGroupConfigurationTypeMeasurementModeEnum
	KPACKETGROUPMODEDELAYVARIATION   PacketGroupConfigurationTypeMeasurementModeEnum
}{
	KPACKETGROUPMODELATENCY:          PacketGroupConfigurationTypeMeasurementModeEnum("kPacketGroupModeLatency"),
	KPACKETGROUPMODEINTERARRIVALTIME: PacketGroupConfigurationTypeMeasurementModeEnum("kPacketGroupModeInterArrivalTime"),
	KPACKETGROUPMODEDELAYVARIATION:   PacketGroupConfigurationTypeMeasurementModeEnum("kPacketGroupModeDelayVariation"),
}

func (obj *packetGroupConfigurationType) MeasurementMode() PacketGroupConfigurationTypeMeasurementModeEnum {
	return PacketGroupConfigurationTypeMeasurementModeEnum(obj.obj.MeasurementMode.Enum().String())
}

// Defines the measurement mode used to calculate latency.
// MeasurementMode returns a string
func (obj *packetGroupConfigurationType) HasMeasurementMode() bool {
	return obj.obj.MeasurementMode != nil
}

func (obj *packetGroupConfigurationType) SetMeasurementMode(value PacketGroupConfigurationTypeMeasurementModeEnum) PacketGroupConfigurationType {
	intValue, ok := otg.PacketGroupConfigurationType_MeasurementMode_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PacketGroupConfigurationTypeMeasurementModeEnum", string(value)))
		return obj
	}
	enumValue := otg.PacketGroupConfigurationType_MeasurementMode_Enum(intValue)
	obj.obj.MeasurementMode = &enumValue

	return obj
}

// Length of preamble, in bytes, of received frame.
// PreambleSize returns a int32
func (obj *packetGroupConfigurationType) PreambleSize() int32 {

	return *obj.obj.PreambleSize

}

// Length of preamble, in bytes, of received frame.
// PreambleSize returns a int32
func (obj *packetGroupConfigurationType) HasPreambleSize() bool {
	return obj.obj.PreambleSize != nil
}

// Length of preamble, in bytes, of received frame.
// SetPreambleSize sets the int32 value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetPreambleSize(value int32) PacketGroupConfigurationType {

	obj.obj.PreambleSize = &value
	return obj
}

// Sets a threshold to track the expected sequence value. The Late   Threshold value is subtracted from the expected sequence number   when the received sequence numbers are less than the late threshold   value.
// SeqAdvTrackingLateThreshold returns a int32
func (obj *packetGroupConfigurationType) SeqAdvTrackingLateThreshold() int32 {

	return *obj.obj.SeqAdvTrackingLateThreshold

}

// Sets a threshold to track the expected sequence value. The Late   Threshold value is subtracted from the expected sequence number   when the received sequence numbers are less than the late threshold   value.
// SeqAdvTrackingLateThreshold returns a int32
func (obj *packetGroupConfigurationType) HasSeqAdvTrackingLateThreshold() bool {
	return obj.obj.SeqAdvTrackingLateThreshold != nil
}

// Sets a threshold to track the expected sequence value. The Late   Threshold value is subtracted from the expected sequence number   when the received sequence numbers are less than the late threshold   value.
// SetSeqAdvTrackingLateThreshold sets the int32 value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetSeqAdvTrackingLateThreshold(value int32) PacketGroupConfigurationType {

	obj.obj.SeqAdvTrackingLateThreshold = &value
	return obj
}

// The threshold value used to determine whether a sequence   error has occurred.
// SequenceErrorThreshold returns a int32
func (obj *packetGroupConfigurationType) SequenceErrorThreshold() int32 {

	return *obj.obj.SequenceErrorThreshold

}

// The threshold value used to determine whether a sequence   error has occurred.
// SequenceErrorThreshold returns a int32
func (obj *packetGroupConfigurationType) HasSequenceErrorThreshold() bool {
	return obj.obj.SequenceErrorThreshold != nil
}

// The threshold value used to determine whether a sequence   error has occurred.
// SetSequenceErrorThreshold sets the int32 value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetSequenceErrorThreshold(value int32) PacketGroupConfigurationType {

	obj.obj.SequenceErrorThreshold = &value
	return obj
}

type PacketGroupConfigurationTypeSequenceCheckingModeEnum string

// Enum of SequenceCheckingMode on PacketGroupConfigurationType
var PacketGroupConfigurationTypeSequenceCheckingMode = struct {
	KSEQTHRESHOLD         PacketGroupConfigurationTypeSequenceCheckingModeEnum
	KSEQMULTISWITCHEDPATH PacketGroupConfigurationTypeSequenceCheckingModeEnum
	KSEQADVTRACKING       PacketGroupConfigurationTypeSequenceCheckingModeEnum
}{
	KSEQTHRESHOLD:         PacketGroupConfigurationTypeSequenceCheckingModeEnum("kSeqThreshold"),
	KSEQMULTISWITCHEDPATH: PacketGroupConfigurationTypeSequenceCheckingModeEnum("kSeqMultiSwitchedPath"),
	KSEQADVTRACKING:       PacketGroupConfigurationTypeSequenceCheckingModeEnum("kSeqAdvTracking"),
}

func (obj *packetGroupConfigurationType) SequenceCheckingMode() PacketGroupConfigurationTypeSequenceCheckingModeEnum {
	return PacketGroupConfigurationTypeSequenceCheckingModeEnum(obj.obj.SequenceCheckingMode.Enum().String())
}

// The manner in which sequence checking is performed.
// SequenceCheckingMode returns a string
func (obj *packetGroupConfigurationType) HasSequenceCheckingMode() bool {
	return obj.obj.SequenceCheckingMode != nil
}

func (obj *packetGroupConfigurationType) SetSequenceCheckingMode(value PacketGroupConfigurationTypeSequenceCheckingModeEnum) PacketGroupConfigurationType {
	intValue, ok := otg.PacketGroupConfigurationType_SequenceCheckingMode_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PacketGroupConfigurationTypeSequenceCheckingModeEnum", string(value)))
		return obj
	}
	enumValue := otg.PacketGroupConfigurationType_SequenceCheckingMode_Enum(intValue)
	obj.obj.SequenceCheckingMode = &enumValue

	return obj
}

// The offset within the packet of the sequence number. This is   valid only when sequence checking is enabled.
// SequenceNumberOffset returns a int32
func (obj *packetGroupConfigurationType) SequenceNumberOffset() int32 {

	return *obj.obj.SequenceNumberOffset

}

// The offset within the packet of the sequence number. This is   valid only when sequence checking is enabled.
// SequenceNumberOffset returns a int32
func (obj *packetGroupConfigurationType) HasSequenceNumberOffset() bool {
	return obj.obj.SequenceNumberOffset != nil
}

// The offset within the packet of the sequence number. This is   valid only when sequence checking is enabled.
// SetSequenceNumberOffset sets the int32 value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetSequenceNumberOffset(value int32) PacketGroupConfigurationType {

	obj.obj.SequenceNumberOffset = &value
	return obj
}

// In the transmitted packet, the signature uniquely signs the   transmitted packet as one destined for packet group filtering   on the receive port. On the receive port, the signature is   used to filter only those packets that have a matching signature   and the minimum, maximum and average latencies are obtained for those   packets.
// Signature returns a string
func (obj *packetGroupConfigurationType) Signature() string {

	return *obj.obj.Signature

}

// In the transmitted packet, the signature uniquely signs the   transmitted packet as one destined for packet group filtering   on the receive port. On the receive port, the signature is   used to filter only those packets that have a matching signature   and the minimum, maximum and average latencies are obtained for those   packets.
// Signature returns a string
func (obj *packetGroupConfigurationType) HasSignature() bool {
	return obj.obj.Signature != nil
}

// In the transmitted packet, the signature uniquely signs the   transmitted packet as one destined for packet group filtering   on the receive port. On the receive port, the signature is   used to filter only those packets that have a matching signature   and the minimum, maximum and average latencies are obtained for those   packets.
// SetSignature sets the string value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetSignature(value string) PacketGroupConfigurationType {

	obj.obj.Signature = &value
	return obj
}

// A mask applied to the signature. Bits set in the mask are ignored.
// SignatureMask returns a string
func (obj *packetGroupConfigurationType) SignatureMask() string {

	return *obj.obj.SignatureMask

}

// A mask applied to the signature. Bits set in the mask are ignored.
// SignatureMask returns a string
func (obj *packetGroupConfigurationType) HasSignatureMask() bool {
	return obj.obj.SignatureMask != nil
}

// A mask applied to the signature. Bits set in the mask are ignored.
// SetSignatureMask sets the string value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetSignatureMask(value string) PacketGroupConfigurationType {

	obj.obj.SignatureMask = &value
	return obj
}

// The offset, within the packet, of the packet group signature.
// SignatureOffset returns a int32
func (obj *packetGroupConfigurationType) SignatureOffset() int32 {

	return *obj.obj.SignatureOffset

}

// The offset, within the packet, of the packet group signature.
// SignatureOffset returns a int32
func (obj *packetGroupConfigurationType) HasSignatureOffset() bool {
	return obj.obj.SignatureOffset != nil
}

// The offset, within the packet, of the packet group signature.
// SetSignatureOffset sets the int32 value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetSignatureOffset(value int32) PacketGroupConfigurationType {

	obj.obj.SignatureOffset = &value
	return obj
}

// Used to configure split packet groups in Rx.   Up to 17 bytes can be configured in three separate chunks.
// SplitPacketGroups returns a PacketGroupSplitPacketGroupList
func (obj *packetGroupConfigurationType) SplitPacketGroups() PacketGroupSplitPacketGroupList {
	if obj.obj.SplitPacketGroups == nil {
		obj.obj.SplitPacketGroups = NewPacketGroupSplitPacketGroupList().Msg()
	}
	if obj.splitPacketGroupsHolder == nil {
		obj.splitPacketGroupsHolder = &packetGroupSplitPacketGroupList{obj: obj.obj.SplitPacketGroups}
	}
	return obj.splitPacketGroupsHolder
}

// Used to configure split packet groups in Rx.   Up to 17 bytes can be configured in three separate chunks.
// SplitPacketGroups returns a PacketGroupSplitPacketGroupList
func (obj *packetGroupConfigurationType) HasSplitPacketGroups() bool {
	return obj.obj.SplitPacketGroups != nil
}

// Used to configure split packet groups in Rx.   Up to 17 bytes can be configured in three separate chunks.
// SetSplitPacketGroups sets the PacketGroupSplitPacketGroupList value in the PacketGroupConfigurationType object
func (obj *packetGroupConfigurationType) SetSplitPacketGroups(value PacketGroupSplitPacketGroupList) PacketGroupConfigurationType {

	obj.splitPacketGroupsHolder = nil
	obj.obj.SplitPacketGroups = value.Msg()

	return obj
}

type PacketGroupConfigurationTypePgidStatModeEnum string

// Enum of PgidStatMode on PacketGroupConfigurationType
var PacketGroupConfigurationTypePgidStatMode = struct {
	K4KSTATMODE  PacketGroupConfigurationTypePgidStatModeEnum
	K32KSTATMODE PacketGroupConfigurationTypePgidStatModeEnum
}{
	K4KSTATMODE:  PacketGroupConfigurationTypePgidStatModeEnum("k4KStatMode"),
	K32KSTATMODE: PacketGroupConfigurationTypePgidStatModeEnum("k32KStatMode"),
}

func (obj *packetGroupConfigurationType) PgidStatMode() PacketGroupConfigurationTypePgidStatModeEnum {
	return PacketGroupConfigurationTypePgidStatModeEnum(obj.obj.PgidStatMode.Enum().String())
}

// Switch between normal and limited latency mode.
// PgidStatMode returns a string
func (obj *packetGroupConfigurationType) HasPgidStatMode() bool {
	return obj.obj.PgidStatMode != nil
}

func (obj *packetGroupConfigurationType) SetPgidStatMode(value PacketGroupConfigurationTypePgidStatModeEnum) PacketGroupConfigurationType {
	intValue, ok := otg.PacketGroupConfigurationType_PgidStatMode_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PacketGroupConfigurationTypePgidStatModeEnum", string(value)))
		return obj
	}
	enumValue := otg.PacketGroupConfigurationType_PgidStatMode_Enum(intValue)
	obj.obj.PgidStatMode = &enumValue

	return obj
}

func (obj *packetGroupConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.LatencyBins != nil {

		obj.LatencyBins().validateObj(vObj, set_default)
	}

	if obj.obj.SizeBinsRx != nil {

		obj.SizeBinsRx().validateObj(vObj, set_default)
	}

	if obj.obj.SplitPacketGroups != nil {

		obj.SplitPacketGroups().validateObj(vObj, set_default)
	}

}

func (obj *packetGroupConfigurationType) setDefault() {

}

// ***** DataIntegrityRxConfigurationType *****
type dataIntegrityRxConfigurationType struct {
	validation
	obj *otg.DataIntegrityRxConfigurationType
}

func NewDataIntegrityRxConfigurationType() DataIntegrityRxConfigurationType {
	obj := dataIntegrityRxConfigurationType{obj: &otg.DataIntegrityRxConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *dataIntegrityRxConfigurationType) Msg() *otg.DataIntegrityRxConfigurationType {
	return obj.obj
}

func (obj *dataIntegrityRxConfigurationType) SetMsg(msg *otg.DataIntegrityRxConfigurationType) DataIntegrityRxConfigurationType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *dataIntegrityRxConfigurationType) ToProto() (*otg.DataIntegrityRxConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *dataIntegrityRxConfigurationType) FromProto(msg *otg.DataIntegrityRxConfigurationType) (DataIntegrityRxConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *dataIntegrityRxConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *dataIntegrityRxConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *dataIntegrityRxConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *dataIntegrityRxConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *dataIntegrityRxConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *dataIntegrityRxConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *dataIntegrityRxConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *dataIntegrityRxConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *dataIntegrityRxConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *dataIntegrityRxConfigurationType) Clone() (DataIntegrityRxConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewDataIntegrityRxConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *dataIntegrityRxConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// DataIntegrityRxConfigurationType is tBD
type DataIntegrityRxConfigurationType interface {
	Validation
	// Msg marshals DataIntegrityRxConfigurationType to protobuf object *otg.DataIntegrityRxConfigurationType
	// and doesn't set defaults
	Msg() *otg.DataIntegrityRxConfigurationType
	// SetMsg unmarshals DataIntegrityRxConfigurationType from protobuf object *otg.DataIntegrityRxConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.DataIntegrityRxConfigurationType) DataIntegrityRxConfigurationType
	// ToProto marshals DataIntegrityRxConfigurationType to protobuf object *otg.DataIntegrityRxConfigurationType
	ToProto() (*otg.DataIntegrityRxConfigurationType, error)
	// ToPbText marshals DataIntegrityRxConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals DataIntegrityRxConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals DataIntegrityRxConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals DataIntegrityRxConfigurationType from protobuf object *otg.DataIntegrityRxConfigurationType
	FromProto(msg *otg.DataIntegrityRxConfigurationType) (DataIntegrityRxConfigurationType, error)
	// FromPbText unmarshals DataIntegrityRxConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals DataIntegrityRxConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals DataIntegrityRxConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates DataIntegrityRxConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (DataIntegrityRxConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// EnableTimeStamp returns bool, set in DataIntegrityRxConfigurationType.
	EnableTimeStamp() bool
	// SetEnableTimeStamp assigns bool provided by user to DataIntegrityRxConfigurationType
	SetEnableTimeStamp(value bool) DataIntegrityRxConfigurationType
	// HasEnableTimeStamp checks if EnableTimeStamp has been set in DataIntegrityRxConfigurationType
	HasEnableTimeStamp() bool
	// Signature returns string, set in DataIntegrityRxConfigurationType.
	Signature() string
	// SetSignature assigns string provided by user to DataIntegrityRxConfigurationType
	SetSignature(value string) DataIntegrityRxConfigurationType
	// HasSignature checks if Signature has been set in DataIntegrityRxConfigurationType
	HasSignature() bool
	// SignatureOffset returns int32, set in DataIntegrityRxConfigurationType.
	SignatureOffset() int32
	// SetSignatureOffset assigns int32 provided by user to DataIntegrityRxConfigurationType
	SetSignatureOffset(value int32) DataIntegrityRxConfigurationType
	// HasSignatureOffset checks if SignatureOffset has been set in DataIntegrityRxConfigurationType
	HasSignatureOffset() bool
}

func (obj *dataIntegrityRxConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasEnableTimeStamp() {
		var value string
		if obj.EnableTimeStamp() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enabletimestamp",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSignature() {

		member := Member{
			Name:  "signature",
			Type:  "octets",
			Value: obj.Signature(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSignatureOffset() {

		member := Member{
			Name:  "signatureoffset",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.SignatureOffset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *dataIntegrityRxConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// Indicates that the received data integrity packets areexpected to have a 48-bit timestamp before the FCS value.
// EnableTimeStamp returns a bool
func (obj *dataIntegrityRxConfigurationType) EnableTimeStamp() bool {

	return *obj.obj.EnableTimeStamp

}

// Indicates that the received data integrity packets areexpected to have a 48-bit timestamp before the FCS value.
// EnableTimeStamp returns a bool
func (obj *dataIntegrityRxConfigurationType) HasEnableTimeStamp() bool {
	return obj.obj.EnableTimeStamp != nil
}

// Indicates that the received data integrity packets areexpected to have a 48-bit timestamp before the FCS value.
// SetEnableTimeStamp sets the bool value in the DataIntegrityRxConfigurationType object
func (obj *dataIntegrityRxConfigurationType) SetEnableTimeStamp(value bool) DataIntegrityRxConfigurationType {

	obj.obj.EnableTimeStamp = &value
	return obj
}

// On the receive port, the signature is   used to filter only those packets that have a matching signature.
// Signature returns a string
func (obj *dataIntegrityRxConfigurationType) Signature() string {

	return *obj.obj.Signature

}

// On the receive port, the signature is   used to filter only those packets that have a matching signature.
// Signature returns a string
func (obj *dataIntegrityRxConfigurationType) HasSignature() bool {
	return obj.obj.Signature != nil
}

// On the receive port, the signature is   used to filter only those packets that have a matching signature.
// SetSignature sets the string value in the DataIntegrityRxConfigurationType object
func (obj *dataIntegrityRxConfigurationType) SetSignature(value string) DataIntegrityRxConfigurationType {

	obj.obj.Signature = &value
	return obj
}

// The offset, within the packet, of the data integrity signature.
// SignatureOffset returns a int32
func (obj *dataIntegrityRxConfigurationType) SignatureOffset() int32 {

	return *obj.obj.SignatureOffset

}

// The offset, within the packet, of the data integrity signature.
// SignatureOffset returns a int32
func (obj *dataIntegrityRxConfigurationType) HasSignatureOffset() bool {
	return obj.obj.SignatureOffset != nil
}

// The offset, within the packet, of the data integrity signature.
// SetSignatureOffset sets the int32 value in the DataIntegrityRxConfigurationType object
func (obj *dataIntegrityRxConfigurationType) SetSignatureOffset(value int32) DataIntegrityRxConfigurationType {

	obj.obj.SignatureOffset = &value
	return obj
}

func (obj *dataIntegrityRxConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *dataIntegrityRxConfigurationType) setDefault() {

}

// ***** RxAutoInstrumentationConfigurationType *****
type rxAutoInstrumentationConfigurationType struct {
	validation
	obj *otg.RxAutoInstrumentationConfigurationType
}

func NewRxAutoInstrumentationConfigurationType() RxAutoInstrumentationConfigurationType {
	obj := rxAutoInstrumentationConfigurationType{obj: &otg.RxAutoInstrumentationConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *rxAutoInstrumentationConfigurationType) Msg() *otg.RxAutoInstrumentationConfigurationType {
	return obj.obj
}

func (obj *rxAutoInstrumentationConfigurationType) SetMsg(msg *otg.RxAutoInstrumentationConfigurationType) RxAutoInstrumentationConfigurationType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *rxAutoInstrumentationConfigurationType) ToProto() (*otg.RxAutoInstrumentationConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *rxAutoInstrumentationConfigurationType) FromProto(msg *otg.RxAutoInstrumentationConfigurationType) (RxAutoInstrumentationConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *rxAutoInstrumentationConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *rxAutoInstrumentationConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *rxAutoInstrumentationConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *rxAutoInstrumentationConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *rxAutoInstrumentationConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *rxAutoInstrumentationConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *rxAutoInstrumentationConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *rxAutoInstrumentationConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *rxAutoInstrumentationConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *rxAutoInstrumentationConfigurationType) Clone() (RxAutoInstrumentationConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRxAutoInstrumentationConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *rxAutoInstrumentationConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// RxAutoInstrumentationConfigurationType is tBD
type RxAutoInstrumentationConfigurationType interface {
	Validation
	// Msg marshals RxAutoInstrumentationConfigurationType to protobuf object *otg.RxAutoInstrumentationConfigurationType
	// and doesn't set defaults
	Msg() *otg.RxAutoInstrumentationConfigurationType
	// SetMsg unmarshals RxAutoInstrumentationConfigurationType from protobuf object *otg.RxAutoInstrumentationConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.RxAutoInstrumentationConfigurationType) RxAutoInstrumentationConfigurationType
	// ToProto marshals RxAutoInstrumentationConfigurationType to protobuf object *otg.RxAutoInstrumentationConfigurationType
	ToProto() (*otg.RxAutoInstrumentationConfigurationType, error)
	// ToPbText marshals RxAutoInstrumentationConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RxAutoInstrumentationConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals RxAutoInstrumentationConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RxAutoInstrumentationConfigurationType from protobuf object *otg.RxAutoInstrumentationConfigurationType
	FromProto(msg *otg.RxAutoInstrumentationConfigurationType) (RxAutoInstrumentationConfigurationType, error)
	// FromPbText unmarshals RxAutoInstrumentationConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RxAutoInstrumentationConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RxAutoInstrumentationConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates RxAutoInstrumentationConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RxAutoInstrumentationConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// StartScanOffset returns int32, set in RxAutoInstrumentationConfigurationType.
	StartScanOffset() int32
	// SetStartScanOffset assigns int32 provided by user to RxAutoInstrumentationConfigurationType
	SetStartScanOffset(value int32) RxAutoInstrumentationConfigurationType
	// HasStartScanOffset checks if StartScanOffset has been set in RxAutoInstrumentationConfigurationType
	HasStartScanOffset() bool
	// Signature returns string, set in RxAutoInstrumentationConfigurationType.
	Signature() string
	// SetSignature assigns string provided by user to RxAutoInstrumentationConfigurationType
	SetSignature(value string) RxAutoInstrumentationConfigurationType
	// HasSignature checks if Signature has been set in RxAutoInstrumentationConfigurationType
	HasSignature() bool
	// Mask returns string, set in RxAutoInstrumentationConfigurationType.
	Mask() string
	// SetMask assigns string provided by user to RxAutoInstrumentationConfigurationType
	SetMask(value string) RxAutoInstrumentationConfigurationType
	// HasMask checks if Mask has been set in RxAutoInstrumentationConfigurationType
	HasMask() bool
	// MisdirectedPacketMask returns string, set in RxAutoInstrumentationConfigurationType.
	MisdirectedPacketMask() string
	// SetMisdirectedPacketMask assigns string provided by user to RxAutoInstrumentationConfigurationType
	SetMisdirectedPacketMask(value string) RxAutoInstrumentationConfigurationType
	// HasMisdirectedPacketMask checks if MisdirectedPacketMask has been set in RxAutoInstrumentationConfigurationType
	HasMisdirectedPacketMask() bool
	// IgnoreMisdirectedSignature returns bool, set in RxAutoInstrumentationConfigurationType.
	IgnoreMisdirectedSignature() bool
	// SetIgnoreMisdirectedSignature assigns bool provided by user to RxAutoInstrumentationConfigurationType
	SetIgnoreMisdirectedSignature(value bool) RxAutoInstrumentationConfigurationType
	// HasIgnoreMisdirectedSignature checks if IgnoreMisdirectedSignature has been set in RxAutoInstrumentationConfigurationType
	HasIgnoreMisdirectedSignature() bool
}

func (obj *rxAutoInstrumentationConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasStartScanOffset() {

		member := Member{
			Name:  "startscanoffset",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.StartScanOffset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSignature() {

		member := Member{
			Name:  "signature",
			Type:  "octets",
			Value: obj.Signature(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasMask() {

		member := Member{
			Name:  "mask",
			Type:  "octets",
			Value: obj.Mask(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasMisdirectedPacketMask() {

		member := Member{
			Name:  "misdirectedpacketmask",
			Type:  "octets",
			Value: obj.MisdirectedPacketMask(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIgnoreMisdirectedSignature() {
		var value string
		if obj.IgnoreMisdirectedSignature() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "ignoremisdirectedsignature",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *rxAutoInstrumentationConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// The Start Scan Offset.
// StartScanOffset returns a int32
func (obj *rxAutoInstrumentationConfigurationType) StartScanOffset() int32 {

	return *obj.obj.StartScanOffset

}

// The Start Scan Offset.
// StartScanOffset returns a int32
func (obj *rxAutoInstrumentationConfigurationType) HasStartScanOffset() bool {
	return obj.obj.StartScanOffset != nil
}

// The Start Scan Offset.
// SetStartScanOffset sets the int32 value in the RxAutoInstrumentationConfigurationType object
func (obj *rxAutoInstrumentationConfigurationType) SetStartScanOffset(value int32) RxAutoInstrumentationConfigurationType {

	obj.obj.StartScanOffset = &value
	return obj
}

// The Signature Value.
// Signature returns a string
func (obj *rxAutoInstrumentationConfigurationType) Signature() string {

	return *obj.obj.Signature

}

// The Signature Value.
// Signature returns a string
func (obj *rxAutoInstrumentationConfigurationType) HasSignature() bool {
	return obj.obj.Signature != nil
}

// The Signature Value.
// SetSignature sets the string value in the RxAutoInstrumentationConfigurationType object
func (obj *rxAutoInstrumentationConfigurationType) SetSignature(value string) RxAutoInstrumentationConfigurationType {

	obj.obj.Signature = &value
	return obj
}

// The Signature Mask.
// Mask returns a string
func (obj *rxAutoInstrumentationConfigurationType) Mask() string {

	return *obj.obj.Mask

}

// The Signature Mask.
// Mask returns a string
func (obj *rxAutoInstrumentationConfigurationType) HasMask() bool {
	return obj.obj.Mask != nil
}

// The Signature Mask.
// SetMask sets the string value in the RxAutoInstrumentationConfigurationType object
func (obj *rxAutoInstrumentationConfigurationType) SetMask(value string) RxAutoInstrumentationConfigurationType {

	obj.obj.Mask = &value
	return obj
}

// The Misdirected Packet Mask.
// MisdirectedPacketMask returns a string
func (obj *rxAutoInstrumentationConfigurationType) MisdirectedPacketMask() string {

	return *obj.obj.MisdirectedPacketMask

}

// The Misdirected Packet Mask.
// MisdirectedPacketMask returns a string
func (obj *rxAutoInstrumentationConfigurationType) HasMisdirectedPacketMask() bool {
	return obj.obj.MisdirectedPacketMask != nil
}

// The Misdirected Packet Mask.
// SetMisdirectedPacketMask sets the string value in the RxAutoInstrumentationConfigurationType object
func (obj *rxAutoInstrumentationConfigurationType) SetMisdirectedPacketMask(value string) RxAutoInstrumentationConfigurationType {

	obj.obj.MisdirectedPacketMask = &value
	return obj
}

// When this feature is enabled, If Rx FPGA Engine receives a misdirected packet whose signature's last bit is 1, it will neither update the Misdirected stats for that packet nor send it to PCPU or PG engine. Instead it updates AIS_Misdirected Ignore Statistics for that packet.
// IgnoreMisdirectedSignature returns a bool
func (obj *rxAutoInstrumentationConfigurationType) IgnoreMisdirectedSignature() bool {

	return *obj.obj.IgnoreMisdirectedSignature

}

// When this feature is enabled, If Rx FPGA Engine receives a misdirected packet whose signature's last bit is 1, it will neither update the Misdirected stats for that packet nor send it to PCPU or PG engine. Instead it updates AIS_Misdirected Ignore Statistics for that packet.
// IgnoreMisdirectedSignature returns a bool
func (obj *rxAutoInstrumentationConfigurationType) HasIgnoreMisdirectedSignature() bool {
	return obj.obj.IgnoreMisdirectedSignature != nil
}

// When this feature is enabled, If Rx FPGA Engine receives a misdirected packet whose signature's last bit is 1, it will neither update the Misdirected stats for that packet nor send it to PCPU or PG engine. Instead it updates AIS_Misdirected Ignore Statistics for that packet.
// SetIgnoreMisdirectedSignature sets the bool value in the RxAutoInstrumentationConfigurationType object
func (obj *rxAutoInstrumentationConfigurationType) SetIgnoreMisdirectedSignature(value bool) RxAutoInstrumentationConfigurationType {

	obj.obj.IgnoreMisdirectedSignature = &value
	return obj
}

func (obj *rxAutoInstrumentationConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *rxAutoInstrumentationConfigurationType) setDefault() {

}

// ***** RateMonitoringRateMonitoringList *****
type rateMonitoringRateMonitoringList struct {
	validation
	obj                      *otg.RateMonitoringRateMonitoringList
	rateMonitoringListHolder RateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter
}

func NewRateMonitoringRateMonitoringList() RateMonitoringRateMonitoringList {
	obj := rateMonitoringRateMonitoringList{obj: &otg.RateMonitoringRateMonitoringList{}}
	obj.setDefault()
	return &obj
}

func (obj *rateMonitoringRateMonitoringList) Msg() *otg.RateMonitoringRateMonitoringList {
	return obj.obj
}

func (obj *rateMonitoringRateMonitoringList) SetMsg(msg *otg.RateMonitoringRateMonitoringList) RateMonitoringRateMonitoringList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *rateMonitoringRateMonitoringList) ToProto() (*otg.RateMonitoringRateMonitoringList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *rateMonitoringRateMonitoringList) FromProto(msg *otg.RateMonitoringRateMonitoringList) (RateMonitoringRateMonitoringList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *rateMonitoringRateMonitoringList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *rateMonitoringRateMonitoringList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *rateMonitoringRateMonitoringList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *rateMonitoringRateMonitoringList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *rateMonitoringRateMonitoringList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *rateMonitoringRateMonitoringList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *rateMonitoringRateMonitoringList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *rateMonitoringRateMonitoringList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *rateMonitoringRateMonitoringList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *rateMonitoringRateMonitoringList) Clone() (RateMonitoringRateMonitoringList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRateMonitoringRateMonitoringList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *rateMonitoringRateMonitoringList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *rateMonitoringRateMonitoringList) setNil() {
	obj.rateMonitoringListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// RateMonitoringRateMonitoringList is tBD
type RateMonitoringRateMonitoringList interface {
	Validation
	// Msg marshals RateMonitoringRateMonitoringList to protobuf object *otg.RateMonitoringRateMonitoringList
	// and doesn't set defaults
	Msg() *otg.RateMonitoringRateMonitoringList
	// SetMsg unmarshals RateMonitoringRateMonitoringList from protobuf object *otg.RateMonitoringRateMonitoringList
	// and doesn't set defaults
	SetMsg(*otg.RateMonitoringRateMonitoringList) RateMonitoringRateMonitoringList
	// ToProto marshals RateMonitoringRateMonitoringList to protobuf object *otg.RateMonitoringRateMonitoringList
	ToProto() (*otg.RateMonitoringRateMonitoringList, error)
	// ToPbText marshals RateMonitoringRateMonitoringList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RateMonitoringRateMonitoringList to YAML text
	ToYaml() (string, error)
	// ToJson marshals RateMonitoringRateMonitoringList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RateMonitoringRateMonitoringList from protobuf object *otg.RateMonitoringRateMonitoringList
	FromProto(msg *otg.RateMonitoringRateMonitoringList) (RateMonitoringRateMonitoringList, error)
	// FromPbText unmarshals RateMonitoringRateMonitoringList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RateMonitoringRateMonitoringList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RateMonitoringRateMonitoringList from JSON text
	FromJson(value string) error
	// Validate validates RateMonitoringRateMonitoringList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RateMonitoringRateMonitoringList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// RateMonitoringList returns RateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIterIter, set in RateMonitoringRateMonitoringList
	RateMonitoringList() RateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter
	setNil()
}

func (obj *rateMonitoringRateMonitoringList) populateXml(xObj *Argument) error {

	if len(obj.RateMonitoringList().Items()) != 0 {
		for _, item := range obj.RateMonitoringList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *rateMonitoringRateMonitoringList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// RateMonitoringList returns a []RateMonitoringConfigurationType
func (obj *rateMonitoringRateMonitoringList) RateMonitoringList() RateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter {
	if len(obj.obj.RateMonitoringList) == 0 {
		obj.obj.RateMonitoringList = []*otg.RateMonitoringConfigurationType{}
	}
	if obj.rateMonitoringListHolder == nil {
		obj.rateMonitoringListHolder = newRateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter(&obj.obj.RateMonitoringList).setMsg(obj)
	}
	return obj.rateMonitoringListHolder
}

type rateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter struct {
	obj                                  *rateMonitoringRateMonitoringList
	rateMonitoringConfigurationTypeSlice []RateMonitoringConfigurationType
	fieldPtr                             *[]*otg.RateMonitoringConfigurationType
}

func newRateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter(ptr *[]*otg.RateMonitoringConfigurationType) RateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter {
	return &rateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter{fieldPtr: ptr}
}

type RateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter interface {
	setMsg(*rateMonitoringRateMonitoringList) RateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter
	Items() []RateMonitoringConfigurationType
	Add() RateMonitoringConfigurationType
	Append(items ...RateMonitoringConfigurationType) RateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter
	Set(index int, newObj RateMonitoringConfigurationType) RateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter
	Clear() RateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter
	clearHolderSlice() RateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter
	appendHolderSlice(item RateMonitoringConfigurationType) RateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter
}

func (obj *rateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter) setMsg(msg *rateMonitoringRateMonitoringList) RateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&rateMonitoringConfigurationType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *rateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter) Items() []RateMonitoringConfigurationType {
	return obj.rateMonitoringConfigurationTypeSlice
}

func (obj *rateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter) Add() RateMonitoringConfigurationType {
	newObj := &otg.RateMonitoringConfigurationType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &rateMonitoringConfigurationType{obj: newObj}
	newLibObj.setDefault()
	obj.rateMonitoringConfigurationTypeSlice = append(obj.rateMonitoringConfigurationTypeSlice, newLibObj)
	return newLibObj
}

func (obj *rateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter) Append(items ...RateMonitoringConfigurationType) RateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.rateMonitoringConfigurationTypeSlice = append(obj.rateMonitoringConfigurationTypeSlice, item)
	}
	return obj
}

func (obj *rateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter) Set(index int, newObj RateMonitoringConfigurationType) RateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.rateMonitoringConfigurationTypeSlice[index] = newObj
	return obj
}
func (obj *rateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter) Clear() RateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.RateMonitoringConfigurationType{}
		obj.rateMonitoringConfigurationTypeSlice = []RateMonitoringConfigurationType{}
	}
	return obj
}
func (obj *rateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter) clearHolderSlice() RateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter {
	if len(obj.rateMonitoringConfigurationTypeSlice) > 0 {
		obj.rateMonitoringConfigurationTypeSlice = []RateMonitoringConfigurationType{}
	}
	return obj
}
func (obj *rateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter) appendHolderSlice(item RateMonitoringConfigurationType) RateMonitoringRateMonitoringListRateMonitoringConfigurationTypeIter {
	obj.rateMonitoringConfigurationTypeSlice = append(obj.rateMonitoringConfigurationTypeSlice, item)
	return obj
}

func (obj *rateMonitoringRateMonitoringList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.RateMonitoringList) != 0 {

		if set_default {
			obj.RateMonitoringList().clearHolderSlice()
			for _, item := range obj.obj.RateMonitoringList {
				obj.RateMonitoringList().appendHolderSlice(&rateMonitoringConfigurationType{obj: item})
			}
		}
		for _, item := range obj.RateMonitoringList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *rateMonitoringRateMonitoringList) setDefault() {

}

// ***** ServerePulseAction *****
type serverePulseAction struct {
	validation
	obj *otg.ServerePulseAction
}

func NewServerePulseAction() ServerePulseAction {
	obj := serverePulseAction{obj: &otg.ServerePulseAction{}}
	obj.setDefault()
	return &obj
}

func (obj *serverePulseAction) Msg() *otg.ServerePulseAction {
	return obj.obj
}

func (obj *serverePulseAction) SetMsg(msg *otg.ServerePulseAction) ServerePulseAction {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *serverePulseAction) ToProto() (*otg.ServerePulseAction, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *serverePulseAction) FromProto(msg *otg.ServerePulseAction) (ServerePulseAction, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *serverePulseAction) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *serverePulseAction) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *serverePulseAction) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *serverePulseAction) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *serverePulseAction) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *serverePulseAction) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *serverePulseAction) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *serverePulseAction) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *serverePulseAction) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *serverePulseAction) Clone() (ServerePulseAction, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewServerePulseAction()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *serverePulseAction) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// ServerePulseAction is description is TBD
type ServerePulseAction interface {
	Validation
	// Msg marshals ServerePulseAction to protobuf object *otg.ServerePulseAction
	// and doesn't set defaults
	Msg() *otg.ServerePulseAction
	// SetMsg unmarshals ServerePulseAction from protobuf object *otg.ServerePulseAction
	// and doesn't set defaults
	SetMsg(*otg.ServerePulseAction) ServerePulseAction
	// ToProto marshals ServerePulseAction to protobuf object *otg.ServerePulseAction
	ToProto() (*otg.ServerePulseAction, error)
	// ToPbText marshals ServerePulseAction to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ServerePulseAction to YAML text
	ToYaml() (string, error)
	// ToJson marshals ServerePulseAction to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ServerePulseAction from protobuf object *otg.ServerePulseAction
	FromProto(msg *otg.ServerePulseAction) (ServerePulseAction, error)
	// FromPbText unmarshals ServerePulseAction from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ServerePulseAction from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ServerePulseAction from JSON text
	FromJson(value string) error
	// Validate validates ServerePulseAction
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ServerePulseAction, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// EPulseAction returns ServerePulseActionEPulseActionEnum, set in ServerePulseAction
	EPulseAction() ServerePulseActionEPulseActionEnum
	// SetEPulseAction assigns ServerePulseActionEPulseActionEnum provided by user to ServerePulseAction
	SetEPulseAction(value ServerePulseActionEPulseActionEnum) ServerePulseAction
	// HasEPulseAction checks if EPulseAction has been set in ServerePulseAction
	HasEPulseAction() bool
}

func (obj *serverePulseAction) populateXml(xObj *Argument) error {

	if obj.HasEPulseAction() {

		member := Member{
			Name:  "epulseaction",
			Type:  "None",
			Value: strconv.FormatInt(int64(obj.obj.EPulseAction.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *serverePulseAction) populateFromXml(xObj *RetVal) error {

	return nil
}

type ServerePulseActionEPulseActionEnum string

// Enum of EPulseAction on ServerePulseAction
var ServerePulseActionEPulseAction = struct {
	KSTARTTX        ServerePulseActionEPulseActionEnum
	KSTOPTX         ServerePulseActionEPulseActionEnum
	KFREEZE         ServerePulseActionEPulseActionEnum
	KSTARTCAPTURE   ServerePulseActionEPulseActionEnum
	KSTOPCAPTURE    ServerePulseActionEPulseActionEnum
	KPAUSETX        ServerePulseActionEPulseActionEnum
	KRESUMETX       ServerePulseActionEPulseActionEnum
	KCLEARTIMESTAMP ServerePulseActionEPulseActionEnum
	KSTARTSYNCSTATS ServerePulseActionEPulseActionEnum
	KSTOPSYNCSTATS  ServerePulseActionEPulseActionEnum
	KSTARTTXGCL     ServerePulseActionEPulseActionEnum
	KSTARTRXGCL     ServerePulseActionEPulseActionEnum
}{
	KSTARTTX:        ServerePulseActionEPulseActionEnum("kStartTx"),
	KSTOPTX:         ServerePulseActionEPulseActionEnum("kStopTx"),
	KFREEZE:         ServerePulseActionEPulseActionEnum("kFreeze"),
	KSTARTCAPTURE:   ServerePulseActionEPulseActionEnum("kStartCapture"),
	KSTOPCAPTURE:    ServerePulseActionEPulseActionEnum("kStopCapture"),
	KPAUSETX:        ServerePulseActionEPulseActionEnum("kPauseTx"),
	KRESUMETX:       ServerePulseActionEPulseActionEnum("kResumeTx"),
	KCLEARTIMESTAMP: ServerePulseActionEPulseActionEnum("kClearTimestamp"),
	KSTARTSYNCSTATS: ServerePulseActionEPulseActionEnum("kStartSyncStats"),
	KSTOPSYNCSTATS:  ServerePulseActionEPulseActionEnum("kStopSyncStats"),
	KSTARTTXGCL:     ServerePulseActionEPulseActionEnum("kStartTxGcl"),
	KSTARTRXGCL:     ServerePulseActionEPulseActionEnum("kStartRxGcl"),
}

func (obj *serverePulseAction) EPulseAction() ServerePulseActionEPulseActionEnum {
	return ServerePulseActionEPulseActionEnum(obj.obj.EPulseAction.Enum().String())
}

// description is TBD
// EPulseAction returns a string
func (obj *serverePulseAction) HasEPulseAction() bool {
	return obj.obj.EPulseAction != nil
}

func (obj *serverePulseAction) SetEPulseAction(value ServerePulseActionEPulseActionEnum) ServerePulseAction {
	intValue, ok := otg.ServerePulseAction_EPulseAction_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on ServerePulseActionEPulseActionEnum", string(value)))
		return obj
	}
	enumValue := otg.ServerePulseAction_EPulseAction_Enum(intValue)
	obj.obj.EPulseAction = &enumValue

	return obj
}

func (obj *serverePulseAction) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *serverePulseAction) setDefault() {

}

// ***** ServerTimedAction *****
type serverTimedAction struct {
	validation
	obj *otg.ServerTimedAction
}

func NewServerTimedAction() ServerTimedAction {
	obj := serverTimedAction{obj: &otg.ServerTimedAction{}}
	obj.setDefault()
	return &obj
}

func (obj *serverTimedAction) Msg() *otg.ServerTimedAction {
	return obj.obj
}

func (obj *serverTimedAction) SetMsg(msg *otg.ServerTimedAction) ServerTimedAction {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *serverTimedAction) ToProto() (*otg.ServerTimedAction, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *serverTimedAction) FromProto(msg *otg.ServerTimedAction) (ServerTimedAction, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *serverTimedAction) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *serverTimedAction) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *serverTimedAction) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *serverTimedAction) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *serverTimedAction) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *serverTimedAction) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *serverTimedAction) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *serverTimedAction) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *serverTimedAction) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *serverTimedAction) Clone() (ServerTimedAction, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewServerTimedAction()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *serverTimedAction) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// ServerTimedAction is action, the action to be executed. when, the time (in nanoseconds after timestamps were cleared) to execute the action.
type ServerTimedAction interface {
	Validation
	// Msg marshals ServerTimedAction to protobuf object *otg.ServerTimedAction
	// and doesn't set defaults
	Msg() *otg.ServerTimedAction
	// SetMsg unmarshals ServerTimedAction from protobuf object *otg.ServerTimedAction
	// and doesn't set defaults
	SetMsg(*otg.ServerTimedAction) ServerTimedAction
	// ToProto marshals ServerTimedAction to protobuf object *otg.ServerTimedAction
	ToProto() (*otg.ServerTimedAction, error)
	// ToPbText marshals ServerTimedAction to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ServerTimedAction to YAML text
	ToYaml() (string, error)
	// ToJson marshals ServerTimedAction to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ServerTimedAction from protobuf object *otg.ServerTimedAction
	FromProto(msg *otg.ServerTimedAction) (ServerTimedAction, error)
	// FromPbText unmarshals ServerTimedAction from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ServerTimedAction from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ServerTimedAction from JSON text
	FromJson(value string) error
	// Validate validates ServerTimedAction
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ServerTimedAction, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Action returns ServerTimedActionActionEnum, set in ServerTimedAction
	Action() ServerTimedActionActionEnum
	// SetAction assigns ServerTimedActionActionEnum provided by user to ServerTimedAction
	SetAction(value ServerTimedActionActionEnum) ServerTimedAction
	// HasAction checks if Action has been set in ServerTimedAction
	HasAction() bool
	// When returns int64, set in ServerTimedAction.
	When() int64
	// SetWhen assigns int64 provided by user to ServerTimedAction
	SetWhen(value int64) ServerTimedAction
	// HasWhen checks if When has been set in ServerTimedAction
	HasWhen() bool
}

func (obj *serverTimedAction) populateXml(xObj *Argument) error {

	if obj.HasAction() {

		member := Member{
			Name:  "action",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Server+eTimedAction",
			Value: strconv.FormatInt(int64(obj.obj.Action.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasWhen() {

		member := Member{
			Name:  "when",
			Type:  "int64",
			Value: strconv.FormatInt(obj.When(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *serverTimedAction) populateFromXml(xObj *RetVal) error {

	return nil
}

type ServerTimedActionActionEnum string

// Enum of Action on ServerTimedAction
var ServerTimedActionAction = struct {
	KSTARTTX        ServerTimedActionActionEnum
	KSTOPTX         ServerTimedActionActionEnum
	KSTARTSYNCSTATS ServerTimedActionActionEnum
	KSTOPSYNCSTATS  ServerTimedActionActionEnum
	KSTARTRXCAPTURE ServerTimedActionActionEnum
	KSTOPRXCAPTURE  ServerTimedActionActionEnum
	KSTARTTXCAPTURE ServerTimedActionActionEnum
	KSTOPTXCAPTURE  ServerTimedActionActionEnum
	KSTARTTXGCL     ServerTimedActionActionEnum
	KSTARTRXGCL     ServerTimedActionActionEnum
}{
	KSTARTTX:        ServerTimedActionActionEnum("kStartTx"),
	KSTOPTX:         ServerTimedActionActionEnum("kStopTx"),
	KSTARTSYNCSTATS: ServerTimedActionActionEnum("kStartSyncStats"),
	KSTOPSYNCSTATS:  ServerTimedActionActionEnum("kStopSyncStats"),
	KSTARTRXCAPTURE: ServerTimedActionActionEnum("kStartRxCapture"),
	KSTOPRXCAPTURE:  ServerTimedActionActionEnum("kStopRxCapture"),
	KSTARTTXCAPTURE: ServerTimedActionActionEnum("kStartTxCapture"),
	KSTOPTXCAPTURE:  ServerTimedActionActionEnum("kStopTxCapture"),
	KSTARTTXGCL:     ServerTimedActionActionEnum("kStartTxGcl"),
	KSTARTRXGCL:     ServerTimedActionActionEnum("kStartRxGcl"),
}

func (obj *serverTimedAction) Action() ServerTimedActionActionEnum {
	return ServerTimedActionActionEnum(obj.obj.Action.Enum().String())
}

// TBD
// Action returns a string
func (obj *serverTimedAction) HasAction() bool {
	return obj.obj.Action != nil
}

func (obj *serverTimedAction) SetAction(value ServerTimedActionActionEnum) ServerTimedAction {
	intValue, ok := otg.ServerTimedAction_Action_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on ServerTimedActionActionEnum", string(value)))
		return obj
	}
	enumValue := otg.ServerTimedAction_Action_Enum(intValue)
	obj.obj.Action = &enumValue

	return obj
}

// TBD
// When returns a int64
func (obj *serverTimedAction) When() int64 {

	return *obj.obj.When

}

// TBD
// When returns a int64
func (obj *serverTimedAction) HasWhen() bool {
	return obj.obj.When != nil
}

// TBD
// SetWhen sets the int64 value in the ServerTimedAction object
func (obj *serverTimedAction) SetWhen(value int64) ServerTimedAction {

	obj.obj.When = &value
	return obj
}

func (obj *serverTimedAction) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *serverTimedAction) setDefault() {

}

// ***** StreamStreamConfigurationList *****
type streamStreamConfigurationList struct {
	validation
	obj                           *otg.StreamStreamConfigurationList
	streamConfigurationListHolder StreamStreamConfigurationListStreamStreamConfigurationTypeIter
}

func NewStreamStreamConfigurationList() StreamStreamConfigurationList {
	obj := streamStreamConfigurationList{obj: &otg.StreamStreamConfigurationList{}}
	obj.setDefault()
	return &obj
}

func (obj *streamStreamConfigurationList) Msg() *otg.StreamStreamConfigurationList {
	return obj.obj
}

func (obj *streamStreamConfigurationList) SetMsg(msg *otg.StreamStreamConfigurationList) StreamStreamConfigurationList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamStreamConfigurationList) ToProto() (*otg.StreamStreamConfigurationList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamStreamConfigurationList) FromProto(msg *otg.StreamStreamConfigurationList) (StreamStreamConfigurationList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamStreamConfigurationList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamStreamConfigurationList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamStreamConfigurationList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamStreamConfigurationList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamStreamConfigurationList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamStreamConfigurationList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamStreamConfigurationList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamStreamConfigurationList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamStreamConfigurationList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamStreamConfigurationList) Clone() (StreamStreamConfigurationList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamStreamConfigurationList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamStreamConfigurationList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamStreamConfigurationList) setNil() {
	obj.streamConfigurationListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamStreamConfigurationList is tBD
type StreamStreamConfigurationList interface {
	Validation
	// Msg marshals StreamStreamConfigurationList to protobuf object *otg.StreamStreamConfigurationList
	// and doesn't set defaults
	Msg() *otg.StreamStreamConfigurationList
	// SetMsg unmarshals StreamStreamConfigurationList from protobuf object *otg.StreamStreamConfigurationList
	// and doesn't set defaults
	SetMsg(*otg.StreamStreamConfigurationList) StreamStreamConfigurationList
	// ToProto marshals StreamStreamConfigurationList to protobuf object *otg.StreamStreamConfigurationList
	ToProto() (*otg.StreamStreamConfigurationList, error)
	// ToPbText marshals StreamStreamConfigurationList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamStreamConfigurationList to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamStreamConfigurationList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamStreamConfigurationList from protobuf object *otg.StreamStreamConfigurationList
	FromProto(msg *otg.StreamStreamConfigurationList) (StreamStreamConfigurationList, error)
	// FromPbText unmarshals StreamStreamConfigurationList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamStreamConfigurationList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamStreamConfigurationList from JSON text
	FromJson(value string) error
	// Validate validates StreamStreamConfigurationList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamStreamConfigurationList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// StreamConfigurationList returns StreamStreamConfigurationListStreamStreamConfigurationTypeIterIter, set in StreamStreamConfigurationList
	StreamConfigurationList() StreamStreamConfigurationListStreamStreamConfigurationTypeIter
	setNil()
}

func (obj *streamStreamConfigurationList) populateXml(xObj *Argument) error {

	if len(obj.StreamConfigurationList().Items()) != 0 {
		for _, item := range obj.StreamConfigurationList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *streamStreamConfigurationList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// StreamConfigurationList returns a []StreamStreamConfigurationType
func (obj *streamStreamConfigurationList) StreamConfigurationList() StreamStreamConfigurationListStreamStreamConfigurationTypeIter {
	if len(obj.obj.StreamConfigurationList) == 0 {
		obj.obj.StreamConfigurationList = []*otg.StreamStreamConfigurationType{}
	}
	if obj.streamConfigurationListHolder == nil {
		obj.streamConfigurationListHolder = newStreamStreamConfigurationListStreamStreamConfigurationTypeIter(&obj.obj.StreamConfigurationList).setMsg(obj)
	}
	return obj.streamConfigurationListHolder
}

type streamStreamConfigurationListStreamStreamConfigurationTypeIter struct {
	obj                                *streamStreamConfigurationList
	streamStreamConfigurationTypeSlice []StreamStreamConfigurationType
	fieldPtr                           *[]*otg.StreamStreamConfigurationType
}

func newStreamStreamConfigurationListStreamStreamConfigurationTypeIter(ptr *[]*otg.StreamStreamConfigurationType) StreamStreamConfigurationListStreamStreamConfigurationTypeIter {
	return &streamStreamConfigurationListStreamStreamConfigurationTypeIter{fieldPtr: ptr}
}

type StreamStreamConfigurationListStreamStreamConfigurationTypeIter interface {
	setMsg(*streamStreamConfigurationList) StreamStreamConfigurationListStreamStreamConfigurationTypeIter
	Items() []StreamStreamConfigurationType
	Add() StreamStreamConfigurationType
	Append(items ...StreamStreamConfigurationType) StreamStreamConfigurationListStreamStreamConfigurationTypeIter
	Set(index int, newObj StreamStreamConfigurationType) StreamStreamConfigurationListStreamStreamConfigurationTypeIter
	Clear() StreamStreamConfigurationListStreamStreamConfigurationTypeIter
	clearHolderSlice() StreamStreamConfigurationListStreamStreamConfigurationTypeIter
	appendHolderSlice(item StreamStreamConfigurationType) StreamStreamConfigurationListStreamStreamConfigurationTypeIter
}

func (obj *streamStreamConfigurationListStreamStreamConfigurationTypeIter) setMsg(msg *streamStreamConfigurationList) StreamStreamConfigurationListStreamStreamConfigurationTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&streamStreamConfigurationType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *streamStreamConfigurationListStreamStreamConfigurationTypeIter) Items() []StreamStreamConfigurationType {
	return obj.streamStreamConfigurationTypeSlice
}

func (obj *streamStreamConfigurationListStreamStreamConfigurationTypeIter) Add() StreamStreamConfigurationType {
	newObj := &otg.StreamStreamConfigurationType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &streamStreamConfigurationType{obj: newObj}
	newLibObj.setDefault()
	obj.streamStreamConfigurationTypeSlice = append(obj.streamStreamConfigurationTypeSlice, newLibObj)
	return newLibObj
}

func (obj *streamStreamConfigurationListStreamStreamConfigurationTypeIter) Append(items ...StreamStreamConfigurationType) StreamStreamConfigurationListStreamStreamConfigurationTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.streamStreamConfigurationTypeSlice = append(obj.streamStreamConfigurationTypeSlice, item)
	}
	return obj
}

func (obj *streamStreamConfigurationListStreamStreamConfigurationTypeIter) Set(index int, newObj StreamStreamConfigurationType) StreamStreamConfigurationListStreamStreamConfigurationTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.streamStreamConfigurationTypeSlice[index] = newObj
	return obj
}
func (obj *streamStreamConfigurationListStreamStreamConfigurationTypeIter) Clear() StreamStreamConfigurationListStreamStreamConfigurationTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.StreamStreamConfigurationType{}
		obj.streamStreamConfigurationTypeSlice = []StreamStreamConfigurationType{}
	}
	return obj
}
func (obj *streamStreamConfigurationListStreamStreamConfigurationTypeIter) clearHolderSlice() StreamStreamConfigurationListStreamStreamConfigurationTypeIter {
	if len(obj.streamStreamConfigurationTypeSlice) > 0 {
		obj.streamStreamConfigurationTypeSlice = []StreamStreamConfigurationType{}
	}
	return obj
}
func (obj *streamStreamConfigurationListStreamStreamConfigurationTypeIter) appendHolderSlice(item StreamStreamConfigurationType) StreamStreamConfigurationListStreamStreamConfigurationTypeIter {
	obj.streamStreamConfigurationTypeSlice = append(obj.streamStreamConfigurationTypeSlice, item)
	return obj
}

func (obj *streamStreamConfigurationList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.StreamConfigurationList) != 0 {

		if set_default {
			obj.StreamConfigurationList().clearHolderSlice()
			for _, item := range obj.obj.StreamConfigurationList {
				obj.StreamConfigurationList().appendHolderSlice(&streamStreamConfigurationType{obj: item})
			}
		}
		for _, item := range obj.StreamConfigurationList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *streamStreamConfigurationList) setDefault() {

}

// ***** StreamStreamUpdateConfigurationType *****
type streamStreamUpdateConfigurationType struct {
	validation
	obj                     *otg.StreamStreamUpdateConfigurationType
	streamIdHolder          IdTypeStreamId
	configurationDataHolder StreamConfigurationUpdateDataType
}

func NewStreamStreamUpdateConfigurationType() StreamStreamUpdateConfigurationType {
	obj := streamStreamUpdateConfigurationType{obj: &otg.StreamStreamUpdateConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamStreamUpdateConfigurationType) Msg() *otg.StreamStreamUpdateConfigurationType {
	return obj.obj
}

func (obj *streamStreamUpdateConfigurationType) SetMsg(msg *otg.StreamStreamUpdateConfigurationType) StreamStreamUpdateConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamStreamUpdateConfigurationType) ToProto() (*otg.StreamStreamUpdateConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamStreamUpdateConfigurationType) FromProto(msg *otg.StreamStreamUpdateConfigurationType) (StreamStreamUpdateConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamStreamUpdateConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamStreamUpdateConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamStreamUpdateConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamStreamUpdateConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamStreamUpdateConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamStreamUpdateConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamStreamUpdateConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamStreamUpdateConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamStreamUpdateConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamStreamUpdateConfigurationType) Clone() (StreamStreamUpdateConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamStreamUpdateConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamStreamUpdateConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamStreamUpdateConfigurationType) setNil() {
	obj.streamIdHolder = nil
	obj.configurationDataHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamStreamUpdateConfigurationType is tBD
type StreamStreamUpdateConfigurationType interface {
	Validation
	// Msg marshals StreamStreamUpdateConfigurationType to protobuf object *otg.StreamStreamUpdateConfigurationType
	// and doesn't set defaults
	Msg() *otg.StreamStreamUpdateConfigurationType
	// SetMsg unmarshals StreamStreamUpdateConfigurationType from protobuf object *otg.StreamStreamUpdateConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.StreamStreamUpdateConfigurationType) StreamStreamUpdateConfigurationType
	// ToProto marshals StreamStreamUpdateConfigurationType to protobuf object *otg.StreamStreamUpdateConfigurationType
	ToProto() (*otg.StreamStreamUpdateConfigurationType, error)
	// ToPbText marshals StreamStreamUpdateConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamStreamUpdateConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamStreamUpdateConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamStreamUpdateConfigurationType from protobuf object *otg.StreamStreamUpdateConfigurationType
	FromProto(msg *otg.StreamStreamUpdateConfigurationType) (StreamStreamUpdateConfigurationType, error)
	// FromPbText unmarshals StreamStreamUpdateConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamStreamUpdateConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamStreamUpdateConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates StreamStreamUpdateConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamStreamUpdateConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// StreamId returns IdTypeStreamId, set in StreamStreamUpdateConfigurationType.
	// IdTypeStreamId is tBD
	StreamId() IdTypeStreamId
	// SetStreamId assigns IdTypeStreamId provided by user to StreamStreamUpdateConfigurationType.
	// IdTypeStreamId is tBD
	SetStreamId(value IdTypeStreamId) StreamStreamUpdateConfigurationType
	// HasStreamId checks if StreamId has been set in StreamStreamUpdateConfigurationType
	HasStreamId() bool
	// ConfigurationData returns StreamConfigurationUpdateDataType, set in StreamStreamUpdateConfigurationType.
	// StreamConfigurationUpdateDataType is used for updating individual pieces of the stream configuration. The flags indicates which piece should be overwritten on the stream.
	ConfigurationData() StreamConfigurationUpdateDataType
	// SetConfigurationData assigns StreamConfigurationUpdateDataType provided by user to StreamStreamUpdateConfigurationType.
	// StreamConfigurationUpdateDataType is used for updating individual pieces of the stream configuration. The flags indicates which piece should be overwritten on the stream.
	SetConfigurationData(value StreamConfigurationUpdateDataType) StreamStreamUpdateConfigurationType
	// HasConfigurationData checks if ConfigurationData has been set in StreamStreamUpdateConfigurationType
	HasConfigurationData() bool
	setNil()
}

func (obj *streamStreamUpdateConfigurationType) populateXml(xObj *Argument) error {

	return nil
}

func (obj *streamStreamUpdateConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// The identifier of the stream to which the following configuration   pertains.
// StreamId returns a IdTypeStreamId
func (obj *streamStreamUpdateConfigurationType) StreamId() IdTypeStreamId {
	if obj.obj.StreamId == nil {
		obj.obj.StreamId = NewIdTypeStreamId().Msg()
	}
	if obj.streamIdHolder == nil {
		obj.streamIdHolder = &idTypeStreamId{obj: obj.obj.StreamId}
	}
	return obj.streamIdHolder
}

// The identifier of the stream to which the following configuration   pertains.
// StreamId returns a IdTypeStreamId
func (obj *streamStreamUpdateConfigurationType) HasStreamId() bool {
	return obj.obj.StreamId != nil
}

// The identifier of the stream to which the following configuration   pertains.
// SetStreamId sets the IdTypeStreamId value in the StreamStreamUpdateConfigurationType object
func (obj *streamStreamUpdateConfigurationType) SetStreamId(value IdTypeStreamId) StreamStreamUpdateConfigurationType {

	obj.streamIdHolder = nil
	obj.obj.StreamId = value.Msg()

	return obj
}

// Provide the configuration data for this stream. This field may   be absent if only the state of the stream needs to be changed.
// ConfigurationData returns a StreamConfigurationUpdateDataType
func (obj *streamStreamUpdateConfigurationType) ConfigurationData() StreamConfigurationUpdateDataType {
	if obj.obj.ConfigurationData == nil {
		obj.obj.ConfigurationData = NewStreamConfigurationUpdateDataType().Msg()
	}
	if obj.configurationDataHolder == nil {
		obj.configurationDataHolder = &streamConfigurationUpdateDataType{obj: obj.obj.ConfigurationData}
	}
	return obj.configurationDataHolder
}

// Provide the configuration data for this stream. This field may   be absent if only the state of the stream needs to be changed.
// ConfigurationData returns a StreamConfigurationUpdateDataType
func (obj *streamStreamUpdateConfigurationType) HasConfigurationData() bool {
	return obj.obj.ConfigurationData != nil
}

// Provide the configuration data for this stream. This field may   be absent if only the state of the stream needs to be changed.
// SetConfigurationData sets the StreamConfigurationUpdateDataType value in the StreamStreamUpdateConfigurationType object
func (obj *streamStreamUpdateConfigurationType) SetConfigurationData(value StreamConfigurationUpdateDataType) StreamStreamUpdateConfigurationType {

	obj.configurationDataHolder = nil
	obj.obj.ConfigurationData = value.Msg()

	return obj
}

func (obj *streamStreamUpdateConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.StreamId != nil {

		obj.StreamId().validateObj(vObj, set_default)
	}

	if obj.obj.ConfigurationData != nil {

		obj.ConfigurationData().validateObj(vObj, set_default)
	}

}

func (obj *streamStreamUpdateConfigurationType) setDefault() {

}

// ***** StreamBackgroundDataSettingList *****
type streamBackgroundDataSettingList struct {
	validation
	obj                             *otg.StreamBackgroundDataSettingList
	backgroundDataSettingListHolder StreamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter
}

func NewStreamBackgroundDataSettingList() StreamBackgroundDataSettingList {
	obj := streamBackgroundDataSettingList{obj: &otg.StreamBackgroundDataSettingList{}}
	obj.setDefault()
	return &obj
}

func (obj *streamBackgroundDataSettingList) Msg() *otg.StreamBackgroundDataSettingList {
	return obj.obj
}

func (obj *streamBackgroundDataSettingList) SetMsg(msg *otg.StreamBackgroundDataSettingList) StreamBackgroundDataSettingList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamBackgroundDataSettingList) ToProto() (*otg.StreamBackgroundDataSettingList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamBackgroundDataSettingList) FromProto(msg *otg.StreamBackgroundDataSettingList) (StreamBackgroundDataSettingList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamBackgroundDataSettingList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamBackgroundDataSettingList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamBackgroundDataSettingList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamBackgroundDataSettingList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamBackgroundDataSettingList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamBackgroundDataSettingList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamBackgroundDataSettingList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamBackgroundDataSettingList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamBackgroundDataSettingList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamBackgroundDataSettingList) Clone() (StreamBackgroundDataSettingList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamBackgroundDataSettingList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamBackgroundDataSettingList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamBackgroundDataSettingList) setNil() {
	obj.backgroundDataSettingListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamBackgroundDataSettingList is tBD
type StreamBackgroundDataSettingList interface {
	Validation
	// Msg marshals StreamBackgroundDataSettingList to protobuf object *otg.StreamBackgroundDataSettingList
	// and doesn't set defaults
	Msg() *otg.StreamBackgroundDataSettingList
	// SetMsg unmarshals StreamBackgroundDataSettingList from protobuf object *otg.StreamBackgroundDataSettingList
	// and doesn't set defaults
	SetMsg(*otg.StreamBackgroundDataSettingList) StreamBackgroundDataSettingList
	// ToProto marshals StreamBackgroundDataSettingList to protobuf object *otg.StreamBackgroundDataSettingList
	ToProto() (*otg.StreamBackgroundDataSettingList, error)
	// ToPbText marshals StreamBackgroundDataSettingList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamBackgroundDataSettingList to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamBackgroundDataSettingList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamBackgroundDataSettingList from protobuf object *otg.StreamBackgroundDataSettingList
	FromProto(msg *otg.StreamBackgroundDataSettingList) (StreamBackgroundDataSettingList, error)
	// FromPbText unmarshals StreamBackgroundDataSettingList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamBackgroundDataSettingList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamBackgroundDataSettingList from JSON text
	FromJson(value string) error
	// Validate validates StreamBackgroundDataSettingList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamBackgroundDataSettingList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// BackgroundDataSettingList returns StreamBackgroundDataSettingListStreamBackgroundDataSettingTypeIterIter, set in StreamBackgroundDataSettingList
	BackgroundDataSettingList() StreamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter
	setNil()
}

func (obj *streamBackgroundDataSettingList) populateXml(xObj *Argument) error {

	if len(obj.BackgroundDataSettingList().Items()) != 0 {
		for _, item := range obj.BackgroundDataSettingList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *streamBackgroundDataSettingList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// BackgroundDataSettingList returns a []StreamBackgroundDataSettingType
func (obj *streamBackgroundDataSettingList) BackgroundDataSettingList() StreamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter {
	if len(obj.obj.BackgroundDataSettingList) == 0 {
		obj.obj.BackgroundDataSettingList = []*otg.StreamBackgroundDataSettingType{}
	}
	if obj.backgroundDataSettingListHolder == nil {
		obj.backgroundDataSettingListHolder = newStreamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter(&obj.obj.BackgroundDataSettingList).setMsg(obj)
	}
	return obj.backgroundDataSettingListHolder
}

type streamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter struct {
	obj                                  *streamBackgroundDataSettingList
	streamBackgroundDataSettingTypeSlice []StreamBackgroundDataSettingType
	fieldPtr                             *[]*otg.StreamBackgroundDataSettingType
}

func newStreamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter(ptr *[]*otg.StreamBackgroundDataSettingType) StreamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter {
	return &streamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter{fieldPtr: ptr}
}

type StreamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter interface {
	setMsg(*streamBackgroundDataSettingList) StreamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter
	Items() []StreamBackgroundDataSettingType
	Add() StreamBackgroundDataSettingType
	Append(items ...StreamBackgroundDataSettingType) StreamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter
	Set(index int, newObj StreamBackgroundDataSettingType) StreamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter
	Clear() StreamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter
	clearHolderSlice() StreamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter
	appendHolderSlice(item StreamBackgroundDataSettingType) StreamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter
}

func (obj *streamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter) setMsg(msg *streamBackgroundDataSettingList) StreamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&streamBackgroundDataSettingType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *streamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter) Items() []StreamBackgroundDataSettingType {
	return obj.streamBackgroundDataSettingTypeSlice
}

func (obj *streamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter) Add() StreamBackgroundDataSettingType {
	newObj := &otg.StreamBackgroundDataSettingType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &streamBackgroundDataSettingType{obj: newObj}
	newLibObj.setDefault()
	obj.streamBackgroundDataSettingTypeSlice = append(obj.streamBackgroundDataSettingTypeSlice, newLibObj)
	return newLibObj
}

func (obj *streamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter) Append(items ...StreamBackgroundDataSettingType) StreamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.streamBackgroundDataSettingTypeSlice = append(obj.streamBackgroundDataSettingTypeSlice, item)
	}
	return obj
}

func (obj *streamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter) Set(index int, newObj StreamBackgroundDataSettingType) StreamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.streamBackgroundDataSettingTypeSlice[index] = newObj
	return obj
}
func (obj *streamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter) Clear() StreamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.StreamBackgroundDataSettingType{}
		obj.streamBackgroundDataSettingTypeSlice = []StreamBackgroundDataSettingType{}
	}
	return obj
}
func (obj *streamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter) clearHolderSlice() StreamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter {
	if len(obj.streamBackgroundDataSettingTypeSlice) > 0 {
		obj.streamBackgroundDataSettingTypeSlice = []StreamBackgroundDataSettingType{}
	}
	return obj
}
func (obj *streamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter) appendHolderSlice(item StreamBackgroundDataSettingType) StreamBackgroundDataSettingListStreamBackgroundDataSettingTypeIter {
	obj.streamBackgroundDataSettingTypeSlice = append(obj.streamBackgroundDataSettingTypeSlice, item)
	return obj
}

func (obj *streamBackgroundDataSettingList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.BackgroundDataSettingList) != 0 {

		if set_default {
			obj.BackgroundDataSettingList().clearHolderSlice()
			for _, item := range obj.obj.BackgroundDataSettingList {
				obj.BackgroundDataSettingList().appendHolderSlice(&streamBackgroundDataSettingType{obj: item})
			}
		}
		for _, item := range obj.BackgroundDataSettingList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *streamBackgroundDataSettingList) setDefault() {

}

// ***** StreamStreamRangeListSettingList *****
type streamStreamRangeListSettingList struct {
	validation
	obj                              *otg.StreamStreamRangeListSettingList
	streamRangeListSettingListHolder StreamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter
}

func NewStreamStreamRangeListSettingList() StreamStreamRangeListSettingList {
	obj := streamStreamRangeListSettingList{obj: &otg.StreamStreamRangeListSettingList{}}
	obj.setDefault()
	return &obj
}

func (obj *streamStreamRangeListSettingList) Msg() *otg.StreamStreamRangeListSettingList {
	return obj.obj
}

func (obj *streamStreamRangeListSettingList) SetMsg(msg *otg.StreamStreamRangeListSettingList) StreamStreamRangeListSettingList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamStreamRangeListSettingList) ToProto() (*otg.StreamStreamRangeListSettingList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamStreamRangeListSettingList) FromProto(msg *otg.StreamStreamRangeListSettingList) (StreamStreamRangeListSettingList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamStreamRangeListSettingList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamStreamRangeListSettingList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamStreamRangeListSettingList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamStreamRangeListSettingList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamStreamRangeListSettingList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamStreamRangeListSettingList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamStreamRangeListSettingList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamStreamRangeListSettingList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamStreamRangeListSettingList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamStreamRangeListSettingList) Clone() (StreamStreamRangeListSettingList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamStreamRangeListSettingList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamStreamRangeListSettingList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamStreamRangeListSettingList) setNil() {
	obj.streamRangeListSettingListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamStreamRangeListSettingList is tBD
type StreamStreamRangeListSettingList interface {
	Validation
	// Msg marshals StreamStreamRangeListSettingList to protobuf object *otg.StreamStreamRangeListSettingList
	// and doesn't set defaults
	Msg() *otg.StreamStreamRangeListSettingList
	// SetMsg unmarshals StreamStreamRangeListSettingList from protobuf object *otg.StreamStreamRangeListSettingList
	// and doesn't set defaults
	SetMsg(*otg.StreamStreamRangeListSettingList) StreamStreamRangeListSettingList
	// ToProto marshals StreamStreamRangeListSettingList to protobuf object *otg.StreamStreamRangeListSettingList
	ToProto() (*otg.StreamStreamRangeListSettingList, error)
	// ToPbText marshals StreamStreamRangeListSettingList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamStreamRangeListSettingList to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamStreamRangeListSettingList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamStreamRangeListSettingList from protobuf object *otg.StreamStreamRangeListSettingList
	FromProto(msg *otg.StreamStreamRangeListSettingList) (StreamStreamRangeListSettingList, error)
	// FromPbText unmarshals StreamStreamRangeListSettingList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamStreamRangeListSettingList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamStreamRangeListSettingList from JSON text
	FromJson(value string) error
	// Validate validates StreamStreamRangeListSettingList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamStreamRangeListSettingList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// StreamRangeListSettingList returns StreamStreamRangeListSettingListStreamStreamRangeListSettingTypeIterIter, set in StreamStreamRangeListSettingList
	StreamRangeListSettingList() StreamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter
	setNil()
}

func (obj *streamStreamRangeListSettingList) populateXml(xObj *Argument) error {

	if len(obj.StreamRangeListSettingList().Items()) != 0 {
		for _, item := range obj.StreamRangeListSettingList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *streamStreamRangeListSettingList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// StreamRangeListSettingList returns a []StreamStreamRangeListSettingType
func (obj *streamStreamRangeListSettingList) StreamRangeListSettingList() StreamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter {
	if len(obj.obj.StreamRangeListSettingList) == 0 {
		obj.obj.StreamRangeListSettingList = []*otg.StreamStreamRangeListSettingType{}
	}
	if obj.streamRangeListSettingListHolder == nil {
		obj.streamRangeListSettingListHolder = newStreamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter(&obj.obj.StreamRangeListSettingList).setMsg(obj)
	}
	return obj.streamRangeListSettingListHolder
}

type streamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter struct {
	obj                                   *streamStreamRangeListSettingList
	streamStreamRangeListSettingTypeSlice []StreamStreamRangeListSettingType
	fieldPtr                              *[]*otg.StreamStreamRangeListSettingType
}

func newStreamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter(ptr *[]*otg.StreamStreamRangeListSettingType) StreamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter {
	return &streamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter{fieldPtr: ptr}
}

type StreamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter interface {
	setMsg(*streamStreamRangeListSettingList) StreamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter
	Items() []StreamStreamRangeListSettingType
	Add() StreamStreamRangeListSettingType
	Append(items ...StreamStreamRangeListSettingType) StreamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter
	Set(index int, newObj StreamStreamRangeListSettingType) StreamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter
	Clear() StreamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter
	clearHolderSlice() StreamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter
	appendHolderSlice(item StreamStreamRangeListSettingType) StreamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter
}

func (obj *streamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter) setMsg(msg *streamStreamRangeListSettingList) StreamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&streamStreamRangeListSettingType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *streamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter) Items() []StreamStreamRangeListSettingType {
	return obj.streamStreamRangeListSettingTypeSlice
}

func (obj *streamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter) Add() StreamStreamRangeListSettingType {
	newObj := &otg.StreamStreamRangeListSettingType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &streamStreamRangeListSettingType{obj: newObj}
	newLibObj.setDefault()
	obj.streamStreamRangeListSettingTypeSlice = append(obj.streamStreamRangeListSettingTypeSlice, newLibObj)
	return newLibObj
}

func (obj *streamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter) Append(items ...StreamStreamRangeListSettingType) StreamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.streamStreamRangeListSettingTypeSlice = append(obj.streamStreamRangeListSettingTypeSlice, item)
	}
	return obj
}

func (obj *streamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter) Set(index int, newObj StreamStreamRangeListSettingType) StreamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.streamStreamRangeListSettingTypeSlice[index] = newObj
	return obj
}
func (obj *streamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter) Clear() StreamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.StreamStreamRangeListSettingType{}
		obj.streamStreamRangeListSettingTypeSlice = []StreamStreamRangeListSettingType{}
	}
	return obj
}
func (obj *streamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter) clearHolderSlice() StreamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter {
	if len(obj.streamStreamRangeListSettingTypeSlice) > 0 {
		obj.streamStreamRangeListSettingTypeSlice = []StreamStreamRangeListSettingType{}
	}
	return obj
}
func (obj *streamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter) appendHolderSlice(item StreamStreamRangeListSettingType) StreamStreamRangeListSettingListStreamStreamRangeListSettingTypeIter {
	obj.streamStreamRangeListSettingTypeSlice = append(obj.streamStreamRangeListSettingTypeSlice, item)
	return obj
}

func (obj *streamStreamRangeListSettingList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.StreamRangeListSettingList) != 0 {

		if set_default {
			obj.StreamRangeListSettingList().clearHolderSlice()
			for _, item := range obj.obj.StreamRangeListSettingList {
				obj.StreamRangeListSettingList().appendHolderSlice(&streamStreamRangeListSettingType{obj: item})
			}
		}
		for _, item := range obj.StreamRangeListSettingList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *streamStreamRangeListSettingList) setDefault() {

}

// ***** StreamStreamTableUdfDataType *****
type streamStreamTableUdfDataType struct {
	validation
	obj            *otg.StreamStreamTableUdfDataType
	streamIdHolder IdTypeStreamId
	columnsHolder  TableUdfColumnMVDataList
}

func NewStreamStreamTableUdfDataType() StreamStreamTableUdfDataType {
	obj := streamStreamTableUdfDataType{obj: &otg.StreamStreamTableUdfDataType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamStreamTableUdfDataType) Msg() *otg.StreamStreamTableUdfDataType {
	return obj.obj
}

func (obj *streamStreamTableUdfDataType) SetMsg(msg *otg.StreamStreamTableUdfDataType) StreamStreamTableUdfDataType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamStreamTableUdfDataType) ToProto() (*otg.StreamStreamTableUdfDataType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamStreamTableUdfDataType) FromProto(msg *otg.StreamStreamTableUdfDataType) (StreamStreamTableUdfDataType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamStreamTableUdfDataType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamStreamTableUdfDataType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamStreamTableUdfDataType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamStreamTableUdfDataType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamStreamTableUdfDataType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamStreamTableUdfDataType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamStreamTableUdfDataType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamStreamTableUdfDataType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamStreamTableUdfDataType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamStreamTableUdfDataType) Clone() (StreamStreamTableUdfDataType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamStreamTableUdfDataType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamStreamTableUdfDataType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamStreamTableUdfDataType) setNil() {
	obj.streamIdHolder = nil
	obj.columnsHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamStreamTableUdfDataType is tBD
type StreamStreamTableUdfDataType interface {
	Validation
	// Msg marshals StreamStreamTableUdfDataType to protobuf object *otg.StreamStreamTableUdfDataType
	// and doesn't set defaults
	Msg() *otg.StreamStreamTableUdfDataType
	// SetMsg unmarshals StreamStreamTableUdfDataType from protobuf object *otg.StreamStreamTableUdfDataType
	// and doesn't set defaults
	SetMsg(*otg.StreamStreamTableUdfDataType) StreamStreamTableUdfDataType
	// ToProto marshals StreamStreamTableUdfDataType to protobuf object *otg.StreamStreamTableUdfDataType
	ToProto() (*otg.StreamStreamTableUdfDataType, error)
	// ToPbText marshals StreamStreamTableUdfDataType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamStreamTableUdfDataType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamStreamTableUdfDataType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamStreamTableUdfDataType from protobuf object *otg.StreamStreamTableUdfDataType
	FromProto(msg *otg.StreamStreamTableUdfDataType) (StreamStreamTableUdfDataType, error)
	// FromPbText unmarshals StreamStreamTableUdfDataType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamStreamTableUdfDataType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamStreamTableUdfDataType from JSON text
	FromJson(value string) error
	// Validate validates StreamStreamTableUdfDataType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamStreamTableUdfDataType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// StreamId returns IdTypeStreamId, set in StreamStreamTableUdfDataType.
	// IdTypeStreamId is tBD
	StreamId() IdTypeStreamId
	// SetStreamId assigns IdTypeStreamId provided by user to StreamStreamTableUdfDataType.
	// IdTypeStreamId is tBD
	SetStreamId(value IdTypeStreamId) StreamStreamTableUdfDataType
	// HasStreamId checks if StreamId has been set in StreamStreamTableUdfDataType
	HasStreamId() bool
	// Columns returns TableUdfColumnMVDataList, set in StreamStreamTableUdfDataType.
	// TableUdfColumnMVDataList is tBD
	Columns() TableUdfColumnMVDataList
	// SetColumns assigns TableUdfColumnMVDataList provided by user to StreamStreamTableUdfDataType.
	// TableUdfColumnMVDataList is tBD
	SetColumns(value TableUdfColumnMVDataList) StreamStreamTableUdfDataType
	// HasColumns checks if Columns has been set in StreamStreamTableUdfDataType
	HasColumns() bool
	// RowOffset returns int32, set in StreamStreamTableUdfDataType.
	RowOffset() int32
	// SetRowOffset assigns int32 provided by user to StreamStreamTableUdfDataType
	SetRowOffset(value int32) StreamStreamTableUdfDataType
	// HasRowOffset checks if RowOffset has been set in StreamStreamTableUdfDataType
	HasRowOffset() bool
	// IsComplete returns bool, set in StreamStreamTableUdfDataType.
	IsComplete() bool
	// SetIsComplete assigns bool provided by user to StreamStreamTableUdfDataType
	SetIsComplete(value bool) StreamStreamTableUdfDataType
	// HasIsComplete checks if IsComplete has been set in StreamStreamTableUdfDataType
	HasIsComplete() bool
	setNil()
}

func (obj *streamStreamTableUdfDataType) populateXml(xObj *Argument) error {

	if obj.HasRowOffset() {

		member := Member{
			Name:  "rowoffset",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.RowOffset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIsComplete() {
		var value string
		if obj.IsComplete() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "iscomplete",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamStreamTableUdfDataType) populateFromXml(xObj *RetVal) error {

	return nil
}

// The identifier of the stream to which the following configuration   pertains.
// StreamId returns a IdTypeStreamId
func (obj *streamStreamTableUdfDataType) StreamId() IdTypeStreamId {
	if obj.obj.StreamId == nil {
		obj.obj.StreamId = NewIdTypeStreamId().Msg()
	}
	if obj.streamIdHolder == nil {
		obj.streamIdHolder = &idTypeStreamId{obj: obj.obj.StreamId}
	}
	return obj.streamIdHolder
}

// The identifier of the stream to which the following configuration   pertains.
// StreamId returns a IdTypeStreamId
func (obj *streamStreamTableUdfDataType) HasStreamId() bool {
	return obj.obj.StreamId != nil
}

// The identifier of the stream to which the following configuration   pertains.
// SetStreamId sets the IdTypeStreamId value in the StreamStreamTableUdfDataType object
func (obj *streamStreamTableUdfDataType) SetStreamId(value IdTypeStreamId) StreamStreamTableUdfDataType {

	obj.streamIdHolder = nil
	obj.obj.StreamId = value.Msg()

	return obj
}

// table udf is returned as a list of multi values. One multi value per column
// Columns returns a TableUdfColumnMVDataList
func (obj *streamStreamTableUdfDataType) Columns() TableUdfColumnMVDataList {
	if obj.obj.Columns == nil {
		obj.obj.Columns = NewTableUdfColumnMVDataList().Msg()
	}
	if obj.columnsHolder == nil {
		obj.columnsHolder = &tableUdfColumnMVDataList{obj: obj.obj.Columns}
	}
	return obj.columnsHolder
}

// table udf is returned as a list of multi values. One multi value per column
// Columns returns a TableUdfColumnMVDataList
func (obj *streamStreamTableUdfDataType) HasColumns() bool {
	return obj.obj.Columns != nil
}

// table udf is returned as a list of multi values. One multi value per column
// SetColumns sets the TableUdfColumnMVDataList value in the StreamStreamTableUdfDataType object
func (obj *streamStreamTableUdfDataType) SetColumns(value TableUdfColumnMVDataList) StreamStreamTableUdfDataType {

	obj.columnsHolder = nil
	obj.obj.Columns = value.Msg()

	return obj
}

// rowOffset indicates from which row in this column the multivalue should be expanded.
// RowOffset returns a int32
func (obj *streamStreamTableUdfDataType) RowOffset() int32 {

	return *obj.obj.RowOffset

}

// rowOffset indicates from which row in this column the multivalue should be expanded.
// RowOffset returns a int32
func (obj *streamStreamTableUdfDataType) HasRowOffset() bool {
	return obj.obj.RowOffset != nil
}

// rowOffset indicates from which row in this column the multivalue should be expanded.
// SetRowOffset sets the int32 value in the StreamStreamTableUdfDataType object
func (obj *streamStreamTableUdfDataType) SetRowOffset(value int32) StreamStreamTableUdfDataType {

	obj.obj.RowOffset = &value
	return obj
}

// TBD
// IsComplete returns a bool
func (obj *streamStreamTableUdfDataType) IsComplete() bool {

	return *obj.obj.IsComplete

}

// TBD
// IsComplete returns a bool
func (obj *streamStreamTableUdfDataType) HasIsComplete() bool {
	return obj.obj.IsComplete != nil
}

// TBD
// SetIsComplete sets the bool value in the StreamStreamTableUdfDataType object
func (obj *streamStreamTableUdfDataType) SetIsComplete(value bool) StreamStreamTableUdfDataType {

	obj.obj.IsComplete = &value
	return obj
}

func (obj *streamStreamTableUdfDataType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.StreamId != nil {

		obj.StreamId().validateObj(vObj, set_default)
	}

	if obj.obj.Columns != nil {

		obj.Columns().validateObj(vObj, set_default)
	}

}

func (obj *streamStreamTableUdfDataType) setDefault() {

}

// ***** StreamKillBitListSettingType *****
type streamKillBitListSettingType struct {
	validation
	obj               *otg.StreamKillBitListSettingType
	streamIdHolder    IdTypeStreamId
	killBitListHolder UdfKillBitList
}

func NewStreamKillBitListSettingType() StreamKillBitListSettingType {
	obj := streamKillBitListSettingType{obj: &otg.StreamKillBitListSettingType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamKillBitListSettingType) Msg() *otg.StreamKillBitListSettingType {
	return obj.obj
}

func (obj *streamKillBitListSettingType) SetMsg(msg *otg.StreamKillBitListSettingType) StreamKillBitListSettingType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamKillBitListSettingType) ToProto() (*otg.StreamKillBitListSettingType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamKillBitListSettingType) FromProto(msg *otg.StreamKillBitListSettingType) (StreamKillBitListSettingType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamKillBitListSettingType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamKillBitListSettingType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamKillBitListSettingType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamKillBitListSettingType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamKillBitListSettingType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamKillBitListSettingType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamKillBitListSettingType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamKillBitListSettingType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamKillBitListSettingType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamKillBitListSettingType) Clone() (StreamKillBitListSettingType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamKillBitListSettingType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamKillBitListSettingType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamKillBitListSettingType) setNil() {
	obj.streamIdHolder = nil
	obj.killBitListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamKillBitListSettingType is tBD
type StreamKillBitListSettingType interface {
	Validation
	// Msg marshals StreamKillBitListSettingType to protobuf object *otg.StreamKillBitListSettingType
	// and doesn't set defaults
	Msg() *otg.StreamKillBitListSettingType
	// SetMsg unmarshals StreamKillBitListSettingType from protobuf object *otg.StreamKillBitListSettingType
	// and doesn't set defaults
	SetMsg(*otg.StreamKillBitListSettingType) StreamKillBitListSettingType
	// ToProto marshals StreamKillBitListSettingType to protobuf object *otg.StreamKillBitListSettingType
	ToProto() (*otg.StreamKillBitListSettingType, error)
	// ToPbText marshals StreamKillBitListSettingType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamKillBitListSettingType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamKillBitListSettingType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamKillBitListSettingType from protobuf object *otg.StreamKillBitListSettingType
	FromProto(msg *otg.StreamKillBitListSettingType) (StreamKillBitListSettingType, error)
	// FromPbText unmarshals StreamKillBitListSettingType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamKillBitListSettingType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamKillBitListSettingType from JSON text
	FromJson(value string) error
	// Validate validates StreamKillBitListSettingType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamKillBitListSettingType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// StreamId returns IdTypeStreamId, set in StreamKillBitListSettingType.
	// IdTypeStreamId is tBD
	StreamId() IdTypeStreamId
	// SetStreamId assigns IdTypeStreamId provided by user to StreamKillBitListSettingType.
	// IdTypeStreamId is tBD
	SetStreamId(value IdTypeStreamId) StreamKillBitListSettingType
	// HasStreamId checks if StreamId has been set in StreamKillBitListSettingType
	HasStreamId() bool
	// KillBitList returns UdfKillBitList, set in StreamKillBitListSettingType.
	// UdfKillBitList is tBD
	KillBitList() UdfKillBitList
	// SetKillBitList assigns UdfKillBitList provided by user to StreamKillBitListSettingType.
	// UdfKillBitList is tBD
	SetKillBitList(value UdfKillBitList) StreamKillBitListSettingType
	// HasKillBitList checks if KillBitList has been set in StreamKillBitListSettingType
	HasKillBitList() bool
	setNil()
}

func (obj *streamKillBitListSettingType) populateXml(xObj *Argument) error {

	return nil
}

func (obj *streamKillBitListSettingType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// StreamId returns a IdTypeStreamId
func (obj *streamKillBitListSettingType) StreamId() IdTypeStreamId {
	if obj.obj.StreamId == nil {
		obj.obj.StreamId = NewIdTypeStreamId().Msg()
	}
	if obj.streamIdHolder == nil {
		obj.streamIdHolder = &idTypeStreamId{obj: obj.obj.StreamId}
	}
	return obj.streamIdHolder
}

// TBD
// StreamId returns a IdTypeStreamId
func (obj *streamKillBitListSettingType) HasStreamId() bool {
	return obj.obj.StreamId != nil
}

// TBD
// SetStreamId sets the IdTypeStreamId value in the StreamKillBitListSettingType object
func (obj *streamKillBitListSettingType) SetStreamId(value IdTypeStreamId) StreamKillBitListSettingType {

	obj.streamIdHolder = nil
	obj.obj.StreamId = value.Msg()

	return obj
}

// TBD
// KillBitList returns a UdfKillBitList
func (obj *streamKillBitListSettingType) KillBitList() UdfKillBitList {
	if obj.obj.KillBitList == nil {
		obj.obj.KillBitList = NewUdfKillBitList().Msg()
	}
	if obj.killBitListHolder == nil {
		obj.killBitListHolder = &udfKillBitList{obj: obj.obj.KillBitList}
	}
	return obj.killBitListHolder
}

// TBD
// KillBitList returns a UdfKillBitList
func (obj *streamKillBitListSettingType) HasKillBitList() bool {
	return obj.obj.KillBitList != nil
}

// TBD
// SetKillBitList sets the UdfKillBitList value in the StreamKillBitListSettingType object
func (obj *streamKillBitListSettingType) SetKillBitList(value UdfKillBitList) StreamKillBitListSettingType {

	obj.killBitListHolder = nil
	obj.obj.KillBitList = value.Msg()

	return obj
}

func (obj *streamKillBitListSettingType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.StreamId != nil {

		obj.StreamId().validateObj(vObj, set_default)
	}

	if obj.obj.KillBitList != nil {

		obj.KillBitList().validateObj(vObj, set_default)
	}

}

func (obj *streamKillBitListSettingType) setDefault() {

}

// ***** StreamStreamValueListSettingType *****
type streamStreamValueListSettingType struct {
	validation
	obj             *otg.StreamStreamValueListSettingType
	streamIdHolder  IdTypeStreamId
	valueListHolder UdfValueList
}

func NewStreamStreamValueListSettingType() StreamStreamValueListSettingType {
	obj := streamStreamValueListSettingType{obj: &otg.StreamStreamValueListSettingType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamStreamValueListSettingType) Msg() *otg.StreamStreamValueListSettingType {
	return obj.obj
}

func (obj *streamStreamValueListSettingType) SetMsg(msg *otg.StreamStreamValueListSettingType) StreamStreamValueListSettingType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamStreamValueListSettingType) ToProto() (*otg.StreamStreamValueListSettingType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamStreamValueListSettingType) FromProto(msg *otg.StreamStreamValueListSettingType) (StreamStreamValueListSettingType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamStreamValueListSettingType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamStreamValueListSettingType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamStreamValueListSettingType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamStreamValueListSettingType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamStreamValueListSettingType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamStreamValueListSettingType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamStreamValueListSettingType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamStreamValueListSettingType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamStreamValueListSettingType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamStreamValueListSettingType) Clone() (StreamStreamValueListSettingType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamStreamValueListSettingType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamStreamValueListSettingType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamStreamValueListSettingType) setNil() {
	obj.streamIdHolder = nil
	obj.valueListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamStreamValueListSettingType is tBD
type StreamStreamValueListSettingType interface {
	Validation
	// Msg marshals StreamStreamValueListSettingType to protobuf object *otg.StreamStreamValueListSettingType
	// and doesn't set defaults
	Msg() *otg.StreamStreamValueListSettingType
	// SetMsg unmarshals StreamStreamValueListSettingType from protobuf object *otg.StreamStreamValueListSettingType
	// and doesn't set defaults
	SetMsg(*otg.StreamStreamValueListSettingType) StreamStreamValueListSettingType
	// ToProto marshals StreamStreamValueListSettingType to protobuf object *otg.StreamStreamValueListSettingType
	ToProto() (*otg.StreamStreamValueListSettingType, error)
	// ToPbText marshals StreamStreamValueListSettingType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamStreamValueListSettingType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamStreamValueListSettingType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamStreamValueListSettingType from protobuf object *otg.StreamStreamValueListSettingType
	FromProto(msg *otg.StreamStreamValueListSettingType) (StreamStreamValueListSettingType, error)
	// FromPbText unmarshals StreamStreamValueListSettingType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamStreamValueListSettingType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamStreamValueListSettingType from JSON text
	FromJson(value string) error
	// Validate validates StreamStreamValueListSettingType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamStreamValueListSettingType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// StreamId returns IdTypeStreamId, set in StreamStreamValueListSettingType.
	// IdTypeStreamId is tBD
	StreamId() IdTypeStreamId
	// SetStreamId assigns IdTypeStreamId provided by user to StreamStreamValueListSettingType.
	// IdTypeStreamId is tBD
	SetStreamId(value IdTypeStreamId) StreamStreamValueListSettingType
	// HasStreamId checks if StreamId has been set in StreamStreamValueListSettingType
	HasStreamId() bool
	// ValueList returns UdfValueList, set in StreamStreamValueListSettingType.
	// UdfValueList is tBD
	ValueList() UdfValueList
	// SetValueList assigns UdfValueList provided by user to StreamStreamValueListSettingType.
	// UdfValueList is tBD
	SetValueList(value UdfValueList) StreamStreamValueListSettingType
	// HasValueList checks if ValueList has been set in StreamStreamValueListSettingType
	HasValueList() bool
	setNil()
}

func (obj *streamStreamValueListSettingType) populateXml(xObj *Argument) error {

	return nil
}

func (obj *streamStreamValueListSettingType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// StreamId returns a IdTypeStreamId
func (obj *streamStreamValueListSettingType) StreamId() IdTypeStreamId {
	if obj.obj.StreamId == nil {
		obj.obj.StreamId = NewIdTypeStreamId().Msg()
	}
	if obj.streamIdHolder == nil {
		obj.streamIdHolder = &idTypeStreamId{obj: obj.obj.StreamId}
	}
	return obj.streamIdHolder
}

// TBD
// StreamId returns a IdTypeStreamId
func (obj *streamStreamValueListSettingType) HasStreamId() bool {
	return obj.obj.StreamId != nil
}

// TBD
// SetStreamId sets the IdTypeStreamId value in the StreamStreamValueListSettingType object
func (obj *streamStreamValueListSettingType) SetStreamId(value IdTypeStreamId) StreamStreamValueListSettingType {

	obj.streamIdHolder = nil
	obj.obj.StreamId = value.Msg()

	return obj
}

// TBD
// ValueList returns a UdfValueList
func (obj *streamStreamValueListSettingType) ValueList() UdfValueList {
	if obj.obj.ValueList == nil {
		obj.obj.ValueList = NewUdfValueList().Msg()
	}
	if obj.valueListHolder == nil {
		obj.valueListHolder = &udfValueList{obj: obj.obj.ValueList}
	}
	return obj.valueListHolder
}

// TBD
// ValueList returns a UdfValueList
func (obj *streamStreamValueListSettingType) HasValueList() bool {
	return obj.obj.ValueList != nil
}

// TBD
// SetValueList sets the UdfValueList value in the StreamStreamValueListSettingType object
func (obj *streamStreamValueListSettingType) SetValueList(value UdfValueList) StreamStreamValueListSettingType {

	obj.valueListHolder = nil
	obj.obj.ValueList = value.Msg()

	return obj
}

func (obj *streamStreamValueListSettingType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.StreamId != nil {

		obj.StreamId().validateObj(vObj, set_default)
	}

	if obj.obj.ValueList != nil {

		obj.ValueList().validateObj(vObj, set_default)
	}

}

func (obj *streamStreamValueListSettingType) setDefault() {

}

// ***** MacSecRxMGIDConfigurationType *****
type macSecRxMGIDConfigurationType struct {
	validation
	obj                    *otg.MacSecRxMGIDConfigurationType
	splitMgidConfig0Holder MacSecSplitMGIDConfigurationType
	splitMgidConfig1Holder MacSecSplitMGIDConfigurationType
}

func NewMacSecRxMGIDConfigurationType() MacSecRxMGIDConfigurationType {
	obj := macSecRxMGIDConfigurationType{obj: &otg.MacSecRxMGIDConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *macSecRxMGIDConfigurationType) Msg() *otg.MacSecRxMGIDConfigurationType {
	return obj.obj
}

func (obj *macSecRxMGIDConfigurationType) SetMsg(msg *otg.MacSecRxMGIDConfigurationType) MacSecRxMGIDConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *macSecRxMGIDConfigurationType) ToProto() (*otg.MacSecRxMGIDConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *macSecRxMGIDConfigurationType) FromProto(msg *otg.MacSecRxMGIDConfigurationType) (MacSecRxMGIDConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *macSecRxMGIDConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *macSecRxMGIDConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *macSecRxMGIDConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecRxMGIDConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *macSecRxMGIDConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecRxMGIDConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *macSecRxMGIDConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *macSecRxMGIDConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *macSecRxMGIDConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *macSecRxMGIDConfigurationType) Clone() (MacSecRxMGIDConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewMacSecRxMGIDConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *macSecRxMGIDConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *macSecRxMGIDConfigurationType) setNil() {
	obj.splitMgidConfig0Holder = nil
	obj.splitMgidConfig1Holder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// MacSecRxMGIDConfigurationType is tBD
type MacSecRxMGIDConfigurationType interface {
	Validation
	// Msg marshals MacSecRxMGIDConfigurationType to protobuf object *otg.MacSecRxMGIDConfigurationType
	// and doesn't set defaults
	Msg() *otg.MacSecRxMGIDConfigurationType
	// SetMsg unmarshals MacSecRxMGIDConfigurationType from protobuf object *otg.MacSecRxMGIDConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.MacSecRxMGIDConfigurationType) MacSecRxMGIDConfigurationType
	// ToProto marshals MacSecRxMGIDConfigurationType to protobuf object *otg.MacSecRxMGIDConfigurationType
	ToProto() (*otg.MacSecRxMGIDConfigurationType, error)
	// ToPbText marshals MacSecRxMGIDConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals MacSecRxMGIDConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals MacSecRxMGIDConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals MacSecRxMGIDConfigurationType from protobuf object *otg.MacSecRxMGIDConfigurationType
	FromProto(msg *otg.MacSecRxMGIDConfigurationType) (MacSecRxMGIDConfigurationType, error)
	// FromPbText unmarshals MacSecRxMGIDConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals MacSecRxMGIDConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals MacSecRxMGIDConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates MacSecRxMGIDConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (MacSecRxMGIDConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// EnableMgid0 returns bool, set in MacSecRxMGIDConfigurationType.
	EnableMgid0() bool
	// SetEnableMgid0 assigns bool provided by user to MacSecRxMGIDConfigurationType
	SetEnableMgid0(value bool) MacSecRxMGIDConfigurationType
	// HasEnableMgid0 checks if EnableMgid0 has been set in MacSecRxMGIDConfigurationType
	HasEnableMgid0() bool
	// SplitMgidConfig0 returns MacSecSplitMGIDConfigurationType, set in MacSecRxMGIDConfigurationType.
	// MacSecSplitMGIDConfigurationType is tBD
	SplitMgidConfig0() MacSecSplitMGIDConfigurationType
	// SetSplitMgidConfig0 assigns MacSecSplitMGIDConfigurationType provided by user to MacSecRxMGIDConfigurationType.
	// MacSecSplitMGIDConfigurationType is tBD
	SetSplitMgidConfig0(value MacSecSplitMGIDConfigurationType) MacSecRxMGIDConfigurationType
	// HasSplitMgidConfig0 checks if SplitMgidConfig0 has been set in MacSecRxMGIDConfigurationType
	HasSplitMgidConfig0() bool
	// EnableMgid1 returns bool, set in MacSecRxMGIDConfigurationType.
	EnableMgid1() bool
	// SetEnableMgid1 assigns bool provided by user to MacSecRxMGIDConfigurationType
	SetEnableMgid1(value bool) MacSecRxMGIDConfigurationType
	// HasEnableMgid1 checks if EnableMgid1 has been set in MacSecRxMGIDConfigurationType
	HasEnableMgid1() bool
	// SplitMgidConfig1 returns MacSecSplitMGIDConfigurationType, set in MacSecRxMGIDConfigurationType.
	// MacSecSplitMGIDConfigurationType is tBD
	SplitMgidConfig1() MacSecSplitMGIDConfigurationType
	// SetSplitMgidConfig1 assigns MacSecSplitMGIDConfigurationType provided by user to MacSecRxMGIDConfigurationType.
	// MacSecSplitMGIDConfigurationType is tBD
	SetSplitMgidConfig1(value MacSecSplitMGIDConfigurationType) MacSecRxMGIDConfigurationType
	// HasSplitMgidConfig1 checks if SplitMgidConfig1 has been set in MacSecRxMGIDConfigurationType
	HasSplitMgidConfig1() bool
	setNil()
}

func (obj *macSecRxMGIDConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasEnableMgid0() {
		var value string
		if obj.EnableMgid0() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablemgid0",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableMgid1() {
		var value string
		if obj.EnableMgid1() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablemgid1",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *macSecRxMGIDConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// EnableMgid0 returns a bool
func (obj *macSecRxMGIDConfigurationType) EnableMgid0() bool {

	return *obj.obj.EnableMgid0

}

// TBD
// EnableMgid0 returns a bool
func (obj *macSecRxMGIDConfigurationType) HasEnableMgid0() bool {
	return obj.obj.EnableMgid0 != nil
}

// TBD
// SetEnableMgid0 sets the bool value in the MacSecRxMGIDConfigurationType object
func (obj *macSecRxMGIDConfigurationType) SetEnableMgid0(value bool) MacSecRxMGIDConfigurationType {

	obj.obj.EnableMgid0 = &value
	return obj
}

// TBD
// SplitMgidConfig0 returns a MacSecSplitMGIDConfigurationType
func (obj *macSecRxMGIDConfigurationType) SplitMgidConfig0() MacSecSplitMGIDConfigurationType {
	if obj.obj.SplitMgidConfig0 == nil {
		obj.obj.SplitMgidConfig0 = NewMacSecSplitMGIDConfigurationType().Msg()
	}
	if obj.splitMgidConfig0Holder == nil {
		obj.splitMgidConfig0Holder = &macSecSplitMGIDConfigurationType{obj: obj.obj.SplitMgidConfig0}
	}
	return obj.splitMgidConfig0Holder
}

// TBD
// SplitMgidConfig0 returns a MacSecSplitMGIDConfigurationType
func (obj *macSecRxMGIDConfigurationType) HasSplitMgidConfig0() bool {
	return obj.obj.SplitMgidConfig0 != nil
}

// TBD
// SetSplitMgidConfig0 sets the MacSecSplitMGIDConfigurationType value in the MacSecRxMGIDConfigurationType object
func (obj *macSecRxMGIDConfigurationType) SetSplitMgidConfig0(value MacSecSplitMGIDConfigurationType) MacSecRxMGIDConfigurationType {

	obj.splitMgidConfig0Holder = nil
	obj.obj.SplitMgidConfig0 = value.Msg()

	return obj
}

// TBD
// EnableMgid1 returns a bool
func (obj *macSecRxMGIDConfigurationType) EnableMgid1() bool {

	return *obj.obj.EnableMgid1

}

// TBD
// EnableMgid1 returns a bool
func (obj *macSecRxMGIDConfigurationType) HasEnableMgid1() bool {
	return obj.obj.EnableMgid1 != nil
}

// TBD
// SetEnableMgid1 sets the bool value in the MacSecRxMGIDConfigurationType object
func (obj *macSecRxMGIDConfigurationType) SetEnableMgid1(value bool) MacSecRxMGIDConfigurationType {

	obj.obj.EnableMgid1 = &value
	return obj
}

// TBD
// SplitMgidConfig1 returns a MacSecSplitMGIDConfigurationType
func (obj *macSecRxMGIDConfigurationType) SplitMgidConfig1() MacSecSplitMGIDConfigurationType {
	if obj.obj.SplitMgidConfig1 == nil {
		obj.obj.SplitMgidConfig1 = NewMacSecSplitMGIDConfigurationType().Msg()
	}
	if obj.splitMgidConfig1Holder == nil {
		obj.splitMgidConfig1Holder = &macSecSplitMGIDConfigurationType{obj: obj.obj.SplitMgidConfig1}
	}
	return obj.splitMgidConfig1Holder
}

// TBD
// SplitMgidConfig1 returns a MacSecSplitMGIDConfigurationType
func (obj *macSecRxMGIDConfigurationType) HasSplitMgidConfig1() bool {
	return obj.obj.SplitMgidConfig1 != nil
}

// TBD
// SetSplitMgidConfig1 sets the MacSecSplitMGIDConfigurationType value in the MacSecRxMGIDConfigurationType object
func (obj *macSecRxMGIDConfigurationType) SetSplitMgidConfig1(value MacSecSplitMGIDConfigurationType) MacSecRxMGIDConfigurationType {

	obj.splitMgidConfig1Holder = nil
	obj.obj.SplitMgidConfig1 = value.Msg()

	return obj
}

func (obj *macSecRxMGIDConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.SplitMgidConfig0 != nil {

		obj.SplitMgidConfig0().validateObj(vObj, set_default)
	}

	if obj.obj.SplitMgidConfig1 != nil {

		obj.SplitMgidConfig1().validateObj(vObj, set_default)
	}

}

func (obj *macSecRxMGIDConfigurationType) setDefault() {

}

// ***** MacSecUnauthenticatedDataConfigurationType *****
type macSecUnauthenticatedDataConfigurationType struct {
	validation
	obj *otg.MacSecUnauthenticatedDataConfigurationType
}

func NewMacSecUnauthenticatedDataConfigurationType() MacSecUnauthenticatedDataConfigurationType {
	obj := macSecUnauthenticatedDataConfigurationType{obj: &otg.MacSecUnauthenticatedDataConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *macSecUnauthenticatedDataConfigurationType) Msg() *otg.MacSecUnauthenticatedDataConfigurationType {
	return obj.obj
}

func (obj *macSecUnauthenticatedDataConfigurationType) SetMsg(msg *otg.MacSecUnauthenticatedDataConfigurationType) MacSecUnauthenticatedDataConfigurationType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *macSecUnauthenticatedDataConfigurationType) ToProto() (*otg.MacSecUnauthenticatedDataConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *macSecUnauthenticatedDataConfigurationType) FromProto(msg *otg.MacSecUnauthenticatedDataConfigurationType) (MacSecUnauthenticatedDataConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *macSecUnauthenticatedDataConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *macSecUnauthenticatedDataConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *macSecUnauthenticatedDataConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecUnauthenticatedDataConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *macSecUnauthenticatedDataConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecUnauthenticatedDataConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *macSecUnauthenticatedDataConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *macSecUnauthenticatedDataConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *macSecUnauthenticatedDataConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *macSecUnauthenticatedDataConfigurationType) Clone() (MacSecUnauthenticatedDataConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewMacSecUnauthenticatedDataConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *macSecUnauthenticatedDataConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// MacSecUnauthenticatedDataConfigurationType is tBD
type MacSecUnauthenticatedDataConfigurationType interface {
	Validation
	// Msg marshals MacSecUnauthenticatedDataConfigurationType to protobuf object *otg.MacSecUnauthenticatedDataConfigurationType
	// and doesn't set defaults
	Msg() *otg.MacSecUnauthenticatedDataConfigurationType
	// SetMsg unmarshals MacSecUnauthenticatedDataConfigurationType from protobuf object *otg.MacSecUnauthenticatedDataConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.MacSecUnauthenticatedDataConfigurationType) MacSecUnauthenticatedDataConfigurationType
	// ToProto marshals MacSecUnauthenticatedDataConfigurationType to protobuf object *otg.MacSecUnauthenticatedDataConfigurationType
	ToProto() (*otg.MacSecUnauthenticatedDataConfigurationType, error)
	// ToPbText marshals MacSecUnauthenticatedDataConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals MacSecUnauthenticatedDataConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals MacSecUnauthenticatedDataConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals MacSecUnauthenticatedDataConfigurationType from protobuf object *otg.MacSecUnauthenticatedDataConfigurationType
	FromProto(msg *otg.MacSecUnauthenticatedDataConfigurationType) (MacSecUnauthenticatedDataConfigurationType, error)
	// FromPbText unmarshals MacSecUnauthenticatedDataConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals MacSecUnauthenticatedDataConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals MacSecUnauthenticatedDataConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates MacSecUnauthenticatedDataConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (MacSecUnauthenticatedDataConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// FirstByteOffset returns int32, set in MacSecUnauthenticatedDataConfigurationType.
	FirstByteOffset() int32
	// SetFirstByteOffset assigns int32 provided by user to MacSecUnauthenticatedDataConfigurationType
	SetFirstByteOffset(value int32) MacSecUnauthenticatedDataConfigurationType
	// HasFirstByteOffset checks if FirstByteOffset has been set in MacSecUnauthenticatedDataConfigurationType
	HasFirstByteOffset() bool
	// LastByteOffset returns int32, set in MacSecUnauthenticatedDataConfigurationType.
	LastByteOffset() int32
	// SetLastByteOffset assigns int32 provided by user to MacSecUnauthenticatedDataConfigurationType
	SetLastByteOffset(value int32) MacSecUnauthenticatedDataConfigurationType
	// HasLastByteOffset checks if LastByteOffset has been set in MacSecUnauthenticatedDataConfigurationType
	HasLastByteOffset() bool
}

func (obj *macSecUnauthenticatedDataConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasFirstByteOffset() {

		member := Member{
			Name:  "firstbyteoffset",
			Type:  "int16",
			Value: strconv.FormatInt(int64(obj.FirstByteOffset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasLastByteOffset() {

		member := Member{
			Name:  "lastbyteoffset",
			Type:  "int16",
			Value: strconv.FormatInt(int64(obj.LastByteOffset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *macSecUnauthenticatedDataConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// Index of the first byte of the unauthenticated data
// FirstByteOffset returns a int32
func (obj *macSecUnauthenticatedDataConfigurationType) FirstByteOffset() int32 {

	return *obj.obj.FirstByteOffset

}

// Index of the first byte of the unauthenticated data
// FirstByteOffset returns a int32
func (obj *macSecUnauthenticatedDataConfigurationType) HasFirstByteOffset() bool {
	return obj.obj.FirstByteOffset != nil
}

// Index of the first byte of the unauthenticated data
// SetFirstByteOffset sets the int32 value in the MacSecUnauthenticatedDataConfigurationType object
func (obj *macSecUnauthenticatedDataConfigurationType) SetFirstByteOffset(value int32) MacSecUnauthenticatedDataConfigurationType {

	obj.obj.FirstByteOffset = &value
	return obj
}

// Index of the last byte of the unauthenticated data
// LastByteOffset returns a int32
func (obj *macSecUnauthenticatedDataConfigurationType) LastByteOffset() int32 {

	return *obj.obj.LastByteOffset

}

// Index of the last byte of the unauthenticated data
// LastByteOffset returns a int32
func (obj *macSecUnauthenticatedDataConfigurationType) HasLastByteOffset() bool {
	return obj.obj.LastByteOffset != nil
}

// Index of the last byte of the unauthenticated data
// SetLastByteOffset sets the int32 value in the MacSecUnauthenticatedDataConfigurationType object
func (obj *macSecUnauthenticatedDataConfigurationType) SetLastByteOffset(value int32) MacSecUnauthenticatedDataConfigurationType {

	obj.obj.LastByteOffset = &value
	return obj
}

func (obj *macSecUnauthenticatedDataConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *macSecUnauthenticatedDataConfigurationType) setDefault() {

}

// ***** MacSecTxScConfigurationList *****
type macSecTxScConfigurationList struct {
	validation
	obj                         *otg.MacSecTxScConfigurationList
	txScConfigurationListHolder MacSecTxScConfigurationListMacSecTxScConfigurationTypeIter
}

func NewMacSecTxScConfigurationList() MacSecTxScConfigurationList {
	obj := macSecTxScConfigurationList{obj: &otg.MacSecTxScConfigurationList{}}
	obj.setDefault()
	return &obj
}

func (obj *macSecTxScConfigurationList) Msg() *otg.MacSecTxScConfigurationList {
	return obj.obj
}

func (obj *macSecTxScConfigurationList) SetMsg(msg *otg.MacSecTxScConfigurationList) MacSecTxScConfigurationList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *macSecTxScConfigurationList) ToProto() (*otg.MacSecTxScConfigurationList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *macSecTxScConfigurationList) FromProto(msg *otg.MacSecTxScConfigurationList) (MacSecTxScConfigurationList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *macSecTxScConfigurationList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *macSecTxScConfigurationList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *macSecTxScConfigurationList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecTxScConfigurationList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *macSecTxScConfigurationList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecTxScConfigurationList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *macSecTxScConfigurationList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *macSecTxScConfigurationList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *macSecTxScConfigurationList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *macSecTxScConfigurationList) Clone() (MacSecTxScConfigurationList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewMacSecTxScConfigurationList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *macSecTxScConfigurationList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *macSecTxScConfigurationList) setNil() {
	obj.txScConfigurationListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// MacSecTxScConfigurationList is tBD
type MacSecTxScConfigurationList interface {
	Validation
	// Msg marshals MacSecTxScConfigurationList to protobuf object *otg.MacSecTxScConfigurationList
	// and doesn't set defaults
	Msg() *otg.MacSecTxScConfigurationList
	// SetMsg unmarshals MacSecTxScConfigurationList from protobuf object *otg.MacSecTxScConfigurationList
	// and doesn't set defaults
	SetMsg(*otg.MacSecTxScConfigurationList) MacSecTxScConfigurationList
	// ToProto marshals MacSecTxScConfigurationList to protobuf object *otg.MacSecTxScConfigurationList
	ToProto() (*otg.MacSecTxScConfigurationList, error)
	// ToPbText marshals MacSecTxScConfigurationList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals MacSecTxScConfigurationList to YAML text
	ToYaml() (string, error)
	// ToJson marshals MacSecTxScConfigurationList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals MacSecTxScConfigurationList from protobuf object *otg.MacSecTxScConfigurationList
	FromProto(msg *otg.MacSecTxScConfigurationList) (MacSecTxScConfigurationList, error)
	// FromPbText unmarshals MacSecTxScConfigurationList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals MacSecTxScConfigurationList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals MacSecTxScConfigurationList from JSON text
	FromJson(value string) error
	// Validate validates MacSecTxScConfigurationList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (MacSecTxScConfigurationList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// TxScConfigurationList returns MacSecTxScConfigurationListMacSecTxScConfigurationTypeIterIter, set in MacSecTxScConfigurationList
	TxScConfigurationList() MacSecTxScConfigurationListMacSecTxScConfigurationTypeIter
	setNil()
}

func (obj *macSecTxScConfigurationList) populateXml(xObj *Argument) error {

	if len(obj.TxScConfigurationList().Items()) != 0 {
		for _, item := range obj.TxScConfigurationList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *macSecTxScConfigurationList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// TxScConfigurationList returns a []MacSecTxScConfigurationType
func (obj *macSecTxScConfigurationList) TxScConfigurationList() MacSecTxScConfigurationListMacSecTxScConfigurationTypeIter {
	if len(obj.obj.TxScConfigurationList) == 0 {
		obj.obj.TxScConfigurationList = []*otg.MacSecTxScConfigurationType{}
	}
	if obj.txScConfigurationListHolder == nil {
		obj.txScConfigurationListHolder = newMacSecTxScConfigurationListMacSecTxScConfigurationTypeIter(&obj.obj.TxScConfigurationList).setMsg(obj)
	}
	return obj.txScConfigurationListHolder
}

type macSecTxScConfigurationListMacSecTxScConfigurationTypeIter struct {
	obj                              *macSecTxScConfigurationList
	macSecTxScConfigurationTypeSlice []MacSecTxScConfigurationType
	fieldPtr                         *[]*otg.MacSecTxScConfigurationType
}

func newMacSecTxScConfigurationListMacSecTxScConfigurationTypeIter(ptr *[]*otg.MacSecTxScConfigurationType) MacSecTxScConfigurationListMacSecTxScConfigurationTypeIter {
	return &macSecTxScConfigurationListMacSecTxScConfigurationTypeIter{fieldPtr: ptr}
}

type MacSecTxScConfigurationListMacSecTxScConfigurationTypeIter interface {
	setMsg(*macSecTxScConfigurationList) MacSecTxScConfigurationListMacSecTxScConfigurationTypeIter
	Items() []MacSecTxScConfigurationType
	Add() MacSecTxScConfigurationType
	Append(items ...MacSecTxScConfigurationType) MacSecTxScConfigurationListMacSecTxScConfigurationTypeIter
	Set(index int, newObj MacSecTxScConfigurationType) MacSecTxScConfigurationListMacSecTxScConfigurationTypeIter
	Clear() MacSecTxScConfigurationListMacSecTxScConfigurationTypeIter
	clearHolderSlice() MacSecTxScConfigurationListMacSecTxScConfigurationTypeIter
	appendHolderSlice(item MacSecTxScConfigurationType) MacSecTxScConfigurationListMacSecTxScConfigurationTypeIter
}

func (obj *macSecTxScConfigurationListMacSecTxScConfigurationTypeIter) setMsg(msg *macSecTxScConfigurationList) MacSecTxScConfigurationListMacSecTxScConfigurationTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&macSecTxScConfigurationType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *macSecTxScConfigurationListMacSecTxScConfigurationTypeIter) Items() []MacSecTxScConfigurationType {
	return obj.macSecTxScConfigurationTypeSlice
}

func (obj *macSecTxScConfigurationListMacSecTxScConfigurationTypeIter) Add() MacSecTxScConfigurationType {
	newObj := &otg.MacSecTxScConfigurationType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &macSecTxScConfigurationType{obj: newObj}
	newLibObj.setDefault()
	obj.macSecTxScConfigurationTypeSlice = append(obj.macSecTxScConfigurationTypeSlice, newLibObj)
	return newLibObj
}

func (obj *macSecTxScConfigurationListMacSecTxScConfigurationTypeIter) Append(items ...MacSecTxScConfigurationType) MacSecTxScConfigurationListMacSecTxScConfigurationTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.macSecTxScConfigurationTypeSlice = append(obj.macSecTxScConfigurationTypeSlice, item)
	}
	return obj
}

func (obj *macSecTxScConfigurationListMacSecTxScConfigurationTypeIter) Set(index int, newObj MacSecTxScConfigurationType) MacSecTxScConfigurationListMacSecTxScConfigurationTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.macSecTxScConfigurationTypeSlice[index] = newObj
	return obj
}
func (obj *macSecTxScConfigurationListMacSecTxScConfigurationTypeIter) Clear() MacSecTxScConfigurationListMacSecTxScConfigurationTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.MacSecTxScConfigurationType{}
		obj.macSecTxScConfigurationTypeSlice = []MacSecTxScConfigurationType{}
	}
	return obj
}
func (obj *macSecTxScConfigurationListMacSecTxScConfigurationTypeIter) clearHolderSlice() MacSecTxScConfigurationListMacSecTxScConfigurationTypeIter {
	if len(obj.macSecTxScConfigurationTypeSlice) > 0 {
		obj.macSecTxScConfigurationTypeSlice = []MacSecTxScConfigurationType{}
	}
	return obj
}
func (obj *macSecTxScConfigurationListMacSecTxScConfigurationTypeIter) appendHolderSlice(item MacSecTxScConfigurationType) MacSecTxScConfigurationListMacSecTxScConfigurationTypeIter {
	obj.macSecTxScConfigurationTypeSlice = append(obj.macSecTxScConfigurationTypeSlice, item)
	return obj
}

func (obj *macSecTxScConfigurationList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.TxScConfigurationList) != 0 {

		if set_default {
			obj.TxScConfigurationList().clearHolderSlice()
			for _, item := range obj.obj.TxScConfigurationList {
				obj.TxScConfigurationList().appendHolderSlice(&macSecTxScConfigurationType{obj: item})
			}
		}
		for _, item := range obj.TxScConfigurationList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *macSecTxScConfigurationList) setDefault() {

}

// ***** MacSecRxScConfigurationList *****
type macSecRxScConfigurationList struct {
	validation
	obj                         *otg.MacSecRxScConfigurationList
	rxScConfigurationListHolder MacSecRxScConfigurationListMacSecRxScConfigurationTypeIter
}

func NewMacSecRxScConfigurationList() MacSecRxScConfigurationList {
	obj := macSecRxScConfigurationList{obj: &otg.MacSecRxScConfigurationList{}}
	obj.setDefault()
	return &obj
}

func (obj *macSecRxScConfigurationList) Msg() *otg.MacSecRxScConfigurationList {
	return obj.obj
}

func (obj *macSecRxScConfigurationList) SetMsg(msg *otg.MacSecRxScConfigurationList) MacSecRxScConfigurationList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *macSecRxScConfigurationList) ToProto() (*otg.MacSecRxScConfigurationList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *macSecRxScConfigurationList) FromProto(msg *otg.MacSecRxScConfigurationList) (MacSecRxScConfigurationList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *macSecRxScConfigurationList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *macSecRxScConfigurationList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *macSecRxScConfigurationList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecRxScConfigurationList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *macSecRxScConfigurationList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecRxScConfigurationList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *macSecRxScConfigurationList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *macSecRxScConfigurationList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *macSecRxScConfigurationList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *macSecRxScConfigurationList) Clone() (MacSecRxScConfigurationList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewMacSecRxScConfigurationList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *macSecRxScConfigurationList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *macSecRxScConfigurationList) setNil() {
	obj.rxScConfigurationListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// MacSecRxScConfigurationList is tBD
type MacSecRxScConfigurationList interface {
	Validation
	// Msg marshals MacSecRxScConfigurationList to protobuf object *otg.MacSecRxScConfigurationList
	// and doesn't set defaults
	Msg() *otg.MacSecRxScConfigurationList
	// SetMsg unmarshals MacSecRxScConfigurationList from protobuf object *otg.MacSecRxScConfigurationList
	// and doesn't set defaults
	SetMsg(*otg.MacSecRxScConfigurationList) MacSecRxScConfigurationList
	// ToProto marshals MacSecRxScConfigurationList to protobuf object *otg.MacSecRxScConfigurationList
	ToProto() (*otg.MacSecRxScConfigurationList, error)
	// ToPbText marshals MacSecRxScConfigurationList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals MacSecRxScConfigurationList to YAML text
	ToYaml() (string, error)
	// ToJson marshals MacSecRxScConfigurationList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals MacSecRxScConfigurationList from protobuf object *otg.MacSecRxScConfigurationList
	FromProto(msg *otg.MacSecRxScConfigurationList) (MacSecRxScConfigurationList, error)
	// FromPbText unmarshals MacSecRxScConfigurationList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals MacSecRxScConfigurationList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals MacSecRxScConfigurationList from JSON text
	FromJson(value string) error
	// Validate validates MacSecRxScConfigurationList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (MacSecRxScConfigurationList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// RxScConfigurationList returns MacSecRxScConfigurationListMacSecRxScConfigurationTypeIterIter, set in MacSecRxScConfigurationList
	RxScConfigurationList() MacSecRxScConfigurationListMacSecRxScConfigurationTypeIter
	setNil()
}

func (obj *macSecRxScConfigurationList) populateXml(xObj *Argument) error {

	if len(obj.RxScConfigurationList().Items()) != 0 {
		for _, item := range obj.RxScConfigurationList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *macSecRxScConfigurationList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// RxScConfigurationList returns a []MacSecRxScConfigurationType
func (obj *macSecRxScConfigurationList) RxScConfigurationList() MacSecRxScConfigurationListMacSecRxScConfigurationTypeIter {
	if len(obj.obj.RxScConfigurationList) == 0 {
		obj.obj.RxScConfigurationList = []*otg.MacSecRxScConfigurationType{}
	}
	if obj.rxScConfigurationListHolder == nil {
		obj.rxScConfigurationListHolder = newMacSecRxScConfigurationListMacSecRxScConfigurationTypeIter(&obj.obj.RxScConfigurationList).setMsg(obj)
	}
	return obj.rxScConfigurationListHolder
}

type macSecRxScConfigurationListMacSecRxScConfigurationTypeIter struct {
	obj                              *macSecRxScConfigurationList
	macSecRxScConfigurationTypeSlice []MacSecRxScConfigurationType
	fieldPtr                         *[]*otg.MacSecRxScConfigurationType
}

func newMacSecRxScConfigurationListMacSecRxScConfigurationTypeIter(ptr *[]*otg.MacSecRxScConfigurationType) MacSecRxScConfigurationListMacSecRxScConfigurationTypeIter {
	return &macSecRxScConfigurationListMacSecRxScConfigurationTypeIter{fieldPtr: ptr}
}

type MacSecRxScConfigurationListMacSecRxScConfigurationTypeIter interface {
	setMsg(*macSecRxScConfigurationList) MacSecRxScConfigurationListMacSecRxScConfigurationTypeIter
	Items() []MacSecRxScConfigurationType
	Add() MacSecRxScConfigurationType
	Append(items ...MacSecRxScConfigurationType) MacSecRxScConfigurationListMacSecRxScConfigurationTypeIter
	Set(index int, newObj MacSecRxScConfigurationType) MacSecRxScConfigurationListMacSecRxScConfigurationTypeIter
	Clear() MacSecRxScConfigurationListMacSecRxScConfigurationTypeIter
	clearHolderSlice() MacSecRxScConfigurationListMacSecRxScConfigurationTypeIter
	appendHolderSlice(item MacSecRxScConfigurationType) MacSecRxScConfigurationListMacSecRxScConfigurationTypeIter
}

func (obj *macSecRxScConfigurationListMacSecRxScConfigurationTypeIter) setMsg(msg *macSecRxScConfigurationList) MacSecRxScConfigurationListMacSecRxScConfigurationTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&macSecRxScConfigurationType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *macSecRxScConfigurationListMacSecRxScConfigurationTypeIter) Items() []MacSecRxScConfigurationType {
	return obj.macSecRxScConfigurationTypeSlice
}

func (obj *macSecRxScConfigurationListMacSecRxScConfigurationTypeIter) Add() MacSecRxScConfigurationType {
	newObj := &otg.MacSecRxScConfigurationType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &macSecRxScConfigurationType{obj: newObj}
	newLibObj.setDefault()
	obj.macSecRxScConfigurationTypeSlice = append(obj.macSecRxScConfigurationTypeSlice, newLibObj)
	return newLibObj
}

func (obj *macSecRxScConfigurationListMacSecRxScConfigurationTypeIter) Append(items ...MacSecRxScConfigurationType) MacSecRxScConfigurationListMacSecRxScConfigurationTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.macSecRxScConfigurationTypeSlice = append(obj.macSecRxScConfigurationTypeSlice, item)
	}
	return obj
}

func (obj *macSecRxScConfigurationListMacSecRxScConfigurationTypeIter) Set(index int, newObj MacSecRxScConfigurationType) MacSecRxScConfigurationListMacSecRxScConfigurationTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.macSecRxScConfigurationTypeSlice[index] = newObj
	return obj
}
func (obj *macSecRxScConfigurationListMacSecRxScConfigurationTypeIter) Clear() MacSecRxScConfigurationListMacSecRxScConfigurationTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.MacSecRxScConfigurationType{}
		obj.macSecRxScConfigurationTypeSlice = []MacSecRxScConfigurationType{}
	}
	return obj
}
func (obj *macSecRxScConfigurationListMacSecRxScConfigurationTypeIter) clearHolderSlice() MacSecRxScConfigurationListMacSecRxScConfigurationTypeIter {
	if len(obj.macSecRxScConfigurationTypeSlice) > 0 {
		obj.macSecRxScConfigurationTypeSlice = []MacSecRxScConfigurationType{}
	}
	return obj
}
func (obj *macSecRxScConfigurationListMacSecRxScConfigurationTypeIter) appendHolderSlice(item MacSecRxScConfigurationType) MacSecRxScConfigurationListMacSecRxScConfigurationTypeIter {
	obj.macSecRxScConfigurationTypeSlice = append(obj.macSecRxScConfigurationTypeSlice, item)
	return obj
}

func (obj *macSecRxScConfigurationList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.RxScConfigurationList) != 0 {

		if set_default {
			obj.RxScConfigurationList().clearHolderSlice()
			for _, item := range obj.obj.RxScConfigurationList {
				obj.RxScConfigurationList().appendHolderSlice(&macSecRxScConfigurationType{obj: item})
			}
		}
		for _, item := range obj.RxScConfigurationList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *macSecRxScConfigurationList) setDefault() {

}

// ***** MacSecMacSecStreamControlType *****
type macSecMacSecStreamControlType struct {
	validation
	obj        *otg.MacSecMacSecStreamControlType
	scIdHolder IdTypeSecureChannelId
}

func NewMacSecMacSecStreamControlType() MacSecMacSecStreamControlType {
	obj := macSecMacSecStreamControlType{obj: &otg.MacSecMacSecStreamControlType{}}
	obj.setDefault()
	return &obj
}

func (obj *macSecMacSecStreamControlType) Msg() *otg.MacSecMacSecStreamControlType {
	return obj.obj
}

func (obj *macSecMacSecStreamControlType) SetMsg(msg *otg.MacSecMacSecStreamControlType) MacSecMacSecStreamControlType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *macSecMacSecStreamControlType) ToProto() (*otg.MacSecMacSecStreamControlType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *macSecMacSecStreamControlType) FromProto(msg *otg.MacSecMacSecStreamControlType) (MacSecMacSecStreamControlType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *macSecMacSecStreamControlType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *macSecMacSecStreamControlType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *macSecMacSecStreamControlType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecMacSecStreamControlType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *macSecMacSecStreamControlType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecMacSecStreamControlType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *macSecMacSecStreamControlType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *macSecMacSecStreamControlType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *macSecMacSecStreamControlType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *macSecMacSecStreamControlType) Clone() (MacSecMacSecStreamControlType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewMacSecMacSecStreamControlType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *macSecMacSecStreamControlType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *macSecMacSecStreamControlType) setNil() {
	obj.scIdHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// MacSecMacSecStreamControlType is tBD
type MacSecMacSecStreamControlType interface {
	Validation
	// Msg marshals MacSecMacSecStreamControlType to protobuf object *otg.MacSecMacSecStreamControlType
	// and doesn't set defaults
	Msg() *otg.MacSecMacSecStreamControlType
	// SetMsg unmarshals MacSecMacSecStreamControlType from protobuf object *otg.MacSecMacSecStreamControlType
	// and doesn't set defaults
	SetMsg(*otg.MacSecMacSecStreamControlType) MacSecMacSecStreamControlType
	// ToProto marshals MacSecMacSecStreamControlType to protobuf object *otg.MacSecMacSecStreamControlType
	ToProto() (*otg.MacSecMacSecStreamControlType, error)
	// ToPbText marshals MacSecMacSecStreamControlType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals MacSecMacSecStreamControlType to YAML text
	ToYaml() (string, error)
	// ToJson marshals MacSecMacSecStreamControlType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals MacSecMacSecStreamControlType from protobuf object *otg.MacSecMacSecStreamControlType
	FromProto(msg *otg.MacSecMacSecStreamControlType) (MacSecMacSecStreamControlType, error)
	// FromPbText unmarshals MacSecMacSecStreamControlType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals MacSecMacSecStreamControlType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals MacSecMacSecStreamControlType from JSON text
	FromJson(value string) error
	// Validate validates MacSecMacSecStreamControlType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (MacSecMacSecStreamControlType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// EnableMacSec returns bool, set in MacSecMacSecStreamControlType.
	EnableMacSec() bool
	// SetEnableMacSec assigns bool provided by user to MacSecMacSecStreamControlType
	SetEnableMacSec(value bool) MacSecMacSecStreamControlType
	// HasEnableMacSec checks if EnableMacSec has been set in MacSecMacSecStreamControlType
	HasEnableMacSec() bool
	// EnableAuthentication returns bool, set in MacSecMacSecStreamControlType.
	EnableAuthentication() bool
	// SetEnableAuthentication assigns bool provided by user to MacSecMacSecStreamControlType
	SetEnableAuthentication(value bool) MacSecMacSecStreamControlType
	// HasEnableAuthentication checks if EnableAuthentication has been set in MacSecMacSecStreamControlType
	HasEnableAuthentication() bool
	// EnableConfidentiality returns bool, set in MacSecMacSecStreamControlType.
	EnableConfidentiality() bool
	// SetEnableConfidentiality assigns bool provided by user to MacSecMacSecStreamControlType
	SetEnableConfidentiality(value bool) MacSecMacSecStreamControlType
	// HasEnableConfidentiality checks if EnableConfidentiality has been set in MacSecMacSecStreamControlType
	HasEnableConfidentiality() bool
	// EnableFixedIcvMode returns bool, set in MacSecMacSecStreamControlType.
	EnableFixedIcvMode() bool
	// SetEnableFixedIcvMode assigns bool provided by user to MacSecMacSecStreamControlType
	SetEnableFixedIcvMode(value bool) MacSecMacSecStreamControlType
	// HasEnableFixedIcvMode checks if EnableFixedIcvMode has been set in MacSecMacSecStreamControlType
	HasEnableFixedIcvMode() bool
	// EnableBadAuthentication returns bool, set in MacSecMacSecStreamControlType.
	EnableBadAuthentication() bool
	// SetEnableBadAuthentication assigns bool provided by user to MacSecMacSecStreamControlType
	SetEnableBadAuthentication(value bool) MacSecMacSecStreamControlType
	// HasEnableBadAuthentication checks if EnableBadAuthentication has been set in MacSecMacSecStreamControlType
	HasEnableBadAuthentication() bool
	// SciPresent returns bool, set in MacSecMacSecStreamControlType.
	SciPresent() bool
	// SetSciPresent assigns bool provided by user to MacSecMacSecStreamControlType
	SetSciPresent(value bool) MacSecMacSecStreamControlType
	// HasSciPresent checks if SciPresent has been set in MacSecMacSecStreamControlType
	HasSciPresent() bool
	// ScId returns IdTypeSecureChannelId, set in MacSecMacSecStreamControlType.
	// IdTypeSecureChannelId is tBD
	ScId() IdTypeSecureChannelId
	// SetScId assigns IdTypeSecureChannelId provided by user to MacSecMacSecStreamControlType.
	// IdTypeSecureChannelId is tBD
	SetScId(value IdTypeSecureChannelId) MacSecMacSecStreamControlType
	// HasScId checks if ScId has been set in MacSecMacSecStreamControlType
	HasScId() bool
	// UdfScIndexMode returns bool, set in MacSecMacSecStreamControlType.
	UdfScIndexMode() bool
	// SetUdfScIndexMode assigns bool provided by user to MacSecMacSecStreamControlType
	SetUdfScIndexMode(value bool) MacSecMacSecStreamControlType
	// HasUdfScIndexMode checks if UdfScIndexMode has been set in MacSecMacSecStreamControlType
	HasUdfScIndexMode() bool
	// IcvByteOffset returns int32, set in MacSecMacSecStreamControlType.
	IcvByteOffset() int32
	// SetIcvByteOffset assigns int32 provided by user to MacSecMacSecStreamControlType
	SetIcvByteOffset(value int32) MacSecMacSecStreamControlType
	// HasIcvByteOffset checks if IcvByteOffset has been set in MacSecMacSecStreamControlType
	HasIcvByteOffset() bool
	// AnOverlayEnable returns bool, set in MacSecMacSecStreamControlType.
	AnOverlayEnable() bool
	// SetAnOverlayEnable assigns bool provided by user to MacSecMacSecStreamControlType
	SetAnOverlayEnable(value bool) MacSecMacSecStreamControlType
	// HasAnOverlayEnable checks if AnOverlayEnable has been set in MacSecMacSecStreamControlType
	HasAnOverlayEnable() bool
	// PnOverlayEnable returns bool, set in MacSecMacSecStreamControlType.
	PnOverlayEnable() bool
	// SetPnOverlayEnable assigns bool provided by user to MacSecMacSecStreamControlType
	SetPnOverlayEnable(value bool) MacSecMacSecStreamControlType
	// HasPnOverlayEnable checks if PnOverlayEnable has been set in MacSecMacSecStreamControlType
	HasPnOverlayEnable() bool
	// EnableFudgeFactor returns bool, set in MacSecMacSecStreamControlType.
	EnableFudgeFactor() bool
	// SetEnableFudgeFactor assigns bool provided by user to MacSecMacSecStreamControlType
	SetEnableFudgeFactor(value bool) MacSecMacSecStreamControlType
	// HasEnableFudgeFactor checks if EnableFudgeFactor has been set in MacSecMacSecStreamControlType
	HasEnableFudgeFactor() bool
	// FfByteOffset returns int32, set in MacSecMacSecStreamControlType.
	FfByteOffset() int32
	// SetFfByteOffset assigns int32 provided by user to MacSecMacSecStreamControlType
	SetFfByteOffset(value int32) MacSecMacSecStreamControlType
	// HasFfByteOffset checks if FfByteOffset has been set in MacSecMacSecStreamControlType
	HasFfByteOffset() bool
	// FfDelta returns int32, set in MacSecMacSecStreamControlType.
	FfDelta() int32
	// SetFfDelta assigns int32 provided by user to MacSecMacSecStreamControlType
	SetFfDelta(value int32) MacSecMacSecStreamControlType
	// HasFfDelta checks if FfDelta has been set in MacSecMacSecStreamControlType
	HasFfDelta() bool
	setNil()
}

func (obj *macSecMacSecStreamControlType) populateXml(xObj *Argument) error {

	if obj.HasEnableMacSec() {
		var value string
		if obj.EnableMacSec() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablemacsec",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableAuthentication() {
		var value string
		if obj.EnableAuthentication() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enableauthentication",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableConfidentiality() {
		var value string
		if obj.EnableConfidentiality() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enableconfidentiality",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableFixedIcvMode() {
		var value string
		if obj.EnableFixedIcvMode() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablefixedicvmode",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableBadAuthentication() {
		var value string
		if obj.EnableBadAuthentication() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablebadauthentication",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSciPresent() {
		var value string
		if obj.SciPresent() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "scipresent",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasUdfScIndexMode() {
		var value string
		if obj.UdfScIndexMode() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "udfscindexmode",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIcvByteOffset() {

		member := Member{
			Name:  "icvbyteoffset",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.IcvByteOffset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasAnOverlayEnable() {
		var value string
		if obj.AnOverlayEnable() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "anoverlayenable",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasPnOverlayEnable() {
		var value string
		if obj.PnOverlayEnable() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "pnoverlayenable",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableFudgeFactor() {
		var value string
		if obj.EnableFudgeFactor() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablefudgefactor",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasFfByteOffset() {

		member := Member{
			Name:  "ffbyteoffset",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.FfByteOffset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasFfDelta() {

		member := Member{
			Name:  "ffdelta",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.FfDelta()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *macSecMacSecStreamControlType) populateFromXml(xObj *RetVal) error {

	return nil
}

// True = Then following information will be valid.   False = Otherwise, skip this data type.
// EnableMacSec returns a bool
func (obj *macSecMacSecStreamControlType) EnableMacSec() bool {

	return *obj.obj.EnableMacSec

}

// True = Then following information will be valid.   False = Otherwise, skip this data type.
// EnableMacSec returns a bool
func (obj *macSecMacSecStreamControlType) HasEnableMacSec() bool {
	return obj.obj.EnableMacSec != nil
}

// True = Then following information will be valid.   False = Otherwise, skip this data type.
// SetEnableMacSec sets the bool value in the MacSecMacSecStreamControlType object
func (obj *macSecMacSecStreamControlType) SetEnableMacSec(value bool) MacSecMacSecStreamControlType {

	obj.obj.EnableMacSec = &value
	return obj
}

// True = Insert ICV   False = No ICV
// EnableAuthentication returns a bool
func (obj *macSecMacSecStreamControlType) EnableAuthentication() bool {

	return *obj.obj.EnableAuthentication

}

// True = Insert ICV   False = No ICV
// EnableAuthentication returns a bool
func (obj *macSecMacSecStreamControlType) HasEnableAuthentication() bool {
	return obj.obj.EnableAuthentication != nil
}

// True = Insert ICV   False = No ICV
// SetEnableAuthentication sets the bool value in the MacSecMacSecStreamControlType object
func (obj *macSecMacSecStreamControlType) SetEnableAuthentication(value bool) MacSecMacSecStreamControlType {

	obj.obj.EnableAuthentication = &value
	return obj
}

// True = Encrypt Packet   False = Don't Encrypt Packet or Decrypt Packet
// EnableConfidentiality returns a bool
func (obj *macSecMacSecStreamControlType) EnableConfidentiality() bool {

	return *obj.obj.EnableConfidentiality

}

// True = Encrypt Packet   False = Don't Encrypt Packet or Decrypt Packet
// EnableConfidentiality returns a bool
func (obj *macSecMacSecStreamControlType) HasEnableConfidentiality() bool {
	return obj.obj.EnableConfidentiality != nil
}

// True = Encrypt Packet   False = Don't Encrypt Packet or Decrypt Packet
// SetEnableConfidentiality sets the bool value in the MacSecMacSecStreamControlType object
func (obj *macSecMacSecStreamControlType) SetEnableConfidentiality(value bool) MacSecMacSecStreamControlType {

	obj.obj.EnableConfidentiality = &value
	return obj
}

// True = ICV is at a Fixed offset for all packets   False = ICV is adjacent to the CRC
// EnableFixedIcvMode returns a bool
func (obj *macSecMacSecStreamControlType) EnableFixedIcvMode() bool {

	return *obj.obj.EnableFixedIcvMode

}

// True = ICV is at a Fixed offset for all packets   False = ICV is adjacent to the CRC
// EnableFixedIcvMode returns a bool
func (obj *macSecMacSecStreamControlType) HasEnableFixedIcvMode() bool {
	return obj.obj.EnableFixedIcvMode != nil
}

// True = ICV is at a Fixed offset for all packets   False = ICV is adjacent to the CRC
// SetEnableFixedIcvMode sets the bool value in the MacSecMacSecStreamControlType object
func (obj *macSecMacSecStreamControlType) SetEnableFixedIcvMode(value bool) MacSecMacSecStreamControlType {

	obj.obj.EnableFixedIcvMode = &value
	return obj
}

// True = All ICV have errors.  Only useful when enableAuthentication is also enabled   False = Good ICV
// EnableBadAuthentication returns a bool
func (obj *macSecMacSecStreamControlType) EnableBadAuthentication() bool {

	return *obj.obj.EnableBadAuthentication

}

// True = All ICV have errors.  Only useful when enableAuthentication is also enabled   False = Good ICV
// EnableBadAuthentication returns a bool
func (obj *macSecMacSecStreamControlType) HasEnableBadAuthentication() bool {
	return obj.obj.EnableBadAuthentication != nil
}

// True = All ICV have errors.  Only useful when enableAuthentication is also enabled   False = Good ICV
// SetEnableBadAuthentication sets the bool value in the MacSecMacSecStreamControlType object
func (obj *macSecMacSecStreamControlType) SetEnableBadAuthentication(value bool) MacSecMacSecStreamControlType {

	obj.obj.EnableBadAuthentication = &value
	return obj
}

// True = SECTAG includes SCI (SECTAG has 16 Bytes)   False =  Short SECTAG. No SCI present (SECTAG has 8 Bytes)
// SciPresent returns a bool
func (obj *macSecMacSecStreamControlType) SciPresent() bool {

	return *obj.obj.SciPresent

}

// True = SECTAG includes SCI (SECTAG has 16 Bytes)   False =  Short SECTAG. No SCI present (SECTAG has 8 Bytes)
// SciPresent returns a bool
func (obj *macSecMacSecStreamControlType) HasSciPresent() bool {
	return obj.obj.SciPresent != nil
}

// True = SECTAG includes SCI (SECTAG has 16 Bytes)   False =  Short SECTAG. No SCI present (SECTAG has 8 Bytes)
// SetSciPresent sets the bool value in the MacSecMacSecStreamControlType object
func (obj *macSecMacSecStreamControlType) SetSciPresent(value bool) MacSecMacSecStreamControlType {

	obj.obj.SciPresent = &value
	return obj
}

// It could be 0 to 255.
// ScId returns a IdTypeSecureChannelId
func (obj *macSecMacSecStreamControlType) ScId() IdTypeSecureChannelId {
	if obj.obj.ScId == nil {
		obj.obj.ScId = NewIdTypeSecureChannelId().Msg()
	}
	if obj.scIdHolder == nil {
		obj.scIdHolder = &idTypeSecureChannelId{obj: obj.obj.ScId}
	}
	return obj.scIdHolder
}

// It could be 0 to 255.
// ScId returns a IdTypeSecureChannelId
func (obj *macSecMacSecStreamControlType) HasScId() bool {
	return obj.obj.ScId != nil
}

// It could be 0 to 255.
// SetScId sets the IdTypeSecureChannelId value in the MacSecMacSecStreamControlType object
func (obj *macSecMacSecStreamControlType) SetScId(value IdTypeSecureChannelId) MacSecMacSecStreamControlType {

	obj.scIdHolder = nil
	obj.obj.ScId = value.Msg()

	return obj
}

// True = SC Index comes from UDF;   False = SC Index comes from stream control
// UdfScIndexMode returns a bool
func (obj *macSecMacSecStreamControlType) UdfScIndexMode() bool {

	return *obj.obj.UdfScIndexMode

}

// True = SC Index comes from UDF;   False = SC Index comes from stream control
// UdfScIndexMode returns a bool
func (obj *macSecMacSecStreamControlType) HasUdfScIndexMode() bool {
	return obj.obj.UdfScIndexMode != nil
}

// True = SC Index comes from UDF;   False = SC Index comes from stream control
// SetUdfScIndexMode sets the bool value in the MacSecMacSecStreamControlType object
func (obj *macSecMacSecStreamControlType) SetUdfScIndexMode(value bool) MacSecMacSecStreamControlType {

	obj.obj.UdfScIndexMode = &value
	return obj
}

// An 8 bit value representing the byte offset in the packet,   not including the preamble. This value is only used if   Fixed ICV Mode is set to '1'.
// IcvByteOffset returns a int32
func (obj *macSecMacSecStreamControlType) IcvByteOffset() int32 {

	return *obj.obj.IcvByteOffset

}

// An 8 bit value representing the byte offset in the packet,   not including the preamble. This value is only used if   Fixed ICV Mode is set to '1'.
// IcvByteOffset returns a int32
func (obj *macSecMacSecStreamControlType) HasIcvByteOffset() bool {
	return obj.obj.IcvByteOffset != nil
}

// An 8 bit value representing the byte offset in the packet,   not including the preamble. This value is only used if   Fixed ICV Mode is set to '1'.
// SetIcvByteOffset sets the int32 value in the MacSecMacSecStreamControlType object
func (obj *macSecMacSecStreamControlType) SetIcvByteOffset(value int32) MacSecMacSecStreamControlType {

	obj.obj.IcvByteOffset = &value
	return obj
}

// True = AN overlaid by hardware;   False = AN not overlaid by hardware
// AnOverlayEnable returns a bool
func (obj *macSecMacSecStreamControlType) AnOverlayEnable() bool {

	return *obj.obj.AnOverlayEnable

}

// True = AN overlaid by hardware;   False = AN not overlaid by hardware
// AnOverlayEnable returns a bool
func (obj *macSecMacSecStreamControlType) HasAnOverlayEnable() bool {
	return obj.obj.AnOverlayEnable != nil
}

// True = AN overlaid by hardware;   False = AN not overlaid by hardware
// SetAnOverlayEnable sets the bool value in the MacSecMacSecStreamControlType object
func (obj *macSecMacSecStreamControlType) SetAnOverlayEnable(value bool) MacSecMacSecStreamControlType {

	obj.obj.AnOverlayEnable = &value
	return obj
}

// True = Pn overlaid by the hardware   False = Pn not overlaid by the hardware
// PnOverlayEnable returns a bool
func (obj *macSecMacSecStreamControlType) PnOverlayEnable() bool {

	return *obj.obj.PnOverlayEnable

}

// True = Pn overlaid by the hardware   False = Pn not overlaid by the hardware
// PnOverlayEnable returns a bool
func (obj *macSecMacSecStreamControlType) HasPnOverlayEnable() bool {
	return obj.obj.PnOverlayEnable != nil
}

// True = Pn overlaid by the hardware   False = Pn not overlaid by the hardware
// SetPnOverlayEnable sets the bool value in the MacSecMacSecStreamControlType object
func (obj *macSecMacSecStreamControlType) SetPnOverlayEnable(value bool) MacSecMacSecStreamControlType {

	obj.obj.PnOverlayEnable = &value
	return obj
}

// True = enable Insertion   False = disable Insertion
// EnableFudgeFactor returns a bool
func (obj *macSecMacSecStreamControlType) EnableFudgeFactor() bool {

	return *obj.obj.EnableFudgeFactor

}

// True = enable Insertion   False = disable Insertion
// EnableFudgeFactor returns a bool
func (obj *macSecMacSecStreamControlType) HasEnableFudgeFactor() bool {
	return obj.obj.EnableFudgeFactor != nil
}

// True = enable Insertion   False = disable Insertion
// SetEnableFudgeFactor sets the bool value in the MacSecMacSecStreamControlType object
func (obj *macSecMacSecStreamControlType) SetEnableFudgeFactor(value bool) MacSecMacSecStreamControlType {

	obj.obj.EnableFudgeFactor = &value
	return obj
}

// Byte offset into the packet where the FF is inserted.   Even byte offsets only.
// FfByteOffset returns a int32
func (obj *macSecMacSecStreamControlType) FfByteOffset() int32 {

	return *obj.obj.FfByteOffset

}

// Byte offset into the packet where the FF is inserted.   Even byte offsets only.
// FfByteOffset returns a int32
func (obj *macSecMacSecStreamControlType) HasFfByteOffset() bool {
	return obj.obj.FfByteOffset != nil
}

// Byte offset into the packet where the FF is inserted.   Even byte offsets only.
// SetFfByteOffset sets the int32 value in the MacSecMacSecStreamControlType object
func (obj *macSecMacSecStreamControlType) SetFfByteOffset(value int32) MacSecMacSecStreamControlType {

	obj.obj.FfByteOffset = &value
	return obj
}

// The value to be subtracted from the Packet Length.
// FfDelta returns a int32
func (obj *macSecMacSecStreamControlType) FfDelta() int32 {

	return *obj.obj.FfDelta

}

// The value to be subtracted from the Packet Length.
// FfDelta returns a int32
func (obj *macSecMacSecStreamControlType) HasFfDelta() bool {
	return obj.obj.FfDelta != nil
}

// The value to be subtracted from the Packet Length.
// SetFfDelta sets the int32 value in the MacSecMacSecStreamControlType object
func (obj *macSecMacSecStreamControlType) SetFfDelta(value int32) MacSecMacSecStreamControlType {

	obj.obj.FfDelta = &value
	return obj
}

func (obj *macSecMacSecStreamControlType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ScId != nil {

		obj.ScId().validateObj(vObj, set_default)
	}

}

func (obj *macSecMacSecStreamControlType) setDefault() {

}

// ***** MacSecTxSaKeyConfigurationType *****
type macSecTxSaKeyConfigurationType struct {
	validation
	obj        *otg.MacSecTxSaKeyConfigurationType
	scIdHolder IdTypeSecureChannelId
	key0Holder MacSecKeyConfigurationType
	key1Holder MacSecKeyConfigurationType
}

func NewMacSecTxSaKeyConfigurationType() MacSecTxSaKeyConfigurationType {
	obj := macSecTxSaKeyConfigurationType{obj: &otg.MacSecTxSaKeyConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *macSecTxSaKeyConfigurationType) Msg() *otg.MacSecTxSaKeyConfigurationType {
	return obj.obj
}

func (obj *macSecTxSaKeyConfigurationType) SetMsg(msg *otg.MacSecTxSaKeyConfigurationType) MacSecTxSaKeyConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *macSecTxSaKeyConfigurationType) ToProto() (*otg.MacSecTxSaKeyConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *macSecTxSaKeyConfigurationType) FromProto(msg *otg.MacSecTxSaKeyConfigurationType) (MacSecTxSaKeyConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *macSecTxSaKeyConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *macSecTxSaKeyConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *macSecTxSaKeyConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecTxSaKeyConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *macSecTxSaKeyConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecTxSaKeyConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *macSecTxSaKeyConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *macSecTxSaKeyConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *macSecTxSaKeyConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *macSecTxSaKeyConfigurationType) Clone() (MacSecTxSaKeyConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewMacSecTxSaKeyConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *macSecTxSaKeyConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *macSecTxSaKeyConfigurationType) setNil() {
	obj.scIdHolder = nil
	obj.key0Holder = nil
	obj.key1Holder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// MacSecTxSaKeyConfigurationType is tBD
type MacSecTxSaKeyConfigurationType interface {
	Validation
	// Msg marshals MacSecTxSaKeyConfigurationType to protobuf object *otg.MacSecTxSaKeyConfigurationType
	// and doesn't set defaults
	Msg() *otg.MacSecTxSaKeyConfigurationType
	// SetMsg unmarshals MacSecTxSaKeyConfigurationType from protobuf object *otg.MacSecTxSaKeyConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.MacSecTxSaKeyConfigurationType) MacSecTxSaKeyConfigurationType
	// ToProto marshals MacSecTxSaKeyConfigurationType to protobuf object *otg.MacSecTxSaKeyConfigurationType
	ToProto() (*otg.MacSecTxSaKeyConfigurationType, error)
	// ToPbText marshals MacSecTxSaKeyConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals MacSecTxSaKeyConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals MacSecTxSaKeyConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals MacSecTxSaKeyConfigurationType from protobuf object *otg.MacSecTxSaKeyConfigurationType
	FromProto(msg *otg.MacSecTxSaKeyConfigurationType) (MacSecTxSaKeyConfigurationType, error)
	// FromPbText unmarshals MacSecTxSaKeyConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals MacSecTxSaKeyConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals MacSecTxSaKeyConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates MacSecTxSaKeyConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (MacSecTxSaKeyConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ScId returns IdTypeSecureChannelId, set in MacSecTxSaKeyConfigurationType.
	// IdTypeSecureChannelId is tBD
	ScId() IdTypeSecureChannelId
	// SetScId assigns IdTypeSecureChannelId provided by user to MacSecTxSaKeyConfigurationType.
	// IdTypeSecureChannelId is tBD
	SetScId(value IdTypeSecureChannelId) MacSecTxSaKeyConfigurationType
	// HasScId checks if ScId has been set in MacSecTxSaKeyConfigurationType
	HasScId() bool
	// EnableKey0 returns bool, set in MacSecTxSaKeyConfigurationType.
	EnableKey0() bool
	// SetEnableKey0 assigns bool provided by user to MacSecTxSaKeyConfigurationType
	SetEnableKey0(value bool) MacSecTxSaKeyConfigurationType
	// HasEnableKey0 checks if EnableKey0 has been set in MacSecTxSaKeyConfigurationType
	HasEnableKey0() bool
	// Key0 returns MacSecKeyConfigurationType, set in MacSecTxSaKeyConfigurationType.
	// MacSecKeyConfigurationType is tBD
	Key0() MacSecKeyConfigurationType
	// SetKey0 assigns MacSecKeyConfigurationType provided by user to MacSecTxSaKeyConfigurationType.
	// MacSecKeyConfigurationType is tBD
	SetKey0(value MacSecKeyConfigurationType) MacSecTxSaKeyConfigurationType
	// HasKey0 checks if Key0 has been set in MacSecTxSaKeyConfigurationType
	HasKey0() bool
	// EnableKey1 returns bool, set in MacSecTxSaKeyConfigurationType.
	EnableKey1() bool
	// SetEnableKey1 assigns bool provided by user to MacSecTxSaKeyConfigurationType
	SetEnableKey1(value bool) MacSecTxSaKeyConfigurationType
	// HasEnableKey1 checks if EnableKey1 has been set in MacSecTxSaKeyConfigurationType
	HasEnableKey1() bool
	// Key1 returns MacSecKeyConfigurationType, set in MacSecTxSaKeyConfigurationType.
	// MacSecKeyConfigurationType is tBD
	Key1() MacSecKeyConfigurationType
	// SetKey1 assigns MacSecKeyConfigurationType provided by user to MacSecTxSaKeyConfigurationType.
	// MacSecKeyConfigurationType is tBD
	SetKey1(value MacSecKeyConfigurationType) MacSecTxSaKeyConfigurationType
	// HasKey1 checks if Key1 has been set in MacSecTxSaKeyConfigurationType
	HasKey1() bool
	// An0 returns int32, set in MacSecTxSaKeyConfigurationType.
	An0() int32
	// SetAn0 assigns int32 provided by user to MacSecTxSaKeyConfigurationType
	SetAn0(value int32) MacSecTxSaKeyConfigurationType
	// HasAn0 checks if An0 has been set in MacSecTxSaKeyConfigurationType
	HasAn0() bool
	// An1 returns int32, set in MacSecTxSaKeyConfigurationType.
	An1() int32
	// SetAn1 assigns int32 provided by user to MacSecTxSaKeyConfigurationType
	SetAn1(value int32) MacSecTxSaKeyConfigurationType
	// HasAn1 checks if An1 has been set in MacSecTxSaKeyConfigurationType
	HasAn1() bool
	// Sci returns string, set in MacSecTxSaKeyConfigurationType.
	Sci() string
	// SetSci assigns string provided by user to MacSecTxSaKeyConfigurationType
	SetSci(value string) MacSecTxSaKeyConfigurationType
	// HasSci checks if Sci has been set in MacSecTxSaKeyConfigurationType
	HasSci() bool
	// ToggleKey returns bool, set in MacSecTxSaKeyConfigurationType.
	ToggleKey() bool
	// SetToggleKey assigns bool provided by user to MacSecTxSaKeyConfigurationType
	SetToggleKey(value bool) MacSecTxSaKeyConfigurationType
	// HasToggleKey checks if ToggleKey has been set in MacSecTxSaKeyConfigurationType
	HasToggleKey() bool
	setNil()
}

func (obj *macSecTxSaKeyConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasEnableKey0() {
		var value string
		if obj.EnableKey0() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablekey0",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableKey1() {
		var value string
		if obj.EnableKey1() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablekey1",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasAn0() {

		member := Member{
			Name:  "an0",
			Type:  "int16",
			Value: strconv.FormatInt(int64(obj.An0()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasAn1() {

		member := Member{
			Name:  "an1",
			Type:  "int16",
			Value: strconv.FormatInt(int64(obj.An1()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSci() {

		member := Member{
			Name:  "sci",
			Type:  "octets",
			Value: obj.Sci(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasToggleKey() {
		var value string
		if obj.ToggleKey() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "togglekey",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *macSecTxSaKeyConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// ScId returns a IdTypeSecureChannelId
func (obj *macSecTxSaKeyConfigurationType) ScId() IdTypeSecureChannelId {
	if obj.obj.ScId == nil {
		obj.obj.ScId = NewIdTypeSecureChannelId().Msg()
	}
	if obj.scIdHolder == nil {
		obj.scIdHolder = &idTypeSecureChannelId{obj: obj.obj.ScId}
	}
	return obj.scIdHolder
}

// TBD
// ScId returns a IdTypeSecureChannelId
func (obj *macSecTxSaKeyConfigurationType) HasScId() bool {
	return obj.obj.ScId != nil
}

// TBD
// SetScId sets the IdTypeSecureChannelId value in the MacSecTxSaKeyConfigurationType object
func (obj *macSecTxSaKeyConfigurationType) SetScId(value IdTypeSecureChannelId) MacSecTxSaKeyConfigurationType {

	obj.scIdHolder = nil
	obj.obj.ScId = value.Msg()

	return obj
}

// TBD
// EnableKey0 returns a bool
func (obj *macSecTxSaKeyConfigurationType) EnableKey0() bool {

	return *obj.obj.EnableKey0

}

// TBD
// EnableKey0 returns a bool
func (obj *macSecTxSaKeyConfigurationType) HasEnableKey0() bool {
	return obj.obj.EnableKey0 != nil
}

// TBD
// SetEnableKey0 sets the bool value in the MacSecTxSaKeyConfigurationType object
func (obj *macSecTxSaKeyConfigurationType) SetEnableKey0(value bool) MacSecTxSaKeyConfigurationType {

	obj.obj.EnableKey0 = &value
	return obj
}

// TBD
// Key0 returns a MacSecKeyConfigurationType
func (obj *macSecTxSaKeyConfigurationType) Key0() MacSecKeyConfigurationType {
	if obj.obj.Key0 == nil {
		obj.obj.Key0 = NewMacSecKeyConfigurationType().Msg()
	}
	if obj.key0Holder == nil {
		obj.key0Holder = &macSecKeyConfigurationType{obj: obj.obj.Key0}
	}
	return obj.key0Holder
}

// TBD
// Key0 returns a MacSecKeyConfigurationType
func (obj *macSecTxSaKeyConfigurationType) HasKey0() bool {
	return obj.obj.Key0 != nil
}

// TBD
// SetKey0 sets the MacSecKeyConfigurationType value in the MacSecTxSaKeyConfigurationType object
func (obj *macSecTxSaKeyConfigurationType) SetKey0(value MacSecKeyConfigurationType) MacSecTxSaKeyConfigurationType {

	obj.key0Holder = nil
	obj.obj.Key0 = value.Msg()

	return obj
}

// TBD
// EnableKey1 returns a bool
func (obj *macSecTxSaKeyConfigurationType) EnableKey1() bool {

	return *obj.obj.EnableKey1

}

// TBD
// EnableKey1 returns a bool
func (obj *macSecTxSaKeyConfigurationType) HasEnableKey1() bool {
	return obj.obj.EnableKey1 != nil
}

// TBD
// SetEnableKey1 sets the bool value in the MacSecTxSaKeyConfigurationType object
func (obj *macSecTxSaKeyConfigurationType) SetEnableKey1(value bool) MacSecTxSaKeyConfigurationType {

	obj.obj.EnableKey1 = &value
	return obj
}

// TBD
// Key1 returns a MacSecKeyConfigurationType
func (obj *macSecTxSaKeyConfigurationType) Key1() MacSecKeyConfigurationType {
	if obj.obj.Key1 == nil {
		obj.obj.Key1 = NewMacSecKeyConfigurationType().Msg()
	}
	if obj.key1Holder == nil {
		obj.key1Holder = &macSecKeyConfigurationType{obj: obj.obj.Key1}
	}
	return obj.key1Holder
}

// TBD
// Key1 returns a MacSecKeyConfigurationType
func (obj *macSecTxSaKeyConfigurationType) HasKey1() bool {
	return obj.obj.Key1 != nil
}

// TBD
// SetKey1 sets the MacSecKeyConfigurationType value in the MacSecTxSaKeyConfigurationType object
func (obj *macSecTxSaKeyConfigurationType) SetKey1(value MacSecKeyConfigurationType) MacSecTxSaKeyConfigurationType {

	obj.key1Holder = nil
	obj.obj.Key1 = value.Msg()

	return obj
}

// TBD
// An0 returns a int32
func (obj *macSecTxSaKeyConfigurationType) An0() int32 {

	return *obj.obj.An0

}

// TBD
// An0 returns a int32
func (obj *macSecTxSaKeyConfigurationType) HasAn0() bool {
	return obj.obj.An0 != nil
}

// TBD
// SetAn0 sets the int32 value in the MacSecTxSaKeyConfigurationType object
func (obj *macSecTxSaKeyConfigurationType) SetAn0(value int32) MacSecTxSaKeyConfigurationType {

	obj.obj.An0 = &value
	return obj
}

// TBD
// An1 returns a int32
func (obj *macSecTxSaKeyConfigurationType) An1() int32 {

	return *obj.obj.An1

}

// TBD
// An1 returns a int32
func (obj *macSecTxSaKeyConfigurationType) HasAn1() bool {
	return obj.obj.An1 != nil
}

// TBD
// SetAn1 sets the int32 value in the MacSecTxSaKeyConfigurationType object
func (obj *macSecTxSaKeyConfigurationType) SetAn1(value int32) MacSecTxSaKeyConfigurationType {

	obj.obj.An1 = &value
	return obj
}

// sci is part of SC configuration so ideally it should be present in Tx SC configuration   like its present in Rx SC Configuration. But Tx sci has been added as a member of    this Tx key configuration here, the reason being, in FPGA doc, Tx SCI and ssci/salt share   the same memory region of Key configuration and therefore separating Tx SCI and Tx ssci/salt    would create problems in programming these controls in FPGA. Hence Tx SCI has been added as a    member of Tx Key configuration. On the other hand, Rx SCI shares a completely separate memory    region in FPGA, hence Rx SCI has been added as a member of Rx SCI configuration    following the ideal scenario.
// Sci returns a string
func (obj *macSecTxSaKeyConfigurationType) Sci() string {

	return *obj.obj.Sci

}

// sci is part of SC configuration so ideally it should be present in Tx SC configuration   like its present in Rx SC Configuration. But Tx sci has been added as a member of    this Tx key configuration here, the reason being, in FPGA doc, Tx SCI and ssci/salt share   the same memory region of Key configuration and therefore separating Tx SCI and Tx ssci/salt    would create problems in programming these controls in FPGA. Hence Tx SCI has been added as a    member of Tx Key configuration. On the other hand, Rx SCI shares a completely separate memory    region in FPGA, hence Rx SCI has been added as a member of Rx SCI configuration    following the ideal scenario.
// Sci returns a string
func (obj *macSecTxSaKeyConfigurationType) HasSci() bool {
	return obj.obj.Sci != nil
}

// sci is part of SC configuration so ideally it should be present in Tx SC configuration   like its present in Rx SC Configuration. But Tx sci has been added as a member of    this Tx key configuration here, the reason being, in FPGA doc, Tx SCI and ssci/salt share   the same memory region of Key configuration and therefore separating Tx SCI and Tx ssci/salt    would create problems in programming these controls in FPGA. Hence Tx SCI has been added as a    member of Tx Key configuration. On the other hand, Rx SCI shares a completely separate memory    region in FPGA, hence Rx SCI has been added as a member of Rx SCI configuration    following the ideal scenario.
// SetSci sets the string value in the MacSecTxSaKeyConfigurationType object
func (obj *macSecTxSaKeyConfigurationType) SetSci(value string) MacSecTxSaKeyConfigurationType {

	obj.obj.Sci = &value
	return obj
}

// True = Switch from the active key to the inactive key, and make the newly inactive key stale.   False = Don't switch to active key.
// ToggleKey returns a bool
func (obj *macSecTxSaKeyConfigurationType) ToggleKey() bool {

	return *obj.obj.ToggleKey

}

// True = Switch from the active key to the inactive key, and make the newly inactive key stale.   False = Don't switch to active key.
// ToggleKey returns a bool
func (obj *macSecTxSaKeyConfigurationType) HasToggleKey() bool {
	return obj.obj.ToggleKey != nil
}

// True = Switch from the active key to the inactive key, and make the newly inactive key stale.   False = Don't switch to active key.
// SetToggleKey sets the bool value in the MacSecTxSaKeyConfigurationType object
func (obj *macSecTxSaKeyConfigurationType) SetToggleKey(value bool) MacSecTxSaKeyConfigurationType {

	obj.obj.ToggleKey = &value
	return obj
}

func (obj *macSecTxSaKeyConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ScId != nil {

		obj.ScId().validateObj(vObj, set_default)
	}

	if obj.obj.Key0 != nil {

		obj.Key0().validateObj(vObj, set_default)
	}

	if obj.obj.Key1 != nil {

		obj.Key1().validateObj(vObj, set_default)
	}

}

func (obj *macSecTxSaKeyConfigurationType) setDefault() {

}

// ***** MacSecRxSaKeyConfigurationType *****
type macSecRxSaKeyConfigurationType struct {
	validation
	obj        *otg.MacSecRxSaKeyConfigurationType
	scIdHolder IdTypeSecureChannelId
	key0Holder MacSecKeyConfigurationType
	key1Holder MacSecKeyConfigurationType
}

func NewMacSecRxSaKeyConfigurationType() MacSecRxSaKeyConfigurationType {
	obj := macSecRxSaKeyConfigurationType{obj: &otg.MacSecRxSaKeyConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *macSecRxSaKeyConfigurationType) Msg() *otg.MacSecRxSaKeyConfigurationType {
	return obj.obj
}

func (obj *macSecRxSaKeyConfigurationType) SetMsg(msg *otg.MacSecRxSaKeyConfigurationType) MacSecRxSaKeyConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *macSecRxSaKeyConfigurationType) ToProto() (*otg.MacSecRxSaKeyConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *macSecRxSaKeyConfigurationType) FromProto(msg *otg.MacSecRxSaKeyConfigurationType) (MacSecRxSaKeyConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *macSecRxSaKeyConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *macSecRxSaKeyConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *macSecRxSaKeyConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecRxSaKeyConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *macSecRxSaKeyConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecRxSaKeyConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *macSecRxSaKeyConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *macSecRxSaKeyConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *macSecRxSaKeyConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *macSecRxSaKeyConfigurationType) Clone() (MacSecRxSaKeyConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewMacSecRxSaKeyConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *macSecRxSaKeyConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *macSecRxSaKeyConfigurationType) setNil() {
	obj.scIdHolder = nil
	obj.key0Holder = nil
	obj.key1Holder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// MacSecRxSaKeyConfigurationType is tBD
type MacSecRxSaKeyConfigurationType interface {
	Validation
	// Msg marshals MacSecRxSaKeyConfigurationType to protobuf object *otg.MacSecRxSaKeyConfigurationType
	// and doesn't set defaults
	Msg() *otg.MacSecRxSaKeyConfigurationType
	// SetMsg unmarshals MacSecRxSaKeyConfigurationType from protobuf object *otg.MacSecRxSaKeyConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.MacSecRxSaKeyConfigurationType) MacSecRxSaKeyConfigurationType
	// ToProto marshals MacSecRxSaKeyConfigurationType to protobuf object *otg.MacSecRxSaKeyConfigurationType
	ToProto() (*otg.MacSecRxSaKeyConfigurationType, error)
	// ToPbText marshals MacSecRxSaKeyConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals MacSecRxSaKeyConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals MacSecRxSaKeyConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals MacSecRxSaKeyConfigurationType from protobuf object *otg.MacSecRxSaKeyConfigurationType
	FromProto(msg *otg.MacSecRxSaKeyConfigurationType) (MacSecRxSaKeyConfigurationType, error)
	// FromPbText unmarshals MacSecRxSaKeyConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals MacSecRxSaKeyConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals MacSecRxSaKeyConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates MacSecRxSaKeyConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (MacSecRxSaKeyConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ScId returns IdTypeSecureChannelId, set in MacSecRxSaKeyConfigurationType.
	// IdTypeSecureChannelId is tBD
	ScId() IdTypeSecureChannelId
	// SetScId assigns IdTypeSecureChannelId provided by user to MacSecRxSaKeyConfigurationType.
	// IdTypeSecureChannelId is tBD
	SetScId(value IdTypeSecureChannelId) MacSecRxSaKeyConfigurationType
	// HasScId checks if ScId has been set in MacSecRxSaKeyConfigurationType
	HasScId() bool
	// EnableKey0 returns bool, set in MacSecRxSaKeyConfigurationType.
	EnableKey0() bool
	// SetEnableKey0 assigns bool provided by user to MacSecRxSaKeyConfigurationType
	SetEnableKey0(value bool) MacSecRxSaKeyConfigurationType
	// HasEnableKey0 checks if EnableKey0 has been set in MacSecRxSaKeyConfigurationType
	HasEnableKey0() bool
	// Key0 returns MacSecKeyConfigurationType, set in MacSecRxSaKeyConfigurationType.
	// MacSecKeyConfigurationType is tBD
	Key0() MacSecKeyConfigurationType
	// SetKey0 assigns MacSecKeyConfigurationType provided by user to MacSecRxSaKeyConfigurationType.
	// MacSecKeyConfigurationType is tBD
	SetKey0(value MacSecKeyConfigurationType) MacSecRxSaKeyConfigurationType
	// HasKey0 checks if Key0 has been set in MacSecRxSaKeyConfigurationType
	HasKey0() bool
	// EnableKey1 returns bool, set in MacSecRxSaKeyConfigurationType.
	EnableKey1() bool
	// SetEnableKey1 assigns bool provided by user to MacSecRxSaKeyConfigurationType
	SetEnableKey1(value bool) MacSecRxSaKeyConfigurationType
	// HasEnableKey1 checks if EnableKey1 has been set in MacSecRxSaKeyConfigurationType
	HasEnableKey1() bool
	// Key1 returns MacSecKeyConfigurationType, set in MacSecRxSaKeyConfigurationType.
	// MacSecKeyConfigurationType is tBD
	Key1() MacSecKeyConfigurationType
	// SetKey1 assigns MacSecKeyConfigurationType provided by user to MacSecRxSaKeyConfigurationType.
	// MacSecKeyConfigurationType is tBD
	SetKey1(value MacSecKeyConfigurationType) MacSecRxSaKeyConfigurationType
	// HasKey1 checks if Key1 has been set in MacSecRxSaKeyConfigurationType
	HasKey1() bool
	setNil()
}

func (obj *macSecRxSaKeyConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasEnableKey0() {
		var value string
		if obj.EnableKey0() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablekey0",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableKey1() {
		var value string
		if obj.EnableKey1() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablekey1",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *macSecRxSaKeyConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// ScId returns a IdTypeSecureChannelId
func (obj *macSecRxSaKeyConfigurationType) ScId() IdTypeSecureChannelId {
	if obj.obj.ScId == nil {
		obj.obj.ScId = NewIdTypeSecureChannelId().Msg()
	}
	if obj.scIdHolder == nil {
		obj.scIdHolder = &idTypeSecureChannelId{obj: obj.obj.ScId}
	}
	return obj.scIdHolder
}

// TBD
// ScId returns a IdTypeSecureChannelId
func (obj *macSecRxSaKeyConfigurationType) HasScId() bool {
	return obj.obj.ScId != nil
}

// TBD
// SetScId sets the IdTypeSecureChannelId value in the MacSecRxSaKeyConfigurationType object
func (obj *macSecRxSaKeyConfigurationType) SetScId(value IdTypeSecureChannelId) MacSecRxSaKeyConfigurationType {

	obj.scIdHolder = nil
	obj.obj.ScId = value.Msg()

	return obj
}

// TBD
// EnableKey0 returns a bool
func (obj *macSecRxSaKeyConfigurationType) EnableKey0() bool {

	return *obj.obj.EnableKey0

}

// TBD
// EnableKey0 returns a bool
func (obj *macSecRxSaKeyConfigurationType) HasEnableKey0() bool {
	return obj.obj.EnableKey0 != nil
}

// TBD
// SetEnableKey0 sets the bool value in the MacSecRxSaKeyConfigurationType object
func (obj *macSecRxSaKeyConfigurationType) SetEnableKey0(value bool) MacSecRxSaKeyConfigurationType {

	obj.obj.EnableKey0 = &value
	return obj
}

// TBD
// Key0 returns a MacSecKeyConfigurationType
func (obj *macSecRxSaKeyConfigurationType) Key0() MacSecKeyConfigurationType {
	if obj.obj.Key0 == nil {
		obj.obj.Key0 = NewMacSecKeyConfigurationType().Msg()
	}
	if obj.key0Holder == nil {
		obj.key0Holder = &macSecKeyConfigurationType{obj: obj.obj.Key0}
	}
	return obj.key0Holder
}

// TBD
// Key0 returns a MacSecKeyConfigurationType
func (obj *macSecRxSaKeyConfigurationType) HasKey0() bool {
	return obj.obj.Key0 != nil
}

// TBD
// SetKey0 sets the MacSecKeyConfigurationType value in the MacSecRxSaKeyConfigurationType object
func (obj *macSecRxSaKeyConfigurationType) SetKey0(value MacSecKeyConfigurationType) MacSecRxSaKeyConfigurationType {

	obj.key0Holder = nil
	obj.obj.Key0 = value.Msg()

	return obj
}

// TBD
// EnableKey1 returns a bool
func (obj *macSecRxSaKeyConfigurationType) EnableKey1() bool {

	return *obj.obj.EnableKey1

}

// TBD
// EnableKey1 returns a bool
func (obj *macSecRxSaKeyConfigurationType) HasEnableKey1() bool {
	return obj.obj.EnableKey1 != nil
}

// TBD
// SetEnableKey1 sets the bool value in the MacSecRxSaKeyConfigurationType object
func (obj *macSecRxSaKeyConfigurationType) SetEnableKey1(value bool) MacSecRxSaKeyConfigurationType {

	obj.obj.EnableKey1 = &value
	return obj
}

// TBD
// Key1 returns a MacSecKeyConfigurationType
func (obj *macSecRxSaKeyConfigurationType) Key1() MacSecKeyConfigurationType {
	if obj.obj.Key1 == nil {
		obj.obj.Key1 = NewMacSecKeyConfigurationType().Msg()
	}
	if obj.key1Holder == nil {
		obj.key1Holder = &macSecKeyConfigurationType{obj: obj.obj.Key1}
	}
	return obj.key1Holder
}

// TBD
// Key1 returns a MacSecKeyConfigurationType
func (obj *macSecRxSaKeyConfigurationType) HasKey1() bool {
	return obj.obj.Key1 != nil
}

// TBD
// SetKey1 sets the MacSecKeyConfigurationType value in the MacSecRxSaKeyConfigurationType object
func (obj *macSecRxSaKeyConfigurationType) SetKey1(value MacSecKeyConfigurationType) MacSecRxSaKeyConfigurationType {

	obj.key1Holder = nil
	obj.obj.Key1 = value.Msg()

	return obj
}

func (obj *macSecRxSaKeyConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ScId != nil {

		obj.ScId().validateObj(vObj, set_default)
	}

	if obj.obj.Key0 != nil {

		obj.Key0().validateObj(vObj, set_default)
	}

	if obj.obj.Key1 != nil {

		obj.Key1().validateObj(vObj, set_default)
	}

}

func (obj *macSecRxSaKeyConfigurationType) setDefault() {

}

// ***** IdTypeSecureChannelId *****
type idTypeSecureChannelId struct {
	validation
	obj *otg.IdTypeSecureChannelId
}

func NewIdTypeSecureChannelId() IdTypeSecureChannelId {
	obj := idTypeSecureChannelId{obj: &otg.IdTypeSecureChannelId{}}
	obj.setDefault()
	return &obj
}

func (obj *idTypeSecureChannelId) Msg() *otg.IdTypeSecureChannelId {
	return obj.obj
}

func (obj *idTypeSecureChannelId) SetMsg(msg *otg.IdTypeSecureChannelId) IdTypeSecureChannelId {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *idTypeSecureChannelId) ToProto() (*otg.IdTypeSecureChannelId, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *idTypeSecureChannelId) FromProto(msg *otg.IdTypeSecureChannelId) (IdTypeSecureChannelId, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *idTypeSecureChannelId) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *idTypeSecureChannelId) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *idTypeSecureChannelId) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *idTypeSecureChannelId) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *idTypeSecureChannelId) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *idTypeSecureChannelId) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *idTypeSecureChannelId) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *idTypeSecureChannelId) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *idTypeSecureChannelId) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *idTypeSecureChannelId) Clone() (IdTypeSecureChannelId, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewIdTypeSecureChannelId()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *idTypeSecureChannelId) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// IdTypeSecureChannelId is tBD
type IdTypeSecureChannelId interface {
	Validation
	// Msg marshals IdTypeSecureChannelId to protobuf object *otg.IdTypeSecureChannelId
	// and doesn't set defaults
	Msg() *otg.IdTypeSecureChannelId
	// SetMsg unmarshals IdTypeSecureChannelId from protobuf object *otg.IdTypeSecureChannelId
	// and doesn't set defaults
	SetMsg(*otg.IdTypeSecureChannelId) IdTypeSecureChannelId
	// ToProto marshals IdTypeSecureChannelId to protobuf object *otg.IdTypeSecureChannelId
	ToProto() (*otg.IdTypeSecureChannelId, error)
	// ToPbText marshals IdTypeSecureChannelId to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals IdTypeSecureChannelId to YAML text
	ToYaml() (string, error)
	// ToJson marshals IdTypeSecureChannelId to JSON text
	ToJson() (string, error)
	// FromProto unmarshals IdTypeSecureChannelId from protobuf object *otg.IdTypeSecureChannelId
	FromProto(msg *otg.IdTypeSecureChannelId) (IdTypeSecureChannelId, error)
	// FromPbText unmarshals IdTypeSecureChannelId from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals IdTypeSecureChannelId from YAML text
	FromYaml(value string) error
	// FromJson unmarshals IdTypeSecureChannelId from JSON text
	FromJson(value string) error
	// Validate validates IdTypeSecureChannelId
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (IdTypeSecureChannelId, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Id returns int32, set in IdTypeSecureChannelId.
	Id() int32
	// SetId assigns int32 provided by user to IdTypeSecureChannelId
	SetId(value int32) IdTypeSecureChannelId
	// HasId checks if Id has been set in IdTypeSecureChannelId
	HasId() bool
}

func (obj *idTypeSecureChannelId) populateXml(xObj *Argument) error {

	if obj.HasId() {

		member := Member{
			Name:  "id",
			Type:  "int16",
			Value: strconv.FormatInt(int64(obj.Id()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *idTypeSecureChannelId) populateFromXml(xObj *RetVal) error {

	return nil
}

// The SecureChannelId is a unique id used by MACSEC feature to know     the number of the SA index which it will configure.     It could be 0 to 255 for ingress traffic.     It could be 0 to 7 for egress traffic.     Egress Style Traffic - Any traffic entering the Rx side of the engine that is driven by a DUT with generally unknown formats.     Ingress Style Traffic - Any traffic entering the Rx side of the engine that is driven by an Ixia card where we generally know the packet formats.
// Id returns a int32
func (obj *idTypeSecureChannelId) Id() int32 {

	return *obj.obj.Id

}

// The SecureChannelId is a unique id used by MACSEC feature to know     the number of the SA index which it will configure.     It could be 0 to 255 for ingress traffic.     It could be 0 to 7 for egress traffic.     Egress Style Traffic - Any traffic entering the Rx side of the engine that is driven by a DUT with generally unknown formats.     Ingress Style Traffic - Any traffic entering the Rx side of the engine that is driven by an Ixia card where we generally know the packet formats.
// Id returns a int32
func (obj *idTypeSecureChannelId) HasId() bool {
	return obj.obj.Id != nil
}

// The SecureChannelId is a unique id used by MACSEC feature to know     the number of the SA index which it will configure.     It could be 0 to 255 for ingress traffic.     It could be 0 to 7 for egress traffic.     Egress Style Traffic - Any traffic entering the Rx side of the engine that is driven by a DUT with generally unknown formats.     Ingress Style Traffic - Any traffic entering the Rx side of the engine that is driven by an Ixia card where we generally know the packet formats.
// SetId sets the int32 value in the IdTypeSecureChannelId object
func (obj *idTypeSecureChannelId) SetId(value int32) IdTypeSecureChannelId {

	obj.obj.Id = &value
	return obj
}

func (obj *idTypeSecureChannelId) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *idTypeSecureChannelId) setDefault() {

}

// ***** MacSecSaKeyStateConfigurationType *****
type macSecSaKeyStateConfigurationType struct {
	validation
	obj         *otg.MacSecSaKeyStateConfigurationType
	scIdHolder  IdTypeSecureChannelId
	keyIdHolder IdTypeKeyId
}

func NewMacSecSaKeyStateConfigurationType() MacSecSaKeyStateConfigurationType {
	obj := macSecSaKeyStateConfigurationType{obj: &otg.MacSecSaKeyStateConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *macSecSaKeyStateConfigurationType) Msg() *otg.MacSecSaKeyStateConfigurationType {
	return obj.obj
}

func (obj *macSecSaKeyStateConfigurationType) SetMsg(msg *otg.MacSecSaKeyStateConfigurationType) MacSecSaKeyStateConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *macSecSaKeyStateConfigurationType) ToProto() (*otg.MacSecSaKeyStateConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *macSecSaKeyStateConfigurationType) FromProto(msg *otg.MacSecSaKeyStateConfigurationType) (MacSecSaKeyStateConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *macSecSaKeyStateConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *macSecSaKeyStateConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *macSecSaKeyStateConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecSaKeyStateConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *macSecSaKeyStateConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecSaKeyStateConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *macSecSaKeyStateConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *macSecSaKeyStateConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *macSecSaKeyStateConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *macSecSaKeyStateConfigurationType) Clone() (MacSecSaKeyStateConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewMacSecSaKeyStateConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *macSecSaKeyStateConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *macSecSaKeyStateConfigurationType) setNil() {
	obj.scIdHolder = nil
	obj.keyIdHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// MacSecSaKeyStateConfigurationType is tBD
type MacSecSaKeyStateConfigurationType interface {
	Validation
	// Msg marshals MacSecSaKeyStateConfigurationType to protobuf object *otg.MacSecSaKeyStateConfigurationType
	// and doesn't set defaults
	Msg() *otg.MacSecSaKeyStateConfigurationType
	// SetMsg unmarshals MacSecSaKeyStateConfigurationType from protobuf object *otg.MacSecSaKeyStateConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.MacSecSaKeyStateConfigurationType) MacSecSaKeyStateConfigurationType
	// ToProto marshals MacSecSaKeyStateConfigurationType to protobuf object *otg.MacSecSaKeyStateConfigurationType
	ToProto() (*otg.MacSecSaKeyStateConfigurationType, error)
	// ToPbText marshals MacSecSaKeyStateConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals MacSecSaKeyStateConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals MacSecSaKeyStateConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals MacSecSaKeyStateConfigurationType from protobuf object *otg.MacSecSaKeyStateConfigurationType
	FromProto(msg *otg.MacSecSaKeyStateConfigurationType) (MacSecSaKeyStateConfigurationType, error)
	// FromPbText unmarshals MacSecSaKeyStateConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals MacSecSaKeyStateConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals MacSecSaKeyStateConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates MacSecSaKeyStateConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (MacSecSaKeyStateConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ScId returns IdTypeSecureChannelId, set in MacSecSaKeyStateConfigurationType.
	// IdTypeSecureChannelId is tBD
	ScId() IdTypeSecureChannelId
	// SetScId assigns IdTypeSecureChannelId provided by user to MacSecSaKeyStateConfigurationType.
	// IdTypeSecureChannelId is tBD
	SetScId(value IdTypeSecureChannelId) MacSecSaKeyStateConfigurationType
	// HasScId checks if ScId has been set in MacSecSaKeyStateConfigurationType
	HasScId() bool
	// KeyId returns IdTypeKeyId, set in MacSecSaKeyStateConfigurationType.
	// IdTypeKeyId is tBD
	KeyId() IdTypeKeyId
	// SetKeyId assigns IdTypeKeyId provided by user to MacSecSaKeyStateConfigurationType.
	// IdTypeKeyId is tBD
	SetKeyId(value IdTypeKeyId) MacSecSaKeyStateConfigurationType
	// HasKeyId checks if KeyId has been set in MacSecSaKeyStateConfigurationType
	HasKeyId() bool
	// KeyStatus returns MacSecSaKeyStateConfigurationTypeKeyStatusEnum, set in MacSecSaKeyStateConfigurationType
	KeyStatus() MacSecSaKeyStateConfigurationTypeKeyStatusEnum
	// SetKeyStatus assigns MacSecSaKeyStateConfigurationTypeKeyStatusEnum provided by user to MacSecSaKeyStateConfigurationType
	SetKeyStatus(value MacSecSaKeyStateConfigurationTypeKeyStatusEnum) MacSecSaKeyStateConfigurationType
	// HasKeyStatus checks if KeyStatus has been set in MacSecSaKeyStateConfigurationType
	HasKeyStatus() bool
	setNil()
}

func (obj *macSecSaKeyStateConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasKeyStatus() {

		member := Member{
			Name:  "keystatus",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.MacSec+eMacSecScKeyState",
			Value: strconv.FormatInt(int64(obj.obj.KeyStatus.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *macSecSaKeyStateConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// It could be 0 to 255.
// ScId returns a IdTypeSecureChannelId
func (obj *macSecSaKeyStateConfigurationType) ScId() IdTypeSecureChannelId {
	if obj.obj.ScId == nil {
		obj.obj.ScId = NewIdTypeSecureChannelId().Msg()
	}
	if obj.scIdHolder == nil {
		obj.scIdHolder = &idTypeSecureChannelId{obj: obj.obj.ScId}
	}
	return obj.scIdHolder
}

// It could be 0 to 255.
// ScId returns a IdTypeSecureChannelId
func (obj *macSecSaKeyStateConfigurationType) HasScId() bool {
	return obj.obj.ScId != nil
}

// It could be 0 to 255.
// SetScId sets the IdTypeSecureChannelId value in the MacSecSaKeyStateConfigurationType object
func (obj *macSecSaKeyStateConfigurationType) SetScId(value IdTypeSecureChannelId) MacSecSaKeyStateConfigurationType {

	obj.scIdHolder = nil
	obj.obj.ScId = value.Msg()

	return obj
}

// It could be 0 or 1.
// KeyId returns a IdTypeKeyId
func (obj *macSecSaKeyStateConfigurationType) KeyId() IdTypeKeyId {
	if obj.obj.KeyId == nil {
		obj.obj.KeyId = NewIdTypeKeyId().Msg()
	}
	if obj.keyIdHolder == nil {
		obj.keyIdHolder = &idTypeKeyId{obj: obj.obj.KeyId}
	}
	return obj.keyIdHolder
}

// It could be 0 or 1.
// KeyId returns a IdTypeKeyId
func (obj *macSecSaKeyStateConfigurationType) HasKeyId() bool {
	return obj.obj.KeyId != nil
}

// It could be 0 or 1.
// SetKeyId sets the IdTypeKeyId value in the MacSecSaKeyStateConfigurationType object
func (obj *macSecSaKeyStateConfigurationType) SetKeyId(value IdTypeKeyId) MacSecSaKeyStateConfigurationType {

	obj.keyIdHolder = nil
	obj.obj.KeyId = value.Msg()

	return obj
}

type MacSecSaKeyStateConfigurationTypeKeyStatusEnum string

// Enum of KeyStatus on MacSecSaKeyStateConfigurationType
var MacSecSaKeyStateConfigurationTypeKeyStatus = struct {
	KEXPIRED MacSecSaKeyStateConfigurationTypeKeyStatusEnum
	KACTIVE  MacSecSaKeyStateConfigurationTypeKeyStatusEnum
	KFRESH   MacSecSaKeyStateConfigurationTypeKeyStatusEnum
}{
	KEXPIRED: MacSecSaKeyStateConfigurationTypeKeyStatusEnum("kExpired"),
	KACTIVE:  MacSecSaKeyStateConfigurationTypeKeyStatusEnum("kActive"),
	KFRESH:   MacSecSaKeyStateConfigurationTypeKeyStatusEnum("kFresh"),
}

func (obj *macSecSaKeyStateConfigurationType) KeyStatus() MacSecSaKeyStateConfigurationTypeKeyStatusEnum {
	return MacSecSaKeyStateConfigurationTypeKeyStatusEnum(obj.obj.KeyStatus.Enum().String())
}

// TBD
// KeyStatus returns a string
func (obj *macSecSaKeyStateConfigurationType) HasKeyStatus() bool {
	return obj.obj.KeyStatus != nil
}

func (obj *macSecSaKeyStateConfigurationType) SetKeyStatus(value MacSecSaKeyStateConfigurationTypeKeyStatusEnum) MacSecSaKeyStateConfigurationType {
	intValue, ok := otg.MacSecSaKeyStateConfigurationType_KeyStatus_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on MacSecSaKeyStateConfigurationTypeKeyStatusEnum", string(value)))
		return obj
	}
	enumValue := otg.MacSecSaKeyStateConfigurationType_KeyStatus_Enum(intValue)
	obj.obj.KeyStatus = &enumValue

	return obj
}

func (obj *macSecSaKeyStateConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ScId != nil {

		obj.ScId().validateObj(vObj, set_default)
	}

	if obj.obj.KeyId != nil {

		obj.KeyId().validateObj(vObj, set_default)
	}

}

func (obj *macSecSaKeyStateConfigurationType) setDefault() {

}

// ***** MacSecRxMacSecUDSConfigType *****
type macSecRxMacSecUDSConfigType struct {
	validation
	obj *otg.MacSecRxMacSecUDSConfigType
}

func NewMacSecRxMacSecUDSConfigType() MacSecRxMacSecUDSConfigType {
	obj := macSecRxMacSecUDSConfigType{obj: &otg.MacSecRxMacSecUDSConfigType{}}
	obj.setDefault()
	return &obj
}

func (obj *macSecRxMacSecUDSConfigType) Msg() *otg.MacSecRxMacSecUDSConfigType {
	return obj.obj
}

func (obj *macSecRxMacSecUDSConfigType) SetMsg(msg *otg.MacSecRxMacSecUDSConfigType) MacSecRxMacSecUDSConfigType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *macSecRxMacSecUDSConfigType) ToProto() (*otg.MacSecRxMacSecUDSConfigType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *macSecRxMacSecUDSConfigType) FromProto(msg *otg.MacSecRxMacSecUDSConfigType) (MacSecRxMacSecUDSConfigType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *macSecRxMacSecUDSConfigType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *macSecRxMacSecUDSConfigType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *macSecRxMacSecUDSConfigType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecRxMacSecUDSConfigType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *macSecRxMacSecUDSConfigType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecRxMacSecUDSConfigType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *macSecRxMacSecUDSConfigType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *macSecRxMacSecUDSConfigType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *macSecRxMacSecUDSConfigType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *macSecRxMacSecUDSConfigType) Clone() (MacSecRxMacSecUDSConfigType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewMacSecRxMacSecUDSConfigType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *macSecRxMacSecUDSConfigType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// MacSecRxMacSecUDSConfigType is tBD
type MacSecRxMacSecUDSConfigType interface {
	Validation
	// Msg marshals MacSecRxMacSecUDSConfigType to protobuf object *otg.MacSecRxMacSecUDSConfigType
	// and doesn't set defaults
	Msg() *otg.MacSecRxMacSecUDSConfigType
	// SetMsg unmarshals MacSecRxMacSecUDSConfigType from protobuf object *otg.MacSecRxMacSecUDSConfigType
	// and doesn't set defaults
	SetMsg(*otg.MacSecRxMacSecUDSConfigType) MacSecRxMacSecUDSConfigType
	// ToProto marshals MacSecRxMacSecUDSConfigType to protobuf object *otg.MacSecRxMacSecUDSConfigType
	ToProto() (*otg.MacSecRxMacSecUDSConfigType, error)
	// ToPbText marshals MacSecRxMacSecUDSConfigType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals MacSecRxMacSecUDSConfigType to YAML text
	ToYaml() (string, error)
	// ToJson marshals MacSecRxMacSecUDSConfigType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals MacSecRxMacSecUDSConfigType from protobuf object *otg.MacSecRxMacSecUDSConfigType
	FromProto(msg *otg.MacSecRxMacSecUDSConfigType) (MacSecRxMacSecUDSConfigType, error)
	// FromPbText unmarshals MacSecRxMacSecUDSConfigType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals MacSecRxMacSecUDSConfigType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals MacSecRxMacSecUDSConfigType from JSON text
	FromJson(value string) error
	// Validate validates MacSecRxMacSecUDSConfigType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (MacSecRxMacSecUDSConfigType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// MacsecUdsId returns int32, set in MacSecRxMacSecUDSConfigType.
	MacsecUdsId() int32
	// SetMacsecUdsId assigns int32 provided by user to MacSecRxMacSecUDSConfigType
	SetMacsecUdsId(value int32) MacSecRxMacSecUDSConfigType
	// HasMacsecUdsId checks if MacsecUdsId has been set in MacSecRxMacSecUDSConfigType
	HasMacsecUdsId() bool
	// StatType returns MacSecRxMacSecUDSConfigTypeStatTypeEnum, set in MacSecRxMacSecUDSConfigType
	StatType() MacSecRxMacSecUDSConfigTypeStatTypeEnum
	// SetStatType assigns MacSecRxMacSecUDSConfigTypeStatTypeEnum provided by user to MacSecRxMacSecUDSConfigType
	SetStatType(value MacSecRxMacSecUDSConfigTypeStatTypeEnum) MacSecRxMacSecUDSConfigType
	// HasStatType checks if StatType has been set in MacSecRxMacSecUDSConfigType
	HasStatType() bool
	// IsByteCount returns bool, set in MacSecRxMacSecUDSConfigType.
	IsByteCount() bool
	// SetIsByteCount assigns bool provided by user to MacSecRxMacSecUDSConfigType
	SetIsByteCount(value bool) MacSecRxMacSecUDSConfigType
	// HasIsByteCount checks if IsByteCount has been set in MacSecRxMacSecUDSConfigType
	HasIsByteCount() bool
	// MulticastAsDevId returns bool, set in MacSecRxMacSecUDSConfigType.
	MulticastAsDevId() bool
	// SetMulticastAsDevId assigns bool provided by user to MacSecRxMacSecUDSConfigType
	SetMulticastAsDevId(value bool) MacSecRxMacSecUDSConfigType
	// HasMulticastAsDevId checks if MulticastAsDevId has been set in MacSecRxMacSecUDSConfigType
	HasMulticastAsDevId() bool
	// BroadcastAsDevId returns bool, set in MacSecRxMacSecUDSConfigType.
	BroadcastAsDevId() bool
	// SetBroadcastAsDevId assigns bool provided by user to MacSecRxMacSecUDSConfigType
	SetBroadcastAsDevId(value bool) MacSecRxMacSecUDSConfigType
	// HasBroadcastAsDevId checks if BroadcastAsDevId has been set in MacSecRxMacSecUDSConfigType
	HasBroadcastAsDevId() bool
}

func (obj *macSecRxMacSecUDSConfigType) populateXml(xObj *Argument) error {

	if obj.HasMacsecUdsId() {

		member := Member{
			Name:  "macsecudsid",
			Type:  "int16",
			Value: strconv.FormatInt(int64(obj.MacsecUdsId()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasStatType() {

		member := Member{
			Name:  "stattype",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.MacSec+eMacSecStandardStatType",
			Value: strconv.FormatInt(int64(obj.obj.StatType.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIsByteCount() {
		var value string
		if obj.IsByteCount() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "isbytecount",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasMulticastAsDevId() {
		var value string
		if obj.MulticastAsDevId() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "multicastasdevid",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasBroadcastAsDevId() {
		var value string
		if obj.BroadcastAsDevId() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "broadcastasdevid",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *macSecRxMacSecUDSConfigType) populateFromXml(xObj *RetVal) error {

	return nil
}

// Id for the UDS that is configured.   Minumum value of the id = 0   Maximum value of the id = 7   A maximum of 8 UDS can be configured.
// MacsecUdsId returns a int32
func (obj *macSecRxMacSecUDSConfigType) MacsecUdsId() int32 {

	return *obj.obj.MacsecUdsId

}

// Id for the UDS that is configured.   Minumum value of the id = 0   Maximum value of the id = 7   A maximum of 8 UDS can be configured.
// MacsecUdsId returns a int32
func (obj *macSecRxMacSecUDSConfigType) HasMacsecUdsId() bool {
	return obj.obj.MacsecUdsId != nil
}

// Id for the UDS that is configured.   Minumum value of the id = 0   Maximum value of the id = 7   A maximum of 8 UDS can be configured.
// SetMacsecUdsId sets the int32 value in the MacSecRxMacSecUDSConfigType object
func (obj *macSecRxMacSecUDSConfigType) SetMacsecUdsId(value int32) MacSecRxMacSecUDSConfigType {

	obj.obj.MacsecUdsId = &value
	return obj
}

type MacSecRxMacSecUDSConfigTypeStatTypeEnum string

// Enum of StatType on MacSecRxMacSecUDSConfigType
var MacSecRxMacSecUDSConfigTypeStatType = struct {
	KINOK        MacSecRxMacSecUDSConfigTypeStatTypeEnum
	KINBAD       MacSecRxMacSecUDSConfigTypeStatTypeEnum
	KINBADTAG    MacSecRxMacSecUDSConfigTypeStatTypeEnum
	KINLATE      MacSecRxMacSecUDSConfigTypeStatTypeEnum
	KINNOTVALID  MacSecRxMacSecUDSConfigTypeStatTypeEnum
	KININVALID   MacSecRxMacSecUDSConfigTypeStatTypeEnum
	KINVALIDATED MacSecRxMacSecUDSConfigTypeStatTypeEnum
	KINDECRYPTED MacSecRxMacSecUDSConfigTypeStatTypeEnum
}{
	KINOK:        MacSecRxMacSecUDSConfigTypeStatTypeEnum("kInOK"),
	KINBAD:       MacSecRxMacSecUDSConfigTypeStatTypeEnum("kInBad"),
	KINBADTAG:    MacSecRxMacSecUDSConfigTypeStatTypeEnum("kInBadTag"),
	KINLATE:      MacSecRxMacSecUDSConfigTypeStatTypeEnum("kInLate"),
	KINNOTVALID:  MacSecRxMacSecUDSConfigTypeStatTypeEnum("kInNotValid"),
	KININVALID:   MacSecRxMacSecUDSConfigTypeStatTypeEnum("kInInvalid"),
	KINVALIDATED: MacSecRxMacSecUDSConfigTypeStatTypeEnum("kInValidated"),
	KINDECRYPTED: MacSecRxMacSecUDSConfigTypeStatTypeEnum("kInDecrypted"),
}

func (obj *macSecRxMacSecUDSConfigType) StatType() MacSecRxMacSecUDSConfigTypeStatTypeEnum {
	return MacSecRxMacSecUDSConfigTypeStatTypeEnum(obj.obj.StatType.Enum().String())
}

// TBD
// StatType returns a string
func (obj *macSecRxMacSecUDSConfigType) HasStatType() bool {
	return obj.obj.StatType != nil
}

func (obj *macSecRxMacSecUDSConfigType) SetStatType(value MacSecRxMacSecUDSConfigTypeStatTypeEnum) MacSecRxMacSecUDSConfigType {
	intValue, ok := otg.MacSecRxMacSecUDSConfigType_StatType_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on MacSecRxMacSecUDSConfigTypeStatTypeEnum", string(value)))
		return obj
	}
	enumValue := otg.MacSecRxMacSecUDSConfigType_StatType_Enum(intValue)
	obj.obj.StatType = &enumValue

	return obj
}

// 0 = Packet Count Mode   1 = Byte Count Mode
// IsByteCount returns a bool
func (obj *macSecRxMacSecUDSConfigType) IsByteCount() bool {

	return *obj.obj.IsByteCount

}

// 0 = Packet Count Mode   1 = Byte Count Mode
// IsByteCount returns a bool
func (obj *macSecRxMacSecUDSConfigType) HasIsByteCount() bool {
	return obj.obj.IsByteCount != nil
}

// 0 = Packet Count Mode   1 = Byte Count Mode
// SetIsByteCount sets the bool value in the MacSecRxMacSecUDSConfigType object
func (obj *macSecRxMacSecUDSConfigType) SetIsByteCount(value bool) MacSecRxMacSecUDSConfigType {

	obj.obj.IsByteCount = &value
	return obj
}

// 0 = False   1 = True
// MulticastAsDevId returns a bool
func (obj *macSecRxMacSecUDSConfigType) MulticastAsDevId() bool {

	return *obj.obj.MulticastAsDevId

}

// 0 = False   1 = True
// MulticastAsDevId returns a bool
func (obj *macSecRxMacSecUDSConfigType) HasMulticastAsDevId() bool {
	return obj.obj.MulticastAsDevId != nil
}

// 0 = False   1 = True
// SetMulticastAsDevId sets the bool value in the MacSecRxMacSecUDSConfigType object
func (obj *macSecRxMacSecUDSConfigType) SetMulticastAsDevId(value bool) MacSecRxMacSecUDSConfigType {

	obj.obj.MulticastAsDevId = &value
	return obj
}

// 0 = False   1 = True
// BroadcastAsDevId returns a bool
func (obj *macSecRxMacSecUDSConfigType) BroadcastAsDevId() bool {

	return *obj.obj.BroadcastAsDevId

}

// 0 = False   1 = True
// BroadcastAsDevId returns a bool
func (obj *macSecRxMacSecUDSConfigType) HasBroadcastAsDevId() bool {
	return obj.obj.BroadcastAsDevId != nil
}

// 0 = False   1 = True
// SetBroadcastAsDevId sets the bool value in the MacSecRxMacSecUDSConfigType object
func (obj *macSecRxMacSecUDSConfigType) SetBroadcastAsDevId(value bool) MacSecRxMacSecUDSConfigType {

	obj.obj.BroadcastAsDevId = &value
	return obj
}

func (obj *macSecRxMacSecUDSConfigType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *macSecRxMacSecUDSConfigType) setDefault() {

}

// ***** DebugTopologyDebugPortInfoWithUniqueIdList *****
type debugTopologyDebugPortInfoWithUniqueIdList struct {
	validation
	obj                                 *otg.DebugTopologyDebugPortInfoWithUniqueIdList
	debugPortInfoWithUniqueIdListHolder DebugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter
}

func NewDebugTopologyDebugPortInfoWithUniqueIdList() DebugTopologyDebugPortInfoWithUniqueIdList {
	obj := debugTopologyDebugPortInfoWithUniqueIdList{obj: &otg.DebugTopologyDebugPortInfoWithUniqueIdList{}}
	obj.setDefault()
	return &obj
}

func (obj *debugTopologyDebugPortInfoWithUniqueIdList) Msg() *otg.DebugTopologyDebugPortInfoWithUniqueIdList {
	return obj.obj
}

func (obj *debugTopologyDebugPortInfoWithUniqueIdList) SetMsg(msg *otg.DebugTopologyDebugPortInfoWithUniqueIdList) DebugTopologyDebugPortInfoWithUniqueIdList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *debugTopologyDebugPortInfoWithUniqueIdList) ToProto() (*otg.DebugTopologyDebugPortInfoWithUniqueIdList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *debugTopologyDebugPortInfoWithUniqueIdList) FromProto(msg *otg.DebugTopologyDebugPortInfoWithUniqueIdList) (DebugTopologyDebugPortInfoWithUniqueIdList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *debugTopologyDebugPortInfoWithUniqueIdList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *debugTopologyDebugPortInfoWithUniqueIdList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *debugTopologyDebugPortInfoWithUniqueIdList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *debugTopologyDebugPortInfoWithUniqueIdList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *debugTopologyDebugPortInfoWithUniqueIdList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *debugTopologyDebugPortInfoWithUniqueIdList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *debugTopologyDebugPortInfoWithUniqueIdList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *debugTopologyDebugPortInfoWithUniqueIdList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *debugTopologyDebugPortInfoWithUniqueIdList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *debugTopologyDebugPortInfoWithUniqueIdList) Clone() (DebugTopologyDebugPortInfoWithUniqueIdList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewDebugTopologyDebugPortInfoWithUniqueIdList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *debugTopologyDebugPortInfoWithUniqueIdList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *debugTopologyDebugPortInfoWithUniqueIdList) setNil() {
	obj.debugPortInfoWithUniqueIdListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// DebugTopologyDebugPortInfoWithUniqueIdList is tBD
type DebugTopologyDebugPortInfoWithUniqueIdList interface {
	Validation
	// Msg marshals DebugTopologyDebugPortInfoWithUniqueIdList to protobuf object *otg.DebugTopologyDebugPortInfoWithUniqueIdList
	// and doesn't set defaults
	Msg() *otg.DebugTopologyDebugPortInfoWithUniqueIdList
	// SetMsg unmarshals DebugTopologyDebugPortInfoWithUniqueIdList from protobuf object *otg.DebugTopologyDebugPortInfoWithUniqueIdList
	// and doesn't set defaults
	SetMsg(*otg.DebugTopologyDebugPortInfoWithUniqueIdList) DebugTopologyDebugPortInfoWithUniqueIdList
	// ToProto marshals DebugTopologyDebugPortInfoWithUniqueIdList to protobuf object *otg.DebugTopologyDebugPortInfoWithUniqueIdList
	ToProto() (*otg.DebugTopologyDebugPortInfoWithUniqueIdList, error)
	// ToPbText marshals DebugTopologyDebugPortInfoWithUniqueIdList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals DebugTopologyDebugPortInfoWithUniqueIdList to YAML text
	ToYaml() (string, error)
	// ToJson marshals DebugTopologyDebugPortInfoWithUniqueIdList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals DebugTopologyDebugPortInfoWithUniqueIdList from protobuf object *otg.DebugTopologyDebugPortInfoWithUniqueIdList
	FromProto(msg *otg.DebugTopologyDebugPortInfoWithUniqueIdList) (DebugTopologyDebugPortInfoWithUniqueIdList, error)
	// FromPbText unmarshals DebugTopologyDebugPortInfoWithUniqueIdList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals DebugTopologyDebugPortInfoWithUniqueIdList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals DebugTopologyDebugPortInfoWithUniqueIdList from JSON text
	FromJson(value string) error
	// Validate validates DebugTopologyDebugPortInfoWithUniqueIdList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (DebugTopologyDebugPortInfoWithUniqueIdList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// DebugPortInfoWithUniqueIdList returns DebugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIterIter, set in DebugTopologyDebugPortInfoWithUniqueIdList
	DebugPortInfoWithUniqueIdList() DebugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter
	setNil()
}

func (obj *debugTopologyDebugPortInfoWithUniqueIdList) populateXml(xObj *Argument) error {

	if len(obj.DebugPortInfoWithUniqueIdList().Items()) != 0 {
		for _, item := range obj.DebugPortInfoWithUniqueIdList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *debugTopologyDebugPortInfoWithUniqueIdList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// DebugPortInfoWithUniqueIdList returns a []DebugTopologyDebugPortInfoWithUniqueId
func (obj *debugTopologyDebugPortInfoWithUniqueIdList) DebugPortInfoWithUniqueIdList() DebugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter {
	if len(obj.obj.DebugPortInfoWithUniqueIdList) == 0 {
		obj.obj.DebugPortInfoWithUniqueIdList = []*otg.DebugTopologyDebugPortInfoWithUniqueId{}
	}
	if obj.debugPortInfoWithUniqueIdListHolder == nil {
		obj.debugPortInfoWithUniqueIdListHolder = newDebugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter(&obj.obj.DebugPortInfoWithUniqueIdList).setMsg(obj)
	}
	return obj.debugPortInfoWithUniqueIdListHolder
}

type debugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter struct {
	obj                                         *debugTopologyDebugPortInfoWithUniqueIdList
	debugTopologyDebugPortInfoWithUniqueIdSlice []DebugTopologyDebugPortInfoWithUniqueId
	fieldPtr                                    *[]*otg.DebugTopologyDebugPortInfoWithUniqueId
}

func newDebugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter(ptr *[]*otg.DebugTopologyDebugPortInfoWithUniqueId) DebugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter {
	return &debugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter{fieldPtr: ptr}
}

type DebugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter interface {
	setMsg(*debugTopologyDebugPortInfoWithUniqueIdList) DebugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter
	Items() []DebugTopologyDebugPortInfoWithUniqueId
	Add() DebugTopologyDebugPortInfoWithUniqueId
	Append(items ...DebugTopologyDebugPortInfoWithUniqueId) DebugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter
	Set(index int, newObj DebugTopologyDebugPortInfoWithUniqueId) DebugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter
	Clear() DebugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter
	clearHolderSlice() DebugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter
	appendHolderSlice(item DebugTopologyDebugPortInfoWithUniqueId) DebugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter
}

func (obj *debugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter) setMsg(msg *debugTopologyDebugPortInfoWithUniqueIdList) DebugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&debugTopologyDebugPortInfoWithUniqueId{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *debugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter) Items() []DebugTopologyDebugPortInfoWithUniqueId {
	return obj.debugTopologyDebugPortInfoWithUniqueIdSlice
}

func (obj *debugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter) Add() DebugTopologyDebugPortInfoWithUniqueId {
	newObj := &otg.DebugTopologyDebugPortInfoWithUniqueId{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &debugTopologyDebugPortInfoWithUniqueId{obj: newObj}
	newLibObj.setDefault()
	obj.debugTopologyDebugPortInfoWithUniqueIdSlice = append(obj.debugTopologyDebugPortInfoWithUniqueIdSlice, newLibObj)
	return newLibObj
}

func (obj *debugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter) Append(items ...DebugTopologyDebugPortInfoWithUniqueId) DebugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.debugTopologyDebugPortInfoWithUniqueIdSlice = append(obj.debugTopologyDebugPortInfoWithUniqueIdSlice, item)
	}
	return obj
}

func (obj *debugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter) Set(index int, newObj DebugTopologyDebugPortInfoWithUniqueId) DebugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.debugTopologyDebugPortInfoWithUniqueIdSlice[index] = newObj
	return obj
}
func (obj *debugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter) Clear() DebugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.DebugTopologyDebugPortInfoWithUniqueId{}
		obj.debugTopologyDebugPortInfoWithUniqueIdSlice = []DebugTopologyDebugPortInfoWithUniqueId{}
	}
	return obj
}
func (obj *debugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter) clearHolderSlice() DebugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter {
	if len(obj.debugTopologyDebugPortInfoWithUniqueIdSlice) > 0 {
		obj.debugTopologyDebugPortInfoWithUniqueIdSlice = []DebugTopologyDebugPortInfoWithUniqueId{}
	}
	return obj
}
func (obj *debugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter) appendHolderSlice(item DebugTopologyDebugPortInfoWithUniqueId) DebugTopologyDebugPortInfoWithUniqueIdListDebugTopologyDebugPortInfoWithUniqueIdIter {
	obj.debugTopologyDebugPortInfoWithUniqueIdSlice = append(obj.debugTopologyDebugPortInfoWithUniqueIdSlice, item)
	return obj
}

func (obj *debugTopologyDebugPortInfoWithUniqueIdList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.DebugPortInfoWithUniqueIdList) != 0 {

		if set_default {
			obj.DebugPortInfoWithUniqueIdList().clearHolderSlice()
			for _, item := range obj.obj.DebugPortInfoWithUniqueIdList {
				obj.DebugPortInfoWithUniqueIdList().appendHolderSlice(&debugTopologyDebugPortInfoWithUniqueId{obj: item})
			}
		}
		for _, item := range obj.DebugPortInfoWithUniqueIdList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *debugTopologyDebugPortInfoWithUniqueIdList) setDefault() {

}

// ***** DebugTopologyInterceptorInfo *****
type debugTopologyInterceptorInfo struct {
	validation
	obj *otg.DebugTopologyInterceptorInfo
}

func NewDebugTopologyInterceptorInfo() DebugTopologyInterceptorInfo {
	obj := debugTopologyInterceptorInfo{obj: &otg.DebugTopologyInterceptorInfo{}}
	obj.setDefault()
	return &obj
}

func (obj *debugTopologyInterceptorInfo) Msg() *otg.DebugTopologyInterceptorInfo {
	return obj.obj
}

func (obj *debugTopologyInterceptorInfo) SetMsg(msg *otg.DebugTopologyInterceptorInfo) DebugTopologyInterceptorInfo {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *debugTopologyInterceptorInfo) ToProto() (*otg.DebugTopologyInterceptorInfo, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *debugTopologyInterceptorInfo) FromProto(msg *otg.DebugTopologyInterceptorInfo) (DebugTopologyInterceptorInfo, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *debugTopologyInterceptorInfo) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *debugTopologyInterceptorInfo) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *debugTopologyInterceptorInfo) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *debugTopologyInterceptorInfo) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *debugTopologyInterceptorInfo) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *debugTopologyInterceptorInfo) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *debugTopologyInterceptorInfo) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *debugTopologyInterceptorInfo) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *debugTopologyInterceptorInfo) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *debugTopologyInterceptorInfo) Clone() (DebugTopologyInterceptorInfo, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewDebugTopologyInterceptorInfo()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *debugTopologyInterceptorInfo) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// DebugTopologyInterceptorInfo is tBD
type DebugTopologyInterceptorInfo interface {
	Validation
	// Msg marshals DebugTopologyInterceptorInfo to protobuf object *otg.DebugTopologyInterceptorInfo
	// and doesn't set defaults
	Msg() *otg.DebugTopologyInterceptorInfo
	// SetMsg unmarshals DebugTopologyInterceptorInfo from protobuf object *otg.DebugTopologyInterceptorInfo
	// and doesn't set defaults
	SetMsg(*otg.DebugTopologyInterceptorInfo) DebugTopologyInterceptorInfo
	// ToProto marshals DebugTopologyInterceptorInfo to protobuf object *otg.DebugTopologyInterceptorInfo
	ToProto() (*otg.DebugTopologyInterceptorInfo, error)
	// ToPbText marshals DebugTopologyInterceptorInfo to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals DebugTopologyInterceptorInfo to YAML text
	ToYaml() (string, error)
	// ToJson marshals DebugTopologyInterceptorInfo to JSON text
	ToJson() (string, error)
	// FromProto unmarshals DebugTopologyInterceptorInfo from protobuf object *otg.DebugTopologyInterceptorInfo
	FromProto(msg *otg.DebugTopologyInterceptorInfo) (DebugTopologyInterceptorInfo, error)
	// FromPbText unmarshals DebugTopologyInterceptorInfo from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals DebugTopologyInterceptorInfo from YAML text
	FromYaml(value string) error
	// FromJson unmarshals DebugTopologyInterceptorInfo from JSON text
	FromJson(value string) error
	// Validate validates DebugTopologyInterceptorInfo
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (DebugTopologyInterceptorInfo, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// InterceptorRunningMode returns DebugTopologyInterceptorInfoInterceptorRunningModeEnum, set in DebugTopologyInterceptorInfo
	InterceptorRunningMode() DebugTopologyInterceptorInfoInterceptorRunningModeEnum
	// SetInterceptorRunningMode assigns DebugTopologyInterceptorInfoInterceptorRunningModeEnum provided by user to DebugTopologyInterceptorInfo
	SetInterceptorRunningMode(value DebugTopologyInterceptorInfoInterceptorRunningModeEnum) DebugTopologyInterceptorInfo
	// HasInterceptorRunningMode checks if InterceptorRunningMode has been set in DebugTopologyInterceptorInfo
	HasInterceptorRunningMode() bool
	// InterceptorUserName returns string, set in DebugTopologyInterceptorInfo.
	InterceptorUserName() string
	// SetInterceptorUserName assigns string provided by user to DebugTopologyInterceptorInfo
	SetInterceptorUserName(value string) DebugTopologyInterceptorInfo
	// HasInterceptorUserName checks if InterceptorUserName has been set in DebugTopologyInterceptorInfo
	HasInterceptorUserName() bool
}

func (obj *debugTopologyInterceptorInfo) populateXml(xObj *Argument) error {

	if obj.HasInterceptorRunningMode() {

		member := Member{
			Name:  "interceptorrunningmode",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.DebugTopology+eInterceptorRunningMode",
			Value: strconv.FormatInt(int64(obj.obj.InterceptorRunningMode.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasInterceptorUserName() {

		member := Member{
			Name:  "interceptorusername",
			Type:  "string",
			Value: obj.InterceptorUserName(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *debugTopologyInterceptorInfo) populateFromXml(xObj *RetVal) error {

	return nil
}

type DebugTopologyInterceptorInfoInterceptorRunningModeEnum string

// Enum of InterceptorRunningMode on DebugTopologyInterceptorInfo
var DebugTopologyInterceptorInfoInterceptorRunningMode = struct {
	KLIVEDEBUGGINGONIXNCLIENT DebugTopologyInterceptorInfoInterceptorRunningModeEnum
	KOFFCLIENTDEBUGWITHIXN    DebugTopologyInterceptorInfoInterceptorRunningModeEnum
	KOFFLINEDEBUGWITHCHM      DebugTopologyInterceptorInfoInterceptorRunningModeEnum
}{
	KLIVEDEBUGGINGONIXNCLIENT: DebugTopologyInterceptorInfoInterceptorRunningModeEnum("kLiveDebuggingOnIxNClient"),
	KOFFCLIENTDEBUGWITHIXN:    DebugTopologyInterceptorInfoInterceptorRunningModeEnum("kOffClientDebugWithIxN"),
	KOFFLINEDEBUGWITHCHM:      DebugTopologyInterceptorInfoInterceptorRunningModeEnum("kOfflineDebugWithCHM"),
}

func (obj *debugTopologyInterceptorInfo) InterceptorRunningMode() DebugTopologyInterceptorInfoInterceptorRunningModeEnum {
	return DebugTopologyInterceptorInfoInterceptorRunningModeEnum(obj.obj.InterceptorRunningMode.Enum().String())
}

// TBD
// InterceptorRunningMode returns a string
func (obj *debugTopologyInterceptorInfo) HasInterceptorRunningMode() bool {
	return obj.obj.InterceptorRunningMode != nil
}

func (obj *debugTopologyInterceptorInfo) SetInterceptorRunningMode(value DebugTopologyInterceptorInfoInterceptorRunningModeEnum) DebugTopologyInterceptorInfo {
	intValue, ok := otg.DebugTopologyInterceptorInfo_InterceptorRunningMode_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on DebugTopologyInterceptorInfoInterceptorRunningModeEnum", string(value)))
		return obj
	}
	enumValue := otg.DebugTopologyInterceptorInfo_InterceptorRunningMode_Enum(intValue)
	obj.obj.InterceptorRunningMode = &enumValue

	return obj
}

// TBD
// InterceptorUserName returns a string
func (obj *debugTopologyInterceptorInfo) InterceptorUserName() string {

	return *obj.obj.InterceptorUserName

}

// TBD
// InterceptorUserName returns a string
func (obj *debugTopologyInterceptorInfo) HasInterceptorUserName() bool {
	return obj.obj.InterceptorUserName != nil
}

// TBD
// SetInterceptorUserName sets the string value in the DebugTopologyInterceptorInfo object
func (obj *debugTopologyInterceptorInfo) SetInterceptorUserName(value string) DebugTopologyInterceptorInfo {

	obj.obj.InterceptorUserName = &value
	return obj
}

func (obj *debugTopologyInterceptorInfo) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *debugTopologyInterceptorInfo) setDefault() {

}

// ***** ServerOwnershipInfo *****
type serverOwnershipInfo struct {
	validation
	obj            *otg.ServerOwnershipInfo
	durationHolder PFTypeMilliSecondsType
}

func NewServerOwnershipInfo() ServerOwnershipInfo {
	obj := serverOwnershipInfo{obj: &otg.ServerOwnershipInfo{}}
	obj.setDefault()
	return &obj
}

func (obj *serverOwnershipInfo) Msg() *otg.ServerOwnershipInfo {
	return obj.obj
}

func (obj *serverOwnershipInfo) SetMsg(msg *otg.ServerOwnershipInfo) ServerOwnershipInfo {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *serverOwnershipInfo) ToProto() (*otg.ServerOwnershipInfo, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *serverOwnershipInfo) FromProto(msg *otg.ServerOwnershipInfo) (ServerOwnershipInfo, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *serverOwnershipInfo) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *serverOwnershipInfo) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *serverOwnershipInfo) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *serverOwnershipInfo) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *serverOwnershipInfo) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *serverOwnershipInfo) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *serverOwnershipInfo) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *serverOwnershipInfo) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *serverOwnershipInfo) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *serverOwnershipInfo) Clone() (ServerOwnershipInfo, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewServerOwnershipInfo()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *serverOwnershipInfo) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *serverOwnershipInfo) setNil() {
	obj.durationHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// ServerOwnershipInfo is owner, the current owner, empty if not owned description, provided at the time ownership was taken duration, number of milliseconds this port has been owned by current owner.
type ServerOwnershipInfo interface {
	Validation
	// Msg marshals ServerOwnershipInfo to protobuf object *otg.ServerOwnershipInfo
	// and doesn't set defaults
	Msg() *otg.ServerOwnershipInfo
	// SetMsg unmarshals ServerOwnershipInfo from protobuf object *otg.ServerOwnershipInfo
	// and doesn't set defaults
	SetMsg(*otg.ServerOwnershipInfo) ServerOwnershipInfo
	// ToProto marshals ServerOwnershipInfo to protobuf object *otg.ServerOwnershipInfo
	ToProto() (*otg.ServerOwnershipInfo, error)
	// ToPbText marshals ServerOwnershipInfo to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ServerOwnershipInfo to YAML text
	ToYaml() (string, error)
	// ToJson marshals ServerOwnershipInfo to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ServerOwnershipInfo from protobuf object *otg.ServerOwnershipInfo
	FromProto(msg *otg.ServerOwnershipInfo) (ServerOwnershipInfo, error)
	// FromPbText unmarshals ServerOwnershipInfo from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ServerOwnershipInfo from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ServerOwnershipInfo from JSON text
	FromJson(value string) error
	// Validate validates ServerOwnershipInfo
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ServerOwnershipInfo, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Owner returns string, set in ServerOwnershipInfo.
	Owner() string
	// SetOwner assigns string provided by user to ServerOwnershipInfo
	SetOwner(value string) ServerOwnershipInfo
	// HasOwner checks if Owner has been set in ServerOwnershipInfo
	HasOwner() bool
	// Description returns string, set in ServerOwnershipInfo.
	Description() string
	// SetDescription assigns string provided by user to ServerOwnershipInfo
	SetDescription(value string) ServerOwnershipInfo
	// HasDescription checks if Description has been set in ServerOwnershipInfo
	HasDescription() bool
	// Duration returns PFTypeMilliSecondsType, set in ServerOwnershipInfo.
	// PFTypeMilliSecondsType is model a duration in milliseconds using a plain integer. This allows signed durations up to 300000 years to expressed.
	Duration() PFTypeMilliSecondsType
	// SetDuration assigns PFTypeMilliSecondsType provided by user to ServerOwnershipInfo.
	// PFTypeMilliSecondsType is model a duration in milliseconds using a plain integer. This allows signed durations up to 300000 years to expressed.
	SetDuration(value PFTypeMilliSecondsType) ServerOwnershipInfo
	// HasDuration checks if Duration has been set in ServerOwnershipInfo
	HasDuration() bool
	setNil()
}

func (obj *serverOwnershipInfo) populateXml(xObj *Argument) error {

	if obj.HasOwner() {

		member := Member{
			Name:  "owner",
			Type:  "string",
			Value: obj.Owner(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasDescription() {

		member := Member{
			Name:  "description",
			Type:  "string",
			Value: obj.Description(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *serverOwnershipInfo) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Owner returns a string
func (obj *serverOwnershipInfo) Owner() string {

	return *obj.obj.Owner

}

// TBD
// Owner returns a string
func (obj *serverOwnershipInfo) HasOwner() bool {
	return obj.obj.Owner != nil
}

// TBD
// SetOwner sets the string value in the ServerOwnershipInfo object
func (obj *serverOwnershipInfo) SetOwner(value string) ServerOwnershipInfo {

	obj.obj.Owner = &value
	return obj
}

// TBD
// Description returns a string
func (obj *serverOwnershipInfo) Description() string {

	return *obj.obj.Description

}

// TBD
// Description returns a string
func (obj *serverOwnershipInfo) HasDescription() bool {
	return obj.obj.Description != nil
}

// TBD
// SetDescription sets the string value in the ServerOwnershipInfo object
func (obj *serverOwnershipInfo) SetDescription(value string) ServerOwnershipInfo {

	obj.obj.Description = &value
	return obj
}

// TBD
// Duration returns a PFTypeMilliSecondsType
func (obj *serverOwnershipInfo) Duration() PFTypeMilliSecondsType {
	if obj.obj.Duration == nil {
		obj.obj.Duration = NewPFTypeMilliSecondsType().Msg()
	}
	if obj.durationHolder == nil {
		obj.durationHolder = &pFTypeMilliSecondsType{obj: obj.obj.Duration}
	}
	return obj.durationHolder
}

// TBD
// Duration returns a PFTypeMilliSecondsType
func (obj *serverOwnershipInfo) HasDuration() bool {
	return obj.obj.Duration != nil
}

// TBD
// SetDuration sets the PFTypeMilliSecondsType value in the ServerOwnershipInfo object
func (obj *serverOwnershipInfo) SetDuration(value PFTypeMilliSecondsType) ServerOwnershipInfo {

	obj.durationHolder = nil
	obj.obj.Duration = value.Msg()

	return obj
}

func (obj *serverOwnershipInfo) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Duration != nil {

		obj.Duration().validateObj(vObj, set_default)
	}

}

func (obj *serverOwnershipInfo) setDefault() {

}

// ***** CapturePacketCountList *****
type capturePacketCountList struct {
	validation
	obj                   *otg.CapturePacketCountList
	packetCountListHolder CapturePacketCountListCapturePacketCountTypeIter
}

func NewCapturePacketCountList() CapturePacketCountList {
	obj := capturePacketCountList{obj: &otg.CapturePacketCountList{}}
	obj.setDefault()
	return &obj
}

func (obj *capturePacketCountList) Msg() *otg.CapturePacketCountList {
	return obj.obj
}

func (obj *capturePacketCountList) SetMsg(msg *otg.CapturePacketCountList) CapturePacketCountList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *capturePacketCountList) ToProto() (*otg.CapturePacketCountList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *capturePacketCountList) FromProto(msg *otg.CapturePacketCountList) (CapturePacketCountList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *capturePacketCountList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *capturePacketCountList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *capturePacketCountList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *capturePacketCountList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *capturePacketCountList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *capturePacketCountList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *capturePacketCountList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *capturePacketCountList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *capturePacketCountList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *capturePacketCountList) Clone() (CapturePacketCountList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewCapturePacketCountList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *capturePacketCountList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *capturePacketCountList) setNil() {
	obj.packetCountListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// CapturePacketCountList is tBD
type CapturePacketCountList interface {
	Validation
	// Msg marshals CapturePacketCountList to protobuf object *otg.CapturePacketCountList
	// and doesn't set defaults
	Msg() *otg.CapturePacketCountList
	// SetMsg unmarshals CapturePacketCountList from protobuf object *otg.CapturePacketCountList
	// and doesn't set defaults
	SetMsg(*otg.CapturePacketCountList) CapturePacketCountList
	// ToProto marshals CapturePacketCountList to protobuf object *otg.CapturePacketCountList
	ToProto() (*otg.CapturePacketCountList, error)
	// ToPbText marshals CapturePacketCountList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals CapturePacketCountList to YAML text
	ToYaml() (string, error)
	// ToJson marshals CapturePacketCountList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals CapturePacketCountList from protobuf object *otg.CapturePacketCountList
	FromProto(msg *otg.CapturePacketCountList) (CapturePacketCountList, error)
	// FromPbText unmarshals CapturePacketCountList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals CapturePacketCountList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals CapturePacketCountList from JSON text
	FromJson(value string) error
	// Validate validates CapturePacketCountList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (CapturePacketCountList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// PacketCountList returns CapturePacketCountListCapturePacketCountTypeIterIter, set in CapturePacketCountList
	PacketCountList() CapturePacketCountListCapturePacketCountTypeIter
	setNil()
}

func (obj *capturePacketCountList) populateXml(xObj *Argument) error {

	if len(obj.PacketCountList().Items()) != 0 {
		for _, item := range obj.PacketCountList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *capturePacketCountList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PacketCountList returns a []CapturePacketCountType
func (obj *capturePacketCountList) PacketCountList() CapturePacketCountListCapturePacketCountTypeIter {
	if len(obj.obj.PacketCountList) == 0 {
		obj.obj.PacketCountList = []*otg.CapturePacketCountType{}
	}
	if obj.packetCountListHolder == nil {
		obj.packetCountListHolder = newCapturePacketCountListCapturePacketCountTypeIter(&obj.obj.PacketCountList).setMsg(obj)
	}
	return obj.packetCountListHolder
}

type capturePacketCountListCapturePacketCountTypeIter struct {
	obj                         *capturePacketCountList
	capturePacketCountTypeSlice []CapturePacketCountType
	fieldPtr                    *[]*otg.CapturePacketCountType
}

func newCapturePacketCountListCapturePacketCountTypeIter(ptr *[]*otg.CapturePacketCountType) CapturePacketCountListCapturePacketCountTypeIter {
	return &capturePacketCountListCapturePacketCountTypeIter{fieldPtr: ptr}
}

type CapturePacketCountListCapturePacketCountTypeIter interface {
	setMsg(*capturePacketCountList) CapturePacketCountListCapturePacketCountTypeIter
	Items() []CapturePacketCountType
	Add() CapturePacketCountType
	Append(items ...CapturePacketCountType) CapturePacketCountListCapturePacketCountTypeIter
	Set(index int, newObj CapturePacketCountType) CapturePacketCountListCapturePacketCountTypeIter
	Clear() CapturePacketCountListCapturePacketCountTypeIter
	clearHolderSlice() CapturePacketCountListCapturePacketCountTypeIter
	appendHolderSlice(item CapturePacketCountType) CapturePacketCountListCapturePacketCountTypeIter
}

func (obj *capturePacketCountListCapturePacketCountTypeIter) setMsg(msg *capturePacketCountList) CapturePacketCountListCapturePacketCountTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&capturePacketCountType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *capturePacketCountListCapturePacketCountTypeIter) Items() []CapturePacketCountType {
	return obj.capturePacketCountTypeSlice
}

func (obj *capturePacketCountListCapturePacketCountTypeIter) Add() CapturePacketCountType {
	newObj := &otg.CapturePacketCountType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &capturePacketCountType{obj: newObj}
	newLibObj.setDefault()
	obj.capturePacketCountTypeSlice = append(obj.capturePacketCountTypeSlice, newLibObj)
	return newLibObj
}

func (obj *capturePacketCountListCapturePacketCountTypeIter) Append(items ...CapturePacketCountType) CapturePacketCountListCapturePacketCountTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.capturePacketCountTypeSlice = append(obj.capturePacketCountTypeSlice, item)
	}
	return obj
}

func (obj *capturePacketCountListCapturePacketCountTypeIter) Set(index int, newObj CapturePacketCountType) CapturePacketCountListCapturePacketCountTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.capturePacketCountTypeSlice[index] = newObj
	return obj
}
func (obj *capturePacketCountListCapturePacketCountTypeIter) Clear() CapturePacketCountListCapturePacketCountTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.CapturePacketCountType{}
		obj.capturePacketCountTypeSlice = []CapturePacketCountType{}
	}
	return obj
}
func (obj *capturePacketCountListCapturePacketCountTypeIter) clearHolderSlice() CapturePacketCountListCapturePacketCountTypeIter {
	if len(obj.capturePacketCountTypeSlice) > 0 {
		obj.capturePacketCountTypeSlice = []CapturePacketCountType{}
	}
	return obj
}
func (obj *capturePacketCountListCapturePacketCountTypeIter) appendHolderSlice(item CapturePacketCountType) CapturePacketCountListCapturePacketCountTypeIter {
	obj.capturePacketCountTypeSlice = append(obj.capturePacketCountTypeSlice, item)
	return obj
}

func (obj *capturePacketCountList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.PacketCountList) != 0 {

		if set_default {
			obj.PacketCountList().clearHolderSlice()
			for _, item := range obj.obj.PacketCountList {
				obj.PacketCountList().appendHolderSlice(&capturePacketCountType{obj: item})
			}
		}
		for _, item := range obj.PacketCountList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *capturePacketCountList) setDefault() {

}

// ***** CaptureStatusList *****
type captureStatusList struct {
	validation
	obj              *otg.CaptureStatusList
	statusListHolder CaptureStatusListCaptureStatusTypeIter
}

func NewCaptureStatusList() CaptureStatusList {
	obj := captureStatusList{obj: &otg.CaptureStatusList{}}
	obj.setDefault()
	return &obj
}

func (obj *captureStatusList) Msg() *otg.CaptureStatusList {
	return obj.obj
}

func (obj *captureStatusList) SetMsg(msg *otg.CaptureStatusList) CaptureStatusList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *captureStatusList) ToProto() (*otg.CaptureStatusList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *captureStatusList) FromProto(msg *otg.CaptureStatusList) (CaptureStatusList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *captureStatusList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *captureStatusList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureStatusList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureStatusList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *captureStatusList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureStatusList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *captureStatusList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *captureStatusList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *captureStatusList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *captureStatusList) Clone() (CaptureStatusList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewCaptureStatusList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *captureStatusList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *captureStatusList) setNil() {
	obj.statusListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// CaptureStatusList is tBD
type CaptureStatusList interface {
	Validation
	// Msg marshals CaptureStatusList to protobuf object *otg.CaptureStatusList
	// and doesn't set defaults
	Msg() *otg.CaptureStatusList
	// SetMsg unmarshals CaptureStatusList from protobuf object *otg.CaptureStatusList
	// and doesn't set defaults
	SetMsg(*otg.CaptureStatusList) CaptureStatusList
	// ToProto marshals CaptureStatusList to protobuf object *otg.CaptureStatusList
	ToProto() (*otg.CaptureStatusList, error)
	// ToPbText marshals CaptureStatusList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals CaptureStatusList to YAML text
	ToYaml() (string, error)
	// ToJson marshals CaptureStatusList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals CaptureStatusList from protobuf object *otg.CaptureStatusList
	FromProto(msg *otg.CaptureStatusList) (CaptureStatusList, error)
	// FromPbText unmarshals CaptureStatusList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals CaptureStatusList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals CaptureStatusList from JSON text
	FromJson(value string) error
	// Validate validates CaptureStatusList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (CaptureStatusList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// StatusList returns CaptureStatusListCaptureStatusTypeIterIter, set in CaptureStatusList
	StatusList() CaptureStatusListCaptureStatusTypeIter
	setNil()
}

func (obj *captureStatusList) populateXml(xObj *Argument) error {

	if len(obj.StatusList().Items()) != 0 {
		for _, item := range obj.StatusList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *captureStatusList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// StatusList returns a []CaptureStatusType
func (obj *captureStatusList) StatusList() CaptureStatusListCaptureStatusTypeIter {
	if len(obj.obj.StatusList) == 0 {
		obj.obj.StatusList = []*otg.CaptureStatusType{}
	}
	if obj.statusListHolder == nil {
		obj.statusListHolder = newCaptureStatusListCaptureStatusTypeIter(&obj.obj.StatusList).setMsg(obj)
	}
	return obj.statusListHolder
}

type captureStatusListCaptureStatusTypeIter struct {
	obj                    *captureStatusList
	captureStatusTypeSlice []CaptureStatusType
	fieldPtr               *[]*otg.CaptureStatusType
}

func newCaptureStatusListCaptureStatusTypeIter(ptr *[]*otg.CaptureStatusType) CaptureStatusListCaptureStatusTypeIter {
	return &captureStatusListCaptureStatusTypeIter{fieldPtr: ptr}
}

type CaptureStatusListCaptureStatusTypeIter interface {
	setMsg(*captureStatusList) CaptureStatusListCaptureStatusTypeIter
	Items() []CaptureStatusType
	Add() CaptureStatusType
	Append(items ...CaptureStatusType) CaptureStatusListCaptureStatusTypeIter
	Set(index int, newObj CaptureStatusType) CaptureStatusListCaptureStatusTypeIter
	Clear() CaptureStatusListCaptureStatusTypeIter
	clearHolderSlice() CaptureStatusListCaptureStatusTypeIter
	appendHolderSlice(item CaptureStatusType) CaptureStatusListCaptureStatusTypeIter
}

func (obj *captureStatusListCaptureStatusTypeIter) setMsg(msg *captureStatusList) CaptureStatusListCaptureStatusTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&captureStatusType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *captureStatusListCaptureStatusTypeIter) Items() []CaptureStatusType {
	return obj.captureStatusTypeSlice
}

func (obj *captureStatusListCaptureStatusTypeIter) Add() CaptureStatusType {
	newObj := &otg.CaptureStatusType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &captureStatusType{obj: newObj}
	newLibObj.setDefault()
	obj.captureStatusTypeSlice = append(obj.captureStatusTypeSlice, newLibObj)
	return newLibObj
}

func (obj *captureStatusListCaptureStatusTypeIter) Append(items ...CaptureStatusType) CaptureStatusListCaptureStatusTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.captureStatusTypeSlice = append(obj.captureStatusTypeSlice, item)
	}
	return obj
}

func (obj *captureStatusListCaptureStatusTypeIter) Set(index int, newObj CaptureStatusType) CaptureStatusListCaptureStatusTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.captureStatusTypeSlice[index] = newObj
	return obj
}
func (obj *captureStatusListCaptureStatusTypeIter) Clear() CaptureStatusListCaptureStatusTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.CaptureStatusType{}
		obj.captureStatusTypeSlice = []CaptureStatusType{}
	}
	return obj
}
func (obj *captureStatusListCaptureStatusTypeIter) clearHolderSlice() CaptureStatusListCaptureStatusTypeIter {
	if len(obj.captureStatusTypeSlice) > 0 {
		obj.captureStatusTypeSlice = []CaptureStatusType{}
	}
	return obj
}
func (obj *captureStatusListCaptureStatusTypeIter) appendHolderSlice(item CaptureStatusType) CaptureStatusListCaptureStatusTypeIter {
	obj.captureStatusTypeSlice = append(obj.captureStatusTypeSlice, item)
	return obj
}

func (obj *captureStatusList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.StatusList) != 0 {

		if set_default {
			obj.StatusList().clearHolderSlice()
			for _, item := range obj.obj.StatusList {
				obj.StatusList().appendHolderSlice(&captureStatusType{obj: item})
			}
		}
		for _, item := range obj.StatusList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *captureStatusList) setDefault() {

}

// ***** CaptureRecordType *****
type captureRecordType struct {
	validation
	obj *otg.CaptureRecordType
}

func NewCaptureRecordType() CaptureRecordType {
	obj := captureRecordType{obj: &otg.CaptureRecordType{}}
	obj.setDefault()
	return &obj
}

func (obj *captureRecordType) Msg() *otg.CaptureRecordType {
	return obj.obj
}

func (obj *captureRecordType) SetMsg(msg *otg.CaptureRecordType) CaptureRecordType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *captureRecordType) ToProto() (*otg.CaptureRecordType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *captureRecordType) FromProto(msg *otg.CaptureRecordType) (CaptureRecordType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *captureRecordType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *captureRecordType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureRecordType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureRecordType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *captureRecordType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureRecordType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *captureRecordType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *captureRecordType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *captureRecordType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *captureRecordType) Clone() (CaptureRecordType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewCaptureRecordType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *captureRecordType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// CaptureRecordType is tBD
type CaptureRecordType interface {
	Validation
	// Msg marshals CaptureRecordType to protobuf object *otg.CaptureRecordType
	// and doesn't set defaults
	Msg() *otg.CaptureRecordType
	// SetMsg unmarshals CaptureRecordType from protobuf object *otg.CaptureRecordType
	// and doesn't set defaults
	SetMsg(*otg.CaptureRecordType) CaptureRecordType
	// ToProto marshals CaptureRecordType to protobuf object *otg.CaptureRecordType
	ToProto() (*otg.CaptureRecordType, error)
	// ToPbText marshals CaptureRecordType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals CaptureRecordType to YAML text
	ToYaml() (string, error)
	// ToJson marshals CaptureRecordType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals CaptureRecordType from protobuf object *otg.CaptureRecordType
	FromProto(msg *otg.CaptureRecordType) (CaptureRecordType, error)
	// FromPbText unmarshals CaptureRecordType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals CaptureRecordType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals CaptureRecordType from JSON text
	FromJson(value string) error
	// Validate validates CaptureRecordType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (CaptureRecordType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Count returns int32, set in CaptureRecordType.
	Count() int32
	// SetCount assigns int32 provided by user to CaptureRecordType
	SetCount(value int32) CaptureRecordType
	// HasCount checks if Count has been set in CaptureRecordType
	HasCount() bool
	// Buffer returns string, set in CaptureRecordType.
	Buffer() string
	// SetBuffer assigns string provided by user to CaptureRecordType
	SetBuffer(value string) CaptureRecordType
	// HasBuffer checks if Buffer has been set in CaptureRecordType
	HasBuffer() bool
}

func (obj *captureRecordType) populateXml(xObj *Argument) error {

	if obj.HasCount() {

		member := Member{
			Name:  "count",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Count()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasBuffer() {

		member := Member{
			Name:  "buffer",
			Type:  "octets",
			Value: obj.Buffer(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *captureRecordType) populateFromXml(xObj *RetVal) error {

	return nil
}

// This is the number of packets available from this response.
// Count returns a int32
func (obj *captureRecordType) Count() int32 {

	return *obj.obj.Count

}

// This is the number of packets available from this response.
// Count returns a int32
func (obj *captureRecordType) HasCount() bool {
	return obj.obj.Count != nil
}

// This is the number of packets available from this response.
// SetCount sets the int32 value in the CaptureRecordType object
func (obj *captureRecordType) SetCount(value int32) CaptureRecordType {

	obj.obj.Count = &value
	return obj
}

// Each capture buffer comprises a sequence of captured packets   each following the form specified by the PCAP standard or the   RAW packet information defined above.
// Buffer returns a string
func (obj *captureRecordType) Buffer() string {

	return *obj.obj.Buffer

}

// Each capture buffer comprises a sequence of captured packets   each following the form specified by the PCAP standard or the   RAW packet information defined above.
// Buffer returns a string
func (obj *captureRecordType) HasBuffer() bool {
	return obj.obj.Buffer != nil
}

// Each capture buffer comprises a sequence of captured packets   each following the form specified by the PCAP standard or the   RAW packet information defined above.
// SetBuffer sets the string value in the CaptureRecordType object
func (obj *captureRecordType) SetBuffer(value string) CaptureRecordType {

	obj.obj.Buffer = &value
	return obj
}

func (obj *captureRecordType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *captureRecordType) setDefault() {

}

// ***** ServereNTPState *****
type servereNTPState struct {
	validation
	obj *otg.ServereNTPState
}

func NewServereNTPState() ServereNTPState {
	obj := servereNTPState{obj: &otg.ServereNTPState{}}
	obj.setDefault()
	return &obj
}

func (obj *servereNTPState) Msg() *otg.ServereNTPState {
	return obj.obj
}

func (obj *servereNTPState) SetMsg(msg *otg.ServereNTPState) ServereNTPState {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *servereNTPState) ToProto() (*otg.ServereNTPState, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *servereNTPState) FromProto(msg *otg.ServereNTPState) (ServereNTPState, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *servereNTPState) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *servereNTPState) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *servereNTPState) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *servereNTPState) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *servereNTPState) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *servereNTPState) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *servereNTPState) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *servereNTPState) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *servereNTPState) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *servereNTPState) Clone() (ServereNTPState, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewServereNTPState()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *servereNTPState) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// ServereNTPState is description is TBD
type ServereNTPState interface {
	Validation
	// Msg marshals ServereNTPState to protobuf object *otg.ServereNTPState
	// and doesn't set defaults
	Msg() *otg.ServereNTPState
	// SetMsg unmarshals ServereNTPState from protobuf object *otg.ServereNTPState
	// and doesn't set defaults
	SetMsg(*otg.ServereNTPState) ServereNTPState
	// ToProto marshals ServereNTPState to protobuf object *otg.ServereNTPState
	ToProto() (*otg.ServereNTPState, error)
	// ToPbText marshals ServereNTPState to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals ServereNTPState to YAML text
	ToYaml() (string, error)
	// ToJson marshals ServereNTPState to JSON text
	ToJson() (string, error)
	// FromProto unmarshals ServereNTPState from protobuf object *otg.ServereNTPState
	FromProto(msg *otg.ServereNTPState) (ServereNTPState, error)
	// FromPbText unmarshals ServereNTPState from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals ServereNTPState from YAML text
	FromYaml(value string) error
	// FromJson unmarshals ServereNTPState from JSON text
	FromJson(value string) error
	// Validate validates ServereNTPState
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (ServereNTPState, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ENtpState returns ServereNTPStateENtpStateEnum, set in ServereNTPState
	ENtpState() ServereNTPStateENtpStateEnum
	// SetENtpState assigns ServereNTPStateENtpStateEnum provided by user to ServereNTPState
	SetENtpState(value ServereNTPStateENtpStateEnum) ServereNTPState
	// HasENtpState checks if ENtpState has been set in ServereNTPState
	HasENtpState() bool
}

func (obj *servereNTPState) populateXml(xObj *Argument) error {

	if obj.HasENtpState() {

		member := Member{
			Name:  "entpstate",
			Type:  "None",
			Value: strconv.FormatInt(int64(obj.obj.ENtpState.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *servereNTPState) populateFromXml(xObj *RetVal) error {

	return nil
}

type ServereNTPStateENtpStateEnum string

// Enum of ENtpState on ServereNTPState
var ServereNTPStateENtpState = struct {
	KNOTRUNNING        ServereNTPStateENtpStateEnum
	KRUNNINGNOTTRUSTED ServereNTPStateENtpStateEnum
	KRUNNINGTRUSTED    ServereNTPStateENtpStateEnum
}{
	KNOTRUNNING:        ServereNTPStateENtpStateEnum("kNotRunning"),
	KRUNNINGNOTTRUSTED: ServereNTPStateENtpStateEnum("kRunningNotTrusted"),
	KRUNNINGTRUSTED:    ServereNTPStateENtpStateEnum("kRunningTrusted"),
}

func (obj *servereNTPState) ENtpState() ServereNTPStateENtpStateEnum {
	return ServereNTPStateENtpStateEnum(obj.obj.ENtpState.Enum().String())
}

// description is TBD
// ENtpState returns a string
func (obj *servereNTPState) HasENtpState() bool {
	return obj.obj.ENtpState != nil
}

func (obj *servereNTPState) SetENtpState(value ServereNTPStateENtpStateEnum) ServereNTPState {
	intValue, ok := otg.ServereNTPState_ENtpState_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on ServereNTPStateENtpStateEnum", string(value)))
		return obj
	}
	enumValue := otg.ServereNTPState_ENtpState_Enum(intValue)
	obj.obj.ENtpState = &enumValue

	return obj
}

func (obj *servereNTPState) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *servereNTPState) setDefault() {

}

// ***** MacSecTxMacSecSaKeyStatusTypeList *****
type macSecTxMacSecSaKeyStatusTypeList struct {
	validation
	obj                               *otg.MacSecTxMacSecSaKeyStatusTypeList
	txMacSecSaKeyStatusTypeListHolder MacSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter
}

func NewMacSecTxMacSecSaKeyStatusTypeList() MacSecTxMacSecSaKeyStatusTypeList {
	obj := macSecTxMacSecSaKeyStatusTypeList{obj: &otg.MacSecTxMacSecSaKeyStatusTypeList{}}
	obj.setDefault()
	return &obj
}

func (obj *macSecTxMacSecSaKeyStatusTypeList) Msg() *otg.MacSecTxMacSecSaKeyStatusTypeList {
	return obj.obj
}

func (obj *macSecTxMacSecSaKeyStatusTypeList) SetMsg(msg *otg.MacSecTxMacSecSaKeyStatusTypeList) MacSecTxMacSecSaKeyStatusTypeList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *macSecTxMacSecSaKeyStatusTypeList) ToProto() (*otg.MacSecTxMacSecSaKeyStatusTypeList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *macSecTxMacSecSaKeyStatusTypeList) FromProto(msg *otg.MacSecTxMacSecSaKeyStatusTypeList) (MacSecTxMacSecSaKeyStatusTypeList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *macSecTxMacSecSaKeyStatusTypeList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *macSecTxMacSecSaKeyStatusTypeList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *macSecTxMacSecSaKeyStatusTypeList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecTxMacSecSaKeyStatusTypeList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *macSecTxMacSecSaKeyStatusTypeList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecTxMacSecSaKeyStatusTypeList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *macSecTxMacSecSaKeyStatusTypeList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *macSecTxMacSecSaKeyStatusTypeList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *macSecTxMacSecSaKeyStatusTypeList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *macSecTxMacSecSaKeyStatusTypeList) Clone() (MacSecTxMacSecSaKeyStatusTypeList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewMacSecTxMacSecSaKeyStatusTypeList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *macSecTxMacSecSaKeyStatusTypeList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *macSecTxMacSecSaKeyStatusTypeList) setNil() {
	obj.txMacSecSaKeyStatusTypeListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// MacSecTxMacSecSaKeyStatusTypeList is tBD
type MacSecTxMacSecSaKeyStatusTypeList interface {
	Validation
	// Msg marshals MacSecTxMacSecSaKeyStatusTypeList to protobuf object *otg.MacSecTxMacSecSaKeyStatusTypeList
	// and doesn't set defaults
	Msg() *otg.MacSecTxMacSecSaKeyStatusTypeList
	// SetMsg unmarshals MacSecTxMacSecSaKeyStatusTypeList from protobuf object *otg.MacSecTxMacSecSaKeyStatusTypeList
	// and doesn't set defaults
	SetMsg(*otg.MacSecTxMacSecSaKeyStatusTypeList) MacSecTxMacSecSaKeyStatusTypeList
	// ToProto marshals MacSecTxMacSecSaKeyStatusTypeList to protobuf object *otg.MacSecTxMacSecSaKeyStatusTypeList
	ToProto() (*otg.MacSecTxMacSecSaKeyStatusTypeList, error)
	// ToPbText marshals MacSecTxMacSecSaKeyStatusTypeList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals MacSecTxMacSecSaKeyStatusTypeList to YAML text
	ToYaml() (string, error)
	// ToJson marshals MacSecTxMacSecSaKeyStatusTypeList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals MacSecTxMacSecSaKeyStatusTypeList from protobuf object *otg.MacSecTxMacSecSaKeyStatusTypeList
	FromProto(msg *otg.MacSecTxMacSecSaKeyStatusTypeList) (MacSecTxMacSecSaKeyStatusTypeList, error)
	// FromPbText unmarshals MacSecTxMacSecSaKeyStatusTypeList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals MacSecTxMacSecSaKeyStatusTypeList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals MacSecTxMacSecSaKeyStatusTypeList from JSON text
	FromJson(value string) error
	// Validate validates MacSecTxMacSecSaKeyStatusTypeList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (MacSecTxMacSecSaKeyStatusTypeList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// TxMacSecSaKeyStatusTypeList returns MacSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIterIter, set in MacSecTxMacSecSaKeyStatusTypeList
	TxMacSecSaKeyStatusTypeList() MacSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter
	setNil()
}

func (obj *macSecTxMacSecSaKeyStatusTypeList) populateXml(xObj *Argument) error {

	if len(obj.TxMacSecSaKeyStatusTypeList().Items()) != 0 {
		for _, item := range obj.TxMacSecSaKeyStatusTypeList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *macSecTxMacSecSaKeyStatusTypeList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// TxMacSecSaKeyStatusTypeList returns a []MacSecTxMacSecSaKeyStatusType
func (obj *macSecTxMacSecSaKeyStatusTypeList) TxMacSecSaKeyStatusTypeList() MacSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter {
	if len(obj.obj.TxMacSecSaKeyStatusTypeList) == 0 {
		obj.obj.TxMacSecSaKeyStatusTypeList = []*otg.MacSecTxMacSecSaKeyStatusType{}
	}
	if obj.txMacSecSaKeyStatusTypeListHolder == nil {
		obj.txMacSecSaKeyStatusTypeListHolder = newMacSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter(&obj.obj.TxMacSecSaKeyStatusTypeList).setMsg(obj)
	}
	return obj.txMacSecSaKeyStatusTypeListHolder
}

type macSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter struct {
	obj                                *macSecTxMacSecSaKeyStatusTypeList
	macSecTxMacSecSaKeyStatusTypeSlice []MacSecTxMacSecSaKeyStatusType
	fieldPtr                           *[]*otg.MacSecTxMacSecSaKeyStatusType
}

func newMacSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter(ptr *[]*otg.MacSecTxMacSecSaKeyStatusType) MacSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter {
	return &macSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter{fieldPtr: ptr}
}

type MacSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter interface {
	setMsg(*macSecTxMacSecSaKeyStatusTypeList) MacSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter
	Items() []MacSecTxMacSecSaKeyStatusType
	Add() MacSecTxMacSecSaKeyStatusType
	Append(items ...MacSecTxMacSecSaKeyStatusType) MacSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter
	Set(index int, newObj MacSecTxMacSecSaKeyStatusType) MacSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter
	Clear() MacSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter
	clearHolderSlice() MacSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter
	appendHolderSlice(item MacSecTxMacSecSaKeyStatusType) MacSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter
}

func (obj *macSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter) setMsg(msg *macSecTxMacSecSaKeyStatusTypeList) MacSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&macSecTxMacSecSaKeyStatusType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *macSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter) Items() []MacSecTxMacSecSaKeyStatusType {
	return obj.macSecTxMacSecSaKeyStatusTypeSlice
}

func (obj *macSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter) Add() MacSecTxMacSecSaKeyStatusType {
	newObj := &otg.MacSecTxMacSecSaKeyStatusType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &macSecTxMacSecSaKeyStatusType{obj: newObj}
	newLibObj.setDefault()
	obj.macSecTxMacSecSaKeyStatusTypeSlice = append(obj.macSecTxMacSecSaKeyStatusTypeSlice, newLibObj)
	return newLibObj
}

func (obj *macSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter) Append(items ...MacSecTxMacSecSaKeyStatusType) MacSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.macSecTxMacSecSaKeyStatusTypeSlice = append(obj.macSecTxMacSecSaKeyStatusTypeSlice, item)
	}
	return obj
}

func (obj *macSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter) Set(index int, newObj MacSecTxMacSecSaKeyStatusType) MacSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.macSecTxMacSecSaKeyStatusTypeSlice[index] = newObj
	return obj
}
func (obj *macSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter) Clear() MacSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.MacSecTxMacSecSaKeyStatusType{}
		obj.macSecTxMacSecSaKeyStatusTypeSlice = []MacSecTxMacSecSaKeyStatusType{}
	}
	return obj
}
func (obj *macSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter) clearHolderSlice() MacSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter {
	if len(obj.macSecTxMacSecSaKeyStatusTypeSlice) > 0 {
		obj.macSecTxMacSecSaKeyStatusTypeSlice = []MacSecTxMacSecSaKeyStatusType{}
	}
	return obj
}
func (obj *macSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter) appendHolderSlice(item MacSecTxMacSecSaKeyStatusType) MacSecTxMacSecSaKeyStatusTypeListMacSecTxMacSecSaKeyStatusTypeIter {
	obj.macSecTxMacSecSaKeyStatusTypeSlice = append(obj.macSecTxMacSecSaKeyStatusTypeSlice, item)
	return obj
}

func (obj *macSecTxMacSecSaKeyStatusTypeList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.TxMacSecSaKeyStatusTypeList) != 0 {

		if set_default {
			obj.TxMacSecSaKeyStatusTypeList().clearHolderSlice()
			for _, item := range obj.obj.TxMacSecSaKeyStatusTypeList {
				obj.TxMacSecSaKeyStatusTypeList().appendHolderSlice(&macSecTxMacSecSaKeyStatusType{obj: item})
			}
		}
		for _, item := range obj.TxMacSecSaKeyStatusTypeList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *macSecTxMacSecSaKeyStatusTypeList) setDefault() {

}

// ***** MacSecRxMacSecSaKeyStatusTypeList *****
type macSecRxMacSecSaKeyStatusTypeList struct {
	validation
	obj                               *otg.MacSecRxMacSecSaKeyStatusTypeList
	rxMacSecSaKeyStatusTypeListHolder MacSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter
}

func NewMacSecRxMacSecSaKeyStatusTypeList() MacSecRxMacSecSaKeyStatusTypeList {
	obj := macSecRxMacSecSaKeyStatusTypeList{obj: &otg.MacSecRxMacSecSaKeyStatusTypeList{}}
	obj.setDefault()
	return &obj
}

func (obj *macSecRxMacSecSaKeyStatusTypeList) Msg() *otg.MacSecRxMacSecSaKeyStatusTypeList {
	return obj.obj
}

func (obj *macSecRxMacSecSaKeyStatusTypeList) SetMsg(msg *otg.MacSecRxMacSecSaKeyStatusTypeList) MacSecRxMacSecSaKeyStatusTypeList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *macSecRxMacSecSaKeyStatusTypeList) ToProto() (*otg.MacSecRxMacSecSaKeyStatusTypeList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *macSecRxMacSecSaKeyStatusTypeList) FromProto(msg *otg.MacSecRxMacSecSaKeyStatusTypeList) (MacSecRxMacSecSaKeyStatusTypeList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *macSecRxMacSecSaKeyStatusTypeList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *macSecRxMacSecSaKeyStatusTypeList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *macSecRxMacSecSaKeyStatusTypeList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecRxMacSecSaKeyStatusTypeList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *macSecRxMacSecSaKeyStatusTypeList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecRxMacSecSaKeyStatusTypeList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *macSecRxMacSecSaKeyStatusTypeList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *macSecRxMacSecSaKeyStatusTypeList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *macSecRxMacSecSaKeyStatusTypeList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *macSecRxMacSecSaKeyStatusTypeList) Clone() (MacSecRxMacSecSaKeyStatusTypeList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewMacSecRxMacSecSaKeyStatusTypeList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *macSecRxMacSecSaKeyStatusTypeList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *macSecRxMacSecSaKeyStatusTypeList) setNil() {
	obj.rxMacSecSaKeyStatusTypeListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// MacSecRxMacSecSaKeyStatusTypeList is tBD
type MacSecRxMacSecSaKeyStatusTypeList interface {
	Validation
	// Msg marshals MacSecRxMacSecSaKeyStatusTypeList to protobuf object *otg.MacSecRxMacSecSaKeyStatusTypeList
	// and doesn't set defaults
	Msg() *otg.MacSecRxMacSecSaKeyStatusTypeList
	// SetMsg unmarshals MacSecRxMacSecSaKeyStatusTypeList from protobuf object *otg.MacSecRxMacSecSaKeyStatusTypeList
	// and doesn't set defaults
	SetMsg(*otg.MacSecRxMacSecSaKeyStatusTypeList) MacSecRxMacSecSaKeyStatusTypeList
	// ToProto marshals MacSecRxMacSecSaKeyStatusTypeList to protobuf object *otg.MacSecRxMacSecSaKeyStatusTypeList
	ToProto() (*otg.MacSecRxMacSecSaKeyStatusTypeList, error)
	// ToPbText marshals MacSecRxMacSecSaKeyStatusTypeList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals MacSecRxMacSecSaKeyStatusTypeList to YAML text
	ToYaml() (string, error)
	// ToJson marshals MacSecRxMacSecSaKeyStatusTypeList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals MacSecRxMacSecSaKeyStatusTypeList from protobuf object *otg.MacSecRxMacSecSaKeyStatusTypeList
	FromProto(msg *otg.MacSecRxMacSecSaKeyStatusTypeList) (MacSecRxMacSecSaKeyStatusTypeList, error)
	// FromPbText unmarshals MacSecRxMacSecSaKeyStatusTypeList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals MacSecRxMacSecSaKeyStatusTypeList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals MacSecRxMacSecSaKeyStatusTypeList from JSON text
	FromJson(value string) error
	// Validate validates MacSecRxMacSecSaKeyStatusTypeList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (MacSecRxMacSecSaKeyStatusTypeList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// RxMacSecSaKeyStatusTypeList returns MacSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIterIter, set in MacSecRxMacSecSaKeyStatusTypeList
	RxMacSecSaKeyStatusTypeList() MacSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter
	setNil()
}

func (obj *macSecRxMacSecSaKeyStatusTypeList) populateXml(xObj *Argument) error {

	if len(obj.RxMacSecSaKeyStatusTypeList().Items()) != 0 {
		for _, item := range obj.RxMacSecSaKeyStatusTypeList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *macSecRxMacSecSaKeyStatusTypeList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// RxMacSecSaKeyStatusTypeList returns a []MacSecRxMacSecSaKeyStatusType
func (obj *macSecRxMacSecSaKeyStatusTypeList) RxMacSecSaKeyStatusTypeList() MacSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter {
	if len(obj.obj.RxMacSecSaKeyStatusTypeList) == 0 {
		obj.obj.RxMacSecSaKeyStatusTypeList = []*otg.MacSecRxMacSecSaKeyStatusType{}
	}
	if obj.rxMacSecSaKeyStatusTypeListHolder == nil {
		obj.rxMacSecSaKeyStatusTypeListHolder = newMacSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter(&obj.obj.RxMacSecSaKeyStatusTypeList).setMsg(obj)
	}
	return obj.rxMacSecSaKeyStatusTypeListHolder
}

type macSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter struct {
	obj                                *macSecRxMacSecSaKeyStatusTypeList
	macSecRxMacSecSaKeyStatusTypeSlice []MacSecRxMacSecSaKeyStatusType
	fieldPtr                           *[]*otg.MacSecRxMacSecSaKeyStatusType
}

func newMacSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter(ptr *[]*otg.MacSecRxMacSecSaKeyStatusType) MacSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter {
	return &macSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter{fieldPtr: ptr}
}

type MacSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter interface {
	setMsg(*macSecRxMacSecSaKeyStatusTypeList) MacSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter
	Items() []MacSecRxMacSecSaKeyStatusType
	Add() MacSecRxMacSecSaKeyStatusType
	Append(items ...MacSecRxMacSecSaKeyStatusType) MacSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter
	Set(index int, newObj MacSecRxMacSecSaKeyStatusType) MacSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter
	Clear() MacSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter
	clearHolderSlice() MacSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter
	appendHolderSlice(item MacSecRxMacSecSaKeyStatusType) MacSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter
}

func (obj *macSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter) setMsg(msg *macSecRxMacSecSaKeyStatusTypeList) MacSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&macSecRxMacSecSaKeyStatusType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *macSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter) Items() []MacSecRxMacSecSaKeyStatusType {
	return obj.macSecRxMacSecSaKeyStatusTypeSlice
}

func (obj *macSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter) Add() MacSecRxMacSecSaKeyStatusType {
	newObj := &otg.MacSecRxMacSecSaKeyStatusType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &macSecRxMacSecSaKeyStatusType{obj: newObj}
	newLibObj.setDefault()
	obj.macSecRxMacSecSaKeyStatusTypeSlice = append(obj.macSecRxMacSecSaKeyStatusTypeSlice, newLibObj)
	return newLibObj
}

func (obj *macSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter) Append(items ...MacSecRxMacSecSaKeyStatusType) MacSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.macSecRxMacSecSaKeyStatusTypeSlice = append(obj.macSecRxMacSecSaKeyStatusTypeSlice, item)
	}
	return obj
}

func (obj *macSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter) Set(index int, newObj MacSecRxMacSecSaKeyStatusType) MacSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.macSecRxMacSecSaKeyStatusTypeSlice[index] = newObj
	return obj
}
func (obj *macSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter) Clear() MacSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.MacSecRxMacSecSaKeyStatusType{}
		obj.macSecRxMacSecSaKeyStatusTypeSlice = []MacSecRxMacSecSaKeyStatusType{}
	}
	return obj
}
func (obj *macSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter) clearHolderSlice() MacSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter {
	if len(obj.macSecRxMacSecSaKeyStatusTypeSlice) > 0 {
		obj.macSecRxMacSecSaKeyStatusTypeSlice = []MacSecRxMacSecSaKeyStatusType{}
	}
	return obj
}
func (obj *macSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter) appendHolderSlice(item MacSecRxMacSecSaKeyStatusType) MacSecRxMacSecSaKeyStatusTypeListMacSecRxMacSecSaKeyStatusTypeIter {
	obj.macSecRxMacSecSaKeyStatusTypeSlice = append(obj.macSecRxMacSecSaKeyStatusTypeSlice, item)
	return obj
}

func (obj *macSecRxMacSecSaKeyStatusTypeList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.RxMacSecSaKeyStatusTypeList) != 0 {

		if set_default {
			obj.RxMacSecSaKeyStatusTypeList().clearHolderSlice()
			for _, item := range obj.obj.RxMacSecSaKeyStatusTypeList {
				obj.RxMacSecSaKeyStatusTypeList().appendHolderSlice(&macSecRxMacSecSaKeyStatusType{obj: item})
			}
		}
		for _, item := range obj.RxMacSecSaKeyStatusTypeList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *macSecRxMacSecSaKeyStatusTypeList) setDefault() {

}

// ***** StatCatalogStHtgCatalogItem *****
type statCatalogStHtgCatalogItem struct {
	validation
	obj            *otg.StatCatalogStHtgCatalogItem
	portIdHolder   IdTypePortId
	statListHolder StatCatalogStHtgCatalogStatList
}

func NewStatCatalogStHtgCatalogItem() StatCatalogStHtgCatalogItem {
	obj := statCatalogStHtgCatalogItem{obj: &otg.StatCatalogStHtgCatalogItem{}}
	obj.setDefault()
	return &obj
}

func (obj *statCatalogStHtgCatalogItem) Msg() *otg.StatCatalogStHtgCatalogItem {
	return obj.obj
}

func (obj *statCatalogStHtgCatalogItem) SetMsg(msg *otg.StatCatalogStHtgCatalogItem) StatCatalogStHtgCatalogItem {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *statCatalogStHtgCatalogItem) ToProto() (*otg.StatCatalogStHtgCatalogItem, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *statCatalogStHtgCatalogItem) FromProto(msg *otg.StatCatalogStHtgCatalogItem) (StatCatalogStHtgCatalogItem, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *statCatalogStHtgCatalogItem) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *statCatalogStHtgCatalogItem) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *statCatalogStHtgCatalogItem) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *statCatalogStHtgCatalogItem) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *statCatalogStHtgCatalogItem) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *statCatalogStHtgCatalogItem) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *statCatalogStHtgCatalogItem) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *statCatalogStHtgCatalogItem) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *statCatalogStHtgCatalogItem) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *statCatalogStHtgCatalogItem) Clone() (StatCatalogStHtgCatalogItem, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStatCatalogStHtgCatalogItem()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *statCatalogStHtgCatalogItem) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *statCatalogStHtgCatalogItem) setNil() {
	obj.portIdHolder = nil
	obj.statListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StatCatalogStHtgCatalogItem is tBD
type StatCatalogStHtgCatalogItem interface {
	Validation
	// Msg marshals StatCatalogStHtgCatalogItem to protobuf object *otg.StatCatalogStHtgCatalogItem
	// and doesn't set defaults
	Msg() *otg.StatCatalogStHtgCatalogItem
	// SetMsg unmarshals StatCatalogStHtgCatalogItem from protobuf object *otg.StatCatalogStHtgCatalogItem
	// and doesn't set defaults
	SetMsg(*otg.StatCatalogStHtgCatalogItem) StatCatalogStHtgCatalogItem
	// ToProto marshals StatCatalogStHtgCatalogItem to protobuf object *otg.StatCatalogStHtgCatalogItem
	ToProto() (*otg.StatCatalogStHtgCatalogItem, error)
	// ToPbText marshals StatCatalogStHtgCatalogItem to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StatCatalogStHtgCatalogItem to YAML text
	ToYaml() (string, error)
	// ToJson marshals StatCatalogStHtgCatalogItem to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StatCatalogStHtgCatalogItem from protobuf object *otg.StatCatalogStHtgCatalogItem
	FromProto(msg *otg.StatCatalogStHtgCatalogItem) (StatCatalogStHtgCatalogItem, error)
	// FromPbText unmarshals StatCatalogStHtgCatalogItem from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StatCatalogStHtgCatalogItem from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StatCatalogStHtgCatalogItem from JSON text
	FromJson(value string) error
	// Validate validates StatCatalogStHtgCatalogItem
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StatCatalogStHtgCatalogItem, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// PortId returns IdTypePortId, set in StatCatalogStHtgCatalogItem.
	// IdTypePortId is tBD
	PortId() IdTypePortId
	// SetPortId assigns IdTypePortId provided by user to StatCatalogStHtgCatalogItem.
	// IdTypePortId is tBD
	SetPortId(value IdTypePortId) StatCatalogStHtgCatalogItem
	// HasPortId checks if PortId has been set in StatCatalogStHtgCatalogItem
	HasPortId() bool
	// SourceType returns string, set in StatCatalogStHtgCatalogItem.
	SourceType() string
	// SetSourceType assigns string provided by user to StatCatalogStHtgCatalogItem
	SetSourceType(value string) StatCatalogStHtgCatalogItem
	// HasSourceType checks if SourceType has been set in StatCatalogStHtgCatalogItem
	HasSourceType() bool
	// Description returns string, set in StatCatalogStHtgCatalogItem.
	Description() string
	// SetDescription assigns string provided by user to StatCatalogStHtgCatalogItem
	SetDescription(value string) StatCatalogStHtgCatalogItem
	// HasDescription checks if Description has been set in StatCatalogStHtgCatalogItem
	HasDescription() bool
	// ItemId returns int32, set in StatCatalogStHtgCatalogItem.
	ItemId() int32
	// SetItemId assigns int32 provided by user to StatCatalogStHtgCatalogItem
	SetItemId(value int32) StatCatalogStHtgCatalogItem
	// HasItemId checks if ItemId has been set in StatCatalogStHtgCatalogItem
	HasItemId() bool
	// StatList returns StatCatalogStHtgCatalogStatList, set in StatCatalogStHtgCatalogItem.
	// StatCatalogStHtgCatalogStatList is tBD
	StatList() StatCatalogStHtgCatalogStatList
	// SetStatList assigns StatCatalogStHtgCatalogStatList provided by user to StatCatalogStHtgCatalogItem.
	// StatCatalogStHtgCatalogStatList is tBD
	SetStatList(value StatCatalogStHtgCatalogStatList) StatCatalogStHtgCatalogItem
	// HasStatList checks if StatList has been set in StatCatalogStHtgCatalogItem
	HasStatList() bool
	setNil()
}

func (obj *statCatalogStHtgCatalogItem) populateXml(xObj *Argument) error {

	if obj.HasSourceType() {

		member := Member{
			Name:  "sourcetype",
			Type:  "string",
			Value: obj.SourceType(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasDescription() {

		member := Member{
			Name:  "description",
			Type:  "string",
			Value: obj.Description(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasItemId() {

		member := Member{
			Name:  "itemid",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.ItemId()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *statCatalogStHtgCatalogItem) populateFromXml(xObj *RetVal) error {

	return nil
}

// Port id for which stat item is retrieved
// PortId returns a IdTypePortId
func (obj *statCatalogStHtgCatalogItem) PortId() IdTypePortId {
	if obj.obj.PortId == nil {
		obj.obj.PortId = NewIdTypePortId().Msg()
	}
	if obj.portIdHolder == nil {
		obj.portIdHolder = &idTypePortId{obj: obj.obj.PortId}
	}
	return obj.portIdHolder
}

// Port id for which stat item is retrieved
// PortId returns a IdTypePortId
func (obj *statCatalogStHtgCatalogItem) HasPortId() bool {
	return obj.obj.PortId != nil
}

// Port id for which stat item is retrieved
// SetPortId sets the IdTypePortId value in the StatCatalogStHtgCatalogItem object
func (obj *statCatalogStHtgCatalogItem) SetPortId(value IdTypePortId) StatCatalogStHtgCatalogItem {

	obj.portIdHolder = nil
	obj.obj.PortId = value.Msg()

	return obj
}

// StatSourceType Name
// SourceType returns a string
func (obj *statCatalogStHtgCatalogItem) SourceType() string {

	return *obj.obj.SourceType

}

// StatSourceType Name
// SourceType returns a string
func (obj *statCatalogStHtgCatalogItem) HasSourceType() bool {
	return obj.obj.SourceType != nil
}

// StatSourceType Name
// SetSourceType sets the string value in the StatCatalogStHtgCatalogItem object
func (obj *statCatalogStHtgCatalogItem) SetSourceType(value string) StatCatalogStHtgCatalogItem {

	obj.obj.SourceType = &value
	return obj
}

// StatSourceType Description
// Description returns a string
func (obj *statCatalogStHtgCatalogItem) Description() string {

	return *obj.obj.Description

}

// StatSourceType Description
// Description returns a string
func (obj *statCatalogStHtgCatalogItem) HasDescription() bool {
	return obj.obj.Description != nil
}

// StatSourceType Description
// SetDescription sets the string value in the StatCatalogStHtgCatalogItem object
func (obj *statCatalogStHtgCatalogItem) SetDescription(value string) StatCatalogStHtgCatalogItem {

	obj.obj.Description = &value
	return obj
}

// StatSourceType Id.
// ItemId returns a int32
func (obj *statCatalogStHtgCatalogItem) ItemId() int32 {

	return *obj.obj.ItemId

}

// StatSourceType Id.
// ItemId returns a int32
func (obj *statCatalogStHtgCatalogItem) HasItemId() bool {
	return obj.obj.ItemId != nil
}

// StatSourceType Id.
// SetItemId sets the int32 value in the StatCatalogStHtgCatalogItem object
func (obj *statCatalogStHtgCatalogItem) SetItemId(value int32) StatCatalogStHtgCatalogItem {

	obj.obj.ItemId = &value
	return obj
}

// StatSourceType Stats
// StatList returns a StatCatalogStHtgCatalogStatList
func (obj *statCatalogStHtgCatalogItem) StatList() StatCatalogStHtgCatalogStatList {
	if obj.obj.StatList == nil {
		obj.obj.StatList = NewStatCatalogStHtgCatalogStatList().Msg()
	}
	if obj.statListHolder == nil {
		obj.statListHolder = &statCatalogStHtgCatalogStatList{obj: obj.obj.StatList}
	}
	return obj.statListHolder
}

// StatSourceType Stats
// StatList returns a StatCatalogStHtgCatalogStatList
func (obj *statCatalogStHtgCatalogItem) HasStatList() bool {
	return obj.obj.StatList != nil
}

// StatSourceType Stats
// SetStatList sets the StatCatalogStHtgCatalogStatList value in the StatCatalogStHtgCatalogItem object
func (obj *statCatalogStHtgCatalogItem) SetStatList(value StatCatalogStHtgCatalogStatList) StatCatalogStHtgCatalogItem {

	obj.statListHolder = nil
	obj.obj.StatList = value.Msg()

	return obj
}

func (obj *statCatalogStHtgCatalogItem) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortId != nil {

		obj.PortId().validateObj(vObj, set_default)
	}

	if obj.obj.StatList != nil {

		obj.StatList().validateObj(vObj, set_default)
	}

}

func (obj *statCatalogStHtgCatalogItem) setDefault() {

}

// ***** DebugTopologyDebugPortTopologyInfo *****
type debugTopologyDebugPortTopologyInfo struct {
	validation
	obj *otg.DebugTopologyDebugPortTopologyInfo
}

func NewDebugTopologyDebugPortTopologyInfo() DebugTopologyDebugPortTopologyInfo {
	obj := debugTopologyDebugPortTopologyInfo{obj: &otg.DebugTopologyDebugPortTopologyInfo{}}
	obj.setDefault()
	return &obj
}

func (obj *debugTopologyDebugPortTopologyInfo) Msg() *otg.DebugTopologyDebugPortTopologyInfo {
	return obj.obj
}

func (obj *debugTopologyDebugPortTopologyInfo) SetMsg(msg *otg.DebugTopologyDebugPortTopologyInfo) DebugTopologyDebugPortTopologyInfo {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *debugTopologyDebugPortTopologyInfo) ToProto() (*otg.DebugTopologyDebugPortTopologyInfo, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *debugTopologyDebugPortTopologyInfo) FromProto(msg *otg.DebugTopologyDebugPortTopologyInfo) (DebugTopologyDebugPortTopologyInfo, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *debugTopologyDebugPortTopologyInfo) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *debugTopologyDebugPortTopologyInfo) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *debugTopologyDebugPortTopologyInfo) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *debugTopologyDebugPortTopologyInfo) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *debugTopologyDebugPortTopologyInfo) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *debugTopologyDebugPortTopologyInfo) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *debugTopologyDebugPortTopologyInfo) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *debugTopologyDebugPortTopologyInfo) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *debugTopologyDebugPortTopologyInfo) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *debugTopologyDebugPortTopologyInfo) Clone() (DebugTopologyDebugPortTopologyInfo, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewDebugTopologyDebugPortTopologyInfo()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *debugTopologyDebugPortTopologyInfo) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// DebugTopologyDebugPortTopologyInfo is tBD
type DebugTopologyDebugPortTopologyInfo interface {
	Validation
	// Msg marshals DebugTopologyDebugPortTopologyInfo to protobuf object *otg.DebugTopologyDebugPortTopologyInfo
	// and doesn't set defaults
	Msg() *otg.DebugTopologyDebugPortTopologyInfo
	// SetMsg unmarshals DebugTopologyDebugPortTopologyInfo from protobuf object *otg.DebugTopologyDebugPortTopologyInfo
	// and doesn't set defaults
	SetMsg(*otg.DebugTopologyDebugPortTopologyInfo) DebugTopologyDebugPortTopologyInfo
	// ToProto marshals DebugTopologyDebugPortTopologyInfo to protobuf object *otg.DebugTopologyDebugPortTopologyInfo
	ToProto() (*otg.DebugTopologyDebugPortTopologyInfo, error)
	// ToPbText marshals DebugTopologyDebugPortTopologyInfo to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals DebugTopologyDebugPortTopologyInfo to YAML text
	ToYaml() (string, error)
	// ToJson marshals DebugTopologyDebugPortTopologyInfo to JSON text
	ToJson() (string, error)
	// FromProto unmarshals DebugTopologyDebugPortTopologyInfo from protobuf object *otg.DebugTopologyDebugPortTopologyInfo
	FromProto(msg *otg.DebugTopologyDebugPortTopologyInfo) (DebugTopologyDebugPortTopologyInfo, error)
	// FromPbText unmarshals DebugTopologyDebugPortTopologyInfo from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals DebugTopologyDebugPortTopologyInfo from YAML text
	FromYaml(value string) error
	// FromJson unmarshals DebugTopologyDebugPortTopologyInfo from JSON text
	FromJson(value string) error
	// Validate validates DebugTopologyDebugPortTopologyInfo
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (DebugTopologyDebugPortTopologyInfo, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ChassisNameOrIp returns string, set in DebugTopologyDebugPortTopologyInfo.
	ChassisNameOrIp() string
	// SetChassisNameOrIp assigns string provided by user to DebugTopologyDebugPortTopologyInfo
	SetChassisNameOrIp(value string) DebugTopologyDebugPortTopologyInfo
	// HasChassisNameOrIp checks if ChassisNameOrIp has been set in DebugTopologyDebugPortTopologyInfo
	HasChassisNameOrIp() bool
	// Card returns int32, set in DebugTopologyDebugPortTopologyInfo.
	Card() int32
	// SetCard assigns int32 provided by user to DebugTopologyDebugPortTopologyInfo
	SetCard(value int32) DebugTopologyDebugPortTopologyInfo
	// HasCard checks if Card has been set in DebugTopologyDebugPortTopologyInfo
	HasCard() bool
	// Port returns int32, set in DebugTopologyDebugPortTopologyInfo.
	Port() int32
	// SetPort assigns int32 provided by user to DebugTopologyDebugPortTopologyInfo
	SetPort(value int32) DebugTopologyDebugPortTopologyInfo
	// HasPort checks if Port has been set in DebugTopologyDebugPortTopologyInfo
	HasPort() bool
	// PortType returns string, set in DebugTopologyDebugPortTopologyInfo.
	PortType() string
	// SetPortType assigns string provided by user to DebugTopologyDebugPortTopologyInfo
	SetPortType(value string) DebugTopologyDebugPortTopologyInfo
	// HasPortType checks if PortType has been set in DebugTopologyDebugPortTopologyInfo
	HasPortType() bool
	// ManagementIp returns string, set in DebugTopologyDebugPortTopologyInfo.
	ManagementIp() string
	// SetManagementIp assigns string provided by user to DebugTopologyDebugPortTopologyInfo
	SetManagementIp(value string) DebugTopologyDebugPortTopologyInfo
	// HasManagementIp checks if ManagementIp has been set in DebugTopologyDebugPortTopologyInfo
	HasManagementIp() bool
	// IsVirtualPort returns bool, set in DebugTopologyDebugPortTopologyInfo.
	IsVirtualPort() bool
	// SetIsVirtualPort assigns bool provided by user to DebugTopologyDebugPortTopologyInfo
	SetIsVirtualPort(value bool) DebugTopologyDebugPortTopologyInfo
	// HasIsVirtualPort checks if IsVirtualPort has been set in DebugTopologyDebugPortTopologyInfo
	HasIsVirtualPort() bool
	// PortIndex returns int32, set in DebugTopologyDebugPortTopologyInfo.
	PortIndex() int32
	// SetPortIndex assigns int32 provided by user to DebugTopologyDebugPortTopologyInfo
	SetPortIndex(value int32) DebugTopologyDebugPortTopologyInfo
	// HasPortIndex checks if PortIndex has been set in DebugTopologyDebugPortTopologyInfo
	HasPortIndex() bool
}

func (obj *debugTopologyDebugPortTopologyInfo) populateXml(xObj *Argument) error {

	if obj.HasChassisNameOrIp() {

		member := Member{
			Name:  "chassisnameorip",
			Type:  "string",
			Value: obj.ChassisNameOrIp(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasCard() {

		member := Member{
			Name:  "card",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Card()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasPort() {

		member := Member{
			Name:  "port",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Port()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasPortType() {

		member := Member{
			Name:  "porttype",
			Type:  "string",
			Value: obj.PortType(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasManagementIp() {

		member := Member{
			Name:  "managementip",
			Type:  "string",
			Value: obj.ManagementIp(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIsVirtualPort() {
		var value string
		if obj.IsVirtualPort() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "isvirtualport",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasPortIndex() {

		member := Member{
			Name:  "portindex",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.PortIndex()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *debugTopologyDebugPortTopologyInfo) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// ChassisNameOrIp returns a string
func (obj *debugTopologyDebugPortTopologyInfo) ChassisNameOrIp() string {

	return *obj.obj.ChassisNameOrIp

}

// TBD
// ChassisNameOrIp returns a string
func (obj *debugTopologyDebugPortTopologyInfo) HasChassisNameOrIp() bool {
	return obj.obj.ChassisNameOrIp != nil
}

// TBD
// SetChassisNameOrIp sets the string value in the DebugTopologyDebugPortTopologyInfo object
func (obj *debugTopologyDebugPortTopologyInfo) SetChassisNameOrIp(value string) DebugTopologyDebugPortTopologyInfo {

	obj.obj.ChassisNameOrIp = &value
	return obj
}

// TBD
// Card returns a int32
func (obj *debugTopologyDebugPortTopologyInfo) Card() int32 {

	return *obj.obj.Card

}

// TBD
// Card returns a int32
func (obj *debugTopologyDebugPortTopologyInfo) HasCard() bool {
	return obj.obj.Card != nil
}

// TBD
// SetCard sets the int32 value in the DebugTopologyDebugPortTopologyInfo object
func (obj *debugTopologyDebugPortTopologyInfo) SetCard(value int32) DebugTopologyDebugPortTopologyInfo {

	obj.obj.Card = &value
	return obj
}

// TBD
// Port returns a int32
func (obj *debugTopologyDebugPortTopologyInfo) Port() int32 {

	return *obj.obj.Port

}

// TBD
// Port returns a int32
func (obj *debugTopologyDebugPortTopologyInfo) HasPort() bool {
	return obj.obj.Port != nil
}

// TBD
// SetPort sets the int32 value in the DebugTopologyDebugPortTopologyInfo object
func (obj *debugTopologyDebugPortTopologyInfo) SetPort(value int32) DebugTopologyDebugPortTopologyInfo {

	obj.obj.Port = &value
	return obj
}

// TBD
// PortType returns a string
func (obj *debugTopologyDebugPortTopologyInfo) PortType() string {

	return *obj.obj.PortType

}

// TBD
// PortType returns a string
func (obj *debugTopologyDebugPortTopologyInfo) HasPortType() bool {
	return obj.obj.PortType != nil
}

// TBD
// SetPortType sets the string value in the DebugTopologyDebugPortTopologyInfo object
func (obj *debugTopologyDebugPortTopologyInfo) SetPortType(value string) DebugTopologyDebugPortTopologyInfo {

	obj.obj.PortType = &value
	return obj
}

// TBD
// ManagementIp returns a string
func (obj *debugTopologyDebugPortTopologyInfo) ManagementIp() string {

	return *obj.obj.ManagementIp

}

// TBD
// ManagementIp returns a string
func (obj *debugTopologyDebugPortTopologyInfo) HasManagementIp() bool {
	return obj.obj.ManagementIp != nil
}

// TBD
// SetManagementIp sets the string value in the DebugTopologyDebugPortTopologyInfo object
func (obj *debugTopologyDebugPortTopologyInfo) SetManagementIp(value string) DebugTopologyDebugPortTopologyInfo {

	obj.obj.ManagementIp = &value
	return obj
}

// TBD
// IsVirtualPort returns a bool
func (obj *debugTopologyDebugPortTopologyInfo) IsVirtualPort() bool {

	return *obj.obj.IsVirtualPort

}

// TBD
// IsVirtualPort returns a bool
func (obj *debugTopologyDebugPortTopologyInfo) HasIsVirtualPort() bool {
	return obj.obj.IsVirtualPort != nil
}

// TBD
// SetIsVirtualPort sets the bool value in the DebugTopologyDebugPortTopologyInfo object
func (obj *debugTopologyDebugPortTopologyInfo) SetIsVirtualPort(value bool) DebugTopologyDebugPortTopologyInfo {

	obj.obj.IsVirtualPort = &value
	return obj
}

// TBD
// PortIndex returns a int32
func (obj *debugTopologyDebugPortTopologyInfo) PortIndex() int32 {

	return *obj.obj.PortIndex

}

// TBD
// PortIndex returns a int32
func (obj *debugTopologyDebugPortTopologyInfo) HasPortIndex() bool {
	return obj.obj.PortIndex != nil
}

// TBD
// SetPortIndex sets the int32 value in the DebugTopologyDebugPortTopologyInfo object
func (obj *debugTopologyDebugPortTopologyInfo) SetPortIndex(value int32) DebugTopologyDebugPortTopologyInfo {

	obj.obj.PortIndex = &value
	return obj
}

func (obj *debugTopologyDebugPortTopologyInfo) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *debugTopologyDebugPortTopologyInfo) setDefault() {

}

// ***** DebugTopologyDebugPortConnectionInfo *****
type debugTopologyDebugPortConnectionInfo struct {
	validation
	obj *otg.DebugTopologyDebugPortConnectionInfo
}

func NewDebugTopologyDebugPortConnectionInfo() DebugTopologyDebugPortConnectionInfo {
	obj := debugTopologyDebugPortConnectionInfo{obj: &otg.DebugTopologyDebugPortConnectionInfo{}}
	obj.setDefault()
	return &obj
}

func (obj *debugTopologyDebugPortConnectionInfo) Msg() *otg.DebugTopologyDebugPortConnectionInfo {
	return obj.obj
}

func (obj *debugTopologyDebugPortConnectionInfo) SetMsg(msg *otg.DebugTopologyDebugPortConnectionInfo) DebugTopologyDebugPortConnectionInfo {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *debugTopologyDebugPortConnectionInfo) ToProto() (*otg.DebugTopologyDebugPortConnectionInfo, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *debugTopologyDebugPortConnectionInfo) FromProto(msg *otg.DebugTopologyDebugPortConnectionInfo) (DebugTopologyDebugPortConnectionInfo, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *debugTopologyDebugPortConnectionInfo) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *debugTopologyDebugPortConnectionInfo) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *debugTopologyDebugPortConnectionInfo) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *debugTopologyDebugPortConnectionInfo) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *debugTopologyDebugPortConnectionInfo) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *debugTopologyDebugPortConnectionInfo) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *debugTopologyDebugPortConnectionInfo) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *debugTopologyDebugPortConnectionInfo) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *debugTopologyDebugPortConnectionInfo) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *debugTopologyDebugPortConnectionInfo) Clone() (DebugTopologyDebugPortConnectionInfo, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewDebugTopologyDebugPortConnectionInfo()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *debugTopologyDebugPortConnectionInfo) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// DebugTopologyDebugPortConnectionInfo is tBD
type DebugTopologyDebugPortConnectionInfo interface {
	Validation
	// Msg marshals DebugTopologyDebugPortConnectionInfo to protobuf object *otg.DebugTopologyDebugPortConnectionInfo
	// and doesn't set defaults
	Msg() *otg.DebugTopologyDebugPortConnectionInfo
	// SetMsg unmarshals DebugTopologyDebugPortConnectionInfo from protobuf object *otg.DebugTopologyDebugPortConnectionInfo
	// and doesn't set defaults
	SetMsg(*otg.DebugTopologyDebugPortConnectionInfo) DebugTopologyDebugPortConnectionInfo
	// ToProto marshals DebugTopologyDebugPortConnectionInfo to protobuf object *otg.DebugTopologyDebugPortConnectionInfo
	ToProto() (*otg.DebugTopologyDebugPortConnectionInfo, error)
	// ToPbText marshals DebugTopologyDebugPortConnectionInfo to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals DebugTopologyDebugPortConnectionInfo to YAML text
	ToYaml() (string, error)
	// ToJson marshals DebugTopologyDebugPortConnectionInfo to JSON text
	ToJson() (string, error)
	// FromProto unmarshals DebugTopologyDebugPortConnectionInfo from protobuf object *otg.DebugTopologyDebugPortConnectionInfo
	FromProto(msg *otg.DebugTopologyDebugPortConnectionInfo) (DebugTopologyDebugPortConnectionInfo, error)
	// FromPbText unmarshals DebugTopologyDebugPortConnectionInfo from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals DebugTopologyDebugPortConnectionInfo from YAML text
	FromYaml(value string) error
	// FromJson unmarshals DebugTopologyDebugPortConnectionInfo from JSON text
	FromJson(value string) error
	// Validate validates DebugTopologyDebugPortConnectionInfo
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (DebugTopologyDebugPortConnectionInfo, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// TargetAddress returns string, set in DebugTopologyDebugPortConnectionInfo.
	TargetAddress() string
	// SetTargetAddress assigns string provided by user to DebugTopologyDebugPortConnectionInfo
	SetTargetAddress(value string) DebugTopologyDebugPortConnectionInfo
	// HasTargetAddress checks if TargetAddress has been set in DebugTopologyDebugPortConnectionInfo
	HasTargetAddress() bool
	// TargetPort returns int32, set in DebugTopologyDebugPortConnectionInfo.
	TargetPort() int32
	// SetTargetPort assigns int32 provided by user to DebugTopologyDebugPortConnectionInfo
	SetTargetPort(value int32) DebugTopologyDebugPortConnectionInfo
	// HasTargetPort checks if TargetPort has been set in DebugTopologyDebugPortConnectionInfo
	HasTargetPort() bool
	// ProxyAddress returns string, set in DebugTopologyDebugPortConnectionInfo.
	ProxyAddress() string
	// SetProxyAddress assigns string provided by user to DebugTopologyDebugPortConnectionInfo
	SetProxyAddress(value string) DebugTopologyDebugPortConnectionInfo
	// HasProxyAddress checks if ProxyAddress has been set in DebugTopologyDebugPortConnectionInfo
	HasProxyAddress() bool
	// ProxyPort returns int32, set in DebugTopologyDebugPortConnectionInfo.
	ProxyPort() int32
	// SetProxyPort assigns int32 provided by user to DebugTopologyDebugPortConnectionInfo
	SetProxyPort(value int32) DebugTopologyDebugPortConnectionInfo
	// HasProxyPort checks if ProxyPort has been set in DebugTopologyDebugPortConnectionInfo
	HasProxyPort() bool
}

func (obj *debugTopologyDebugPortConnectionInfo) populateXml(xObj *Argument) error {

	if obj.HasTargetAddress() {

		member := Member{
			Name:  "targetaddress",
			Type:  "string",
			Value: obj.TargetAddress(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasTargetPort() {

		member := Member{
			Name:  "targetport",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.TargetPort()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasProxyAddress() {

		member := Member{
			Name:  "proxyaddress",
			Type:  "string",
			Value: obj.ProxyAddress(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasProxyPort() {

		member := Member{
			Name:  "proxyport",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.ProxyPort()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *debugTopologyDebugPortConnectionInfo) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// TargetAddress returns a string
func (obj *debugTopologyDebugPortConnectionInfo) TargetAddress() string {

	return *obj.obj.TargetAddress

}

// TBD
// TargetAddress returns a string
func (obj *debugTopologyDebugPortConnectionInfo) HasTargetAddress() bool {
	return obj.obj.TargetAddress != nil
}

// TBD
// SetTargetAddress sets the string value in the DebugTopologyDebugPortConnectionInfo object
func (obj *debugTopologyDebugPortConnectionInfo) SetTargetAddress(value string) DebugTopologyDebugPortConnectionInfo {

	obj.obj.TargetAddress = &value
	return obj
}

// TBD
// TargetPort returns a int32
func (obj *debugTopologyDebugPortConnectionInfo) TargetPort() int32 {

	return *obj.obj.TargetPort

}

// TBD
// TargetPort returns a int32
func (obj *debugTopologyDebugPortConnectionInfo) HasTargetPort() bool {
	return obj.obj.TargetPort != nil
}

// TBD
// SetTargetPort sets the int32 value in the DebugTopologyDebugPortConnectionInfo object
func (obj *debugTopologyDebugPortConnectionInfo) SetTargetPort(value int32) DebugTopologyDebugPortConnectionInfo {

	obj.obj.TargetPort = &value
	return obj
}

// TBD
// ProxyAddress returns a string
func (obj *debugTopologyDebugPortConnectionInfo) ProxyAddress() string {

	return *obj.obj.ProxyAddress

}

// TBD
// ProxyAddress returns a string
func (obj *debugTopologyDebugPortConnectionInfo) HasProxyAddress() bool {
	return obj.obj.ProxyAddress != nil
}

// TBD
// SetProxyAddress sets the string value in the DebugTopologyDebugPortConnectionInfo object
func (obj *debugTopologyDebugPortConnectionInfo) SetProxyAddress(value string) DebugTopologyDebugPortConnectionInfo {

	obj.obj.ProxyAddress = &value
	return obj
}

// TBD
// ProxyPort returns a int32
func (obj *debugTopologyDebugPortConnectionInfo) ProxyPort() int32 {

	return *obj.obj.ProxyPort

}

// TBD
// ProxyPort returns a int32
func (obj *debugTopologyDebugPortConnectionInfo) HasProxyPort() bool {
	return obj.obj.ProxyPort != nil
}

// TBD
// SetProxyPort sets the int32 value in the DebugTopologyDebugPortConnectionInfo object
func (obj *debugTopologyDebugPortConnectionInfo) SetProxyPort(value int32) DebugTopologyDebugPortConnectionInfo {

	obj.obj.ProxyPort = &value
	return obj
}

func (obj *debugTopologyDebugPortConnectionInfo) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *debugTopologyDebugPortConnectionInfo) setDefault() {

}

// ***** PFTypePartsPerMillionType *****
type pFTypePartsPerMillionType struct {
	validation
	obj *otg.PFTypePartsPerMillionType
}

func NewPFTypePartsPerMillionType() PFTypePartsPerMillionType {
	obj := pFTypePartsPerMillionType{obj: &otg.PFTypePartsPerMillionType{}}
	obj.setDefault()
	return &obj
}

func (obj *pFTypePartsPerMillionType) Msg() *otg.PFTypePartsPerMillionType {
	return obj.obj
}

func (obj *pFTypePartsPerMillionType) SetMsg(msg *otg.PFTypePartsPerMillionType) PFTypePartsPerMillionType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *pFTypePartsPerMillionType) ToProto() (*otg.PFTypePartsPerMillionType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *pFTypePartsPerMillionType) FromProto(msg *otg.PFTypePartsPerMillionType) (PFTypePartsPerMillionType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *pFTypePartsPerMillionType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *pFTypePartsPerMillionType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *pFTypePartsPerMillionType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypePartsPerMillionType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *pFTypePartsPerMillionType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypePartsPerMillionType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *pFTypePartsPerMillionType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *pFTypePartsPerMillionType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *pFTypePartsPerMillionType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *pFTypePartsPerMillionType) Clone() (PFTypePartsPerMillionType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPFTypePartsPerMillionType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *pFTypePartsPerMillionType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// PFTypePartsPerMillionType is model a ppm ratio using a fixed point representation. A value of 80.1 ppm would be represented as (80 + 100000 / 1e6).
type PFTypePartsPerMillionType interface {
	Validation
	// Msg marshals PFTypePartsPerMillionType to protobuf object *otg.PFTypePartsPerMillionType
	// and doesn't set defaults
	Msg() *otg.PFTypePartsPerMillionType
	// SetMsg unmarshals PFTypePartsPerMillionType from protobuf object *otg.PFTypePartsPerMillionType
	// and doesn't set defaults
	SetMsg(*otg.PFTypePartsPerMillionType) PFTypePartsPerMillionType
	// ToProto marshals PFTypePartsPerMillionType to protobuf object *otg.PFTypePartsPerMillionType
	ToProto() (*otg.PFTypePartsPerMillionType, error)
	// ToPbText marshals PFTypePartsPerMillionType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PFTypePartsPerMillionType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PFTypePartsPerMillionType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PFTypePartsPerMillionType from protobuf object *otg.PFTypePartsPerMillionType
	FromProto(msg *otg.PFTypePartsPerMillionType) (PFTypePartsPerMillionType, error)
	// FromPbText unmarshals PFTypePartsPerMillionType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PFTypePartsPerMillionType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PFTypePartsPerMillionType from JSON text
	FromJson(value string) error
	// Validate validates PFTypePartsPerMillionType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PFTypePartsPerMillionType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Ppm returns int32, set in PFTypePartsPerMillionType.
	Ppm() int32
	// SetPpm assigns int32 provided by user to PFTypePartsPerMillionType
	SetPpm(value int32) PFTypePartsPerMillionType
	// HasPpm checks if Ppm has been set in PFTypePartsPerMillionType
	HasPpm() bool
	// MicroPpm returns int32, set in PFTypePartsPerMillionType.
	MicroPpm() int32
	// SetMicroPpm assigns int32 provided by user to PFTypePartsPerMillionType
	SetMicroPpm(value int32) PFTypePartsPerMillionType
	// HasMicroPpm checks if MicroPpm has been set in PFTypePartsPerMillionType
	HasMicroPpm() bool
}

func (obj *pFTypePartsPerMillionType) populateXml(xObj *Argument) error {

	if obj.HasPpm() {

		member := Member{
			Name:  "ppm",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Ppm()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasMicroPpm() {

		member := Member{
			Name:  "microppm",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.MicroPpm()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *pFTypePartsPerMillionType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Ppm returns a int32
func (obj *pFTypePartsPerMillionType) Ppm() int32 {

	return *obj.obj.Ppm

}

// TBD
// Ppm returns a int32
func (obj *pFTypePartsPerMillionType) HasPpm() bool {
	return obj.obj.Ppm != nil
}

// TBD
// SetPpm sets the int32 value in the PFTypePartsPerMillionType object
func (obj *pFTypePartsPerMillionType) SetPpm(value int32) PFTypePartsPerMillionType {

	obj.obj.Ppm = &value
	return obj
}

// TBD
// MicroPpm returns a int32
func (obj *pFTypePartsPerMillionType) MicroPpm() int32 {

	return *obj.obj.MicroPpm

}

// TBD
// MicroPpm returns a int32
func (obj *pFTypePartsPerMillionType) HasMicroPpm() bool {
	return obj.obj.MicroPpm != nil
}

// TBD
// SetMicroPpm sets the int32 value in the PFTypePartsPerMillionType object
func (obj *pFTypePartsPerMillionType) SetMicroPpm(value int32) PFTypePartsPerMillionType {

	obj.obj.MicroPpm = &value
	return obj
}

func (obj *pFTypePartsPerMillionType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *pFTypePartsPerMillionType) setDefault() {

}

// ***** PFTypePercentType *****
type pFTypePercentType struct {
	validation
	obj *otg.PFTypePercentType
}

func NewPFTypePercentType() PFTypePercentType {
	obj := pFTypePercentType{obj: &otg.PFTypePercentType{}}
	obj.setDefault()
	return &obj
}

func (obj *pFTypePercentType) Msg() *otg.PFTypePercentType {
	return obj.obj
}

func (obj *pFTypePercentType) SetMsg(msg *otg.PFTypePercentType) PFTypePercentType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *pFTypePercentType) ToProto() (*otg.PFTypePercentType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *pFTypePercentType) FromProto(msg *otg.PFTypePercentType) (PFTypePercentType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *pFTypePercentType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *pFTypePercentType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *pFTypePercentType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypePercentType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *pFTypePercentType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypePercentType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *pFTypePercentType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *pFTypePercentType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *pFTypePercentType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *pFTypePercentType) Clone() (PFTypePercentType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPFTypePercentType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *pFTypePercentType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// PFTypePercentType is model a percentage using a fixed point representation. A value of 40.5% would be represented as (40 + 500000 / 1e6).
type PFTypePercentType interface {
	Validation
	// Msg marshals PFTypePercentType to protobuf object *otg.PFTypePercentType
	// and doesn't set defaults
	Msg() *otg.PFTypePercentType
	// SetMsg unmarshals PFTypePercentType from protobuf object *otg.PFTypePercentType
	// and doesn't set defaults
	SetMsg(*otg.PFTypePercentType) PFTypePercentType
	// ToProto marshals PFTypePercentType to protobuf object *otg.PFTypePercentType
	ToProto() (*otg.PFTypePercentType, error)
	// ToPbText marshals PFTypePercentType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PFTypePercentType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PFTypePercentType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PFTypePercentType from protobuf object *otg.PFTypePercentType
	FromProto(msg *otg.PFTypePercentType) (PFTypePercentType, error)
	// FromPbText unmarshals PFTypePercentType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PFTypePercentType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PFTypePercentType from JSON text
	FromJson(value string) error
	// Validate validates PFTypePercentType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PFTypePercentType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Percent returns int32, set in PFTypePercentType.
	Percent() int32
	// SetPercent assigns int32 provided by user to PFTypePercentType
	SetPercent(value int32) PFTypePercentType
	// HasPercent checks if Percent has been set in PFTypePercentType
	HasPercent() bool
	// MicroPercent returns int32, set in PFTypePercentType.
	MicroPercent() int32
	// SetMicroPercent assigns int32 provided by user to PFTypePercentType
	SetMicroPercent(value int32) PFTypePercentType
	// HasMicroPercent checks if MicroPercent has been set in PFTypePercentType
	HasMicroPercent() bool
}

func (obj *pFTypePercentType) populateXml(xObj *Argument) error {

	if obj.HasPercent() {

		member := Member{
			Name:  "percent",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Percent()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasMicroPercent() {

		member := Member{
			Name:  "micropercent",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.MicroPercent()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *pFTypePercentType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Percent returns a int32
func (obj *pFTypePercentType) Percent() int32 {

	return *obj.obj.Percent

}

// TBD
// Percent returns a int32
func (obj *pFTypePercentType) HasPercent() bool {
	return obj.obj.Percent != nil
}

// TBD
// SetPercent sets the int32 value in the PFTypePercentType object
func (obj *pFTypePercentType) SetPercent(value int32) PFTypePercentType {

	obj.obj.Percent = &value
	return obj
}

// TBD
// MicroPercent returns a int32
func (obj *pFTypePercentType) MicroPercent() int32 {

	return *obj.obj.MicroPercent

}

// TBD
// MicroPercent returns a int32
func (obj *pFTypePercentType) HasMicroPercent() bool {
	return obj.obj.MicroPercent != nil
}

// TBD
// SetMicroPercent sets the int32 value in the PFTypePercentType object
func (obj *pFTypePercentType) SetMicroPercent(value int32) PFTypePercentType {

	obj.obj.MicroPercent = &value
	return obj
}

func (obj *pFTypePercentType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *pFTypePercentType) setDefault() {

}

// ***** PFTypeMacAddressType *****
type pFTypeMacAddressType struct {
	validation
	obj *otg.PFTypeMacAddressType
}

func NewPFTypeMacAddressType() PFTypeMacAddressType {
	obj := pFTypeMacAddressType{obj: &otg.PFTypeMacAddressType{}}
	obj.setDefault()
	return &obj
}

func (obj *pFTypeMacAddressType) Msg() *otg.PFTypeMacAddressType {
	return obj.obj
}

func (obj *pFTypeMacAddressType) SetMsg(msg *otg.PFTypeMacAddressType) PFTypeMacAddressType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *pFTypeMacAddressType) ToProto() (*otg.PFTypeMacAddressType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *pFTypeMacAddressType) FromProto(msg *otg.PFTypeMacAddressType) (PFTypeMacAddressType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *pFTypeMacAddressType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *pFTypeMacAddressType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *pFTypeMacAddressType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypeMacAddressType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *pFTypeMacAddressType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypeMacAddressType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *pFTypeMacAddressType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *pFTypeMacAddressType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *pFTypeMacAddressType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *pFTypeMacAddressType) Clone() (PFTypeMacAddressType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPFTypeMacAddressType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *pFTypeMacAddressType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// PFTypeMacAddressType is the MAC address comprises 48 bits (6 octets) usually denoted using hexadecimal radix as 01:23:45:67:89:ab. The representation is held in the least significant 48 bits of an int64. The most significant 16 bits will be ignored.
type PFTypeMacAddressType interface {
	Validation
	// Msg marshals PFTypeMacAddressType to protobuf object *otg.PFTypeMacAddressType
	// and doesn't set defaults
	Msg() *otg.PFTypeMacAddressType
	// SetMsg unmarshals PFTypeMacAddressType from protobuf object *otg.PFTypeMacAddressType
	// and doesn't set defaults
	SetMsg(*otg.PFTypeMacAddressType) PFTypeMacAddressType
	// ToProto marshals PFTypeMacAddressType to protobuf object *otg.PFTypeMacAddressType
	ToProto() (*otg.PFTypeMacAddressType, error)
	// ToPbText marshals PFTypeMacAddressType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PFTypeMacAddressType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PFTypeMacAddressType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PFTypeMacAddressType from protobuf object *otg.PFTypeMacAddressType
	FromProto(msg *otg.PFTypeMacAddressType) (PFTypeMacAddressType, error)
	// FromPbText unmarshals PFTypeMacAddressType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PFTypeMacAddressType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PFTypeMacAddressType from JSON text
	FromJson(value string) error
	// Validate validates PFTypeMacAddressType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PFTypeMacAddressType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Address returns int64, set in PFTypeMacAddressType.
	Address() int64
	// SetAddress assigns int64 provided by user to PFTypeMacAddressType
	SetAddress(value int64) PFTypeMacAddressType
	// HasAddress checks if Address has been set in PFTypeMacAddressType
	HasAddress() bool
}

func (obj *pFTypeMacAddressType) populateXml(xObj *Argument) error {

	if obj.HasAddress() {

		member := Member{
			Name:  "address",
			Type:  "int64",
			Value: strconv.FormatInt(obj.Address(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *pFTypeMacAddressType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Address returns a int64
func (obj *pFTypeMacAddressType) Address() int64 {

	return *obj.obj.Address

}

// TBD
// Address returns a int64
func (obj *pFTypeMacAddressType) HasAddress() bool {
	return obj.obj.Address != nil
}

// TBD
// SetAddress sets the int64 value in the PFTypeMacAddressType object
func (obj *pFTypeMacAddressType) SetAddress(value int64) PFTypeMacAddressType {

	obj.obj.Address = &value
	return obj
}

func (obj *pFTypeMacAddressType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *pFTypeMacAddressType) setDefault() {

}

// ***** PortPfcPriorityQueueMapType *****
type portPfcPriorityQueueMapType struct {
	validation
	obj             *otg.PortPfcPriorityQueueMapType
	priority0Holder PortPfcPriorityQueueType
	priority1Holder PortPfcPriorityQueueType
	priority2Holder PortPfcPriorityQueueType
	priority3Holder PortPfcPriorityQueueType
	priority4Holder PortPfcPriorityQueueType
	priority5Holder PortPfcPriorityQueueType
	priority6Holder PortPfcPriorityQueueType
	priority7Holder PortPfcPriorityQueueType
}

func NewPortPfcPriorityQueueMapType() PortPfcPriorityQueueMapType {
	obj := portPfcPriorityQueueMapType{obj: &otg.PortPfcPriorityQueueMapType{}}
	obj.setDefault()
	return &obj
}

func (obj *portPfcPriorityQueueMapType) Msg() *otg.PortPfcPriorityQueueMapType {
	return obj.obj
}

func (obj *portPfcPriorityQueueMapType) SetMsg(msg *otg.PortPfcPriorityQueueMapType) PortPfcPriorityQueueMapType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *portPfcPriorityQueueMapType) ToProto() (*otg.PortPfcPriorityQueueMapType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *portPfcPriorityQueueMapType) FromProto(msg *otg.PortPfcPriorityQueueMapType) (PortPfcPriorityQueueMapType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *portPfcPriorityQueueMapType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *portPfcPriorityQueueMapType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portPfcPriorityQueueMapType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portPfcPriorityQueueMapType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *portPfcPriorityQueueMapType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portPfcPriorityQueueMapType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *portPfcPriorityQueueMapType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *portPfcPriorityQueueMapType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *portPfcPriorityQueueMapType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *portPfcPriorityQueueMapType) Clone() (PortPfcPriorityQueueMapType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPortPfcPriorityQueueMapType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *portPfcPriorityQueueMapType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *portPfcPriorityQueueMapType) setNil() {
	obj.priority0Holder = nil
	obj.priority1Holder = nil
	obj.priority2Holder = nil
	obj.priority3Holder = nil
	obj.priority4Holder = nil
	obj.priority5Holder = nil
	obj.priority6Holder = nil
	obj.priority7Holder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// PortPfcPriorityQueueMapType is tBD
type PortPfcPriorityQueueMapType interface {
	Validation
	// Msg marshals PortPfcPriorityQueueMapType to protobuf object *otg.PortPfcPriorityQueueMapType
	// and doesn't set defaults
	Msg() *otg.PortPfcPriorityQueueMapType
	// SetMsg unmarshals PortPfcPriorityQueueMapType from protobuf object *otg.PortPfcPriorityQueueMapType
	// and doesn't set defaults
	SetMsg(*otg.PortPfcPriorityQueueMapType) PortPfcPriorityQueueMapType
	// ToProto marshals PortPfcPriorityQueueMapType to protobuf object *otg.PortPfcPriorityQueueMapType
	ToProto() (*otg.PortPfcPriorityQueueMapType, error)
	// ToPbText marshals PortPfcPriorityQueueMapType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PortPfcPriorityQueueMapType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PortPfcPriorityQueueMapType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PortPfcPriorityQueueMapType from protobuf object *otg.PortPfcPriorityQueueMapType
	FromProto(msg *otg.PortPfcPriorityQueueMapType) (PortPfcPriorityQueueMapType, error)
	// FromPbText unmarshals PortPfcPriorityQueueMapType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PortPfcPriorityQueueMapType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PortPfcPriorityQueueMapType from JSON text
	FromJson(value string) error
	// Validate validates PortPfcPriorityQueueMapType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PortPfcPriorityQueueMapType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Priority0 returns PortPfcPriorityQueueType, set in PortPfcPriorityQueueMapType.
	// PortPfcPriorityQueueType is tBD
	Priority0() PortPfcPriorityQueueType
	// SetPriority0 assigns PortPfcPriorityQueueType provided by user to PortPfcPriorityQueueMapType.
	// PortPfcPriorityQueueType is tBD
	SetPriority0(value PortPfcPriorityQueueType) PortPfcPriorityQueueMapType
	// HasPriority0 checks if Priority0 has been set in PortPfcPriorityQueueMapType
	HasPriority0() bool
	// Priority1 returns PortPfcPriorityQueueType, set in PortPfcPriorityQueueMapType.
	// PortPfcPriorityQueueType is tBD
	Priority1() PortPfcPriorityQueueType
	// SetPriority1 assigns PortPfcPriorityQueueType provided by user to PortPfcPriorityQueueMapType.
	// PortPfcPriorityQueueType is tBD
	SetPriority1(value PortPfcPriorityQueueType) PortPfcPriorityQueueMapType
	// HasPriority1 checks if Priority1 has been set in PortPfcPriorityQueueMapType
	HasPriority1() bool
	// Priority2 returns PortPfcPriorityQueueType, set in PortPfcPriorityQueueMapType.
	// PortPfcPriorityQueueType is tBD
	Priority2() PortPfcPriorityQueueType
	// SetPriority2 assigns PortPfcPriorityQueueType provided by user to PortPfcPriorityQueueMapType.
	// PortPfcPriorityQueueType is tBD
	SetPriority2(value PortPfcPriorityQueueType) PortPfcPriorityQueueMapType
	// HasPriority2 checks if Priority2 has been set in PortPfcPriorityQueueMapType
	HasPriority2() bool
	// Priority3 returns PortPfcPriorityQueueType, set in PortPfcPriorityQueueMapType.
	// PortPfcPriorityQueueType is tBD
	Priority3() PortPfcPriorityQueueType
	// SetPriority3 assigns PortPfcPriorityQueueType provided by user to PortPfcPriorityQueueMapType.
	// PortPfcPriorityQueueType is tBD
	SetPriority3(value PortPfcPriorityQueueType) PortPfcPriorityQueueMapType
	// HasPriority3 checks if Priority3 has been set in PortPfcPriorityQueueMapType
	HasPriority3() bool
	// Priority4 returns PortPfcPriorityQueueType, set in PortPfcPriorityQueueMapType.
	// PortPfcPriorityQueueType is tBD
	Priority4() PortPfcPriorityQueueType
	// SetPriority4 assigns PortPfcPriorityQueueType provided by user to PortPfcPriorityQueueMapType.
	// PortPfcPriorityQueueType is tBD
	SetPriority4(value PortPfcPriorityQueueType) PortPfcPriorityQueueMapType
	// HasPriority4 checks if Priority4 has been set in PortPfcPriorityQueueMapType
	HasPriority4() bool
	// Priority5 returns PortPfcPriorityQueueType, set in PortPfcPriorityQueueMapType.
	// PortPfcPriorityQueueType is tBD
	Priority5() PortPfcPriorityQueueType
	// SetPriority5 assigns PortPfcPriorityQueueType provided by user to PortPfcPriorityQueueMapType.
	// PortPfcPriorityQueueType is tBD
	SetPriority5(value PortPfcPriorityQueueType) PortPfcPriorityQueueMapType
	// HasPriority5 checks if Priority5 has been set in PortPfcPriorityQueueMapType
	HasPriority5() bool
	// Priority6 returns PortPfcPriorityQueueType, set in PortPfcPriorityQueueMapType.
	// PortPfcPriorityQueueType is tBD
	Priority6() PortPfcPriorityQueueType
	// SetPriority6 assigns PortPfcPriorityQueueType provided by user to PortPfcPriorityQueueMapType.
	// PortPfcPriorityQueueType is tBD
	SetPriority6(value PortPfcPriorityQueueType) PortPfcPriorityQueueMapType
	// HasPriority6 checks if Priority6 has been set in PortPfcPriorityQueueMapType
	HasPriority6() bool
	// Priority7 returns PortPfcPriorityQueueType, set in PortPfcPriorityQueueMapType.
	// PortPfcPriorityQueueType is tBD
	Priority7() PortPfcPriorityQueueType
	// SetPriority7 assigns PortPfcPriorityQueueType provided by user to PortPfcPriorityQueueMapType.
	// PortPfcPriorityQueueType is tBD
	SetPriority7(value PortPfcPriorityQueueType) PortPfcPriorityQueueMapType
	// HasPriority7 checks if Priority7 has been set in PortPfcPriorityQueueMapType
	HasPriority7() bool
	setNil()
}

func (obj *portPfcPriorityQueueMapType) populateXml(xObj *Argument) error {

	return nil
}

func (obj *portPfcPriorityQueueMapType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Priority0 returns a PortPfcPriorityQueueType
func (obj *portPfcPriorityQueueMapType) Priority0() PortPfcPriorityQueueType {
	if obj.obj.Priority0 == nil {
		obj.obj.Priority0 = NewPortPfcPriorityQueueType().Msg()
	}
	if obj.priority0Holder == nil {
		obj.priority0Holder = &portPfcPriorityQueueType{obj: obj.obj.Priority0}
	}
	return obj.priority0Holder
}

// TBD
// Priority0 returns a PortPfcPriorityQueueType
func (obj *portPfcPriorityQueueMapType) HasPriority0() bool {
	return obj.obj.Priority0 != nil
}

// TBD
// SetPriority0 sets the PortPfcPriorityQueueType value in the PortPfcPriorityQueueMapType object
func (obj *portPfcPriorityQueueMapType) SetPriority0(value PortPfcPriorityQueueType) PortPfcPriorityQueueMapType {

	obj.priority0Holder = nil
	obj.obj.Priority0 = value.Msg()

	return obj
}

// TBD
// Priority1 returns a PortPfcPriorityQueueType
func (obj *portPfcPriorityQueueMapType) Priority1() PortPfcPriorityQueueType {
	if obj.obj.Priority1 == nil {
		obj.obj.Priority1 = NewPortPfcPriorityQueueType().Msg()
	}
	if obj.priority1Holder == nil {
		obj.priority1Holder = &portPfcPriorityQueueType{obj: obj.obj.Priority1}
	}
	return obj.priority1Holder
}

// TBD
// Priority1 returns a PortPfcPriorityQueueType
func (obj *portPfcPriorityQueueMapType) HasPriority1() bool {
	return obj.obj.Priority1 != nil
}

// TBD
// SetPriority1 sets the PortPfcPriorityQueueType value in the PortPfcPriorityQueueMapType object
func (obj *portPfcPriorityQueueMapType) SetPriority1(value PortPfcPriorityQueueType) PortPfcPriorityQueueMapType {

	obj.priority1Holder = nil
	obj.obj.Priority1 = value.Msg()

	return obj
}

// TBD
// Priority2 returns a PortPfcPriorityQueueType
func (obj *portPfcPriorityQueueMapType) Priority2() PortPfcPriorityQueueType {
	if obj.obj.Priority2 == nil {
		obj.obj.Priority2 = NewPortPfcPriorityQueueType().Msg()
	}
	if obj.priority2Holder == nil {
		obj.priority2Holder = &portPfcPriorityQueueType{obj: obj.obj.Priority2}
	}
	return obj.priority2Holder
}

// TBD
// Priority2 returns a PortPfcPriorityQueueType
func (obj *portPfcPriorityQueueMapType) HasPriority2() bool {
	return obj.obj.Priority2 != nil
}

// TBD
// SetPriority2 sets the PortPfcPriorityQueueType value in the PortPfcPriorityQueueMapType object
func (obj *portPfcPriorityQueueMapType) SetPriority2(value PortPfcPriorityQueueType) PortPfcPriorityQueueMapType {

	obj.priority2Holder = nil
	obj.obj.Priority2 = value.Msg()

	return obj
}

// TBD
// Priority3 returns a PortPfcPriorityQueueType
func (obj *portPfcPriorityQueueMapType) Priority3() PortPfcPriorityQueueType {
	if obj.obj.Priority3 == nil {
		obj.obj.Priority3 = NewPortPfcPriorityQueueType().Msg()
	}
	if obj.priority3Holder == nil {
		obj.priority3Holder = &portPfcPriorityQueueType{obj: obj.obj.Priority3}
	}
	return obj.priority3Holder
}

// TBD
// Priority3 returns a PortPfcPriorityQueueType
func (obj *portPfcPriorityQueueMapType) HasPriority3() bool {
	return obj.obj.Priority3 != nil
}

// TBD
// SetPriority3 sets the PortPfcPriorityQueueType value in the PortPfcPriorityQueueMapType object
func (obj *portPfcPriorityQueueMapType) SetPriority3(value PortPfcPriorityQueueType) PortPfcPriorityQueueMapType {

	obj.priority3Holder = nil
	obj.obj.Priority3 = value.Msg()

	return obj
}

// TBD
// Priority4 returns a PortPfcPriorityQueueType
func (obj *portPfcPriorityQueueMapType) Priority4() PortPfcPriorityQueueType {
	if obj.obj.Priority4 == nil {
		obj.obj.Priority4 = NewPortPfcPriorityQueueType().Msg()
	}
	if obj.priority4Holder == nil {
		obj.priority4Holder = &portPfcPriorityQueueType{obj: obj.obj.Priority4}
	}
	return obj.priority4Holder
}

// TBD
// Priority4 returns a PortPfcPriorityQueueType
func (obj *portPfcPriorityQueueMapType) HasPriority4() bool {
	return obj.obj.Priority4 != nil
}

// TBD
// SetPriority4 sets the PortPfcPriorityQueueType value in the PortPfcPriorityQueueMapType object
func (obj *portPfcPriorityQueueMapType) SetPriority4(value PortPfcPriorityQueueType) PortPfcPriorityQueueMapType {

	obj.priority4Holder = nil
	obj.obj.Priority4 = value.Msg()

	return obj
}

// TBD
// Priority5 returns a PortPfcPriorityQueueType
func (obj *portPfcPriorityQueueMapType) Priority5() PortPfcPriorityQueueType {
	if obj.obj.Priority5 == nil {
		obj.obj.Priority5 = NewPortPfcPriorityQueueType().Msg()
	}
	if obj.priority5Holder == nil {
		obj.priority5Holder = &portPfcPriorityQueueType{obj: obj.obj.Priority5}
	}
	return obj.priority5Holder
}

// TBD
// Priority5 returns a PortPfcPriorityQueueType
func (obj *portPfcPriorityQueueMapType) HasPriority5() bool {
	return obj.obj.Priority5 != nil
}

// TBD
// SetPriority5 sets the PortPfcPriorityQueueType value in the PortPfcPriorityQueueMapType object
func (obj *portPfcPriorityQueueMapType) SetPriority5(value PortPfcPriorityQueueType) PortPfcPriorityQueueMapType {

	obj.priority5Holder = nil
	obj.obj.Priority5 = value.Msg()

	return obj
}

// TBD
// Priority6 returns a PortPfcPriorityQueueType
func (obj *portPfcPriorityQueueMapType) Priority6() PortPfcPriorityQueueType {
	if obj.obj.Priority6 == nil {
		obj.obj.Priority6 = NewPortPfcPriorityQueueType().Msg()
	}
	if obj.priority6Holder == nil {
		obj.priority6Holder = &portPfcPriorityQueueType{obj: obj.obj.Priority6}
	}
	return obj.priority6Holder
}

// TBD
// Priority6 returns a PortPfcPriorityQueueType
func (obj *portPfcPriorityQueueMapType) HasPriority6() bool {
	return obj.obj.Priority6 != nil
}

// TBD
// SetPriority6 sets the PortPfcPriorityQueueType value in the PortPfcPriorityQueueMapType object
func (obj *portPfcPriorityQueueMapType) SetPriority6(value PortPfcPriorityQueueType) PortPfcPriorityQueueMapType {

	obj.priority6Holder = nil
	obj.obj.Priority6 = value.Msg()

	return obj
}

// TBD
// Priority7 returns a PortPfcPriorityQueueType
func (obj *portPfcPriorityQueueMapType) Priority7() PortPfcPriorityQueueType {
	if obj.obj.Priority7 == nil {
		obj.obj.Priority7 = NewPortPfcPriorityQueueType().Msg()
	}
	if obj.priority7Holder == nil {
		obj.priority7Holder = &portPfcPriorityQueueType{obj: obj.obj.Priority7}
	}
	return obj.priority7Holder
}

// TBD
// Priority7 returns a PortPfcPriorityQueueType
func (obj *portPfcPriorityQueueMapType) HasPriority7() bool {
	return obj.obj.Priority7 != nil
}

// TBD
// SetPriority7 sets the PortPfcPriorityQueueType value in the PortPfcPriorityQueueMapType object
func (obj *portPfcPriorityQueueMapType) SetPriority7(value PortPfcPriorityQueueType) PortPfcPriorityQueueMapType {

	obj.priority7Holder = nil
	obj.obj.Priority7 = value.Msg()

	return obj
}

func (obj *portPfcPriorityQueueMapType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Priority0 != nil {

		obj.Priority0().validateObj(vObj, set_default)
	}

	if obj.obj.Priority1 != nil {

		obj.Priority1().validateObj(vObj, set_default)
	}

	if obj.obj.Priority2 != nil {

		obj.Priority2().validateObj(vObj, set_default)
	}

	if obj.obj.Priority3 != nil {

		obj.Priority3().validateObj(vObj, set_default)
	}

	if obj.obj.Priority4 != nil {

		obj.Priority4().validateObj(vObj, set_default)
	}

	if obj.obj.Priority5 != nil {

		obj.Priority5().validateObj(vObj, set_default)
	}

	if obj.obj.Priority6 != nil {

		obj.Priority6().validateObj(vObj, set_default)
	}

	if obj.obj.Priority7 != nil {

		obj.Priority7().validateObj(vObj, set_default)
	}

}

func (obj *portPfcPriorityQueueMapType) setDefault() {

}

// ***** PortTxLaneMappingType *****
type portTxLaneMappingType struct {
	validation
	obj           *otg.PortTxLaneMappingType
	mappingHolder PortTxLaneList
}

func NewPortTxLaneMappingType() PortTxLaneMappingType {
	obj := portTxLaneMappingType{obj: &otg.PortTxLaneMappingType{}}
	obj.setDefault()
	return &obj
}

func (obj *portTxLaneMappingType) Msg() *otg.PortTxLaneMappingType {
	return obj.obj
}

func (obj *portTxLaneMappingType) SetMsg(msg *otg.PortTxLaneMappingType) PortTxLaneMappingType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *portTxLaneMappingType) ToProto() (*otg.PortTxLaneMappingType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *portTxLaneMappingType) FromProto(msg *otg.PortTxLaneMappingType) (PortTxLaneMappingType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *portTxLaneMappingType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *portTxLaneMappingType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portTxLaneMappingType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portTxLaneMappingType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *portTxLaneMappingType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portTxLaneMappingType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *portTxLaneMappingType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *portTxLaneMappingType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *portTxLaneMappingType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *portTxLaneMappingType) Clone() (PortTxLaneMappingType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPortTxLaneMappingType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *portTxLaneMappingType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *portTxLaneMappingType) setNil() {
	obj.mappingHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// PortTxLaneMappingType is tBD
type PortTxLaneMappingType interface {
	Validation
	// Msg marshals PortTxLaneMappingType to protobuf object *otg.PortTxLaneMappingType
	// and doesn't set defaults
	Msg() *otg.PortTxLaneMappingType
	// SetMsg unmarshals PortTxLaneMappingType from protobuf object *otg.PortTxLaneMappingType
	// and doesn't set defaults
	SetMsg(*otg.PortTxLaneMappingType) PortTxLaneMappingType
	// ToProto marshals PortTxLaneMappingType to protobuf object *otg.PortTxLaneMappingType
	ToProto() (*otg.PortTxLaneMappingType, error)
	// ToPbText marshals PortTxLaneMappingType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PortTxLaneMappingType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PortTxLaneMappingType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PortTxLaneMappingType from protobuf object *otg.PortTxLaneMappingType
	FromProto(msg *otg.PortTxLaneMappingType) (PortTxLaneMappingType, error)
	// FromPbText unmarshals PortTxLaneMappingType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PortTxLaneMappingType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PortTxLaneMappingType from JSON text
	FromJson(value string) error
	// Validate validates PortTxLaneMappingType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PortTxLaneMappingType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Mapping returns PortTxLaneList, set in PortTxLaneMappingType.
	// PortTxLaneList is tBD
	Mapping() PortTxLaneList
	// SetMapping assigns PortTxLaneList provided by user to PortTxLaneMappingType.
	// PortTxLaneList is tBD
	SetMapping(value PortTxLaneList) PortTxLaneMappingType
	// HasMapping checks if Mapping has been set in PortTxLaneMappingType
	HasMapping() bool
	setNil()
}

func (obj *portTxLaneMappingType) populateXml(xObj *Argument) error {

	return nil
}

func (obj *portTxLaneMappingType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Mapping returns a PortTxLaneList
func (obj *portTxLaneMappingType) Mapping() PortTxLaneList {
	if obj.obj.Mapping == nil {
		obj.obj.Mapping = NewPortTxLaneList().Msg()
	}
	if obj.mappingHolder == nil {
		obj.mappingHolder = &portTxLaneList{obj: obj.obj.Mapping}
	}
	return obj.mappingHolder
}

// TBD
// Mapping returns a PortTxLaneList
func (obj *portTxLaneMappingType) HasMapping() bool {
	return obj.obj.Mapping != nil
}

// TBD
// SetMapping sets the PortTxLaneList value in the PortTxLaneMappingType object
func (obj *portTxLaneMappingType) SetMapping(value PortTxLaneList) PortTxLaneMappingType {

	obj.mappingHolder = nil
	obj.obj.Mapping = value.Msg()

	return obj
}

func (obj *portTxLaneMappingType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Mapping != nil {

		obj.Mapping().validateObj(vObj, set_default)
	}

}

func (obj *portTxLaneMappingType) setDefault() {

}

// ***** CaptureSettingsType *****
type captureSettingsType struct {
	validation
	obj                   *otg.CaptureSettingsType
	triggerPositionHolder PFTypeKBType
}

func NewCaptureSettingsType() CaptureSettingsType {
	obj := captureSettingsType{obj: &otg.CaptureSettingsType{}}
	obj.setDefault()
	return &obj
}

func (obj *captureSettingsType) Msg() *otg.CaptureSettingsType {
	return obj.obj
}

func (obj *captureSettingsType) SetMsg(msg *otg.CaptureSettingsType) CaptureSettingsType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *captureSettingsType) ToProto() (*otg.CaptureSettingsType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *captureSettingsType) FromProto(msg *otg.CaptureSettingsType) (CaptureSettingsType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *captureSettingsType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *captureSettingsType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureSettingsType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureSettingsType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *captureSettingsType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureSettingsType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *captureSettingsType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *captureSettingsType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *captureSettingsType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *captureSettingsType) Clone() (CaptureSettingsType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewCaptureSettingsType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *captureSettingsType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *captureSettingsType) setNil() {
	obj.triggerPositionHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// CaptureSettingsType is tBD
type CaptureSettingsType interface {
	Validation
	// Msg marshals CaptureSettingsType to protobuf object *otg.CaptureSettingsType
	// and doesn't set defaults
	Msg() *otg.CaptureSettingsType
	// SetMsg unmarshals CaptureSettingsType from protobuf object *otg.CaptureSettingsType
	// and doesn't set defaults
	SetMsg(*otg.CaptureSettingsType) CaptureSettingsType
	// ToProto marshals CaptureSettingsType to protobuf object *otg.CaptureSettingsType
	ToProto() (*otg.CaptureSettingsType, error)
	// ToPbText marshals CaptureSettingsType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals CaptureSettingsType to YAML text
	ToYaml() (string, error)
	// ToJson marshals CaptureSettingsType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals CaptureSettingsType from protobuf object *otg.CaptureSettingsType
	FromProto(msg *otg.CaptureSettingsType) (CaptureSettingsType, error)
	// FromPbText unmarshals CaptureSettingsType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals CaptureSettingsType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals CaptureSettingsType from JSON text
	FromJson(value string) error
	// Validate validates CaptureSettingsType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (CaptureSettingsType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// CaptureMode returns CaptureSettingsTypeCaptureModeEnum, set in CaptureSettingsType
	CaptureMode() CaptureSettingsTypeCaptureModeEnum
	// SetCaptureMode assigns CaptureSettingsTypeCaptureModeEnum provided by user to CaptureSettingsType
	SetCaptureMode(value CaptureSettingsTypeCaptureModeEnum) CaptureSettingsType
	// HasCaptureMode checks if CaptureMode has been set in CaptureSettingsType
	HasCaptureMode() bool
	// AfterTriggerFilter returns CaptureSettingsTypeAfterTriggerFilterEnum, set in CaptureSettingsType
	AfterTriggerFilter() CaptureSettingsTypeAfterTriggerFilterEnum
	// SetAfterTriggerFilter assigns CaptureSettingsTypeAfterTriggerFilterEnum provided by user to CaptureSettingsType
	SetAfterTriggerFilter(value CaptureSettingsTypeAfterTriggerFilterEnum) CaptureSettingsType
	// HasAfterTriggerFilter checks if AfterTriggerFilter has been set in CaptureSettingsType
	HasAfterTriggerFilter() bool
	// BeforeTriggerFilter returns CaptureSettingsTypeBeforeTriggerFilterEnum, set in CaptureSettingsType
	BeforeTriggerFilter() CaptureSettingsTypeBeforeTriggerFilterEnum
	// SetBeforeTriggerFilter assigns CaptureSettingsTypeBeforeTriggerFilterEnum provided by user to CaptureSettingsType
	SetBeforeTriggerFilter(value CaptureSettingsTypeBeforeTriggerFilterEnum) CaptureSettingsType
	// HasBeforeTriggerFilter checks if BeforeTriggerFilter has been set in CaptureSettingsType
	HasBeforeTriggerFilter() bool
	// ContinuousFilter returns CaptureSettingsTypeContinuousFilterEnum, set in CaptureSettingsType
	ContinuousFilter() CaptureSettingsTypeContinuousFilterEnum
	// SetContinuousFilter assigns CaptureSettingsTypeContinuousFilterEnum provided by user to CaptureSettingsType
	SetContinuousFilter(value CaptureSettingsTypeContinuousFilterEnum) CaptureSettingsType
	// HasContinuousFilter checks if ContinuousFilter has been set in CaptureSettingsType
	HasContinuousFilter() bool
	// SliceSize returns int32, set in CaptureSettingsType.
	SliceSize() int32
	// SetSliceSize assigns int32 provided by user to CaptureSettingsType
	SetSliceSize(value int32) CaptureSettingsType
	// HasSliceSize checks if SliceSize has been set in CaptureSettingsType
	HasSliceSize() bool
	// TriggerPosition returns PFTypeKBType, set in CaptureSettingsType.
	// PFTypeKBType is model a quantity of data in KB units.
	TriggerPosition() PFTypeKBType
	// SetTriggerPosition assigns PFTypeKBType provided by user to CaptureSettingsType.
	// PFTypeKBType is model a quantity of data in KB units.
	SetTriggerPosition(value PFTypeKBType) CaptureSettingsType
	// HasTriggerPosition checks if TriggerPosition has been set in CaptureSettingsType
	HasTriggerPosition() bool
	setNil()
}

func (obj *captureSettingsType) populateXml(xObj *Argument) error {

	if obj.HasCaptureMode() {

		member := Member{
			Name:  "capturemode",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Capture+eCaptureMode",
			Value: strconv.FormatInt(int64(obj.obj.CaptureMode.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasAfterTriggerFilter() {

		member := Member{
			Name:  "aftertriggerfilter",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Capture+eAfterTriggerFilter",
			Value: strconv.FormatInt(int64(obj.obj.AfterTriggerFilter.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasBeforeTriggerFilter() {

		member := Member{
			Name:  "beforetriggerfilter",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Capture+eBeforeTriggerFilter",
			Value: strconv.FormatInt(int64(obj.obj.BeforeTriggerFilter.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasContinuousFilter() {

		member := Member{
			Name:  "continuousfilter",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Capture+eContinuousFilter",
			Value: strconv.FormatInt(int64(obj.obj.ContinuousFilter.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSliceSize() {

		member := Member{
			Name:  "slicesize",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.SliceSize()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *captureSettingsType) populateFromXml(xObj *RetVal) error {

	return nil
}

type CaptureSettingsTypeCaptureModeEnum string

// Enum of CaptureMode on CaptureSettingsType
var CaptureSettingsTypeCaptureMode = struct {
	KCONTINUOUSMODE CaptureSettingsTypeCaptureModeEnum
	KTRIGGERMODE    CaptureSettingsTypeCaptureModeEnum
}{
	KCONTINUOUSMODE: CaptureSettingsTypeCaptureModeEnum("kContinuousMode"),
	KTRIGGERMODE:    CaptureSettingsTypeCaptureModeEnum("kTriggerMode"),
}

func (obj *captureSettingsType) CaptureMode() CaptureSettingsTypeCaptureModeEnum {
	return CaptureSettingsTypeCaptureModeEnum(obj.obj.CaptureMode.Enum().String())
}

// Controls the mode in which packet capture is performed is performed.   For example, the capture system can wait for a trigger packet to   arrive, or it can operate continuously.
// CaptureMode returns a string
func (obj *captureSettingsType) HasCaptureMode() bool {
	return obj.obj.CaptureMode != nil
}

func (obj *captureSettingsType) SetCaptureMode(value CaptureSettingsTypeCaptureModeEnum) CaptureSettingsType {
	intValue, ok := otg.CaptureSettingsType_CaptureMode_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on CaptureSettingsTypeCaptureModeEnum", string(value)))
		return obj
	}
	enumValue := otg.CaptureSettingsType_CaptureMode_Enum(intValue)
	obj.obj.CaptureMode = &enumValue

	return obj
}

type CaptureSettingsTypeAfterTriggerFilterEnum string

// Enum of AfterTriggerFilter on CaptureSettingsType
var CaptureSettingsTypeAfterTriggerFilter = struct {
	KCAPTUREALL       CaptureSettingsTypeAfterTriggerFilterEnum
	KUSETRIGGERFILTER CaptureSettingsTypeAfterTriggerFilterEnum
	KUSECAPTUREFILTER CaptureSettingsTypeAfterTriggerFilterEnum
}{
	KCAPTUREALL:       CaptureSettingsTypeAfterTriggerFilterEnum("kCaptureAll"),
	KUSETRIGGERFILTER: CaptureSettingsTypeAfterTriggerFilterEnum("kUseTriggerFilter"),
	KUSECAPTUREFILTER: CaptureSettingsTypeAfterTriggerFilterEnum("kUseCaptureFilter"),
}

func (obj *captureSettingsType) AfterTriggerFilter() CaptureSettingsTypeAfterTriggerFilterEnum {
	return CaptureSettingsTypeAfterTriggerFilterEnum(obj.obj.AfterTriggerFilter.Enum().String())
}

// When operating in triggered mode, controls the capture of data after   triggering.
// AfterTriggerFilter returns a string
func (obj *captureSettingsType) HasAfterTriggerFilter() bool {
	return obj.obj.AfterTriggerFilter != nil
}

func (obj *captureSettingsType) SetAfterTriggerFilter(value CaptureSettingsTypeAfterTriggerFilterEnum) CaptureSettingsType {
	intValue, ok := otg.CaptureSettingsType_AfterTriggerFilter_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on CaptureSettingsTypeAfterTriggerFilterEnum", string(value)))
		return obj
	}
	enumValue := otg.CaptureSettingsType_AfterTriggerFilter_Enum(intValue)
	obj.obj.AfterTriggerFilter = &enumValue

	return obj
}

type CaptureSettingsTypeBeforeTriggerFilterEnum string

// Enum of BeforeTriggerFilter on CaptureSettingsType
var CaptureSettingsTypeBeforeTriggerFilter = struct {
	KCAPTUREALL       CaptureSettingsTypeBeforeTriggerFilterEnum
	KCAPTURENONE      CaptureSettingsTypeBeforeTriggerFilterEnum
	KUSECAPTUREFILTER CaptureSettingsTypeBeforeTriggerFilterEnum
}{
	KCAPTUREALL:       CaptureSettingsTypeBeforeTriggerFilterEnum("kCaptureAll"),
	KCAPTURENONE:      CaptureSettingsTypeBeforeTriggerFilterEnum("kCaptureNone"),
	KUSECAPTUREFILTER: CaptureSettingsTypeBeforeTriggerFilterEnum("kUseCaptureFilter"),
}

func (obj *captureSettingsType) BeforeTriggerFilter() CaptureSettingsTypeBeforeTriggerFilterEnum {
	return CaptureSettingsTypeBeforeTriggerFilterEnum(obj.obj.BeforeTriggerFilter.Enum().String())
}

// When operating in triggered mode, controls the capture of   data prior to triggering.
// BeforeTriggerFilter returns a string
func (obj *captureSettingsType) HasBeforeTriggerFilter() bool {
	return obj.obj.BeforeTriggerFilter != nil
}

func (obj *captureSettingsType) SetBeforeTriggerFilter(value CaptureSettingsTypeBeforeTriggerFilterEnum) CaptureSettingsType {
	intValue, ok := otg.CaptureSettingsType_BeforeTriggerFilter_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on CaptureSettingsTypeBeforeTriggerFilterEnum", string(value)))
		return obj
	}
	enumValue := otg.CaptureSettingsType_BeforeTriggerFilter_Enum(intValue)
	obj.obj.BeforeTriggerFilter = &enumValue

	return obj
}

type CaptureSettingsTypeContinuousFilterEnum string

// Enum of ContinuousFilter on CaptureSettingsType
var CaptureSettingsTypeContinuousFilter = struct {
	KCAPTUREALL       CaptureSettingsTypeContinuousFilterEnum
	KUSECAPTUREFILTER CaptureSettingsTypeContinuousFilterEnum
}{
	KCAPTUREALL:       CaptureSettingsTypeContinuousFilterEnum("kCaptureAll"),
	KUSECAPTUREFILTER: CaptureSettingsTypeContinuousFilterEnum("kUseCaptureFilter"),
}

func (obj *captureSettingsType) ContinuousFilter() CaptureSettingsTypeContinuousFilterEnum {
	return CaptureSettingsTypeContinuousFilterEnum(obj.obj.ContinuousFilter.Enum().String())
}

// When operating in continuous mode, controls whether data captured   in continous mode is filtered.
// ContinuousFilter returns a string
func (obj *captureSettingsType) HasContinuousFilter() bool {
	return obj.obj.ContinuousFilter != nil
}

func (obj *captureSettingsType) SetContinuousFilter(value CaptureSettingsTypeContinuousFilterEnum) CaptureSettingsType {
	intValue, ok := otg.CaptureSettingsType_ContinuousFilter_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on CaptureSettingsTypeContinuousFilterEnum", string(value)))
		return obj
	}
	enumValue := otg.CaptureSettingsType_ContinuousFilter_Enum(intValue)
	obj.obj.ContinuousFilter = &enumValue

	return obj
}

// The maximum number of octets of each frame that is saved in this   capture buffer. For example, if a 1500 octet frame is received by   the probe and this option is set to 500, then only 500 octets of   the frame is stored in the associated capture buffer.   If this value is set to 0, the capture buffer saves as many octets as   is possible. If the sliceSize is set larger than the maximim hardware   supported slice size, the maximum is used.
// SliceSize returns a int32
func (obj *captureSettingsType) SliceSize() int32 {

	return *obj.obj.SliceSize

}

// The maximum number of octets of each frame that is saved in this   capture buffer. For example, if a 1500 octet frame is received by   the probe and this option is set to 500, then only 500 octets of   the frame is stored in the associated capture buffer.   If this value is set to 0, the capture buffer saves as many octets as   is possible. If the sliceSize is set larger than the maximim hardware   supported slice size, the maximum is used.
// SliceSize returns a int32
func (obj *captureSettingsType) HasSliceSize() bool {
	return obj.obj.SliceSize != nil
}

// The maximum number of octets of each frame that is saved in this   capture buffer. For example, if a 1500 octet frame is received by   the probe and this option is set to 500, then only 500 octets of   the frame is stored in the associated capture buffer.   If this value is set to 0, the capture buffer saves as many octets as   is possible. If the sliceSize is set larger than the maximim hardware   supported slice size, the maximum is used.
// SetSliceSize sets the int32 value in the CaptureSettingsType object
func (obj *captureSettingsType) SetSliceSize(value int32) CaptureSettingsType {

	obj.obj.SliceSize = &value
	return obj
}

// Controls the dividing line within the capture buffer between before   trigger data and post trigger data. This control is only useful   in triggered mode and before trigger capture operation is enabled.   The trigger position is expressed in KB from the beginning of the   capture buffer. The beginning of the buffer with this position   is used in a wrap-around mode for before trigger data and   the remainder is filled up with triggered data.   The size of the capture buffer is available from CAPTURE-BUFFER-SIZE.
// TriggerPosition returns a PFTypeKBType
func (obj *captureSettingsType) TriggerPosition() PFTypeKBType {
	if obj.obj.TriggerPosition == nil {
		obj.obj.TriggerPosition = NewPFTypeKBType().Msg()
	}
	if obj.triggerPositionHolder == nil {
		obj.triggerPositionHolder = &pFTypeKBType{obj: obj.obj.TriggerPosition}
	}
	return obj.triggerPositionHolder
}

// Controls the dividing line within the capture buffer between before   trigger data and post trigger data. This control is only useful   in triggered mode and before trigger capture operation is enabled.   The trigger position is expressed in KB from the beginning of the   capture buffer. The beginning of the buffer with this position   is used in a wrap-around mode for before trigger data and   the remainder is filled up with triggered data.   The size of the capture buffer is available from CAPTURE-BUFFER-SIZE.
// TriggerPosition returns a PFTypeKBType
func (obj *captureSettingsType) HasTriggerPosition() bool {
	return obj.obj.TriggerPosition != nil
}

// Controls the dividing line within the capture buffer between before   trigger data and post trigger data. This control is only useful   in triggered mode and before trigger capture operation is enabled.   The trigger position is expressed in KB from the beginning of the   capture buffer. The beginning of the buffer with this position   is used in a wrap-around mode for before trigger data and   the remainder is filled up with triggered data.   The size of the capture buffer is available from CAPTURE-BUFFER-SIZE.
// SetTriggerPosition sets the PFTypeKBType value in the CaptureSettingsType object
func (obj *captureSettingsType) SetTriggerPosition(value PFTypeKBType) CaptureSettingsType {

	obj.triggerPositionHolder = nil
	obj.obj.TriggerPosition = value.Msg()

	return obj
}

func (obj *captureSettingsType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.TriggerPosition != nil {

		obj.TriggerPosition().validateObj(vObj, set_default)
	}

}

func (obj *captureSettingsType) setDefault() {

}

// ***** CapturePatternList *****
type capturePatternList struct {
	validation
	obj               *otg.CapturePatternList
	patternListHolder CapturePatternListCapturePatternTypeIter
}

func NewCapturePatternList() CapturePatternList {
	obj := capturePatternList{obj: &otg.CapturePatternList{}}
	obj.setDefault()
	return &obj
}

func (obj *capturePatternList) Msg() *otg.CapturePatternList {
	return obj.obj
}

func (obj *capturePatternList) SetMsg(msg *otg.CapturePatternList) CapturePatternList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *capturePatternList) ToProto() (*otg.CapturePatternList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *capturePatternList) FromProto(msg *otg.CapturePatternList) (CapturePatternList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *capturePatternList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *capturePatternList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *capturePatternList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *capturePatternList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *capturePatternList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *capturePatternList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *capturePatternList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *capturePatternList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *capturePatternList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *capturePatternList) Clone() (CapturePatternList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewCapturePatternList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *capturePatternList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *capturePatternList) setNil() {
	obj.patternListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// CapturePatternList is tBD
type CapturePatternList interface {
	Validation
	// Msg marshals CapturePatternList to protobuf object *otg.CapturePatternList
	// and doesn't set defaults
	Msg() *otg.CapturePatternList
	// SetMsg unmarshals CapturePatternList from protobuf object *otg.CapturePatternList
	// and doesn't set defaults
	SetMsg(*otg.CapturePatternList) CapturePatternList
	// ToProto marshals CapturePatternList to protobuf object *otg.CapturePatternList
	ToProto() (*otg.CapturePatternList, error)
	// ToPbText marshals CapturePatternList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals CapturePatternList to YAML text
	ToYaml() (string, error)
	// ToJson marshals CapturePatternList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals CapturePatternList from protobuf object *otg.CapturePatternList
	FromProto(msg *otg.CapturePatternList) (CapturePatternList, error)
	// FromPbText unmarshals CapturePatternList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals CapturePatternList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals CapturePatternList from JSON text
	FromJson(value string) error
	// Validate validates CapturePatternList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (CapturePatternList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// PatternList returns CapturePatternListCapturePatternTypeIterIter, set in CapturePatternList
	PatternList() CapturePatternListCapturePatternTypeIter
	setNil()
}

func (obj *capturePatternList) populateXml(xObj *Argument) error {

	if len(obj.PatternList().Items()) != 0 {
		for _, item := range obj.PatternList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *capturePatternList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PatternList returns a []CapturePatternType
func (obj *capturePatternList) PatternList() CapturePatternListCapturePatternTypeIter {
	if len(obj.obj.PatternList) == 0 {
		obj.obj.PatternList = []*otg.CapturePatternType{}
	}
	if obj.patternListHolder == nil {
		obj.patternListHolder = newCapturePatternListCapturePatternTypeIter(&obj.obj.PatternList).setMsg(obj)
	}
	return obj.patternListHolder
}

type capturePatternListCapturePatternTypeIter struct {
	obj                     *capturePatternList
	capturePatternTypeSlice []CapturePatternType
	fieldPtr                *[]*otg.CapturePatternType
}

func newCapturePatternListCapturePatternTypeIter(ptr *[]*otg.CapturePatternType) CapturePatternListCapturePatternTypeIter {
	return &capturePatternListCapturePatternTypeIter{fieldPtr: ptr}
}

type CapturePatternListCapturePatternTypeIter interface {
	setMsg(*capturePatternList) CapturePatternListCapturePatternTypeIter
	Items() []CapturePatternType
	Add() CapturePatternType
	Append(items ...CapturePatternType) CapturePatternListCapturePatternTypeIter
	Set(index int, newObj CapturePatternType) CapturePatternListCapturePatternTypeIter
	Clear() CapturePatternListCapturePatternTypeIter
	clearHolderSlice() CapturePatternListCapturePatternTypeIter
	appendHolderSlice(item CapturePatternType) CapturePatternListCapturePatternTypeIter
}

func (obj *capturePatternListCapturePatternTypeIter) setMsg(msg *capturePatternList) CapturePatternListCapturePatternTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&capturePatternType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *capturePatternListCapturePatternTypeIter) Items() []CapturePatternType {
	return obj.capturePatternTypeSlice
}

func (obj *capturePatternListCapturePatternTypeIter) Add() CapturePatternType {
	newObj := &otg.CapturePatternType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &capturePatternType{obj: newObj}
	newLibObj.setDefault()
	obj.capturePatternTypeSlice = append(obj.capturePatternTypeSlice, newLibObj)
	return newLibObj
}

func (obj *capturePatternListCapturePatternTypeIter) Append(items ...CapturePatternType) CapturePatternListCapturePatternTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.capturePatternTypeSlice = append(obj.capturePatternTypeSlice, item)
	}
	return obj
}

func (obj *capturePatternListCapturePatternTypeIter) Set(index int, newObj CapturePatternType) CapturePatternListCapturePatternTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.capturePatternTypeSlice[index] = newObj
	return obj
}
func (obj *capturePatternListCapturePatternTypeIter) Clear() CapturePatternListCapturePatternTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.CapturePatternType{}
		obj.capturePatternTypeSlice = []CapturePatternType{}
	}
	return obj
}
func (obj *capturePatternListCapturePatternTypeIter) clearHolderSlice() CapturePatternListCapturePatternTypeIter {
	if len(obj.capturePatternTypeSlice) > 0 {
		obj.capturePatternTypeSlice = []CapturePatternType{}
	}
	return obj
}
func (obj *capturePatternListCapturePatternTypeIter) appendHolderSlice(item CapturePatternType) CapturePatternListCapturePatternTypeIter {
	obj.capturePatternTypeSlice = append(obj.capturePatternTypeSlice, item)
	return obj
}

func (obj *capturePatternList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.PatternList) != 0 {

		if set_default {
			obj.PatternList().clearHolderSlice()
			for _, item := range obj.obj.PatternList {
				obj.PatternList().appendHolderSlice(&capturePatternType{obj: item})
			}
		}
		for _, item := range obj.PatternList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *capturePatternList) setDefault() {

}

// ***** CaptureExpressionList *****
type captureExpressionList struct {
	validation
	obj                  *otg.CaptureExpressionList
	expressionListHolder CaptureExpressionListCaptureExpressionTypeIter
}

func NewCaptureExpressionList() CaptureExpressionList {
	obj := captureExpressionList{obj: &otg.CaptureExpressionList{}}
	obj.setDefault()
	return &obj
}

func (obj *captureExpressionList) Msg() *otg.CaptureExpressionList {
	return obj.obj
}

func (obj *captureExpressionList) SetMsg(msg *otg.CaptureExpressionList) CaptureExpressionList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *captureExpressionList) ToProto() (*otg.CaptureExpressionList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *captureExpressionList) FromProto(msg *otg.CaptureExpressionList) (CaptureExpressionList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *captureExpressionList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *captureExpressionList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureExpressionList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureExpressionList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *captureExpressionList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureExpressionList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *captureExpressionList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *captureExpressionList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *captureExpressionList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *captureExpressionList) Clone() (CaptureExpressionList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewCaptureExpressionList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *captureExpressionList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *captureExpressionList) setNil() {
	obj.expressionListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// CaptureExpressionList is tBD
type CaptureExpressionList interface {
	Validation
	// Msg marshals CaptureExpressionList to protobuf object *otg.CaptureExpressionList
	// and doesn't set defaults
	Msg() *otg.CaptureExpressionList
	// SetMsg unmarshals CaptureExpressionList from protobuf object *otg.CaptureExpressionList
	// and doesn't set defaults
	SetMsg(*otg.CaptureExpressionList) CaptureExpressionList
	// ToProto marshals CaptureExpressionList to protobuf object *otg.CaptureExpressionList
	ToProto() (*otg.CaptureExpressionList, error)
	// ToPbText marshals CaptureExpressionList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals CaptureExpressionList to YAML text
	ToYaml() (string, error)
	// ToJson marshals CaptureExpressionList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals CaptureExpressionList from protobuf object *otg.CaptureExpressionList
	FromProto(msg *otg.CaptureExpressionList) (CaptureExpressionList, error)
	// FromPbText unmarshals CaptureExpressionList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals CaptureExpressionList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals CaptureExpressionList from JSON text
	FromJson(value string) error
	// Validate validates CaptureExpressionList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (CaptureExpressionList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ExpressionList returns CaptureExpressionListCaptureExpressionTypeIterIter, set in CaptureExpressionList
	ExpressionList() CaptureExpressionListCaptureExpressionTypeIter
	setNil()
}

func (obj *captureExpressionList) populateXml(xObj *Argument) error {

	if len(obj.ExpressionList().Items()) != 0 {
		for _, item := range obj.ExpressionList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *captureExpressionList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// ExpressionList returns a []CaptureExpressionType
func (obj *captureExpressionList) ExpressionList() CaptureExpressionListCaptureExpressionTypeIter {
	if len(obj.obj.ExpressionList) == 0 {
		obj.obj.ExpressionList = []*otg.CaptureExpressionType{}
	}
	if obj.expressionListHolder == nil {
		obj.expressionListHolder = newCaptureExpressionListCaptureExpressionTypeIter(&obj.obj.ExpressionList).setMsg(obj)
	}
	return obj.expressionListHolder
}

type captureExpressionListCaptureExpressionTypeIter struct {
	obj                        *captureExpressionList
	captureExpressionTypeSlice []CaptureExpressionType
	fieldPtr                   *[]*otg.CaptureExpressionType
}

func newCaptureExpressionListCaptureExpressionTypeIter(ptr *[]*otg.CaptureExpressionType) CaptureExpressionListCaptureExpressionTypeIter {
	return &captureExpressionListCaptureExpressionTypeIter{fieldPtr: ptr}
}

type CaptureExpressionListCaptureExpressionTypeIter interface {
	setMsg(*captureExpressionList) CaptureExpressionListCaptureExpressionTypeIter
	Items() []CaptureExpressionType
	Add() CaptureExpressionType
	Append(items ...CaptureExpressionType) CaptureExpressionListCaptureExpressionTypeIter
	Set(index int, newObj CaptureExpressionType) CaptureExpressionListCaptureExpressionTypeIter
	Clear() CaptureExpressionListCaptureExpressionTypeIter
	clearHolderSlice() CaptureExpressionListCaptureExpressionTypeIter
	appendHolderSlice(item CaptureExpressionType) CaptureExpressionListCaptureExpressionTypeIter
}

func (obj *captureExpressionListCaptureExpressionTypeIter) setMsg(msg *captureExpressionList) CaptureExpressionListCaptureExpressionTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&captureExpressionType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *captureExpressionListCaptureExpressionTypeIter) Items() []CaptureExpressionType {
	return obj.captureExpressionTypeSlice
}

func (obj *captureExpressionListCaptureExpressionTypeIter) Add() CaptureExpressionType {
	newObj := &otg.CaptureExpressionType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &captureExpressionType{obj: newObj}
	newLibObj.setDefault()
	obj.captureExpressionTypeSlice = append(obj.captureExpressionTypeSlice, newLibObj)
	return newLibObj
}

func (obj *captureExpressionListCaptureExpressionTypeIter) Append(items ...CaptureExpressionType) CaptureExpressionListCaptureExpressionTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.captureExpressionTypeSlice = append(obj.captureExpressionTypeSlice, item)
	}
	return obj
}

func (obj *captureExpressionListCaptureExpressionTypeIter) Set(index int, newObj CaptureExpressionType) CaptureExpressionListCaptureExpressionTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.captureExpressionTypeSlice[index] = newObj
	return obj
}
func (obj *captureExpressionListCaptureExpressionTypeIter) Clear() CaptureExpressionListCaptureExpressionTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.CaptureExpressionType{}
		obj.captureExpressionTypeSlice = []CaptureExpressionType{}
	}
	return obj
}
func (obj *captureExpressionListCaptureExpressionTypeIter) clearHolderSlice() CaptureExpressionListCaptureExpressionTypeIter {
	if len(obj.captureExpressionTypeSlice) > 0 {
		obj.captureExpressionTypeSlice = []CaptureExpressionType{}
	}
	return obj
}
func (obj *captureExpressionListCaptureExpressionTypeIter) appendHolderSlice(item CaptureExpressionType) CaptureExpressionListCaptureExpressionTypeIter {
	obj.captureExpressionTypeSlice = append(obj.captureExpressionTypeSlice, item)
	return obj
}

func (obj *captureExpressionList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.ExpressionList) != 0 {

		if set_default {
			obj.ExpressionList().clearHolderSlice()
			for _, item := range obj.obj.ExpressionList {
				obj.ExpressionList().appendHolderSlice(&captureExpressionType{obj: item})
			}
		}
		for _, item := range obj.ExpressionList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *captureExpressionList) setDefault() {

}

// ***** IdTypePacketGroupId *****
type idTypePacketGroupId struct {
	validation
	obj *otg.IdTypePacketGroupId
}

func NewIdTypePacketGroupId() IdTypePacketGroupId {
	obj := idTypePacketGroupId{obj: &otg.IdTypePacketGroupId{}}
	obj.setDefault()
	return &obj
}

func (obj *idTypePacketGroupId) Msg() *otg.IdTypePacketGroupId {
	return obj.obj
}

func (obj *idTypePacketGroupId) SetMsg(msg *otg.IdTypePacketGroupId) IdTypePacketGroupId {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *idTypePacketGroupId) ToProto() (*otg.IdTypePacketGroupId, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *idTypePacketGroupId) FromProto(msg *otg.IdTypePacketGroupId) (IdTypePacketGroupId, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *idTypePacketGroupId) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *idTypePacketGroupId) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *idTypePacketGroupId) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *idTypePacketGroupId) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *idTypePacketGroupId) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *idTypePacketGroupId) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *idTypePacketGroupId) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *idTypePacketGroupId) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *idTypePacketGroupId) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *idTypePacketGroupId) Clone() (IdTypePacketGroupId, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewIdTypePacketGroupId()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *idTypePacketGroupId) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// IdTypePacketGroupId is tBD
type IdTypePacketGroupId interface {
	Validation
	// Msg marshals IdTypePacketGroupId to protobuf object *otg.IdTypePacketGroupId
	// and doesn't set defaults
	Msg() *otg.IdTypePacketGroupId
	// SetMsg unmarshals IdTypePacketGroupId from protobuf object *otg.IdTypePacketGroupId
	// and doesn't set defaults
	SetMsg(*otg.IdTypePacketGroupId) IdTypePacketGroupId
	// ToProto marshals IdTypePacketGroupId to protobuf object *otg.IdTypePacketGroupId
	ToProto() (*otg.IdTypePacketGroupId, error)
	// ToPbText marshals IdTypePacketGroupId to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals IdTypePacketGroupId to YAML text
	ToYaml() (string, error)
	// ToJson marshals IdTypePacketGroupId to JSON text
	ToJson() (string, error)
	// FromProto unmarshals IdTypePacketGroupId from protobuf object *otg.IdTypePacketGroupId
	FromProto(msg *otg.IdTypePacketGroupId) (IdTypePacketGroupId, error)
	// FromPbText unmarshals IdTypePacketGroupId from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals IdTypePacketGroupId from YAML text
	FromYaml(value string) error
	// FromJson unmarshals IdTypePacketGroupId from JSON text
	FromJson(value string) error
	// Validate validates IdTypePacketGroupId
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (IdTypePacketGroupId, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Id returns int32, set in IdTypePacketGroupId.
	Id() int32
	// SetId assigns int32 provided by user to IdTypePacketGroupId
	SetId(value int32) IdTypePacketGroupId
	// HasId checks if Id has been set in IdTypePacketGroupId
	HasId() bool
}

func (obj *idTypePacketGroupId) populateXml(xObj *Argument) error {

	if obj.HasId() {

		member := Member{
			Name:  "id",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Id()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *idTypePacketGroupId) populateFromXml(xObj *RetVal) error {

	return nil
}

// The PacketGroupId is only locally unique to a test port within   this test application. The first group controlled would have   PacketGroupId 0, and the second group would have PacketGroupId 1.   The number of packet groups available on a test port is advertised   PACKETGROUP-COUNT.
// Id returns a int32
func (obj *idTypePacketGroupId) Id() int32 {

	return *obj.obj.Id

}

// The PacketGroupId is only locally unique to a test port within   this test application. The first group controlled would have   PacketGroupId 0, and the second group would have PacketGroupId 1.   The number of packet groups available on a test port is advertised   PACKETGROUP-COUNT.
// Id returns a int32
func (obj *idTypePacketGroupId) HasId() bool {
	return obj.obj.Id != nil
}

// The PacketGroupId is only locally unique to a test port within   this test application. The first group controlled would have   PacketGroupId 0, and the second group would have PacketGroupId 1.   The number of packet groups available on a test port is advertised   PACKETGROUP-COUNT.
// SetId sets the int32 value in the IdTypePacketGroupId object
func (obj *idTypePacketGroupId) SetId(value int32) IdTypePacketGroupId {

	obj.obj.Id = &value
	return obj
}

func (obj *idTypePacketGroupId) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *idTypePacketGroupId) setDefault() {

}

// ***** PorteRxMode *****
type porteRxMode struct {
	validation
	obj *otg.PorteRxMode
}

func NewPorteRxMode() PorteRxMode {
	obj := porteRxMode{obj: &otg.PorteRxMode{}}
	obj.setDefault()
	return &obj
}

func (obj *porteRxMode) Msg() *otg.PorteRxMode {
	return obj.obj
}

func (obj *porteRxMode) SetMsg(msg *otg.PorteRxMode) PorteRxMode {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *porteRxMode) ToProto() (*otg.PorteRxMode, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *porteRxMode) FromProto(msg *otg.PorteRxMode) (PorteRxMode, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *porteRxMode) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *porteRxMode) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *porteRxMode) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *porteRxMode) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *porteRxMode) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *porteRxMode) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *porteRxMode) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *porteRxMode) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *porteRxMode) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *porteRxMode) Clone() (PorteRxMode, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPorteRxMode()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *porteRxMode) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// PorteRxMode is description is TBD
type PorteRxMode interface {
	Validation
	// Msg marshals PorteRxMode to protobuf object *otg.PorteRxMode
	// and doesn't set defaults
	Msg() *otg.PorteRxMode
	// SetMsg unmarshals PorteRxMode from protobuf object *otg.PorteRxMode
	// and doesn't set defaults
	SetMsg(*otg.PorteRxMode) PorteRxMode
	// ToProto marshals PorteRxMode to protobuf object *otg.PorteRxMode
	ToProto() (*otg.PorteRxMode, error)
	// ToPbText marshals PorteRxMode to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PorteRxMode to YAML text
	ToYaml() (string, error)
	// ToJson marshals PorteRxMode to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PorteRxMode from protobuf object *otg.PorteRxMode
	FromProto(msg *otg.PorteRxMode) (PorteRxMode, error)
	// FromPbText unmarshals PorteRxMode from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PorteRxMode from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PorteRxMode from JSON text
	FromJson(value string) error
	// Validate validates PorteRxMode
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PorteRxMode, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ERxMode returns PorteRxModeERxModeEnum, set in PorteRxMode
	ERxMode() PorteRxModeERxModeEnum
	// SetERxMode assigns PorteRxModeERxModeEnum provided by user to PorteRxMode
	SetERxMode(value PorteRxModeERxModeEnum) PorteRxMode
	// HasERxMode checks if ERxMode has been set in PorteRxMode
	HasERxMode() bool
}

func (obj *porteRxMode) populateXml(xObj *Argument) error {

	if obj.HasERxMode() {

		member := Member{
			Name:  "erxmode",
			Type:  "None",
			Value: strconv.FormatInt(int64(obj.obj.ERxMode.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *porteRxMode) populateFromXml(xObj *RetVal) error {

	return nil
}

type PorteRxModeERxModeEnum string

// Enum of ERxMode on PorteRxMode
var PorteRxModeERxMode = struct {
	KCAPTURE           PorteRxModeERxModeEnum
	KDATAINTEGRITY     PorteRxModeERxModeEnum
	KFIRSTTIMESTAMP    PorteRxModeERxModeEnum
	KSEQUENCECHECKING  PorteRxModeERxModeEnum
	KWIDEPACKETGROUP   PorteRxModeERxModeEnum
	KPRBS              PorteRxModeERxModeEnum
	KRATEMONITORING    PorteRxModeERxModeEnum
	KPERFLOWERRORSTATS PorteRxModeERxModeEnum
}{
	KCAPTURE:           PorteRxModeERxModeEnum("kCapture"),
	KDATAINTEGRITY:     PorteRxModeERxModeEnum("kDataIntegrity"),
	KFIRSTTIMESTAMP:    PorteRxModeERxModeEnum("kFirstTimeStamp"),
	KSEQUENCECHECKING:  PorteRxModeERxModeEnum("kSequenceChecking"),
	KWIDEPACKETGROUP:   PorteRxModeERxModeEnum("kWidePacketGroup"),
	KPRBS:              PorteRxModeERxModeEnum("kPrbs"),
	KRATEMONITORING:    PorteRxModeERxModeEnum("kRateMonitoring"),
	KPERFLOWERRORSTATS: PorteRxModeERxModeEnum("kPerFlowErrorStats"),
}

func (obj *porteRxMode) ERxMode() PorteRxModeERxModeEnum {
	return PorteRxModeERxModeEnum(obj.obj.ERxMode.Enum().String())
}

// description is TBD
// ERxMode returns a string
func (obj *porteRxMode) HasERxMode() bool {
	return obj.obj.ERxMode != nil
}

func (obj *porteRxMode) SetERxMode(value PorteRxModeERxModeEnum) PorteRxMode {
	intValue, ok := otg.PorteRxMode_ERxMode_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PorteRxModeERxModeEnum", string(value)))
		return obj
	}
	enumValue := otg.PorteRxMode_ERxMode_Enum(intValue)
	obj.obj.ERxMode = &enumValue

	return obj
}

func (obj *porteRxMode) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *porteRxMode) setDefault() {

}

// ***** PacketGroupLatencyBinList *****
type packetGroupLatencyBinList struct {
	validation
	obj *otg.PacketGroupLatencyBinList
}

func NewPacketGroupLatencyBinList() PacketGroupLatencyBinList {
	obj := packetGroupLatencyBinList{obj: &otg.PacketGroupLatencyBinList{}}
	obj.setDefault()
	return &obj
}

func (obj *packetGroupLatencyBinList) Msg() *otg.PacketGroupLatencyBinList {
	return obj.obj
}

func (obj *packetGroupLatencyBinList) SetMsg(msg *otg.PacketGroupLatencyBinList) PacketGroupLatencyBinList {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *packetGroupLatencyBinList) ToProto() (*otg.PacketGroupLatencyBinList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *packetGroupLatencyBinList) FromProto(msg *otg.PacketGroupLatencyBinList) (PacketGroupLatencyBinList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *packetGroupLatencyBinList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *packetGroupLatencyBinList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *packetGroupLatencyBinList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *packetGroupLatencyBinList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *packetGroupLatencyBinList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *packetGroupLatencyBinList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *packetGroupLatencyBinList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *packetGroupLatencyBinList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *packetGroupLatencyBinList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *packetGroupLatencyBinList) Clone() (PacketGroupLatencyBinList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPacketGroupLatencyBinList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *packetGroupLatencyBinList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// PacketGroupLatencyBinList is tBD
type PacketGroupLatencyBinList interface {
	Validation
	// Msg marshals PacketGroupLatencyBinList to protobuf object *otg.PacketGroupLatencyBinList
	// and doesn't set defaults
	Msg() *otg.PacketGroupLatencyBinList
	// SetMsg unmarshals PacketGroupLatencyBinList from protobuf object *otg.PacketGroupLatencyBinList
	// and doesn't set defaults
	SetMsg(*otg.PacketGroupLatencyBinList) PacketGroupLatencyBinList
	// ToProto marshals PacketGroupLatencyBinList to protobuf object *otg.PacketGroupLatencyBinList
	ToProto() (*otg.PacketGroupLatencyBinList, error)
	// ToPbText marshals PacketGroupLatencyBinList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PacketGroupLatencyBinList to YAML text
	ToYaml() (string, error)
	// ToJson marshals PacketGroupLatencyBinList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PacketGroupLatencyBinList from protobuf object *otg.PacketGroupLatencyBinList
	FromProto(msg *otg.PacketGroupLatencyBinList) (PacketGroupLatencyBinList, error)
	// FromPbText unmarshals PacketGroupLatencyBinList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PacketGroupLatencyBinList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PacketGroupLatencyBinList from JSON text
	FromJson(value string) error
	// Validate validates PacketGroupLatencyBinList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PacketGroupLatencyBinList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// LatencyBinList returns []float64, set in PacketGroupLatencyBinList.
	LatencyBinList() []float64
	// SetLatencyBinList assigns []float64 provided by user to PacketGroupLatencyBinList
	SetLatencyBinList(value []float64) PacketGroupLatencyBinList
}

func (obj *packetGroupLatencyBinList) populateXml(xObj *Argument) error {

	if len(obj.LatencyBinList()) != 0 {
		for _, item := range obj.LatencyBinList() {
			it := Item{
				Type: "None",

				Value: fmt.Sprintf("%v", item),
			}

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *packetGroupLatencyBinList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// LatencyBinList returns a []float64
func (obj *packetGroupLatencyBinList) LatencyBinList() []float64 {
	if obj.obj.LatencyBinList == nil {
		obj.obj.LatencyBinList = make([]float64, 0)
	}
	return obj.obj.LatencyBinList
}

// description is TBD
// SetLatencyBinList sets the []float64 value in the PacketGroupLatencyBinList object
func (obj *packetGroupLatencyBinList) SetLatencyBinList(value []float64) PacketGroupLatencyBinList {

	if obj.obj.LatencyBinList == nil {
		obj.obj.LatencyBinList = make([]float64, 0)
	}
	obj.obj.LatencyBinList = value

	return obj
}

func (obj *packetGroupLatencyBinList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *packetGroupLatencyBinList) setDefault() {

}

// ***** PacketGroupSizeBinsType *****
type packetGroupSizeBinsType struct {
	validation
	obj            *otg.PacketGroupSizeBinsType
	sizeBinsHolder PacketGroupSizeBinList
}

func NewPacketGroupSizeBinsType() PacketGroupSizeBinsType {
	obj := packetGroupSizeBinsType{obj: &otg.PacketGroupSizeBinsType{}}
	obj.setDefault()
	return &obj
}

func (obj *packetGroupSizeBinsType) Msg() *otg.PacketGroupSizeBinsType {
	return obj.obj
}

func (obj *packetGroupSizeBinsType) SetMsg(msg *otg.PacketGroupSizeBinsType) PacketGroupSizeBinsType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *packetGroupSizeBinsType) ToProto() (*otg.PacketGroupSizeBinsType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *packetGroupSizeBinsType) FromProto(msg *otg.PacketGroupSizeBinsType) (PacketGroupSizeBinsType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *packetGroupSizeBinsType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *packetGroupSizeBinsType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *packetGroupSizeBinsType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *packetGroupSizeBinsType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *packetGroupSizeBinsType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *packetGroupSizeBinsType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *packetGroupSizeBinsType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *packetGroupSizeBinsType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *packetGroupSizeBinsType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *packetGroupSizeBinsType) Clone() (PacketGroupSizeBinsType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPacketGroupSizeBinsType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *packetGroupSizeBinsType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *packetGroupSizeBinsType) setNil() {
	obj.sizeBinsHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// PacketGroupSizeBinsType is tBD
type PacketGroupSizeBinsType interface {
	Validation
	// Msg marshals PacketGroupSizeBinsType to protobuf object *otg.PacketGroupSizeBinsType
	// and doesn't set defaults
	Msg() *otg.PacketGroupSizeBinsType
	// SetMsg unmarshals PacketGroupSizeBinsType from protobuf object *otg.PacketGroupSizeBinsType
	// and doesn't set defaults
	SetMsg(*otg.PacketGroupSizeBinsType) PacketGroupSizeBinsType
	// ToProto marshals PacketGroupSizeBinsType to protobuf object *otg.PacketGroupSizeBinsType
	ToProto() (*otg.PacketGroupSizeBinsType, error)
	// ToPbText marshals PacketGroupSizeBinsType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PacketGroupSizeBinsType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PacketGroupSizeBinsType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PacketGroupSizeBinsType from protobuf object *otg.PacketGroupSizeBinsType
	FromProto(msg *otg.PacketGroupSizeBinsType) (PacketGroupSizeBinsType, error)
	// FromPbText unmarshals PacketGroupSizeBinsType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PacketGroupSizeBinsType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PacketGroupSizeBinsType from JSON text
	FromJson(value string) error
	// Validate validates PacketGroupSizeBinsType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PacketGroupSizeBinsType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// EnableSizeBins returns bool, set in PacketGroupSizeBinsType.
	EnableSizeBins() bool
	// SetEnableSizeBins assigns bool provided by user to PacketGroupSizeBinsType
	SetEnableSizeBins(value bool) PacketGroupSizeBinsType
	// HasEnableSizeBins checks if EnableSizeBins has been set in PacketGroupSizeBinsType
	HasEnableSizeBins() bool
	// SizeBins returns PacketGroupSizeBinList, set in PacketGroupSizeBinsType.
	// PacketGroupSizeBinList is tBD
	SizeBins() PacketGroupSizeBinList
	// SetSizeBins assigns PacketGroupSizeBinList provided by user to PacketGroupSizeBinsType.
	// PacketGroupSizeBinList is tBD
	SetSizeBins(value PacketGroupSizeBinList) PacketGroupSizeBinsType
	// HasSizeBins checks if SizeBins has been set in PacketGroupSizeBinsType
	HasSizeBins() bool
	setNil()
}

func (obj *packetGroupSizeBinsType) populateXml(xObj *Argument) error {

	if obj.HasEnableSizeBins() {
		var value string
		if obj.EnableSizeBins() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablesizebins",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *packetGroupSizeBinsType) populateFromXml(xObj *RetVal) error {

	return nil
}

// Enables the use of size bins.
// EnableSizeBins returns a bool
func (obj *packetGroupSizeBinsType) EnableSizeBins() bool {

	return *obj.obj.EnableSizeBins

}

// Enables the use of size bins.
// EnableSizeBins returns a bool
func (obj *packetGroupSizeBinsType) HasEnableSizeBins() bool {
	return obj.obj.EnableSizeBins != nil
}

// Enables the use of size bins.
// SetEnableSizeBins sets the bool value in the PacketGroupSizeBinsType object
func (obj *packetGroupSizeBinsType) SetEnableSizeBins(value bool) PacketGroupSizeBinsType {

	obj.obj.EnableSizeBins = &value
	return obj
}

// If enableSizeBins is true, this list will contain integer frame size   values.
// SizeBins returns a PacketGroupSizeBinList
func (obj *packetGroupSizeBinsType) SizeBins() PacketGroupSizeBinList {
	if obj.obj.SizeBins == nil {
		obj.obj.SizeBins = NewPacketGroupSizeBinList().Msg()
	}
	if obj.sizeBinsHolder == nil {
		obj.sizeBinsHolder = &packetGroupSizeBinList{obj: obj.obj.SizeBins}
	}
	return obj.sizeBinsHolder
}

// If enableSizeBins is true, this list will contain integer frame size   values.
// SizeBins returns a PacketGroupSizeBinList
func (obj *packetGroupSizeBinsType) HasSizeBins() bool {
	return obj.obj.SizeBins != nil
}

// If enableSizeBins is true, this list will contain integer frame size   values.
// SetSizeBins sets the PacketGroupSizeBinList value in the PacketGroupSizeBinsType object
func (obj *packetGroupSizeBinsType) SetSizeBins(value PacketGroupSizeBinList) PacketGroupSizeBinsType {

	obj.sizeBinsHolder = nil
	obj.obj.SizeBins = value.Msg()

	return obj
}

func (obj *packetGroupSizeBinsType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.SizeBins != nil {

		obj.SizeBins().validateObj(vObj, set_default)
	}

}

func (obj *packetGroupSizeBinsType) setDefault() {

}

// ***** PacketGroupSplitPacketGroupList *****
type packetGroupSplitPacketGroupList struct {
	validation
	obj                        *otg.PacketGroupSplitPacketGroupList
	splitPacketGroupListHolder PacketGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter
}

func NewPacketGroupSplitPacketGroupList() PacketGroupSplitPacketGroupList {
	obj := packetGroupSplitPacketGroupList{obj: &otg.PacketGroupSplitPacketGroupList{}}
	obj.setDefault()
	return &obj
}

func (obj *packetGroupSplitPacketGroupList) Msg() *otg.PacketGroupSplitPacketGroupList {
	return obj.obj
}

func (obj *packetGroupSplitPacketGroupList) SetMsg(msg *otg.PacketGroupSplitPacketGroupList) PacketGroupSplitPacketGroupList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *packetGroupSplitPacketGroupList) ToProto() (*otg.PacketGroupSplitPacketGroupList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *packetGroupSplitPacketGroupList) FromProto(msg *otg.PacketGroupSplitPacketGroupList) (PacketGroupSplitPacketGroupList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *packetGroupSplitPacketGroupList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *packetGroupSplitPacketGroupList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *packetGroupSplitPacketGroupList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *packetGroupSplitPacketGroupList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *packetGroupSplitPacketGroupList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *packetGroupSplitPacketGroupList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *packetGroupSplitPacketGroupList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *packetGroupSplitPacketGroupList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *packetGroupSplitPacketGroupList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *packetGroupSplitPacketGroupList) Clone() (PacketGroupSplitPacketGroupList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPacketGroupSplitPacketGroupList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *packetGroupSplitPacketGroupList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *packetGroupSplitPacketGroupList) setNil() {
	obj.splitPacketGroupListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// PacketGroupSplitPacketGroupList is tBD
type PacketGroupSplitPacketGroupList interface {
	Validation
	// Msg marshals PacketGroupSplitPacketGroupList to protobuf object *otg.PacketGroupSplitPacketGroupList
	// and doesn't set defaults
	Msg() *otg.PacketGroupSplitPacketGroupList
	// SetMsg unmarshals PacketGroupSplitPacketGroupList from protobuf object *otg.PacketGroupSplitPacketGroupList
	// and doesn't set defaults
	SetMsg(*otg.PacketGroupSplitPacketGroupList) PacketGroupSplitPacketGroupList
	// ToProto marshals PacketGroupSplitPacketGroupList to protobuf object *otg.PacketGroupSplitPacketGroupList
	ToProto() (*otg.PacketGroupSplitPacketGroupList, error)
	// ToPbText marshals PacketGroupSplitPacketGroupList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PacketGroupSplitPacketGroupList to YAML text
	ToYaml() (string, error)
	// ToJson marshals PacketGroupSplitPacketGroupList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PacketGroupSplitPacketGroupList from protobuf object *otg.PacketGroupSplitPacketGroupList
	FromProto(msg *otg.PacketGroupSplitPacketGroupList) (PacketGroupSplitPacketGroupList, error)
	// FromPbText unmarshals PacketGroupSplitPacketGroupList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PacketGroupSplitPacketGroupList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PacketGroupSplitPacketGroupList from JSON text
	FromJson(value string) error
	// Validate validates PacketGroupSplitPacketGroupList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PacketGroupSplitPacketGroupList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// SplitPacketGroupList returns PacketGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIterIter, set in PacketGroupSplitPacketGroupList
	SplitPacketGroupList() PacketGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter
	setNil()
}

func (obj *packetGroupSplitPacketGroupList) populateXml(xObj *Argument) error {

	if len(obj.SplitPacketGroupList().Items()) != 0 {
		for _, item := range obj.SplitPacketGroupList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *packetGroupSplitPacketGroupList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// SplitPacketGroupList returns a []SplitPacketGroupConfigurationType
func (obj *packetGroupSplitPacketGroupList) SplitPacketGroupList() PacketGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter {
	if len(obj.obj.SplitPacketGroupList) == 0 {
		obj.obj.SplitPacketGroupList = []*otg.SplitPacketGroupConfigurationType{}
	}
	if obj.splitPacketGroupListHolder == nil {
		obj.splitPacketGroupListHolder = newPacketGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter(&obj.obj.SplitPacketGroupList).setMsg(obj)
	}
	return obj.splitPacketGroupListHolder
}

type packetGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter struct {
	obj                                    *packetGroupSplitPacketGroupList
	splitPacketGroupConfigurationTypeSlice []SplitPacketGroupConfigurationType
	fieldPtr                               *[]*otg.SplitPacketGroupConfigurationType
}

func newPacketGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter(ptr *[]*otg.SplitPacketGroupConfigurationType) PacketGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter {
	return &packetGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter{fieldPtr: ptr}
}

type PacketGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter interface {
	setMsg(*packetGroupSplitPacketGroupList) PacketGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter
	Items() []SplitPacketGroupConfigurationType
	Add() SplitPacketGroupConfigurationType
	Append(items ...SplitPacketGroupConfigurationType) PacketGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter
	Set(index int, newObj SplitPacketGroupConfigurationType) PacketGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter
	Clear() PacketGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter
	clearHolderSlice() PacketGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter
	appendHolderSlice(item SplitPacketGroupConfigurationType) PacketGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter
}

func (obj *packetGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter) setMsg(msg *packetGroupSplitPacketGroupList) PacketGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&splitPacketGroupConfigurationType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *packetGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter) Items() []SplitPacketGroupConfigurationType {
	return obj.splitPacketGroupConfigurationTypeSlice
}

func (obj *packetGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter) Add() SplitPacketGroupConfigurationType {
	newObj := &otg.SplitPacketGroupConfigurationType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &splitPacketGroupConfigurationType{obj: newObj}
	newLibObj.setDefault()
	obj.splitPacketGroupConfigurationTypeSlice = append(obj.splitPacketGroupConfigurationTypeSlice, newLibObj)
	return newLibObj
}

func (obj *packetGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter) Append(items ...SplitPacketGroupConfigurationType) PacketGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.splitPacketGroupConfigurationTypeSlice = append(obj.splitPacketGroupConfigurationTypeSlice, item)
	}
	return obj
}

func (obj *packetGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter) Set(index int, newObj SplitPacketGroupConfigurationType) PacketGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.splitPacketGroupConfigurationTypeSlice[index] = newObj
	return obj
}
func (obj *packetGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter) Clear() PacketGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.SplitPacketGroupConfigurationType{}
		obj.splitPacketGroupConfigurationTypeSlice = []SplitPacketGroupConfigurationType{}
	}
	return obj
}
func (obj *packetGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter) clearHolderSlice() PacketGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter {
	if len(obj.splitPacketGroupConfigurationTypeSlice) > 0 {
		obj.splitPacketGroupConfigurationTypeSlice = []SplitPacketGroupConfigurationType{}
	}
	return obj
}
func (obj *packetGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter) appendHolderSlice(item SplitPacketGroupConfigurationType) PacketGroupSplitPacketGroupListSplitPacketGroupConfigurationTypeIter {
	obj.splitPacketGroupConfigurationTypeSlice = append(obj.splitPacketGroupConfigurationTypeSlice, item)
	return obj
}

func (obj *packetGroupSplitPacketGroupList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.SplitPacketGroupList) != 0 {

		if set_default {
			obj.SplitPacketGroupList().clearHolderSlice()
			for _, item := range obj.obj.SplitPacketGroupList {
				obj.SplitPacketGroupList().appendHolderSlice(&splitPacketGroupConfigurationType{obj: item})
			}
		}
		for _, item := range obj.SplitPacketGroupList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *packetGroupSplitPacketGroupList) setDefault() {

}

// ***** RateMonitoringConfigurationType *****
type rateMonitoringConfigurationType struct {
	validation
	obj *otg.RateMonitoringConfigurationType
}

func NewRateMonitoringConfigurationType() RateMonitoringConfigurationType {
	obj := rateMonitoringConfigurationType{obj: &otg.RateMonitoringConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *rateMonitoringConfigurationType) Msg() *otg.RateMonitoringConfigurationType {
	return obj.obj
}

func (obj *rateMonitoringConfigurationType) SetMsg(msg *otg.RateMonitoringConfigurationType) RateMonitoringConfigurationType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *rateMonitoringConfigurationType) ToProto() (*otg.RateMonitoringConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *rateMonitoringConfigurationType) FromProto(msg *otg.RateMonitoringConfigurationType) (RateMonitoringConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *rateMonitoringConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *rateMonitoringConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *rateMonitoringConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *rateMonitoringConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *rateMonitoringConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *rateMonitoringConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *rateMonitoringConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *rateMonitoringConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *rateMonitoringConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *rateMonitoringConfigurationType) Clone() (RateMonitoringConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewRateMonitoringConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *rateMonitoringConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// RateMonitoringConfigurationType is tBD
type RateMonitoringConfigurationType interface {
	Validation
	// Msg marshals RateMonitoringConfigurationType to protobuf object *otg.RateMonitoringConfigurationType
	// and doesn't set defaults
	Msg() *otg.RateMonitoringConfigurationType
	// SetMsg unmarshals RateMonitoringConfigurationType from protobuf object *otg.RateMonitoringConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.RateMonitoringConfigurationType) RateMonitoringConfigurationType
	// ToProto marshals RateMonitoringConfigurationType to protobuf object *otg.RateMonitoringConfigurationType
	ToProto() (*otg.RateMonitoringConfigurationType, error)
	// ToPbText marshals RateMonitoringConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals RateMonitoringConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals RateMonitoringConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals RateMonitoringConfigurationType from protobuf object *otg.RateMonitoringConfigurationType
	FromProto(msg *otg.RateMonitoringConfigurationType) (RateMonitoringConfigurationType, error)
	// FromPbText unmarshals RateMonitoringConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals RateMonitoringConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals RateMonitoringConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates RateMonitoringConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (RateMonitoringConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// EnableJitterFilter returns bool, set in RateMonitoringConfigurationType.
	EnableJitterFilter() bool
	// SetEnableJitterFilter assigns bool provided by user to RateMonitoringConfigurationType
	SetEnableJitterFilter(value bool) RateMonitoringConfigurationType
	// HasEnableJitterFilter checks if EnableJitterFilter has been set in RateMonitoringConfigurationType
	HasEnableJitterFilter() bool
	// FilterWindow returns int32, set in RateMonitoringConfigurationType.
	FilterWindow() int32
	// SetFilterWindow assigns int32 provided by user to RateMonitoringConfigurationType
	SetFilterWindow(value int32) RateMonitoringConfigurationType
	// HasFilterWindow checks if FilterWindow has been set in RateMonitoringConfigurationType
	HasFilterWindow() bool
	// RateMonitoringThreshold returns int32, set in RateMonitoringConfigurationType.
	RateMonitoringThreshold() int32
	// SetRateMonitoringThreshold assigns int32 provided by user to RateMonitoringConfigurationType
	SetRateMonitoringThreshold(value int32) RateMonitoringConfigurationType
	// HasRateMonitoringThreshold checks if RateMonitoringThreshold has been set in RateMonitoringConfigurationType
	HasRateMonitoringThreshold() bool
	// FromPgid returns int32, set in RateMonitoringConfigurationType.
	FromPgid() int32
	// SetFromPgid assigns int32 provided by user to RateMonitoringConfigurationType
	SetFromPgid(value int32) RateMonitoringConfigurationType
	// HasFromPgid checks if FromPgid has been set in RateMonitoringConfigurationType
	HasFromPgid() bool
	// ToPgid returns int32, set in RateMonitoringConfigurationType.
	ToPgid() int32
	// SetToPgid assigns int32 provided by user to RateMonitoringConfigurationType
	SetToPgid(value int32) RateMonitoringConfigurationType
	// HasToPgid checks if ToPgid has been set in RateMonitoringConfigurationType
	HasToPgid() bool
}

func (obj *rateMonitoringConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasEnableJitterFilter() {
		var value string
		if obj.EnableJitterFilter() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablejitterfilter",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasFilterWindow() {

		member := Member{
			Name:  "filterwindow",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.FilterWindow()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasRateMonitoringThreshold() {

		member := Member{
			Name:  "ratemonitoringthreshold",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.RateMonitoringThreshold()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasFromPgid() {

		member := Member{
			Name:  "frompgid",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.FromPgid()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasToPgid() {

		member := Member{
			Name:  "topgid",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.ToPgid()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *rateMonitoringConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// EnableJitterFilter returns a bool
func (obj *rateMonitoringConfigurationType) EnableJitterFilter() bool {

	return *obj.obj.EnableJitterFilter

}

// TBD
// EnableJitterFilter returns a bool
func (obj *rateMonitoringConfigurationType) HasEnableJitterFilter() bool {
	return obj.obj.EnableJitterFilter != nil
}

// TBD
// SetEnableJitterFilter sets the bool value in the RateMonitoringConfigurationType object
func (obj *rateMonitoringConfigurationType) SetEnableJitterFilter(value bool) RateMonitoringConfigurationType {

	obj.obj.EnableJitterFilter = &value
	return obj
}

// TBD
// FilterWindow returns a int32
func (obj *rateMonitoringConfigurationType) FilterWindow() int32 {

	return *obj.obj.FilterWindow

}

// TBD
// FilterWindow returns a int32
func (obj *rateMonitoringConfigurationType) HasFilterWindow() bool {
	return obj.obj.FilterWindow != nil
}

// TBD
// SetFilterWindow sets the int32 value in the RateMonitoringConfigurationType object
func (obj *rateMonitoringConfigurationType) SetFilterWindow(value int32) RateMonitoringConfigurationType {

	obj.obj.FilterWindow = &value
	return obj
}

// TBD
// RateMonitoringThreshold returns a int32
func (obj *rateMonitoringConfigurationType) RateMonitoringThreshold() int32 {

	return *obj.obj.RateMonitoringThreshold

}

// TBD
// RateMonitoringThreshold returns a int32
func (obj *rateMonitoringConfigurationType) HasRateMonitoringThreshold() bool {
	return obj.obj.RateMonitoringThreshold != nil
}

// TBD
// SetRateMonitoringThreshold sets the int32 value in the RateMonitoringConfigurationType object
func (obj *rateMonitoringConfigurationType) SetRateMonitoringThreshold(value int32) RateMonitoringConfigurationType {

	obj.obj.RateMonitoringThreshold = &value
	return obj
}

// TBD
// FromPgid returns a int32
func (obj *rateMonitoringConfigurationType) FromPgid() int32 {

	return *obj.obj.FromPgid

}

// TBD
// FromPgid returns a int32
func (obj *rateMonitoringConfigurationType) HasFromPgid() bool {
	return obj.obj.FromPgid != nil
}

// TBD
// SetFromPgid sets the int32 value in the RateMonitoringConfigurationType object
func (obj *rateMonitoringConfigurationType) SetFromPgid(value int32) RateMonitoringConfigurationType {

	obj.obj.FromPgid = &value
	return obj
}

// TBD
// ToPgid returns a int32
func (obj *rateMonitoringConfigurationType) ToPgid() int32 {

	return *obj.obj.ToPgid

}

// TBD
// ToPgid returns a int32
func (obj *rateMonitoringConfigurationType) HasToPgid() bool {
	return obj.obj.ToPgid != nil
}

// TBD
// SetToPgid sets the int32 value in the RateMonitoringConfigurationType object
func (obj *rateMonitoringConfigurationType) SetToPgid(value int32) RateMonitoringConfigurationType {

	obj.obj.ToPgid = &value
	return obj
}

func (obj *rateMonitoringConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *rateMonitoringConfigurationType) setDefault() {

}

// ***** StreamStreamConfigurationType *****
type streamStreamConfigurationType struct {
	validation
	obj                     *otg.StreamStreamConfigurationType
	streamIdHolder          IdTypeStreamId
	configurationDataHolder StreamConfigurationDataType
}

func NewStreamStreamConfigurationType() StreamStreamConfigurationType {
	obj := streamStreamConfigurationType{obj: &otg.StreamStreamConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamStreamConfigurationType) Msg() *otg.StreamStreamConfigurationType {
	return obj.obj
}

func (obj *streamStreamConfigurationType) SetMsg(msg *otg.StreamStreamConfigurationType) StreamStreamConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamStreamConfigurationType) ToProto() (*otg.StreamStreamConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamStreamConfigurationType) FromProto(msg *otg.StreamStreamConfigurationType) (StreamStreamConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamStreamConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamStreamConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamStreamConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamStreamConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamStreamConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamStreamConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamStreamConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamStreamConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamStreamConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamStreamConfigurationType) Clone() (StreamStreamConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamStreamConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamStreamConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamStreamConfigurationType) setNil() {
	obj.streamIdHolder = nil
	obj.configurationDataHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamStreamConfigurationType is tBD
type StreamStreamConfigurationType interface {
	Validation
	// Msg marshals StreamStreamConfigurationType to protobuf object *otg.StreamStreamConfigurationType
	// and doesn't set defaults
	Msg() *otg.StreamStreamConfigurationType
	// SetMsg unmarshals StreamStreamConfigurationType from protobuf object *otg.StreamStreamConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.StreamStreamConfigurationType) StreamStreamConfigurationType
	// ToProto marshals StreamStreamConfigurationType to protobuf object *otg.StreamStreamConfigurationType
	ToProto() (*otg.StreamStreamConfigurationType, error)
	// ToPbText marshals StreamStreamConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamStreamConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamStreamConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamStreamConfigurationType from protobuf object *otg.StreamStreamConfigurationType
	FromProto(msg *otg.StreamStreamConfigurationType) (StreamStreamConfigurationType, error)
	// FromPbText unmarshals StreamStreamConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamStreamConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamStreamConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates StreamStreamConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamStreamConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// StreamId returns IdTypeStreamId, set in StreamStreamConfigurationType.
	// IdTypeStreamId is tBD
	StreamId() IdTypeStreamId
	// SetStreamId assigns IdTypeStreamId provided by user to StreamStreamConfigurationType.
	// IdTypeStreamId is tBD
	SetStreamId(value IdTypeStreamId) StreamStreamConfigurationType
	// HasStreamId checks if StreamId has been set in StreamStreamConfigurationType
	HasStreamId() bool
	// Name returns string, set in StreamStreamConfigurationType.
	Name() string
	// SetName assigns string provided by user to StreamStreamConfigurationType
	SetName(value string) StreamStreamConfigurationType
	// HasName checks if Name has been set in StreamStreamConfigurationType
	HasName() bool
	// State returns StreamStreamConfigurationTypeStateEnum, set in StreamStreamConfigurationType
	State() StreamStreamConfigurationTypeStateEnum
	// SetState assigns StreamStreamConfigurationTypeStateEnum provided by user to StreamStreamConfigurationType
	SetState(value StreamStreamConfigurationTypeStateEnum) StreamStreamConfigurationType
	// HasState checks if State has been set in StreamStreamConfigurationType
	HasState() bool
	// ConfigurationData returns StreamConfigurationDataType, set in StreamStreamConfigurationType.
	// StreamConfigurationDataType is tBD
	ConfigurationData() StreamConfigurationDataType
	// SetConfigurationData assigns StreamConfigurationDataType provided by user to StreamStreamConfigurationType.
	// StreamConfigurationDataType is tBD
	SetConfigurationData(value StreamConfigurationDataType) StreamStreamConfigurationType
	// HasConfigurationData checks if ConfigurationData has been set in StreamStreamConfigurationType
	HasConfigurationData() bool
	setNil()
}

func (obj *streamStreamConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasName() {

		member := Member{
			Name:  "name",
			Type:  "string",
			Value: obj.Name(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasState() {

		member := Member{
			Name:  "state",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Stream+eState",
			Value: strconv.FormatInt(int64(obj.obj.State.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamStreamConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// The identifier of the stream to which the following configuration   pertains.
// StreamId returns a IdTypeStreamId
func (obj *streamStreamConfigurationType) StreamId() IdTypeStreamId {
	if obj.obj.StreamId == nil {
		obj.obj.StreamId = NewIdTypeStreamId().Msg()
	}
	if obj.streamIdHolder == nil {
		obj.streamIdHolder = &idTypeStreamId{obj: obj.obj.StreamId}
	}
	return obj.streamIdHolder
}

// The identifier of the stream to which the following configuration   pertains.
// StreamId returns a IdTypeStreamId
func (obj *streamStreamConfigurationType) HasStreamId() bool {
	return obj.obj.StreamId != nil
}

// The identifier of the stream to which the following configuration   pertains.
// SetStreamId sets the IdTypeStreamId value in the StreamStreamConfigurationType object
func (obj *streamStreamConfigurationType) SetStreamId(value IdTypeStreamId) StreamStreamConfigurationType {

	obj.streamIdHolder = nil
	obj.obj.StreamId = value.Msg()

	return obj
}

// The name of the stream configured by the user
// Name returns a string
func (obj *streamStreamConfigurationType) Name() string {

	return *obj.obj.Name

}

// The name of the stream configured by the user
// Name returns a string
func (obj *streamStreamConfigurationType) HasName() bool {
	return obj.obj.Name != nil
}

// The name of the stream configured by the user
// SetName sets the string value in the StreamStreamConfigurationType object
func (obj *streamStreamConfigurationType) SetName(value string) StreamStreamConfigurationType {

	obj.obj.Name = &value
	return obj
}

type StreamStreamConfigurationTypeStateEnum string

// Enum of State on StreamStreamConfigurationType
var StreamStreamConfigurationTypeState = struct {
	KINACTIVE StreamStreamConfigurationTypeStateEnum
	KACTIVE   StreamStreamConfigurationTypeStateEnum
}{
	KINACTIVE: StreamStreamConfigurationTypeStateEnum("kInactive"),
	KACTIVE:   StreamStreamConfigurationTypeStateEnum("kActive"),
}

func (obj *streamStreamConfigurationType) State() StreamStreamConfigurationTypeStateEnum {
	return StreamStreamConfigurationTypeStateEnum(obj.obj.State.Enum().String())
}

// Set the state of a stream. This is used to either create a stream,   modify an existing stream, or delete a stream. A stream may either   be active (configured and transmitting packets) or inactive   (configured by not transmitting packets).
// State returns a string
func (obj *streamStreamConfigurationType) HasState() bool {
	return obj.obj.State != nil
}

func (obj *streamStreamConfigurationType) SetState(value StreamStreamConfigurationTypeStateEnum) StreamStreamConfigurationType {
	intValue, ok := otg.StreamStreamConfigurationType_State_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on StreamStreamConfigurationTypeStateEnum", string(value)))
		return obj
	}
	enumValue := otg.StreamStreamConfigurationType_State_Enum(intValue)
	obj.obj.State = &enumValue

	return obj
}

// Provide the configuration data for this stream. This field may   be absent if only the state of the stream needs to be changed.
// ConfigurationData returns a StreamConfigurationDataType
func (obj *streamStreamConfigurationType) ConfigurationData() StreamConfigurationDataType {
	if obj.obj.ConfigurationData == nil {
		obj.obj.ConfigurationData = NewStreamConfigurationDataType().Msg()
	}
	if obj.configurationDataHolder == nil {
		obj.configurationDataHolder = &streamConfigurationDataType{obj: obj.obj.ConfigurationData}
	}
	return obj.configurationDataHolder
}

// Provide the configuration data for this stream. This field may   be absent if only the state of the stream needs to be changed.
// ConfigurationData returns a StreamConfigurationDataType
func (obj *streamStreamConfigurationType) HasConfigurationData() bool {
	return obj.obj.ConfigurationData != nil
}

// Provide the configuration data for this stream. This field may   be absent if only the state of the stream needs to be changed.
// SetConfigurationData sets the StreamConfigurationDataType value in the StreamStreamConfigurationType object
func (obj *streamStreamConfigurationType) SetConfigurationData(value StreamConfigurationDataType) StreamStreamConfigurationType {

	obj.configurationDataHolder = nil
	obj.obj.ConfigurationData = value.Msg()

	return obj
}

func (obj *streamStreamConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.StreamId != nil {

		obj.StreamId().validateObj(vObj, set_default)
	}

	if obj.obj.ConfigurationData != nil {

		obj.ConfigurationData().validateObj(vObj, set_default)
	}

}

func (obj *streamStreamConfigurationType) setDefault() {

}

// ***** IdTypeStreamId *****
type idTypeStreamId struct {
	validation
	obj *otg.IdTypeStreamId
}

func NewIdTypeStreamId() IdTypeStreamId {
	obj := idTypeStreamId{obj: &otg.IdTypeStreamId{}}
	obj.setDefault()
	return &obj
}

func (obj *idTypeStreamId) Msg() *otg.IdTypeStreamId {
	return obj.obj
}

func (obj *idTypeStreamId) SetMsg(msg *otg.IdTypeStreamId) IdTypeStreamId {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *idTypeStreamId) ToProto() (*otg.IdTypeStreamId, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *idTypeStreamId) FromProto(msg *otg.IdTypeStreamId) (IdTypeStreamId, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *idTypeStreamId) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *idTypeStreamId) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *idTypeStreamId) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *idTypeStreamId) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *idTypeStreamId) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *idTypeStreamId) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *idTypeStreamId) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *idTypeStreamId) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *idTypeStreamId) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *idTypeStreamId) Clone() (IdTypeStreamId, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewIdTypeStreamId()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *idTypeStreamId) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// IdTypeStreamId is tBD
type IdTypeStreamId interface {
	Validation
	// Msg marshals IdTypeStreamId to protobuf object *otg.IdTypeStreamId
	// and doesn't set defaults
	Msg() *otg.IdTypeStreamId
	// SetMsg unmarshals IdTypeStreamId from protobuf object *otg.IdTypeStreamId
	// and doesn't set defaults
	SetMsg(*otg.IdTypeStreamId) IdTypeStreamId
	// ToProto marshals IdTypeStreamId to protobuf object *otg.IdTypeStreamId
	ToProto() (*otg.IdTypeStreamId, error)
	// ToPbText marshals IdTypeStreamId to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals IdTypeStreamId to YAML text
	ToYaml() (string, error)
	// ToJson marshals IdTypeStreamId to JSON text
	ToJson() (string, error)
	// FromProto unmarshals IdTypeStreamId from protobuf object *otg.IdTypeStreamId
	FromProto(msg *otg.IdTypeStreamId) (IdTypeStreamId, error)
	// FromPbText unmarshals IdTypeStreamId from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals IdTypeStreamId from YAML text
	FromYaml(value string) error
	// FromJson unmarshals IdTypeStreamId from JSON text
	FromJson(value string) error
	// Validate validates IdTypeStreamId
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (IdTypeStreamId, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Id returns int32, set in IdTypeStreamId.
	Id() int32
	// SetId assigns int32 provided by user to IdTypeStreamId
	SetId(value int32) IdTypeStreamId
	// HasId checks if Id has been set in IdTypeStreamId
	HasId() bool
}

func (obj *idTypeStreamId) populateXml(xObj *Argument) error {

	if obj.HasId() {

		member := Member{
			Name:  "id",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Id()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *idTypeStreamId) populateFromXml(xObj *RetVal) error {

	return nil
}

// The StreamId is only locally unique to a test port within   this test application. The first stream controlled would have   StreamId 0, and the second stream would have StreamId 1.   The number of stream available on a test port is advertised   STREAM-COUNT.
// Id returns a int32
func (obj *idTypeStreamId) Id() int32 {

	return *obj.obj.Id

}

// The StreamId is only locally unique to a test port within   this test application. The first stream controlled would have   StreamId 0, and the second stream would have StreamId 1.   The number of stream available on a test port is advertised   STREAM-COUNT.
// Id returns a int32
func (obj *idTypeStreamId) HasId() bool {
	return obj.obj.Id != nil
}

// The StreamId is only locally unique to a test port within   this test application. The first stream controlled would have   StreamId 0, and the second stream would have StreamId 1.   The number of stream available on a test port is advertised   STREAM-COUNT.
// SetId sets the int32 value in the IdTypeStreamId object
func (obj *idTypeStreamId) SetId(value int32) IdTypeStreamId {

	obj.obj.Id = &value
	return obj
}

func (obj *idTypeStreamId) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *idTypeStreamId) setDefault() {

}

// ***** StreamConfigurationUpdateDataType *****
type streamConfigurationUpdateDataType struct {
	validation
	obj        *otg.StreamConfigurationUpdateDataType
	dataHolder StreamConfigurationDataType
}

func NewStreamConfigurationUpdateDataType() StreamConfigurationUpdateDataType {
	obj := streamConfigurationUpdateDataType{obj: &otg.StreamConfigurationUpdateDataType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamConfigurationUpdateDataType) Msg() *otg.StreamConfigurationUpdateDataType {
	return obj.obj
}

func (obj *streamConfigurationUpdateDataType) SetMsg(msg *otg.StreamConfigurationUpdateDataType) StreamConfigurationUpdateDataType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamConfigurationUpdateDataType) ToProto() (*otg.StreamConfigurationUpdateDataType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamConfigurationUpdateDataType) FromProto(msg *otg.StreamConfigurationUpdateDataType) (StreamConfigurationUpdateDataType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamConfigurationUpdateDataType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamConfigurationUpdateDataType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamConfigurationUpdateDataType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamConfigurationUpdateDataType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamConfigurationUpdateDataType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamConfigurationUpdateDataType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamConfigurationUpdateDataType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamConfigurationUpdateDataType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamConfigurationUpdateDataType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamConfigurationUpdateDataType) Clone() (StreamConfigurationUpdateDataType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamConfigurationUpdateDataType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamConfigurationUpdateDataType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamConfigurationUpdateDataType) setNil() {
	obj.dataHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamConfigurationUpdateDataType is used for updating individual pieces of the stream configuration. The flags indicates which piece should be overwritten on the stream.
type StreamConfigurationUpdateDataType interface {
	Validation
	// Msg marshals StreamConfigurationUpdateDataType to protobuf object *otg.StreamConfigurationUpdateDataType
	// and doesn't set defaults
	Msg() *otg.StreamConfigurationUpdateDataType
	// SetMsg unmarshals StreamConfigurationUpdateDataType from protobuf object *otg.StreamConfigurationUpdateDataType
	// and doesn't set defaults
	SetMsg(*otg.StreamConfigurationUpdateDataType) StreamConfigurationUpdateDataType
	// ToProto marshals StreamConfigurationUpdateDataType to protobuf object *otg.StreamConfigurationUpdateDataType
	ToProto() (*otg.StreamConfigurationUpdateDataType, error)
	// ToPbText marshals StreamConfigurationUpdateDataType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamConfigurationUpdateDataType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamConfigurationUpdateDataType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamConfigurationUpdateDataType from protobuf object *otg.StreamConfigurationUpdateDataType
	FromProto(msg *otg.StreamConfigurationUpdateDataType) (StreamConfigurationUpdateDataType, error)
	// FromPbText unmarshals StreamConfigurationUpdateDataType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamConfigurationUpdateDataType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamConfigurationUpdateDataType from JSON text
	FromJson(value string) error
	// Validate validates StreamConfigurationUpdateDataType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamConfigurationUpdateDataType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// IsSetStreamControl returns bool, set in StreamConfigurationUpdateDataType.
	IsSetStreamControl() bool
	// SetIsSetStreamControl assigns bool provided by user to StreamConfigurationUpdateDataType
	SetIsSetStreamControl(value bool) StreamConfigurationUpdateDataType
	// HasIsSetStreamControl checks if IsSetStreamControl has been set in StreamConfigurationUpdateDataType
	HasIsSetStreamControl() bool
	// IsSetRateControl returns bool, set in StreamConfigurationUpdateDataType.
	IsSetRateControl() bool
	// SetIsSetRateControl assigns bool provided by user to StreamConfigurationUpdateDataType
	SetIsSetRateControl(value bool) StreamConfigurationUpdateDataType
	// HasIsSetRateControl checks if IsSetRateControl has been set in StreamConfigurationUpdateDataType
	HasIsSetRateControl() bool
	// IsSetFrameControl returns bool, set in StreamConfigurationUpdateDataType.
	IsSetFrameControl() bool
	// SetIsSetFrameControl assigns bool provided by user to StreamConfigurationUpdateDataType
	SetIsSetFrameControl(value bool) StreamConfigurationUpdateDataType
	// HasIsSetFrameControl checks if IsSetFrameControl has been set in StreamConfigurationUpdateDataType
	HasIsSetFrameControl() bool
	// IsSetInterBurstGapControl returns bool, set in StreamConfigurationUpdateDataType.
	IsSetInterBurstGapControl() bool
	// SetIsSetInterBurstGapControl assigns bool provided by user to StreamConfigurationUpdateDataType
	SetIsSetInterBurstGapControl(value bool) StreamConfigurationUpdateDataType
	// HasIsSetInterBurstGapControl checks if IsSetInterBurstGapControl has been set in StreamConfigurationUpdateDataType
	HasIsSetInterBurstGapControl() bool
	// IsSetInterStreamGapControl returns bool, set in StreamConfigurationUpdateDataType.
	IsSetInterStreamGapControl() bool
	// SetIsSetInterStreamGapControl assigns bool provided by user to StreamConfigurationUpdateDataType
	SetIsSetInterStreamGapControl(value bool) StreamConfigurationUpdateDataType
	// HasIsSetInterStreamGapControl checks if IsSetInterStreamGapControl has been set in StreamConfigurationUpdateDataType
	HasIsSetInterStreamGapControl() bool
	// IsFrameSizeIncreasing returns bool, set in StreamConfigurationUpdateDataType.
	IsFrameSizeIncreasing() bool
	// SetIsFrameSizeIncreasing assigns bool provided by user to StreamConfigurationUpdateDataType
	SetIsFrameSizeIncreasing(value bool) StreamConfigurationUpdateDataType
	// HasIsFrameSizeIncreasing checks if IsFrameSizeIncreasing has been set in StreamConfigurationUpdateDataType
	HasIsFrameSizeIncreasing() bool
	// IsSuspendingStream returns bool, set in StreamConfigurationUpdateDataType.
	IsSuspendingStream() bool
	// SetIsSuspendingStream assigns bool provided by user to StreamConfigurationUpdateDataType
	SetIsSuspendingStream(value bool) StreamConfigurationUpdateDataType
	// HasIsSuspendingStream checks if IsSuspendingStream has been set in StreamConfigurationUpdateDataType
	HasIsSuspendingStream() bool
	// IsSetMacSec returns bool, set in StreamConfigurationUpdateDataType.
	IsSetMacSec() bool
	// SetIsSetMacSec assigns bool provided by user to StreamConfigurationUpdateDataType
	SetIsSetMacSec(value bool) StreamConfigurationUpdateDataType
	// HasIsSetMacSec checks if IsSetMacSec has been set in StreamConfigurationUpdateDataType
	HasIsSetMacSec() bool
	// Data returns StreamConfigurationDataType, set in StreamConfigurationUpdateDataType.
	// StreamConfigurationDataType is tBD
	Data() StreamConfigurationDataType
	// SetData assigns StreamConfigurationDataType provided by user to StreamConfigurationUpdateDataType.
	// StreamConfigurationDataType is tBD
	SetData(value StreamConfigurationDataType) StreamConfigurationUpdateDataType
	// HasData checks if Data has been set in StreamConfigurationUpdateDataType
	HasData() bool
	setNil()
}

func (obj *streamConfigurationUpdateDataType) populateXml(xObj *Argument) error {

	if obj.HasIsSetStreamControl() {
		var value string
		if obj.IsSetStreamControl() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "issetstreamcontrol",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIsSetRateControl() {
		var value string
		if obj.IsSetRateControl() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "issetratecontrol",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIsSetFrameControl() {
		var value string
		if obj.IsSetFrameControl() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "issetframecontrol",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIsSetInterBurstGapControl() {
		var value string
		if obj.IsSetInterBurstGapControl() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "issetinterburstgapcontrol",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIsSetInterStreamGapControl() {
		var value string
		if obj.IsSetInterStreamGapControl() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "issetinterstreamgapcontrol",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIsFrameSizeIncreasing() {
		var value string
		if obj.IsFrameSizeIncreasing() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "isframesizeincreasing",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIsSuspendingStream() {
		var value string
		if obj.IsSuspendingStream() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "issuspendingstream",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIsSetMacSec() {
		var value string
		if obj.IsSetMacSec() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "issetmacsec",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamConfigurationUpdateDataType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// IsSetStreamControl returns a bool
func (obj *streamConfigurationUpdateDataType) IsSetStreamControl() bool {

	return *obj.obj.IsSetStreamControl

}

// TBD
// IsSetStreamControl returns a bool
func (obj *streamConfigurationUpdateDataType) HasIsSetStreamControl() bool {
	return obj.obj.IsSetStreamControl != nil
}

// TBD
// SetIsSetStreamControl sets the bool value in the StreamConfigurationUpdateDataType object
func (obj *streamConfigurationUpdateDataType) SetIsSetStreamControl(value bool) StreamConfigurationUpdateDataType {

	obj.obj.IsSetStreamControl = &value
	return obj
}

// TBD
// IsSetRateControl returns a bool
func (obj *streamConfigurationUpdateDataType) IsSetRateControl() bool {

	return *obj.obj.IsSetRateControl

}

// TBD
// IsSetRateControl returns a bool
func (obj *streamConfigurationUpdateDataType) HasIsSetRateControl() bool {
	return obj.obj.IsSetRateControl != nil
}

// TBD
// SetIsSetRateControl sets the bool value in the StreamConfigurationUpdateDataType object
func (obj *streamConfigurationUpdateDataType) SetIsSetRateControl(value bool) StreamConfigurationUpdateDataType {

	obj.obj.IsSetRateControl = &value
	return obj
}

// TBD
// IsSetFrameControl returns a bool
func (obj *streamConfigurationUpdateDataType) IsSetFrameControl() bool {

	return *obj.obj.IsSetFrameControl

}

// TBD
// IsSetFrameControl returns a bool
func (obj *streamConfigurationUpdateDataType) HasIsSetFrameControl() bool {
	return obj.obj.IsSetFrameControl != nil
}

// TBD
// SetIsSetFrameControl sets the bool value in the StreamConfigurationUpdateDataType object
func (obj *streamConfigurationUpdateDataType) SetIsSetFrameControl(value bool) StreamConfigurationUpdateDataType {

	obj.obj.IsSetFrameControl = &value
	return obj
}

// TBD
// IsSetInterBurstGapControl returns a bool
func (obj *streamConfigurationUpdateDataType) IsSetInterBurstGapControl() bool {

	return *obj.obj.IsSetInterBurstGapControl

}

// TBD
// IsSetInterBurstGapControl returns a bool
func (obj *streamConfigurationUpdateDataType) HasIsSetInterBurstGapControl() bool {
	return obj.obj.IsSetInterBurstGapControl != nil
}

// TBD
// SetIsSetInterBurstGapControl sets the bool value in the StreamConfigurationUpdateDataType object
func (obj *streamConfigurationUpdateDataType) SetIsSetInterBurstGapControl(value bool) StreamConfigurationUpdateDataType {

	obj.obj.IsSetInterBurstGapControl = &value
	return obj
}

// TBD
// IsSetInterStreamGapControl returns a bool
func (obj *streamConfigurationUpdateDataType) IsSetInterStreamGapControl() bool {

	return *obj.obj.IsSetInterStreamGapControl

}

// TBD
// IsSetInterStreamGapControl returns a bool
func (obj *streamConfigurationUpdateDataType) HasIsSetInterStreamGapControl() bool {
	return obj.obj.IsSetInterStreamGapControl != nil
}

// TBD
// SetIsSetInterStreamGapControl sets the bool value in the StreamConfigurationUpdateDataType object
func (obj *streamConfigurationUpdateDataType) SetIsSetInterStreamGapControl(value bool) StreamConfigurationUpdateDataType {

	obj.obj.IsSetInterStreamGapControl = &value
	return obj
}

// TBD
// IsFrameSizeIncreasing returns a bool
func (obj *streamConfigurationUpdateDataType) IsFrameSizeIncreasing() bool {

	return *obj.obj.IsFrameSizeIncreasing

}

// TBD
// IsFrameSizeIncreasing returns a bool
func (obj *streamConfigurationUpdateDataType) HasIsFrameSizeIncreasing() bool {
	return obj.obj.IsFrameSizeIncreasing != nil
}

// TBD
// SetIsFrameSizeIncreasing sets the bool value in the StreamConfigurationUpdateDataType object
func (obj *streamConfigurationUpdateDataType) SetIsFrameSizeIncreasing(value bool) StreamConfigurationUpdateDataType {

	obj.obj.IsFrameSizeIncreasing = &value
	return obj
}

// TBD
// IsSuspendingStream returns a bool
func (obj *streamConfigurationUpdateDataType) IsSuspendingStream() bool {

	return *obj.obj.IsSuspendingStream

}

// TBD
// IsSuspendingStream returns a bool
func (obj *streamConfigurationUpdateDataType) HasIsSuspendingStream() bool {
	return obj.obj.IsSuspendingStream != nil
}

// TBD
// SetIsSuspendingStream sets the bool value in the StreamConfigurationUpdateDataType object
func (obj *streamConfigurationUpdateDataType) SetIsSuspendingStream(value bool) StreamConfigurationUpdateDataType {

	obj.obj.IsSuspendingStream = &value
	return obj
}

// TBD
// IsSetMacSec returns a bool
func (obj *streamConfigurationUpdateDataType) IsSetMacSec() bool {

	return *obj.obj.IsSetMacSec

}

// TBD
// IsSetMacSec returns a bool
func (obj *streamConfigurationUpdateDataType) HasIsSetMacSec() bool {
	return obj.obj.IsSetMacSec != nil
}

// TBD
// SetIsSetMacSec sets the bool value in the StreamConfigurationUpdateDataType object
func (obj *streamConfigurationUpdateDataType) SetIsSetMacSec(value bool) StreamConfigurationUpdateDataType {

	obj.obj.IsSetMacSec = &value
	return obj
}

// TBD
// Data returns a StreamConfigurationDataType
func (obj *streamConfigurationUpdateDataType) Data() StreamConfigurationDataType {
	if obj.obj.Data == nil {
		obj.obj.Data = NewStreamConfigurationDataType().Msg()
	}
	if obj.dataHolder == nil {
		obj.dataHolder = &streamConfigurationDataType{obj: obj.obj.Data}
	}
	return obj.dataHolder
}

// TBD
// Data returns a StreamConfigurationDataType
func (obj *streamConfigurationUpdateDataType) HasData() bool {
	return obj.obj.Data != nil
}

// TBD
// SetData sets the StreamConfigurationDataType value in the StreamConfigurationUpdateDataType object
func (obj *streamConfigurationUpdateDataType) SetData(value StreamConfigurationDataType) StreamConfigurationUpdateDataType {

	obj.dataHolder = nil
	obj.obj.Data = value.Msg()

	return obj
}

func (obj *streamConfigurationUpdateDataType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Data != nil {

		obj.Data().validateObj(vObj, set_default)
	}

}

func (obj *streamConfigurationUpdateDataType) setDefault() {

}

// ***** StreamBackgroundDataSettingType *****
type streamBackgroundDataSettingType struct {
	validation
	obj                  *otg.StreamBackgroundDataSettingType
	streamIdHolder       IdTypeStreamId
	backgroundDataHolder StreamBackgroundDataType
}

func NewStreamBackgroundDataSettingType() StreamBackgroundDataSettingType {
	obj := streamBackgroundDataSettingType{obj: &otg.StreamBackgroundDataSettingType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamBackgroundDataSettingType) Msg() *otg.StreamBackgroundDataSettingType {
	return obj.obj
}

func (obj *streamBackgroundDataSettingType) SetMsg(msg *otg.StreamBackgroundDataSettingType) StreamBackgroundDataSettingType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamBackgroundDataSettingType) ToProto() (*otg.StreamBackgroundDataSettingType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamBackgroundDataSettingType) FromProto(msg *otg.StreamBackgroundDataSettingType) (StreamBackgroundDataSettingType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamBackgroundDataSettingType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamBackgroundDataSettingType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamBackgroundDataSettingType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamBackgroundDataSettingType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamBackgroundDataSettingType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamBackgroundDataSettingType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamBackgroundDataSettingType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamBackgroundDataSettingType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamBackgroundDataSettingType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamBackgroundDataSettingType) Clone() (StreamBackgroundDataSettingType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamBackgroundDataSettingType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamBackgroundDataSettingType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamBackgroundDataSettingType) setNil() {
	obj.streamIdHolder = nil
	obj.backgroundDataHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamBackgroundDataSettingType is tBD
type StreamBackgroundDataSettingType interface {
	Validation
	// Msg marshals StreamBackgroundDataSettingType to protobuf object *otg.StreamBackgroundDataSettingType
	// and doesn't set defaults
	Msg() *otg.StreamBackgroundDataSettingType
	// SetMsg unmarshals StreamBackgroundDataSettingType from protobuf object *otg.StreamBackgroundDataSettingType
	// and doesn't set defaults
	SetMsg(*otg.StreamBackgroundDataSettingType) StreamBackgroundDataSettingType
	// ToProto marshals StreamBackgroundDataSettingType to protobuf object *otg.StreamBackgroundDataSettingType
	ToProto() (*otg.StreamBackgroundDataSettingType, error)
	// ToPbText marshals StreamBackgroundDataSettingType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamBackgroundDataSettingType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamBackgroundDataSettingType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamBackgroundDataSettingType from protobuf object *otg.StreamBackgroundDataSettingType
	FromProto(msg *otg.StreamBackgroundDataSettingType) (StreamBackgroundDataSettingType, error)
	// FromPbText unmarshals StreamBackgroundDataSettingType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamBackgroundDataSettingType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamBackgroundDataSettingType from JSON text
	FromJson(value string) error
	// Validate validates StreamBackgroundDataSettingType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamBackgroundDataSettingType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// StreamId returns IdTypeStreamId, set in StreamBackgroundDataSettingType.
	// IdTypeStreamId is tBD
	StreamId() IdTypeStreamId
	// SetStreamId assigns IdTypeStreamId provided by user to StreamBackgroundDataSettingType.
	// IdTypeStreamId is tBD
	SetStreamId(value IdTypeStreamId) StreamBackgroundDataSettingType
	// HasStreamId checks if StreamId has been set in StreamBackgroundDataSettingType
	HasStreamId() bool
	// BackgroundData returns StreamBackgroundDataType, set in StreamBackgroundDataSettingType.
	// StreamBackgroundDataType is tBD
	BackgroundData() StreamBackgroundDataType
	// SetBackgroundData assigns StreamBackgroundDataType provided by user to StreamBackgroundDataSettingType.
	// StreamBackgroundDataType is tBD
	SetBackgroundData(value StreamBackgroundDataType) StreamBackgroundDataSettingType
	// HasBackgroundData checks if BackgroundData has been set in StreamBackgroundDataSettingType
	HasBackgroundData() bool
	setNil()
}

func (obj *streamBackgroundDataSettingType) populateXml(xObj *Argument) error {

	return nil
}

func (obj *streamBackgroundDataSettingType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// StreamId returns a IdTypeStreamId
func (obj *streamBackgroundDataSettingType) StreamId() IdTypeStreamId {
	if obj.obj.StreamId == nil {
		obj.obj.StreamId = NewIdTypeStreamId().Msg()
	}
	if obj.streamIdHolder == nil {
		obj.streamIdHolder = &idTypeStreamId{obj: obj.obj.StreamId}
	}
	return obj.streamIdHolder
}

// TBD
// StreamId returns a IdTypeStreamId
func (obj *streamBackgroundDataSettingType) HasStreamId() bool {
	return obj.obj.StreamId != nil
}

// TBD
// SetStreamId sets the IdTypeStreamId value in the StreamBackgroundDataSettingType object
func (obj *streamBackgroundDataSettingType) SetStreamId(value IdTypeStreamId) StreamBackgroundDataSettingType {

	obj.streamIdHolder = nil
	obj.obj.StreamId = value.Msg()

	return obj
}

// TBD
// BackgroundData returns a StreamBackgroundDataType
func (obj *streamBackgroundDataSettingType) BackgroundData() StreamBackgroundDataType {
	if obj.obj.BackgroundData == nil {
		obj.obj.BackgroundData = NewStreamBackgroundDataType().Msg()
	}
	if obj.backgroundDataHolder == nil {
		obj.backgroundDataHolder = &streamBackgroundDataType{obj: obj.obj.BackgroundData}
	}
	return obj.backgroundDataHolder
}

// TBD
// BackgroundData returns a StreamBackgroundDataType
func (obj *streamBackgroundDataSettingType) HasBackgroundData() bool {
	return obj.obj.BackgroundData != nil
}

// TBD
// SetBackgroundData sets the StreamBackgroundDataType value in the StreamBackgroundDataSettingType object
func (obj *streamBackgroundDataSettingType) SetBackgroundData(value StreamBackgroundDataType) StreamBackgroundDataSettingType {

	obj.backgroundDataHolder = nil
	obj.obj.BackgroundData = value.Msg()

	return obj
}

func (obj *streamBackgroundDataSettingType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.StreamId != nil {

		obj.StreamId().validateObj(vObj, set_default)
	}

	if obj.obj.BackgroundData != nil {

		obj.BackgroundData().validateObj(vObj, set_default)
	}

}

func (obj *streamBackgroundDataSettingType) setDefault() {

}

// ***** StreamStreamRangeListSettingType *****
type streamStreamRangeListSettingType struct {
	validation
	obj             *otg.StreamStreamRangeListSettingType
	streamIdHolder  IdTypeStreamId
	rangeListHolder UdfRangeListType
}

func NewStreamStreamRangeListSettingType() StreamStreamRangeListSettingType {
	obj := streamStreamRangeListSettingType{obj: &otg.StreamStreamRangeListSettingType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamStreamRangeListSettingType) Msg() *otg.StreamStreamRangeListSettingType {
	return obj.obj
}

func (obj *streamStreamRangeListSettingType) SetMsg(msg *otg.StreamStreamRangeListSettingType) StreamStreamRangeListSettingType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamStreamRangeListSettingType) ToProto() (*otg.StreamStreamRangeListSettingType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamStreamRangeListSettingType) FromProto(msg *otg.StreamStreamRangeListSettingType) (StreamStreamRangeListSettingType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamStreamRangeListSettingType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamStreamRangeListSettingType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamStreamRangeListSettingType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamStreamRangeListSettingType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamStreamRangeListSettingType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamStreamRangeListSettingType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamStreamRangeListSettingType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamStreamRangeListSettingType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamStreamRangeListSettingType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamStreamRangeListSettingType) Clone() (StreamStreamRangeListSettingType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamStreamRangeListSettingType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamStreamRangeListSettingType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamStreamRangeListSettingType) setNil() {
	obj.streamIdHolder = nil
	obj.rangeListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamStreamRangeListSettingType is tBD
type StreamStreamRangeListSettingType interface {
	Validation
	// Msg marshals StreamStreamRangeListSettingType to protobuf object *otg.StreamStreamRangeListSettingType
	// and doesn't set defaults
	Msg() *otg.StreamStreamRangeListSettingType
	// SetMsg unmarshals StreamStreamRangeListSettingType from protobuf object *otg.StreamStreamRangeListSettingType
	// and doesn't set defaults
	SetMsg(*otg.StreamStreamRangeListSettingType) StreamStreamRangeListSettingType
	// ToProto marshals StreamStreamRangeListSettingType to protobuf object *otg.StreamStreamRangeListSettingType
	ToProto() (*otg.StreamStreamRangeListSettingType, error)
	// ToPbText marshals StreamStreamRangeListSettingType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamStreamRangeListSettingType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamStreamRangeListSettingType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamStreamRangeListSettingType from protobuf object *otg.StreamStreamRangeListSettingType
	FromProto(msg *otg.StreamStreamRangeListSettingType) (StreamStreamRangeListSettingType, error)
	// FromPbText unmarshals StreamStreamRangeListSettingType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamStreamRangeListSettingType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamStreamRangeListSettingType from JSON text
	FromJson(value string) error
	// Validate validates StreamStreamRangeListSettingType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamStreamRangeListSettingType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// StreamId returns IdTypeStreamId, set in StreamStreamRangeListSettingType.
	// IdTypeStreamId is tBD
	StreamId() IdTypeStreamId
	// SetStreamId assigns IdTypeStreamId provided by user to StreamStreamRangeListSettingType.
	// IdTypeStreamId is tBD
	SetStreamId(value IdTypeStreamId) StreamStreamRangeListSettingType
	// HasStreamId checks if StreamId has been set in StreamStreamRangeListSettingType
	HasStreamId() bool
	// RangeList returns UdfRangeListType, set in StreamStreamRangeListSettingType.
	// UdfRangeListType is tBD
	RangeList() UdfRangeListType
	// SetRangeList assigns UdfRangeListType provided by user to StreamStreamRangeListSettingType.
	// UdfRangeListType is tBD
	SetRangeList(value UdfRangeListType) StreamStreamRangeListSettingType
	// HasRangeList checks if RangeList has been set in StreamStreamRangeListSettingType
	HasRangeList() bool
	setNil()
}

func (obj *streamStreamRangeListSettingType) populateXml(xObj *Argument) error {

	return nil
}

func (obj *streamStreamRangeListSettingType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// StreamId returns a IdTypeStreamId
func (obj *streamStreamRangeListSettingType) StreamId() IdTypeStreamId {
	if obj.obj.StreamId == nil {
		obj.obj.StreamId = NewIdTypeStreamId().Msg()
	}
	if obj.streamIdHolder == nil {
		obj.streamIdHolder = &idTypeStreamId{obj: obj.obj.StreamId}
	}
	return obj.streamIdHolder
}

// TBD
// StreamId returns a IdTypeStreamId
func (obj *streamStreamRangeListSettingType) HasStreamId() bool {
	return obj.obj.StreamId != nil
}

// TBD
// SetStreamId sets the IdTypeStreamId value in the StreamStreamRangeListSettingType object
func (obj *streamStreamRangeListSettingType) SetStreamId(value IdTypeStreamId) StreamStreamRangeListSettingType {

	obj.streamIdHolder = nil
	obj.obj.StreamId = value.Msg()

	return obj
}

// TBD
// RangeList returns a UdfRangeListType
func (obj *streamStreamRangeListSettingType) RangeList() UdfRangeListType {
	if obj.obj.RangeList == nil {
		obj.obj.RangeList = NewUdfRangeListType().Msg()
	}
	if obj.rangeListHolder == nil {
		obj.rangeListHolder = &udfRangeListType{obj: obj.obj.RangeList}
	}
	return obj.rangeListHolder
}

// TBD
// RangeList returns a UdfRangeListType
func (obj *streamStreamRangeListSettingType) HasRangeList() bool {
	return obj.obj.RangeList != nil
}

// TBD
// SetRangeList sets the UdfRangeListType value in the StreamStreamRangeListSettingType object
func (obj *streamStreamRangeListSettingType) SetRangeList(value UdfRangeListType) StreamStreamRangeListSettingType {

	obj.rangeListHolder = nil
	obj.obj.RangeList = value.Msg()

	return obj
}

func (obj *streamStreamRangeListSettingType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.StreamId != nil {

		obj.StreamId().validateObj(vObj, set_default)
	}

	if obj.obj.RangeList != nil {

		obj.RangeList().validateObj(vObj, set_default)
	}

}

func (obj *streamStreamRangeListSettingType) setDefault() {

}

// ***** TableUdfColumnMVDataList *****
type tableUdfColumnMVDataList struct {
	validation
	obj                    *otg.TableUdfColumnMVDataList
	columnMvDataListHolder TableUdfColumnMVDataListTableUdfColumnMVDataTypeIter
}

func NewTableUdfColumnMVDataList() TableUdfColumnMVDataList {
	obj := tableUdfColumnMVDataList{obj: &otg.TableUdfColumnMVDataList{}}
	obj.setDefault()
	return &obj
}

func (obj *tableUdfColumnMVDataList) Msg() *otg.TableUdfColumnMVDataList {
	return obj.obj
}

func (obj *tableUdfColumnMVDataList) SetMsg(msg *otg.TableUdfColumnMVDataList) TableUdfColumnMVDataList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *tableUdfColumnMVDataList) ToProto() (*otg.TableUdfColumnMVDataList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *tableUdfColumnMVDataList) FromProto(msg *otg.TableUdfColumnMVDataList) (TableUdfColumnMVDataList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *tableUdfColumnMVDataList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *tableUdfColumnMVDataList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *tableUdfColumnMVDataList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *tableUdfColumnMVDataList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *tableUdfColumnMVDataList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *tableUdfColumnMVDataList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *tableUdfColumnMVDataList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *tableUdfColumnMVDataList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *tableUdfColumnMVDataList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *tableUdfColumnMVDataList) Clone() (TableUdfColumnMVDataList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewTableUdfColumnMVDataList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *tableUdfColumnMVDataList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *tableUdfColumnMVDataList) setNil() {
	obj.columnMvDataListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// TableUdfColumnMVDataList is tBD
type TableUdfColumnMVDataList interface {
	Validation
	// Msg marshals TableUdfColumnMVDataList to protobuf object *otg.TableUdfColumnMVDataList
	// and doesn't set defaults
	Msg() *otg.TableUdfColumnMVDataList
	// SetMsg unmarshals TableUdfColumnMVDataList from protobuf object *otg.TableUdfColumnMVDataList
	// and doesn't set defaults
	SetMsg(*otg.TableUdfColumnMVDataList) TableUdfColumnMVDataList
	// ToProto marshals TableUdfColumnMVDataList to protobuf object *otg.TableUdfColumnMVDataList
	ToProto() (*otg.TableUdfColumnMVDataList, error)
	// ToPbText marshals TableUdfColumnMVDataList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals TableUdfColumnMVDataList to YAML text
	ToYaml() (string, error)
	// ToJson marshals TableUdfColumnMVDataList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals TableUdfColumnMVDataList from protobuf object *otg.TableUdfColumnMVDataList
	FromProto(msg *otg.TableUdfColumnMVDataList) (TableUdfColumnMVDataList, error)
	// FromPbText unmarshals TableUdfColumnMVDataList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals TableUdfColumnMVDataList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals TableUdfColumnMVDataList from JSON text
	FromJson(value string) error
	// Validate validates TableUdfColumnMVDataList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (TableUdfColumnMVDataList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ColumnMvDataList returns TableUdfColumnMVDataListTableUdfColumnMVDataTypeIterIter, set in TableUdfColumnMVDataList
	ColumnMvDataList() TableUdfColumnMVDataListTableUdfColumnMVDataTypeIter
	setNil()
}

func (obj *tableUdfColumnMVDataList) populateXml(xObj *Argument) error {

	if len(obj.ColumnMvDataList().Items()) != 0 {
		for _, item := range obj.ColumnMvDataList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *tableUdfColumnMVDataList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// ColumnMvDataList returns a []TableUdfColumnMVDataType
func (obj *tableUdfColumnMVDataList) ColumnMvDataList() TableUdfColumnMVDataListTableUdfColumnMVDataTypeIter {
	if len(obj.obj.ColumnMvDataList) == 0 {
		obj.obj.ColumnMvDataList = []*otg.TableUdfColumnMVDataType{}
	}
	if obj.columnMvDataListHolder == nil {
		obj.columnMvDataListHolder = newTableUdfColumnMVDataListTableUdfColumnMVDataTypeIter(&obj.obj.ColumnMvDataList).setMsg(obj)
	}
	return obj.columnMvDataListHolder
}

type tableUdfColumnMVDataListTableUdfColumnMVDataTypeIter struct {
	obj                           *tableUdfColumnMVDataList
	tableUdfColumnMVDataTypeSlice []TableUdfColumnMVDataType
	fieldPtr                      *[]*otg.TableUdfColumnMVDataType
}

func newTableUdfColumnMVDataListTableUdfColumnMVDataTypeIter(ptr *[]*otg.TableUdfColumnMVDataType) TableUdfColumnMVDataListTableUdfColumnMVDataTypeIter {
	return &tableUdfColumnMVDataListTableUdfColumnMVDataTypeIter{fieldPtr: ptr}
}

type TableUdfColumnMVDataListTableUdfColumnMVDataTypeIter interface {
	setMsg(*tableUdfColumnMVDataList) TableUdfColumnMVDataListTableUdfColumnMVDataTypeIter
	Items() []TableUdfColumnMVDataType
	Add() TableUdfColumnMVDataType
	Append(items ...TableUdfColumnMVDataType) TableUdfColumnMVDataListTableUdfColumnMVDataTypeIter
	Set(index int, newObj TableUdfColumnMVDataType) TableUdfColumnMVDataListTableUdfColumnMVDataTypeIter
	Clear() TableUdfColumnMVDataListTableUdfColumnMVDataTypeIter
	clearHolderSlice() TableUdfColumnMVDataListTableUdfColumnMVDataTypeIter
	appendHolderSlice(item TableUdfColumnMVDataType) TableUdfColumnMVDataListTableUdfColumnMVDataTypeIter
}

func (obj *tableUdfColumnMVDataListTableUdfColumnMVDataTypeIter) setMsg(msg *tableUdfColumnMVDataList) TableUdfColumnMVDataListTableUdfColumnMVDataTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&tableUdfColumnMVDataType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *tableUdfColumnMVDataListTableUdfColumnMVDataTypeIter) Items() []TableUdfColumnMVDataType {
	return obj.tableUdfColumnMVDataTypeSlice
}

func (obj *tableUdfColumnMVDataListTableUdfColumnMVDataTypeIter) Add() TableUdfColumnMVDataType {
	newObj := &otg.TableUdfColumnMVDataType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &tableUdfColumnMVDataType{obj: newObj}
	newLibObj.setDefault()
	obj.tableUdfColumnMVDataTypeSlice = append(obj.tableUdfColumnMVDataTypeSlice, newLibObj)
	return newLibObj
}

func (obj *tableUdfColumnMVDataListTableUdfColumnMVDataTypeIter) Append(items ...TableUdfColumnMVDataType) TableUdfColumnMVDataListTableUdfColumnMVDataTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.tableUdfColumnMVDataTypeSlice = append(obj.tableUdfColumnMVDataTypeSlice, item)
	}
	return obj
}

func (obj *tableUdfColumnMVDataListTableUdfColumnMVDataTypeIter) Set(index int, newObj TableUdfColumnMVDataType) TableUdfColumnMVDataListTableUdfColumnMVDataTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.tableUdfColumnMVDataTypeSlice[index] = newObj
	return obj
}
func (obj *tableUdfColumnMVDataListTableUdfColumnMVDataTypeIter) Clear() TableUdfColumnMVDataListTableUdfColumnMVDataTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.TableUdfColumnMVDataType{}
		obj.tableUdfColumnMVDataTypeSlice = []TableUdfColumnMVDataType{}
	}
	return obj
}
func (obj *tableUdfColumnMVDataListTableUdfColumnMVDataTypeIter) clearHolderSlice() TableUdfColumnMVDataListTableUdfColumnMVDataTypeIter {
	if len(obj.tableUdfColumnMVDataTypeSlice) > 0 {
		obj.tableUdfColumnMVDataTypeSlice = []TableUdfColumnMVDataType{}
	}
	return obj
}
func (obj *tableUdfColumnMVDataListTableUdfColumnMVDataTypeIter) appendHolderSlice(item TableUdfColumnMVDataType) TableUdfColumnMVDataListTableUdfColumnMVDataTypeIter {
	obj.tableUdfColumnMVDataTypeSlice = append(obj.tableUdfColumnMVDataTypeSlice, item)
	return obj
}

func (obj *tableUdfColumnMVDataList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.ColumnMvDataList) != 0 {

		if set_default {
			obj.ColumnMvDataList().clearHolderSlice()
			for _, item := range obj.obj.ColumnMvDataList {
				obj.ColumnMvDataList().appendHolderSlice(&tableUdfColumnMVDataType{obj: item})
			}
		}
		for _, item := range obj.ColumnMvDataList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *tableUdfColumnMVDataList) setDefault() {

}

// ***** UdfKillBitList *****
type udfKillBitList struct {
	validation
	obj               *otg.UdfKillBitList
	killBitListHolder UdfKillBitListUdfKillBitListTypeIter
}

func NewUdfKillBitList() UdfKillBitList {
	obj := udfKillBitList{obj: &otg.UdfKillBitList{}}
	obj.setDefault()
	return &obj
}

func (obj *udfKillBitList) Msg() *otg.UdfKillBitList {
	return obj.obj
}

func (obj *udfKillBitList) SetMsg(msg *otg.UdfKillBitList) UdfKillBitList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *udfKillBitList) ToProto() (*otg.UdfKillBitList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *udfKillBitList) FromProto(msg *otg.UdfKillBitList) (UdfKillBitList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *udfKillBitList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *udfKillBitList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *udfKillBitList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfKillBitList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *udfKillBitList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfKillBitList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *udfKillBitList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *udfKillBitList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *udfKillBitList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *udfKillBitList) Clone() (UdfKillBitList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewUdfKillBitList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *udfKillBitList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *udfKillBitList) setNil() {
	obj.killBitListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// UdfKillBitList is tBD
type UdfKillBitList interface {
	Validation
	// Msg marshals UdfKillBitList to protobuf object *otg.UdfKillBitList
	// and doesn't set defaults
	Msg() *otg.UdfKillBitList
	// SetMsg unmarshals UdfKillBitList from protobuf object *otg.UdfKillBitList
	// and doesn't set defaults
	SetMsg(*otg.UdfKillBitList) UdfKillBitList
	// ToProto marshals UdfKillBitList to protobuf object *otg.UdfKillBitList
	ToProto() (*otg.UdfKillBitList, error)
	// ToPbText marshals UdfKillBitList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals UdfKillBitList to YAML text
	ToYaml() (string, error)
	// ToJson marshals UdfKillBitList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals UdfKillBitList from protobuf object *otg.UdfKillBitList
	FromProto(msg *otg.UdfKillBitList) (UdfKillBitList, error)
	// FromPbText unmarshals UdfKillBitList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals UdfKillBitList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals UdfKillBitList from JSON text
	FromJson(value string) error
	// Validate validates UdfKillBitList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (UdfKillBitList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// KillBitList returns UdfKillBitListUdfKillBitListTypeIterIter, set in UdfKillBitList
	KillBitList() UdfKillBitListUdfKillBitListTypeIter
	setNil()
}

func (obj *udfKillBitList) populateXml(xObj *Argument) error {

	if len(obj.KillBitList().Items()) != 0 {
		for _, item := range obj.KillBitList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *udfKillBitList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// KillBitList returns a []UdfKillBitListType
func (obj *udfKillBitList) KillBitList() UdfKillBitListUdfKillBitListTypeIter {
	if len(obj.obj.KillBitList) == 0 {
		obj.obj.KillBitList = []*otg.UdfKillBitListType{}
	}
	if obj.killBitListHolder == nil {
		obj.killBitListHolder = newUdfKillBitListUdfKillBitListTypeIter(&obj.obj.KillBitList).setMsg(obj)
	}
	return obj.killBitListHolder
}

type udfKillBitListUdfKillBitListTypeIter struct {
	obj                     *udfKillBitList
	udfKillBitListTypeSlice []UdfKillBitListType
	fieldPtr                *[]*otg.UdfKillBitListType
}

func newUdfKillBitListUdfKillBitListTypeIter(ptr *[]*otg.UdfKillBitListType) UdfKillBitListUdfKillBitListTypeIter {
	return &udfKillBitListUdfKillBitListTypeIter{fieldPtr: ptr}
}

type UdfKillBitListUdfKillBitListTypeIter interface {
	setMsg(*udfKillBitList) UdfKillBitListUdfKillBitListTypeIter
	Items() []UdfKillBitListType
	Add() UdfKillBitListType
	Append(items ...UdfKillBitListType) UdfKillBitListUdfKillBitListTypeIter
	Set(index int, newObj UdfKillBitListType) UdfKillBitListUdfKillBitListTypeIter
	Clear() UdfKillBitListUdfKillBitListTypeIter
	clearHolderSlice() UdfKillBitListUdfKillBitListTypeIter
	appendHolderSlice(item UdfKillBitListType) UdfKillBitListUdfKillBitListTypeIter
}

func (obj *udfKillBitListUdfKillBitListTypeIter) setMsg(msg *udfKillBitList) UdfKillBitListUdfKillBitListTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&udfKillBitListType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *udfKillBitListUdfKillBitListTypeIter) Items() []UdfKillBitListType {
	return obj.udfKillBitListTypeSlice
}

func (obj *udfKillBitListUdfKillBitListTypeIter) Add() UdfKillBitListType {
	newObj := &otg.UdfKillBitListType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &udfKillBitListType{obj: newObj}
	newLibObj.setDefault()
	obj.udfKillBitListTypeSlice = append(obj.udfKillBitListTypeSlice, newLibObj)
	return newLibObj
}

func (obj *udfKillBitListUdfKillBitListTypeIter) Append(items ...UdfKillBitListType) UdfKillBitListUdfKillBitListTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.udfKillBitListTypeSlice = append(obj.udfKillBitListTypeSlice, item)
	}
	return obj
}

func (obj *udfKillBitListUdfKillBitListTypeIter) Set(index int, newObj UdfKillBitListType) UdfKillBitListUdfKillBitListTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.udfKillBitListTypeSlice[index] = newObj
	return obj
}
func (obj *udfKillBitListUdfKillBitListTypeIter) Clear() UdfKillBitListUdfKillBitListTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.UdfKillBitListType{}
		obj.udfKillBitListTypeSlice = []UdfKillBitListType{}
	}
	return obj
}
func (obj *udfKillBitListUdfKillBitListTypeIter) clearHolderSlice() UdfKillBitListUdfKillBitListTypeIter {
	if len(obj.udfKillBitListTypeSlice) > 0 {
		obj.udfKillBitListTypeSlice = []UdfKillBitListType{}
	}
	return obj
}
func (obj *udfKillBitListUdfKillBitListTypeIter) appendHolderSlice(item UdfKillBitListType) UdfKillBitListUdfKillBitListTypeIter {
	obj.udfKillBitListTypeSlice = append(obj.udfKillBitListTypeSlice, item)
	return obj
}

func (obj *udfKillBitList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.KillBitList) != 0 {

		if set_default {
			obj.KillBitList().clearHolderSlice()
			for _, item := range obj.obj.KillBitList {
				obj.KillBitList().appendHolderSlice(&udfKillBitListType{obj: item})
			}
		}
		for _, item := range obj.KillBitList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *udfKillBitList) setDefault() {

}

// ***** UdfValueList *****
type udfValueList struct {
	validation
	obj             *otg.UdfValueList
	valueListHolder UdfValueListUdfValueListTypeIter
}

func NewUdfValueList() UdfValueList {
	obj := udfValueList{obj: &otg.UdfValueList{}}
	obj.setDefault()
	return &obj
}

func (obj *udfValueList) Msg() *otg.UdfValueList {
	return obj.obj
}

func (obj *udfValueList) SetMsg(msg *otg.UdfValueList) UdfValueList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *udfValueList) ToProto() (*otg.UdfValueList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *udfValueList) FromProto(msg *otg.UdfValueList) (UdfValueList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *udfValueList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *udfValueList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *udfValueList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfValueList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *udfValueList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfValueList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *udfValueList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *udfValueList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *udfValueList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *udfValueList) Clone() (UdfValueList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewUdfValueList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *udfValueList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *udfValueList) setNil() {
	obj.valueListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// UdfValueList is tBD
type UdfValueList interface {
	Validation
	// Msg marshals UdfValueList to protobuf object *otg.UdfValueList
	// and doesn't set defaults
	Msg() *otg.UdfValueList
	// SetMsg unmarshals UdfValueList from protobuf object *otg.UdfValueList
	// and doesn't set defaults
	SetMsg(*otg.UdfValueList) UdfValueList
	// ToProto marshals UdfValueList to protobuf object *otg.UdfValueList
	ToProto() (*otg.UdfValueList, error)
	// ToPbText marshals UdfValueList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals UdfValueList to YAML text
	ToYaml() (string, error)
	// ToJson marshals UdfValueList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals UdfValueList from protobuf object *otg.UdfValueList
	FromProto(msg *otg.UdfValueList) (UdfValueList, error)
	// FromPbText unmarshals UdfValueList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals UdfValueList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals UdfValueList from JSON text
	FromJson(value string) error
	// Validate validates UdfValueList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (UdfValueList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ValueList returns UdfValueListUdfValueListTypeIterIter, set in UdfValueList
	ValueList() UdfValueListUdfValueListTypeIter
	setNil()
}

func (obj *udfValueList) populateXml(xObj *Argument) error {

	if len(obj.ValueList().Items()) != 0 {
		for _, item := range obj.ValueList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *udfValueList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// ValueList returns a []UdfValueListType
func (obj *udfValueList) ValueList() UdfValueListUdfValueListTypeIter {
	if len(obj.obj.ValueList) == 0 {
		obj.obj.ValueList = []*otg.UdfValueListType{}
	}
	if obj.valueListHolder == nil {
		obj.valueListHolder = newUdfValueListUdfValueListTypeIter(&obj.obj.ValueList).setMsg(obj)
	}
	return obj.valueListHolder
}

type udfValueListUdfValueListTypeIter struct {
	obj                   *udfValueList
	udfValueListTypeSlice []UdfValueListType
	fieldPtr              *[]*otg.UdfValueListType
}

func newUdfValueListUdfValueListTypeIter(ptr *[]*otg.UdfValueListType) UdfValueListUdfValueListTypeIter {
	return &udfValueListUdfValueListTypeIter{fieldPtr: ptr}
}

type UdfValueListUdfValueListTypeIter interface {
	setMsg(*udfValueList) UdfValueListUdfValueListTypeIter
	Items() []UdfValueListType
	Add() UdfValueListType
	Append(items ...UdfValueListType) UdfValueListUdfValueListTypeIter
	Set(index int, newObj UdfValueListType) UdfValueListUdfValueListTypeIter
	Clear() UdfValueListUdfValueListTypeIter
	clearHolderSlice() UdfValueListUdfValueListTypeIter
	appendHolderSlice(item UdfValueListType) UdfValueListUdfValueListTypeIter
}

func (obj *udfValueListUdfValueListTypeIter) setMsg(msg *udfValueList) UdfValueListUdfValueListTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&udfValueListType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *udfValueListUdfValueListTypeIter) Items() []UdfValueListType {
	return obj.udfValueListTypeSlice
}

func (obj *udfValueListUdfValueListTypeIter) Add() UdfValueListType {
	newObj := &otg.UdfValueListType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &udfValueListType{obj: newObj}
	newLibObj.setDefault()
	obj.udfValueListTypeSlice = append(obj.udfValueListTypeSlice, newLibObj)
	return newLibObj
}

func (obj *udfValueListUdfValueListTypeIter) Append(items ...UdfValueListType) UdfValueListUdfValueListTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.udfValueListTypeSlice = append(obj.udfValueListTypeSlice, item)
	}
	return obj
}

func (obj *udfValueListUdfValueListTypeIter) Set(index int, newObj UdfValueListType) UdfValueListUdfValueListTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.udfValueListTypeSlice[index] = newObj
	return obj
}
func (obj *udfValueListUdfValueListTypeIter) Clear() UdfValueListUdfValueListTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.UdfValueListType{}
		obj.udfValueListTypeSlice = []UdfValueListType{}
	}
	return obj
}
func (obj *udfValueListUdfValueListTypeIter) clearHolderSlice() UdfValueListUdfValueListTypeIter {
	if len(obj.udfValueListTypeSlice) > 0 {
		obj.udfValueListTypeSlice = []UdfValueListType{}
	}
	return obj
}
func (obj *udfValueListUdfValueListTypeIter) appendHolderSlice(item UdfValueListType) UdfValueListUdfValueListTypeIter {
	obj.udfValueListTypeSlice = append(obj.udfValueListTypeSlice, item)
	return obj
}

func (obj *udfValueList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.ValueList) != 0 {

		if set_default {
			obj.ValueList().clearHolderSlice()
			for _, item := range obj.obj.ValueList {
				obj.ValueList().appendHolderSlice(&udfValueListType{obj: item})
			}
		}
		for _, item := range obj.ValueList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *udfValueList) setDefault() {

}

// ***** MacSecSplitMGIDConfigurationType *****
type macSecSplitMGIDConfigurationType struct {
	validation
	obj *otg.MacSecSplitMGIDConfigurationType
}

func NewMacSecSplitMGIDConfigurationType() MacSecSplitMGIDConfigurationType {
	obj := macSecSplitMGIDConfigurationType{obj: &otg.MacSecSplitMGIDConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *macSecSplitMGIDConfigurationType) Msg() *otg.MacSecSplitMGIDConfigurationType {
	return obj.obj
}

func (obj *macSecSplitMGIDConfigurationType) SetMsg(msg *otg.MacSecSplitMGIDConfigurationType) MacSecSplitMGIDConfigurationType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *macSecSplitMGIDConfigurationType) ToProto() (*otg.MacSecSplitMGIDConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *macSecSplitMGIDConfigurationType) FromProto(msg *otg.MacSecSplitMGIDConfigurationType) (MacSecSplitMGIDConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *macSecSplitMGIDConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *macSecSplitMGIDConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *macSecSplitMGIDConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecSplitMGIDConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *macSecSplitMGIDConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecSplitMGIDConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *macSecSplitMGIDConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *macSecSplitMGIDConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *macSecSplitMGIDConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *macSecSplitMGIDConfigurationType) Clone() (MacSecSplitMGIDConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewMacSecSplitMGIDConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *macSecSplitMGIDConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// MacSecSplitMGIDConfigurationType is tBD
type MacSecSplitMGIDConfigurationType interface {
	Validation
	// Msg marshals MacSecSplitMGIDConfigurationType to protobuf object *otg.MacSecSplitMGIDConfigurationType
	// and doesn't set defaults
	Msg() *otg.MacSecSplitMGIDConfigurationType
	// SetMsg unmarshals MacSecSplitMGIDConfigurationType from protobuf object *otg.MacSecSplitMGIDConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.MacSecSplitMGIDConfigurationType) MacSecSplitMGIDConfigurationType
	// ToProto marshals MacSecSplitMGIDConfigurationType to protobuf object *otg.MacSecSplitMGIDConfigurationType
	ToProto() (*otg.MacSecSplitMGIDConfigurationType, error)
	// ToPbText marshals MacSecSplitMGIDConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals MacSecSplitMGIDConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals MacSecSplitMGIDConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals MacSecSplitMGIDConfigurationType from protobuf object *otg.MacSecSplitMGIDConfigurationType
	FromProto(msg *otg.MacSecSplitMGIDConfigurationType) (MacSecSplitMGIDConfigurationType, error)
	// FromPbText unmarshals MacSecSplitMGIDConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals MacSecSplitMGIDConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals MacSecSplitMGIDConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates MacSecSplitMGIDConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (MacSecSplitMGIDConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// DevIdOffset returns int32, set in MacSecSplitMGIDConfigurationType.
	DevIdOffset() int32
	// SetDevIdOffset assigns int32 provided by user to MacSecSplitMGIDConfigurationType
	SetDevIdOffset(value int32) MacSecSplitMGIDConfigurationType
	// HasDevIdOffset checks if DevIdOffset has been set in MacSecSplitMGIDConfigurationType
	HasDevIdOffset() bool
	// DevIdBitMask returns string, set in MacSecSplitMGIDConfigurationType.
	DevIdBitMask() string
	// SetDevIdBitMask assigns string provided by user to MacSecSplitMGIDConfigurationType
	SetDevIdBitMask(value string) MacSecSplitMGIDConfigurationType
	// HasDevIdBitMask checks if DevIdBitMask has been set in MacSecSplitMGIDConfigurationType
	HasDevIdBitMask() bool
	// CaIdOffset returns int32, set in MacSecSplitMGIDConfigurationType.
	CaIdOffset() int32
	// SetCaIdOffset assigns int32 provided by user to MacSecSplitMGIDConfigurationType
	SetCaIdOffset(value int32) MacSecSplitMGIDConfigurationType
	// HasCaIdOffset checks if CaIdOffset has been set in MacSecSplitMGIDConfigurationType
	HasCaIdOffset() bool
	// CaIdBitMask returns string, set in MacSecSplitMGIDConfigurationType.
	CaIdBitMask() string
	// SetCaIdBitMask assigns string provided by user to MacSecSplitMGIDConfigurationType
	SetCaIdBitMask(value string) MacSecSplitMGIDConfigurationType
	// HasCaIdBitMask checks if CaIdBitMask has been set in MacSecSplitMGIDConfigurationType
	HasCaIdBitMask() bool
}

func (obj *macSecSplitMGIDConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasDevIdOffset() {

		member := Member{
			Name:  "devidoffset",
			Type:  "int16",
			Value: strconv.FormatInt(int64(obj.DevIdOffset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasDevIdBitMask() {

		member := Member{
			Name:  "devidbitmask",
			Type:  "octets",
			Value: obj.DevIdBitMask(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasCaIdOffset() {

		member := Member{
			Name:  "caidoffset",
			Type:  "int16",
			Value: strconv.FormatInt(int64(obj.CaIdOffset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasCaIdBitMask() {

		member := Member{
			Name:  "caidbitmask",
			Type:  "octets",
			Value: obj.CaIdBitMask(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *macSecSplitMGIDConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// Offset from Start of Packet in bytes where the MGID 0 DevID    is extracted from the packet. One byte is extracted for use   to form the MGID Index.
// DevIdOffset returns a int32
func (obj *macSecSplitMGIDConfigurationType) DevIdOffset() int32 {

	return *obj.obj.DevIdOffset

}

// Offset from Start of Packet in bytes where the MGID 0 DevID    is extracted from the packet. One byte is extracted for use   to form the MGID Index.
// DevIdOffset returns a int32
func (obj *macSecSplitMGIDConfigurationType) HasDevIdOffset() bool {
	return obj.obj.DevIdOffset != nil
}

// Offset from Start of Packet in bytes where the MGID 0 DevID    is extracted from the packet. One byte is extracted for use   to form the MGID Index.
// SetDevIdOffset sets the int32 value in the MacSecSplitMGIDConfigurationType object
func (obj *macSecSplitMGIDConfigurationType) SetDevIdOffset(value int32) MacSecSplitMGIDConfigurationType {

	obj.obj.DevIdOffset = &value
	return obj
}

// DevIdBitMask returns a string
func (obj *macSecSplitMGIDConfigurationType) DevIdBitMask() string {

	return *obj.obj.DevIdBitMask

}

// DevIdBitMask returns a string
func (obj *macSecSplitMGIDConfigurationType) HasDevIdBitMask() bool {
	return obj.obj.DevIdBitMask != nil
}

// SetDevIdBitMask sets the string value in the MacSecSplitMGIDConfigurationType object
func (obj *macSecSplitMGIDConfigurationType) SetDevIdBitMask(value string) MacSecSplitMGIDConfigurationType {

	obj.obj.DevIdBitMask = &value
	return obj
}

// Offset from Start of Packet in bytes where the MGID Bit Mask   is to be applied.
// CaIdOffset returns a int32
func (obj *macSecSplitMGIDConfigurationType) CaIdOffset() int32 {

	return *obj.obj.CaIdOffset

}

// Offset from Start of Packet in bytes where the MGID Bit Mask   is to be applied.
// CaIdOffset returns a int32
func (obj *macSecSplitMGIDConfigurationType) HasCaIdOffset() bool {
	return obj.obj.CaIdOffset != nil
}

// Offset from Start of Packet in bytes where the MGID Bit Mask   is to be applied.
// SetCaIdOffset sets the int32 value in the MacSecSplitMGIDConfigurationType object
func (obj *macSecSplitMGIDConfigurationType) SetCaIdOffset(value int32) MacSecSplitMGIDConfigurationType {

	obj.obj.CaIdOffset = &value
	return obj
}

// CaIdBitMask returns a string
func (obj *macSecSplitMGIDConfigurationType) CaIdBitMask() string {

	return *obj.obj.CaIdBitMask

}

// CaIdBitMask returns a string
func (obj *macSecSplitMGIDConfigurationType) HasCaIdBitMask() bool {
	return obj.obj.CaIdBitMask != nil
}

// SetCaIdBitMask sets the string value in the MacSecSplitMGIDConfigurationType object
func (obj *macSecSplitMGIDConfigurationType) SetCaIdBitMask(value string) MacSecSplitMGIDConfigurationType {

	obj.obj.CaIdBitMask = &value
	return obj
}

func (obj *macSecSplitMGIDConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *macSecSplitMGIDConfigurationType) setDefault() {

}

// ***** MacSecTxScConfigurationType *****
type macSecTxScConfigurationType struct {
	validation
	obj                             *otg.MacSecTxScConfigurationType
	scIdHolder                      IdTypeSecureChannelId
	unauthenticatedDataConfigHolder MacSecUnauthenticatedDataConfigurationType
}

func NewMacSecTxScConfigurationType() MacSecTxScConfigurationType {
	obj := macSecTxScConfigurationType{obj: &otg.MacSecTxScConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *macSecTxScConfigurationType) Msg() *otg.MacSecTxScConfigurationType {
	return obj.obj
}

func (obj *macSecTxScConfigurationType) SetMsg(msg *otg.MacSecTxScConfigurationType) MacSecTxScConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *macSecTxScConfigurationType) ToProto() (*otg.MacSecTxScConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *macSecTxScConfigurationType) FromProto(msg *otg.MacSecTxScConfigurationType) (MacSecTxScConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *macSecTxScConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *macSecTxScConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *macSecTxScConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecTxScConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *macSecTxScConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecTxScConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *macSecTxScConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *macSecTxScConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *macSecTxScConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *macSecTxScConfigurationType) Clone() (MacSecTxScConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewMacSecTxScConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *macSecTxScConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *macSecTxScConfigurationType) setNil() {
	obj.scIdHolder = nil
	obj.unauthenticatedDataConfigHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// MacSecTxScConfigurationType is tBD
type MacSecTxScConfigurationType interface {
	Validation
	// Msg marshals MacSecTxScConfigurationType to protobuf object *otg.MacSecTxScConfigurationType
	// and doesn't set defaults
	Msg() *otg.MacSecTxScConfigurationType
	// SetMsg unmarshals MacSecTxScConfigurationType from protobuf object *otg.MacSecTxScConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.MacSecTxScConfigurationType) MacSecTxScConfigurationType
	// ToProto marshals MacSecTxScConfigurationType to protobuf object *otg.MacSecTxScConfigurationType
	ToProto() (*otg.MacSecTxScConfigurationType, error)
	// ToPbText marshals MacSecTxScConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals MacSecTxScConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals MacSecTxScConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals MacSecTxScConfigurationType from protobuf object *otg.MacSecTxScConfigurationType
	FromProto(msg *otg.MacSecTxScConfigurationType) (MacSecTxScConfigurationType, error)
	// FromPbText unmarshals MacSecTxScConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals MacSecTxScConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals MacSecTxScConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates MacSecTxScConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (MacSecTxScConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ScId returns IdTypeSecureChannelId, set in MacSecTxScConfigurationType.
	// IdTypeSecureChannelId is tBD
	ScId() IdTypeSecureChannelId
	// SetScId assigns IdTypeSecureChannelId provided by user to MacSecTxScConfigurationType.
	// IdTypeSecureChannelId is tBD
	SetScId(value IdTypeSecureChannelId) MacSecTxScConfigurationType
	// HasScId checks if ScId has been set in MacSecTxScConfigurationType
	HasScId() bool
	// AesMode returns MacSecTxScConfigurationTypeAesModeEnum, set in MacSecTxScConfigurationType
	AesMode() MacSecTxScConfigurationTypeAesModeEnum
	// SetAesMode assigns MacSecTxScConfigurationTypeAesModeEnum provided by user to MacSecTxScConfigurationType
	SetAesMode(value MacSecTxScConfigurationTypeAesModeEnum) MacSecTxScConfigurationType
	// HasAesMode checks if AesMode has been set in MacSecTxScConfigurationType
	HasAesMode() bool
	// ConfidentialityOffset returns int32, set in MacSecTxScConfigurationType.
	ConfidentialityOffset() int32
	// SetConfidentialityOffset assigns int32 provided by user to MacSecTxScConfigurationType
	SetConfidentialityOffset(value int32) MacSecTxScConfigurationType
	// HasConfidentialityOffset checks if ConfidentialityOffset has been set in MacSecTxScConfigurationType
	HasConfidentialityOffset() bool
	// SecTagOffset returns int32, set in MacSecTxScConfigurationType.
	SecTagOffset() int32
	// SetSecTagOffset assigns int32 provided by user to MacSecTxScConfigurationType
	SetSecTagOffset(value int32) MacSecTxScConfigurationType
	// HasSecTagOffset checks if SecTagOffset has been set in MacSecTxScConfigurationType
	HasSecTagOffset() bool
	// SwitchoverPointPn returns int64, set in MacSecTxScConfigurationType.
	SwitchoverPointPn() int64
	// SetSwitchoverPointPn assigns int64 provided by user to MacSecTxScConfigurationType
	SetSwitchoverPointPn(value int64) MacSecTxScConfigurationType
	// HasSwitchoverPointPn checks if SwitchoverPointPn has been set in MacSecTxScConfigurationType
	HasSwitchoverPointPn() bool
	// MaxPn returns int64, set in MacSecTxScConfigurationType.
	MaxPn() int64
	// SetMaxPn assigns int64 provided by user to MacSecTxScConfigurationType
	SetMaxPn(value int64) MacSecTxScConfigurationType
	// HasMaxPn checks if MaxPn has been set in MacSecTxScConfigurationType
	HasMaxPn() bool
	// EnableContinuousPnMode returns bool, set in MacSecTxScConfigurationType.
	EnableContinuousPnMode() bool
	// SetEnableContinuousPnMode assigns bool provided by user to MacSecTxScConfigurationType
	SetEnableContinuousPnMode(value bool) MacSecTxScConfigurationType
	// HasEnableContinuousPnMode checks if EnableContinuousPnMode has been set in MacSecTxScConfigurationType
	HasEnableContinuousPnMode() bool
	// EnableTxArmTrigger returns bool, set in MacSecTxScConfigurationType.
	EnableTxArmTrigger() bool
	// SetEnableTxArmTrigger assigns bool provided by user to MacSecTxScConfigurationType
	SetEnableTxArmTrigger(value bool) MacSecTxScConfigurationType
	// HasEnableTxArmTrigger checks if EnableTxArmTrigger has been set in MacSecTxScConfigurationType
	HasEnableTxArmTrigger() bool
	// UnauthenticatedDataConfig returns MacSecUnauthenticatedDataConfigurationType, set in MacSecTxScConfigurationType.
	// MacSecUnauthenticatedDataConfigurationType is tBD
	UnauthenticatedDataConfig() MacSecUnauthenticatedDataConfigurationType
	// SetUnauthenticatedDataConfig assigns MacSecUnauthenticatedDataConfigurationType provided by user to MacSecTxScConfigurationType.
	// MacSecUnauthenticatedDataConfigurationType is tBD
	SetUnauthenticatedDataConfig(value MacSecUnauthenticatedDataConfigurationType) MacSecTxScConfigurationType
	// HasUnauthenticatedDataConfig checks if UnauthenticatedDataConfig has been set in MacSecTxScConfigurationType
	HasUnauthenticatedDataConfig() bool
	setNil()
}

func (obj *macSecTxScConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasAesMode() {

		member := Member{
			Name:  "aesmode",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.MacSec+eAesModeAlgorithm",
			Value: strconv.FormatInt(int64(obj.obj.AesMode.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasConfidentialityOffset() {

		member := Member{
			Name:  "confidentialityoffset",
			Type:  "int16",
			Value: strconv.FormatInt(int64(obj.ConfidentialityOffset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSecTagOffset() {

		member := Member{
			Name:  "sectagoffset",
			Type:  "int16",
			Value: strconv.FormatInt(int64(obj.SecTagOffset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSwitchoverPointPn() {

		member := Member{
			Name:  "switchoverpointpn",
			Type:  "int64",
			Value: strconv.FormatInt(obj.SwitchoverPointPn(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasMaxPn() {

		member := Member{
			Name:  "maxpn",
			Type:  "int64",
			Value: strconv.FormatInt(obj.MaxPn(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableContinuousPnMode() {
		var value string
		if obj.EnableContinuousPnMode() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablecontinuouspnmode",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableTxArmTrigger() {
		var value string
		if obj.EnableTxArmTrigger() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enabletxarmtrigger",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *macSecTxScConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// ScId returns a IdTypeSecureChannelId
func (obj *macSecTxScConfigurationType) ScId() IdTypeSecureChannelId {
	if obj.obj.ScId == nil {
		obj.obj.ScId = NewIdTypeSecureChannelId().Msg()
	}
	if obj.scIdHolder == nil {
		obj.scIdHolder = &idTypeSecureChannelId{obj: obj.obj.ScId}
	}
	return obj.scIdHolder
}

// TBD
// ScId returns a IdTypeSecureChannelId
func (obj *macSecTxScConfigurationType) HasScId() bool {
	return obj.obj.ScId != nil
}

// TBD
// SetScId sets the IdTypeSecureChannelId value in the MacSecTxScConfigurationType object
func (obj *macSecTxScConfigurationType) SetScId(value IdTypeSecureChannelId) MacSecTxScConfigurationType {

	obj.scIdHolder = nil
	obj.obj.ScId = value.Msg()

	return obj
}

type MacSecTxScConfigurationTypeAesModeEnum string

// Enum of AesMode on MacSecTxScConfigurationType
var MacSecTxScConfigurationTypeAesMode = struct {
	KGCM128 MacSecTxScConfigurationTypeAesModeEnum
	KGCM256 MacSecTxScConfigurationTypeAesModeEnum
	KXPN128 MacSecTxScConfigurationTypeAesModeEnum
	KXPN256 MacSecTxScConfigurationTypeAesModeEnum
}{
	KGCM128: MacSecTxScConfigurationTypeAesModeEnum("kGcm128"),
	KGCM256: MacSecTxScConfigurationTypeAesModeEnum("kGcm256"),
	KXPN128: MacSecTxScConfigurationTypeAesModeEnum("kXpn128"),
	KXPN256: MacSecTxScConfigurationTypeAesModeEnum("kXpn256"),
}

func (obj *macSecTxScConfigurationType) AesMode() MacSecTxScConfigurationTypeAesModeEnum {
	return MacSecTxScConfigurationTypeAesModeEnum(obj.obj.AesMode.Enum().String())
}

// TBD
// AesMode returns a string
func (obj *macSecTxScConfigurationType) HasAesMode() bool {
	return obj.obj.AesMode != nil
}

func (obj *macSecTxScConfigurationType) SetAesMode(value MacSecTxScConfigurationTypeAesModeEnum) MacSecTxScConfigurationType {
	intValue, ok := otg.MacSecTxScConfigurationType_AesMode_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on MacSecTxScConfigurationTypeAesModeEnum", string(value)))
		return obj
	}
	enumValue := otg.MacSecTxScConfigurationType_AesMode_Enum(intValue)
	obj.obj.AesMode = &enumValue

	return obj
}

// TBD
// ConfidentialityOffset returns a int32
func (obj *macSecTxScConfigurationType) ConfidentialityOffset() int32 {

	return *obj.obj.ConfidentialityOffset

}

// TBD
// ConfidentialityOffset returns a int32
func (obj *macSecTxScConfigurationType) HasConfidentialityOffset() bool {
	return obj.obj.ConfidentialityOffset != nil
}

// TBD
// SetConfidentialityOffset sets the int32 value in the MacSecTxScConfigurationType object
func (obj *macSecTxScConfigurationType) SetConfidentialityOffset(value int32) MacSecTxScConfigurationType {

	obj.obj.ConfidentialityOffset = &value
	return obj
}

// TBD
// SecTagOffset returns a int32
func (obj *macSecTxScConfigurationType) SecTagOffset() int32 {

	return *obj.obj.SecTagOffset

}

// TBD
// SecTagOffset returns a int32
func (obj *macSecTxScConfigurationType) HasSecTagOffset() bool {
	return obj.obj.SecTagOffset != nil
}

// TBD
// SetSecTagOffset sets the int32 value in the MacSecTxScConfigurationType object
func (obj *macSecTxScConfigurationType) SetSecTagOffset(value int32) MacSecTxScConfigurationType {

	obj.obj.SecTagOffset = &value
	return obj
}

// When Pn reaches a switchover point, the other Key is enabled. From here, we enter a state where both Keys alternate.
// SwitchoverPointPn returns a int64
func (obj *macSecTxScConfigurationType) SwitchoverPointPn() int64 {

	return *obj.obj.SwitchoverPointPn

}

// When Pn reaches a switchover point, the other Key is enabled. From here, we enter a state where both Keys alternate.
// SwitchoverPointPn returns a int64
func (obj *macSecTxScConfigurationType) HasSwitchoverPointPn() bool {
	return obj.obj.SwitchoverPointPn != nil
}

// When Pn reaches a switchover point, the other Key is enabled. From here, we enter a state where both Keys alternate.
// SetSwitchoverPointPn sets the int64 value in the MacSecTxScConfigurationType object
func (obj *macSecTxScConfigurationType) SetSwitchoverPointPn(value int64) MacSecTxScConfigurationType {

	obj.obj.SwitchoverPointPn = &value
	return obj
}

// When the first PN reaches the Expire point, the first Key is disabled and goes stale.
// MaxPn returns a int64
func (obj *macSecTxScConfigurationType) MaxPn() int64 {

	return *obj.obj.MaxPn

}

// When the first PN reaches the Expire point, the first Key is disabled and goes stale.
// MaxPn returns a int64
func (obj *macSecTxScConfigurationType) HasMaxPn() bool {
	return obj.obj.MaxPn != nil
}

// When the first PN reaches the Expire point, the first Key is disabled and goes stale.
// SetMaxPn sets the int64 value in the MacSecTxScConfigurationType object
func (obj *macSecTxScConfigurationType) SetMaxPn(value int64) MacSecTxScConfigurationType {

	obj.obj.MaxPn = &value
	return obj
}

// True: Transmit ignores Pn rollovers and switchovers and simply lets Pn never expire. AN Index will not switch in this state.  This mode bit allows us to setup a key on Tx/Rx and let it run forever with no software key management  False: Normal behavior.
// EnableContinuousPnMode returns a bool
func (obj *macSecTxScConfigurationType) EnableContinuousPnMode() bool {

	return *obj.obj.EnableContinuousPnMode

}

// True: Transmit ignores Pn rollovers and switchovers and simply lets Pn never expire. AN Index will not switch in this state.  This mode bit allows us to setup a key on Tx/Rx and let it run forever with no software key management  False: Normal behavior.
// EnableContinuousPnMode returns a bool
func (obj *macSecTxScConfigurationType) HasEnableContinuousPnMode() bool {
	return obj.obj.EnableContinuousPnMode != nil
}

// True: Transmit ignores Pn rollovers and switchovers and simply lets Pn never expire. AN Index will not switch in this state.  This mode bit allows us to setup a key on Tx/Rx and let it run forever with no software key management  False: Normal behavior.
// SetEnableContinuousPnMode sets the bool value in the MacSecTxScConfigurationType object
func (obj *macSecTxScConfigurationType) SetEnableContinuousPnMode(value bool) MacSecTxScConfigurationType {

	obj.obj.EnableContinuousPnMode = &value
	return obj
}

// True: Ready this SC to toggle Keys upon a trigger command. False: Don't cosider the trigger timer.
// EnableTxArmTrigger returns a bool
func (obj *macSecTxScConfigurationType) EnableTxArmTrigger() bool {

	return *obj.obj.EnableTxArmTrigger

}

// True: Ready this SC to toggle Keys upon a trigger command. False: Don't cosider the trigger timer.
// EnableTxArmTrigger returns a bool
func (obj *macSecTxScConfigurationType) HasEnableTxArmTrigger() bool {
	return obj.obj.EnableTxArmTrigger != nil
}

// True: Ready this SC to toggle Keys upon a trigger command. False: Don't cosider the trigger timer.
// SetEnableTxArmTrigger sets the bool value in the MacSecTxScConfigurationType object
func (obj *macSecTxScConfigurationType) SetEnableTxArmTrigger(value bool) MacSecTxScConfigurationType {

	obj.obj.EnableTxArmTrigger = &value
	return obj
}

// TBD
// UnauthenticatedDataConfig returns a MacSecUnauthenticatedDataConfigurationType
func (obj *macSecTxScConfigurationType) UnauthenticatedDataConfig() MacSecUnauthenticatedDataConfigurationType {
	if obj.obj.UnauthenticatedDataConfig == nil {
		obj.obj.UnauthenticatedDataConfig = NewMacSecUnauthenticatedDataConfigurationType().Msg()
	}
	if obj.unauthenticatedDataConfigHolder == nil {
		obj.unauthenticatedDataConfigHolder = &macSecUnauthenticatedDataConfigurationType{obj: obj.obj.UnauthenticatedDataConfig}
	}
	return obj.unauthenticatedDataConfigHolder
}

// TBD
// UnauthenticatedDataConfig returns a MacSecUnauthenticatedDataConfigurationType
func (obj *macSecTxScConfigurationType) HasUnauthenticatedDataConfig() bool {
	return obj.obj.UnauthenticatedDataConfig != nil
}

// TBD
// SetUnauthenticatedDataConfig sets the MacSecUnauthenticatedDataConfigurationType value in the MacSecTxScConfigurationType object
func (obj *macSecTxScConfigurationType) SetUnauthenticatedDataConfig(value MacSecUnauthenticatedDataConfigurationType) MacSecTxScConfigurationType {

	obj.unauthenticatedDataConfigHolder = nil
	obj.obj.UnauthenticatedDataConfig = value.Msg()

	return obj
}

func (obj *macSecTxScConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ScId != nil {

		obj.ScId().validateObj(vObj, set_default)
	}

	if obj.obj.UnauthenticatedDataConfig != nil {

		obj.UnauthenticatedDataConfig().validateObj(vObj, set_default)
	}

}

func (obj *macSecTxScConfigurationType) setDefault() {

}

// ***** MacSecRxScConfigurationType *****
type macSecRxScConfigurationType struct {
	validation
	obj        *otg.MacSecRxScConfigurationType
	scIdHolder IdTypeSecureChannelId
}

func NewMacSecRxScConfigurationType() MacSecRxScConfigurationType {
	obj := macSecRxScConfigurationType{obj: &otg.MacSecRxScConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *macSecRxScConfigurationType) Msg() *otg.MacSecRxScConfigurationType {
	return obj.obj
}

func (obj *macSecRxScConfigurationType) SetMsg(msg *otg.MacSecRxScConfigurationType) MacSecRxScConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *macSecRxScConfigurationType) ToProto() (*otg.MacSecRxScConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *macSecRxScConfigurationType) FromProto(msg *otg.MacSecRxScConfigurationType) (MacSecRxScConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *macSecRxScConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *macSecRxScConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *macSecRxScConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecRxScConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *macSecRxScConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecRxScConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *macSecRxScConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *macSecRxScConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *macSecRxScConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *macSecRxScConfigurationType) Clone() (MacSecRxScConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewMacSecRxScConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *macSecRxScConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *macSecRxScConfigurationType) setNil() {
	obj.scIdHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// MacSecRxScConfigurationType is tBD
type MacSecRxScConfigurationType interface {
	Validation
	// Msg marshals MacSecRxScConfigurationType to protobuf object *otg.MacSecRxScConfigurationType
	// and doesn't set defaults
	Msg() *otg.MacSecRxScConfigurationType
	// SetMsg unmarshals MacSecRxScConfigurationType from protobuf object *otg.MacSecRxScConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.MacSecRxScConfigurationType) MacSecRxScConfigurationType
	// ToProto marshals MacSecRxScConfigurationType to protobuf object *otg.MacSecRxScConfigurationType
	ToProto() (*otg.MacSecRxScConfigurationType, error)
	// ToPbText marshals MacSecRxScConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals MacSecRxScConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals MacSecRxScConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals MacSecRxScConfigurationType from protobuf object *otg.MacSecRxScConfigurationType
	FromProto(msg *otg.MacSecRxScConfigurationType) (MacSecRxScConfigurationType, error)
	// FromPbText unmarshals MacSecRxScConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals MacSecRxScConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals MacSecRxScConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates MacSecRxScConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (MacSecRxScConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ScId returns IdTypeSecureChannelId, set in MacSecRxScConfigurationType.
	// IdTypeSecureChannelId is tBD
	ScId() IdTypeSecureChannelId
	// SetScId assigns IdTypeSecureChannelId provided by user to MacSecRxScConfigurationType.
	// IdTypeSecureChannelId is tBD
	SetScId(value IdTypeSecureChannelId) MacSecRxScConfigurationType
	// HasScId checks if ScId has been set in MacSecRxScConfigurationType
	HasScId() bool
	// PnWindowSize returns int32, set in MacSecRxScConfigurationType.
	PnWindowSize() int32
	// SetPnWindowSize assigns int32 provided by user to MacSecRxScConfigurationType
	SetPnWindowSize(value int32) MacSecRxScConfigurationType
	// HasPnWindowSize checks if PnWindowSize has been set in MacSecRxScConfigurationType
	HasPnWindowSize() bool
	// ConfidentialityOffset returns int32, set in MacSecRxScConfigurationType.
	ConfidentialityOffset() int32
	// SetConfidentialityOffset assigns int32 provided by user to MacSecRxScConfigurationType
	SetConfidentialityOffset(value int32) MacSecRxScConfigurationType
	// HasConfidentialityOffset checks if ConfidentialityOffset has been set in MacSecRxScConfigurationType
	HasConfidentialityOffset() bool
	// AesMode returns MacSecRxScConfigurationTypeAesModeEnum, set in MacSecRxScConfigurationType
	AesMode() MacSecRxScConfigurationTypeAesModeEnum
	// SetAesMode assigns MacSecRxScConfigurationTypeAesModeEnum provided by user to MacSecRxScConfigurationType
	SetAesMode(value MacSecRxScConfigurationTypeAesModeEnum) MacSecRxScConfigurationType
	// HasAesMode checks if AesMode has been set in MacSecRxScConfigurationType
	HasAesMode() bool
	// EnableScTimer returns bool, set in MacSecRxScConfigurationType.
	EnableScTimer() bool
	// SetEnableScTimer assigns bool provided by user to MacSecRxScConfigurationType
	SetEnableScTimer(value bool) MacSecRxScConfigurationType
	// HasEnableScTimer checks if EnableScTimer has been set in MacSecRxScConfigurationType
	HasEnableScTimer() bool
	// EnableMaster returns bool, set in MacSecRxScConfigurationType.
	EnableMaster() bool
	// SetEnableMaster assigns bool provided by user to MacSecRxScConfigurationType
	SetEnableMaster(value bool) MacSecRxScConfigurationType
	// HasEnableMaster checks if EnableMaster has been set in MacSecRxScConfigurationType
	HasEnableMaster() bool
	// EnableStrictValidation returns bool, set in MacSecRxScConfigurationType.
	EnableStrictValidation() bool
	// SetEnableStrictValidation assigns bool provided by user to MacSecRxScConfigurationType
	SetEnableStrictValidation(value bool) MacSecRxScConfigurationType
	// HasEnableStrictValidation checks if EnableStrictValidation has been set in MacSecRxScConfigurationType
	HasEnableStrictValidation() bool
	// Sci returns string, set in MacSecRxScConfigurationType.
	Sci() string
	// SetSci assigns string provided by user to MacSecRxScConfigurationType
	SetSci(value string) MacSecRxScConfigurationType
	// HasSci checks if Sci has been set in MacSecRxScConfigurationType
	HasSci() bool
	setNil()
}

func (obj *macSecRxScConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasPnWindowSize() {

		member := Member{
			Name:  "pnwindowsize",
			Type:  "int8",
			Value: strconv.FormatInt(int64(obj.PnWindowSize()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasConfidentialityOffset() {

		member := Member{
			Name:  "confidentialityoffset",
			Type:  "int16",
			Value: strconv.FormatInt(int64(obj.ConfidentialityOffset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasAesMode() {

		member := Member{
			Name:  "aesmode",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.MacSec+eAesModeAlgorithm",
			Value: strconv.FormatInt(int64(obj.obj.AesMode.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableScTimer() {
		var value string
		if obj.EnableScTimer() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablesctimer",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableMaster() {
		var value string
		if obj.EnableMaster() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablemaster",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableStrictValidation() {
		var value string
		if obj.EnableStrictValidation() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablestrictvalidation",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSci() {

		member := Member{
			Name:  "sci",
			Type:  "octets",
			Value: obj.Sci(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *macSecRxScConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// ScId returns a IdTypeSecureChannelId
func (obj *macSecRxScConfigurationType) ScId() IdTypeSecureChannelId {
	if obj.obj.ScId == nil {
		obj.obj.ScId = NewIdTypeSecureChannelId().Msg()
	}
	if obj.scIdHolder == nil {
		obj.scIdHolder = &idTypeSecureChannelId{obj: obj.obj.ScId}
	}
	return obj.scIdHolder
}

// TBD
// ScId returns a IdTypeSecureChannelId
func (obj *macSecRxScConfigurationType) HasScId() bool {
	return obj.obj.ScId != nil
}

// TBD
// SetScId sets the IdTypeSecureChannelId value in the MacSecRxScConfigurationType object
func (obj *macSecRxScConfigurationType) SetScId(value IdTypeSecureChannelId) MacSecRxScConfigurationType {

	obj.scIdHolder = nil
	obj.obj.ScId = value.Msg()

	return obj
}

// TBD
// PnWindowSize returns a int32
func (obj *macSecRxScConfigurationType) PnWindowSize() int32 {

	return *obj.obj.PnWindowSize

}

// TBD
// PnWindowSize returns a int32
func (obj *macSecRxScConfigurationType) HasPnWindowSize() bool {
	return obj.obj.PnWindowSize != nil
}

// TBD
// SetPnWindowSize sets the int32 value in the MacSecRxScConfigurationType object
func (obj *macSecRxScConfigurationType) SetPnWindowSize(value int32) MacSecRxScConfigurationType {

	obj.obj.PnWindowSize = &value
	return obj
}

// TBD
// ConfidentialityOffset returns a int32
func (obj *macSecRxScConfigurationType) ConfidentialityOffset() int32 {

	return *obj.obj.ConfidentialityOffset

}

// TBD
// ConfidentialityOffset returns a int32
func (obj *macSecRxScConfigurationType) HasConfidentialityOffset() bool {
	return obj.obj.ConfidentialityOffset != nil
}

// TBD
// SetConfidentialityOffset sets the int32 value in the MacSecRxScConfigurationType object
func (obj *macSecRxScConfigurationType) SetConfidentialityOffset(value int32) MacSecRxScConfigurationType {

	obj.obj.ConfidentialityOffset = &value
	return obj
}

type MacSecRxScConfigurationTypeAesModeEnum string

// Enum of AesMode on MacSecRxScConfigurationType
var MacSecRxScConfigurationTypeAesMode = struct {
	KGCM128 MacSecRxScConfigurationTypeAesModeEnum
	KGCM256 MacSecRxScConfigurationTypeAesModeEnum
	KXPN128 MacSecRxScConfigurationTypeAesModeEnum
	KXPN256 MacSecRxScConfigurationTypeAesModeEnum
}{
	KGCM128: MacSecRxScConfigurationTypeAesModeEnum("kGcm128"),
	KGCM256: MacSecRxScConfigurationTypeAesModeEnum("kGcm256"),
	KXPN128: MacSecRxScConfigurationTypeAesModeEnum("kXpn128"),
	KXPN256: MacSecRxScConfigurationTypeAesModeEnum("kXpn256"),
}

func (obj *macSecRxScConfigurationType) AesMode() MacSecRxScConfigurationTypeAesModeEnum {
	return MacSecRxScConfigurationTypeAesModeEnum(obj.obj.AesMode.Enum().String())
}

// TBD
// AesMode returns a string
func (obj *macSecRxScConfigurationType) HasAesMode() bool {
	return obj.obj.AesMode != nil
}

func (obj *macSecRxScConfigurationType) SetAesMode(value MacSecRxScConfigurationTypeAesModeEnum) MacSecRxScConfigurationType {
	intValue, ok := otg.MacSecRxScConfigurationType_AesMode_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on MacSecRxScConfigurationTypeAesModeEnum", string(value)))
		return obj
	}
	enumValue := otg.MacSecRxScConfigurationType_AesMode_Enum(intValue)
	obj.obj.AesMode = &enumValue

	return obj
}

// TBD
// EnableScTimer returns a bool
func (obj *macSecRxScConfigurationType) EnableScTimer() bool {

	return *obj.obj.EnableScTimer

}

// TBD
// EnableScTimer returns a bool
func (obj *macSecRxScConfigurationType) HasEnableScTimer() bool {
	return obj.obj.EnableScTimer != nil
}

// TBD
// SetEnableScTimer sets the bool value in the MacSecRxScConfigurationType object
func (obj *macSecRxScConfigurationType) SetEnableScTimer(value bool) MacSecRxScConfigurationType {

	obj.obj.EnableScTimer = &value
	return obj
}

// TBD
// EnableMaster returns a bool
func (obj *macSecRxScConfigurationType) EnableMaster() bool {

	return *obj.obj.EnableMaster

}

// TBD
// EnableMaster returns a bool
func (obj *macSecRxScConfigurationType) HasEnableMaster() bool {
	return obj.obj.EnableMaster != nil
}

// TBD
// SetEnableMaster sets the bool value in the MacSecRxScConfigurationType object
func (obj *macSecRxScConfigurationType) SetEnableMaster(value bool) MacSecRxScConfigurationType {

	obj.obj.EnableMaster = &value
	return obj
}

// TBD
// EnableStrictValidation returns a bool
func (obj *macSecRxScConfigurationType) EnableStrictValidation() bool {

	return *obj.obj.EnableStrictValidation

}

// TBD
// EnableStrictValidation returns a bool
func (obj *macSecRxScConfigurationType) HasEnableStrictValidation() bool {
	return obj.obj.EnableStrictValidation != nil
}

// TBD
// SetEnableStrictValidation sets the bool value in the MacSecRxScConfigurationType object
func (obj *macSecRxScConfigurationType) SetEnableStrictValidation(value bool) MacSecRxScConfigurationType {

	obj.obj.EnableStrictValidation = &value
	return obj
}

// TBD
// Sci returns a string
func (obj *macSecRxScConfigurationType) Sci() string {

	return *obj.obj.Sci

}

// TBD
// Sci returns a string
func (obj *macSecRxScConfigurationType) HasSci() bool {
	return obj.obj.Sci != nil
}

// TBD
// SetSci sets the string value in the MacSecRxScConfigurationType object
func (obj *macSecRxScConfigurationType) SetSci(value string) MacSecRxScConfigurationType {

	obj.obj.Sci = &value
	return obj
}

func (obj *macSecRxScConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ScId != nil {

		obj.ScId().validateObj(vObj, set_default)
	}

}

func (obj *macSecRxScConfigurationType) setDefault() {

}

// ***** MacSecKeyConfigurationType *****
type macSecKeyConfigurationType struct {
	validation
	obj         *otg.MacSecKeyConfigurationType
	keyIdHolder IdTypeKeyId
}

func NewMacSecKeyConfigurationType() MacSecKeyConfigurationType {
	obj := macSecKeyConfigurationType{obj: &otg.MacSecKeyConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *macSecKeyConfigurationType) Msg() *otg.MacSecKeyConfigurationType {
	return obj.obj
}

func (obj *macSecKeyConfigurationType) SetMsg(msg *otg.MacSecKeyConfigurationType) MacSecKeyConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *macSecKeyConfigurationType) ToProto() (*otg.MacSecKeyConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *macSecKeyConfigurationType) FromProto(msg *otg.MacSecKeyConfigurationType) (MacSecKeyConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *macSecKeyConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *macSecKeyConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *macSecKeyConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecKeyConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *macSecKeyConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecKeyConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *macSecKeyConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *macSecKeyConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *macSecKeyConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *macSecKeyConfigurationType) Clone() (MacSecKeyConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewMacSecKeyConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *macSecKeyConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *macSecKeyConfigurationType) setNil() {
	obj.keyIdHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// MacSecKeyConfigurationType is tBD
type MacSecKeyConfigurationType interface {
	Validation
	// Msg marshals MacSecKeyConfigurationType to protobuf object *otg.MacSecKeyConfigurationType
	// and doesn't set defaults
	Msg() *otg.MacSecKeyConfigurationType
	// SetMsg unmarshals MacSecKeyConfigurationType from protobuf object *otg.MacSecKeyConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.MacSecKeyConfigurationType) MacSecKeyConfigurationType
	// ToProto marshals MacSecKeyConfigurationType to protobuf object *otg.MacSecKeyConfigurationType
	ToProto() (*otg.MacSecKeyConfigurationType, error)
	// ToPbText marshals MacSecKeyConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals MacSecKeyConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals MacSecKeyConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals MacSecKeyConfigurationType from protobuf object *otg.MacSecKeyConfigurationType
	FromProto(msg *otg.MacSecKeyConfigurationType) (MacSecKeyConfigurationType, error)
	// FromPbText unmarshals MacSecKeyConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals MacSecKeyConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals MacSecKeyConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates MacSecKeyConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (MacSecKeyConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// KeyId returns IdTypeKeyId, set in MacSecKeyConfigurationType.
	// IdTypeKeyId is tBD
	KeyId() IdTypeKeyId
	// SetKeyId assigns IdTypeKeyId provided by user to MacSecKeyConfigurationType.
	// IdTypeKeyId is tBD
	SetKeyId(value IdTypeKeyId) MacSecKeyConfigurationType
	// HasKeyId checks if KeyId has been set in MacSecKeyConfigurationType
	HasKeyId() bool
	// KeyValue returns string, set in MacSecKeyConfigurationType.
	KeyValue() string
	// SetKeyValue assigns string provided by user to MacSecKeyConfigurationType
	SetKeyValue(value string) MacSecKeyConfigurationType
	// HasKeyValue checks if KeyValue has been set in MacSecKeyConfigurationType
	HasKeyValue() bool
	// Ssci returns int32, set in MacSecKeyConfigurationType.
	Ssci() int32
	// SetSsci assigns int32 provided by user to MacSecKeyConfigurationType
	SetSsci(value int32) MacSecKeyConfigurationType
	// HasSsci checks if Ssci has been set in MacSecKeyConfigurationType
	HasSsci() bool
	// Salt returns string, set in MacSecKeyConfigurationType.
	Salt() string
	// SetSalt assigns string provided by user to MacSecKeyConfigurationType
	SetSalt(value string) MacSecKeyConfigurationType
	// HasSalt checks if Salt has been set in MacSecKeyConfigurationType
	HasSalt() bool
	// InitPn returns int64, set in MacSecKeyConfigurationType.
	InitPn() int64
	// SetInitPn assigns int64 provided by user to MacSecKeyConfigurationType
	SetInitPn(value int64) MacSecKeyConfigurationType
	// HasInitPn checks if InitPn has been set in MacSecKeyConfigurationType
	HasInitPn() bool
	setNil()
}

func (obj *macSecKeyConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasKeyValue() {

		member := Member{
			Name:  "keyvalue",
			Type:  "octets",
			Value: obj.KeyValue(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSsci() {

		member := Member{
			Name:  "ssci",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Ssci()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSalt() {

		member := Member{
			Name:  "salt",
			Type:  "octets",
			Value: obj.Salt(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasInitPn() {

		member := Member{
			Name:  "initpn",
			Type:  "int64",
			Value: strconv.FormatInt(obj.InitPn(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *macSecKeyConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// KeyId returns a IdTypeKeyId
func (obj *macSecKeyConfigurationType) KeyId() IdTypeKeyId {
	if obj.obj.KeyId == nil {
		obj.obj.KeyId = NewIdTypeKeyId().Msg()
	}
	if obj.keyIdHolder == nil {
		obj.keyIdHolder = &idTypeKeyId{obj: obj.obj.KeyId}
	}
	return obj.keyIdHolder
}

// TBD
// KeyId returns a IdTypeKeyId
func (obj *macSecKeyConfigurationType) HasKeyId() bool {
	return obj.obj.KeyId != nil
}

// TBD
// SetKeyId sets the IdTypeKeyId value in the MacSecKeyConfigurationType object
func (obj *macSecKeyConfigurationType) SetKeyId(value IdTypeKeyId) MacSecKeyConfigurationType {

	obj.keyIdHolder = nil
	obj.obj.KeyId = value.Msg()

	return obj
}

// Member keyValue should be either 16 bytes or 32 bytes long. For 16 bytes AES modes, only first 16 octets will be used. For 32 bytes AES modes, only first 32 octets will be used.
// KeyValue returns a string
func (obj *macSecKeyConfigurationType) KeyValue() string {

	return *obj.obj.KeyValue

}

// Member keyValue should be either 16 bytes or 32 bytes long. For 16 bytes AES modes, only first 16 octets will be used. For 32 bytes AES modes, only first 32 octets will be used.
// KeyValue returns a string
func (obj *macSecKeyConfigurationType) HasKeyValue() bool {
	return obj.obj.KeyValue != nil
}

// Member keyValue should be either 16 bytes or 32 bytes long. For 16 bytes AES modes, only first 16 octets will be used. For 32 bytes AES modes, only first 32 octets will be used.
// SetKeyValue sets the string value in the MacSecKeyConfigurationType object
func (obj *macSecKeyConfigurationType) SetKeyValue(value string) MacSecKeyConfigurationType {

	obj.obj.KeyValue = &value
	return obj
}

// The 32 bit SSCI to create the IV for the encryption engine.
// Ssci returns a int32
func (obj *macSecKeyConfigurationType) Ssci() int32 {

	return *obj.obj.Ssci

}

// The 32 bit SSCI to create the IV for the encryption engine.
// Ssci returns a int32
func (obj *macSecKeyConfigurationType) HasSsci() bool {
	return obj.obj.Ssci != nil
}

// The 32 bit SSCI to create the IV for the encryption engine.
// SetSsci sets the int32 value in the MacSecKeyConfigurationType object
func (obj *macSecKeyConfigurationType) SetSsci(value int32) MacSecKeyConfigurationType {

	obj.obj.Ssci = &value
	return obj
}

// The 96 bit Salt Value to create the IV for the encryption engine.
// Salt returns a string
func (obj *macSecKeyConfigurationType) Salt() string {

	return *obj.obj.Salt

}

// The 96 bit Salt Value to create the IV for the encryption engine.
// Salt returns a string
func (obj *macSecKeyConfigurationType) HasSalt() bool {
	return obj.obj.Salt != nil
}

// The 96 bit Salt Value to create the IV for the encryption engine.
// SetSalt sets the string value in the MacSecKeyConfigurationType object
func (obj *macSecKeyConfigurationType) SetSalt(value string) MacSecKeyConfigurationType {

	obj.obj.Salt = &value
	return obj
}

// Initial PN of the key is either a 4B value or an 8B value, depending on the AES mode. For Tx, only the lower 4/8 bits of the control field are writable and usable. For Rx, this is only configured when aesMode is set to XPN.  For Rx, FPGA will give more priority to first 4 bytes or highest 32 bits.
// InitPn returns a int64
func (obj *macSecKeyConfigurationType) InitPn() int64 {

	return *obj.obj.InitPn

}

// Initial PN of the key is either a 4B value or an 8B value, depending on the AES mode. For Tx, only the lower 4/8 bits of the control field are writable and usable. For Rx, this is only configured when aesMode is set to XPN.  For Rx, FPGA will give more priority to first 4 bytes or highest 32 bits.
// InitPn returns a int64
func (obj *macSecKeyConfigurationType) HasInitPn() bool {
	return obj.obj.InitPn != nil
}

// Initial PN of the key is either a 4B value or an 8B value, depending on the AES mode. For Tx, only the lower 4/8 bits of the control field are writable and usable. For Rx, this is only configured when aesMode is set to XPN.  For Rx, FPGA will give more priority to first 4 bytes or highest 32 bits.
// SetInitPn sets the int64 value in the MacSecKeyConfigurationType object
func (obj *macSecKeyConfigurationType) SetInitPn(value int64) MacSecKeyConfigurationType {

	obj.obj.InitPn = &value
	return obj
}

func (obj *macSecKeyConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.KeyId != nil {

		obj.KeyId().validateObj(vObj, set_default)
	}

}

func (obj *macSecKeyConfigurationType) setDefault() {

}

// ***** IdTypeKeyId *****
type idTypeKeyId struct {
	validation
	obj *otg.IdTypeKeyId
}

func NewIdTypeKeyId() IdTypeKeyId {
	obj := idTypeKeyId{obj: &otg.IdTypeKeyId{}}
	obj.setDefault()
	return &obj
}

func (obj *idTypeKeyId) Msg() *otg.IdTypeKeyId {
	return obj.obj
}

func (obj *idTypeKeyId) SetMsg(msg *otg.IdTypeKeyId) IdTypeKeyId {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *idTypeKeyId) ToProto() (*otg.IdTypeKeyId, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *idTypeKeyId) FromProto(msg *otg.IdTypeKeyId) (IdTypeKeyId, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *idTypeKeyId) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *idTypeKeyId) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *idTypeKeyId) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *idTypeKeyId) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *idTypeKeyId) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *idTypeKeyId) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *idTypeKeyId) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *idTypeKeyId) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *idTypeKeyId) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *idTypeKeyId) Clone() (IdTypeKeyId, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewIdTypeKeyId()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *idTypeKeyId) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// IdTypeKeyId is tBD
type IdTypeKeyId interface {
	Validation
	// Msg marshals IdTypeKeyId to protobuf object *otg.IdTypeKeyId
	// and doesn't set defaults
	Msg() *otg.IdTypeKeyId
	// SetMsg unmarshals IdTypeKeyId from protobuf object *otg.IdTypeKeyId
	// and doesn't set defaults
	SetMsg(*otg.IdTypeKeyId) IdTypeKeyId
	// ToProto marshals IdTypeKeyId to protobuf object *otg.IdTypeKeyId
	ToProto() (*otg.IdTypeKeyId, error)
	// ToPbText marshals IdTypeKeyId to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals IdTypeKeyId to YAML text
	ToYaml() (string, error)
	// ToJson marshals IdTypeKeyId to JSON text
	ToJson() (string, error)
	// FromProto unmarshals IdTypeKeyId from protobuf object *otg.IdTypeKeyId
	FromProto(msg *otg.IdTypeKeyId) (IdTypeKeyId, error)
	// FromPbText unmarshals IdTypeKeyId from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals IdTypeKeyId from YAML text
	FromYaml(value string) error
	// FromJson unmarshals IdTypeKeyId from JSON text
	FromJson(value string) error
	// Validate validates IdTypeKeyId
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (IdTypeKeyId, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Id returns int32, set in IdTypeKeyId.
	Id() int32
	// SetId assigns int32 provided by user to IdTypeKeyId
	SetId(value int32) IdTypeKeyId
	// HasId checks if Id has been set in IdTypeKeyId
	HasId() bool
}

func (obj *idTypeKeyId) populateXml(xObj *Argument) error {

	if obj.HasId() {

		member := Member{
			Name:  "id",
			Type:  "int8",
			Value: strconv.FormatInt(int64(obj.Id()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *idTypeKeyId) populateFromXml(xObj *RetVal) error {

	return nil
}

// The KeyId is used by Secure Channel for MACSEC feature.   Currently, it could be 0 or 1.
// Id returns a int32
func (obj *idTypeKeyId) Id() int32 {

	return *obj.obj.Id

}

// The KeyId is used by Secure Channel for MACSEC feature.   Currently, it could be 0 or 1.
// Id returns a int32
func (obj *idTypeKeyId) HasId() bool {
	return obj.obj.Id != nil
}

// The KeyId is used by Secure Channel for MACSEC feature.   Currently, it could be 0 or 1.
// SetId sets the int32 value in the IdTypeKeyId object
func (obj *idTypeKeyId) SetId(value int32) IdTypeKeyId {

	obj.obj.Id = &value
	return obj
}

func (obj *idTypeKeyId) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *idTypeKeyId) setDefault() {

}

// ***** DebugTopologyDebugPortInfoWithUniqueId *****
type debugTopologyDebugPortInfoWithUniqueId struct {
	validation
	obj            *otg.DebugTopologyDebugPortInfoWithUniqueId
	portInfoHolder DebugTopologyDebugPortInfo
}

func NewDebugTopologyDebugPortInfoWithUniqueId() DebugTopologyDebugPortInfoWithUniqueId {
	obj := debugTopologyDebugPortInfoWithUniqueId{obj: &otg.DebugTopologyDebugPortInfoWithUniqueId{}}
	obj.setDefault()
	return &obj
}

func (obj *debugTopologyDebugPortInfoWithUniqueId) Msg() *otg.DebugTopologyDebugPortInfoWithUniqueId {
	return obj.obj
}

func (obj *debugTopologyDebugPortInfoWithUniqueId) SetMsg(msg *otg.DebugTopologyDebugPortInfoWithUniqueId) DebugTopologyDebugPortInfoWithUniqueId {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *debugTopologyDebugPortInfoWithUniqueId) ToProto() (*otg.DebugTopologyDebugPortInfoWithUniqueId, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *debugTopologyDebugPortInfoWithUniqueId) FromProto(msg *otg.DebugTopologyDebugPortInfoWithUniqueId) (DebugTopologyDebugPortInfoWithUniqueId, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *debugTopologyDebugPortInfoWithUniqueId) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *debugTopologyDebugPortInfoWithUniqueId) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *debugTopologyDebugPortInfoWithUniqueId) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *debugTopologyDebugPortInfoWithUniqueId) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *debugTopologyDebugPortInfoWithUniqueId) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *debugTopologyDebugPortInfoWithUniqueId) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *debugTopologyDebugPortInfoWithUniqueId) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *debugTopologyDebugPortInfoWithUniqueId) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *debugTopologyDebugPortInfoWithUniqueId) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *debugTopologyDebugPortInfoWithUniqueId) Clone() (DebugTopologyDebugPortInfoWithUniqueId, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewDebugTopologyDebugPortInfoWithUniqueId()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *debugTopologyDebugPortInfoWithUniqueId) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *debugTopologyDebugPortInfoWithUniqueId) setNil() {
	obj.portInfoHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// DebugTopologyDebugPortInfoWithUniqueId is tBD
type DebugTopologyDebugPortInfoWithUniqueId interface {
	Validation
	// Msg marshals DebugTopologyDebugPortInfoWithUniqueId to protobuf object *otg.DebugTopologyDebugPortInfoWithUniqueId
	// and doesn't set defaults
	Msg() *otg.DebugTopologyDebugPortInfoWithUniqueId
	// SetMsg unmarshals DebugTopologyDebugPortInfoWithUniqueId from protobuf object *otg.DebugTopologyDebugPortInfoWithUniqueId
	// and doesn't set defaults
	SetMsg(*otg.DebugTopologyDebugPortInfoWithUniqueId) DebugTopologyDebugPortInfoWithUniqueId
	// ToProto marshals DebugTopologyDebugPortInfoWithUniqueId to protobuf object *otg.DebugTopologyDebugPortInfoWithUniqueId
	ToProto() (*otg.DebugTopologyDebugPortInfoWithUniqueId, error)
	// ToPbText marshals DebugTopologyDebugPortInfoWithUniqueId to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals DebugTopologyDebugPortInfoWithUniqueId to YAML text
	ToYaml() (string, error)
	// ToJson marshals DebugTopologyDebugPortInfoWithUniqueId to JSON text
	ToJson() (string, error)
	// FromProto unmarshals DebugTopologyDebugPortInfoWithUniqueId from protobuf object *otg.DebugTopologyDebugPortInfoWithUniqueId
	FromProto(msg *otg.DebugTopologyDebugPortInfoWithUniqueId) (DebugTopologyDebugPortInfoWithUniqueId, error)
	// FromPbText unmarshals DebugTopologyDebugPortInfoWithUniqueId from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals DebugTopologyDebugPortInfoWithUniqueId from YAML text
	FromYaml(value string) error
	// FromJson unmarshals DebugTopologyDebugPortInfoWithUniqueId from JSON text
	FromJson(value string) error
	// Validate validates DebugTopologyDebugPortInfoWithUniqueId
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (DebugTopologyDebugPortInfoWithUniqueId, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// UniquePortId returns int32, set in DebugTopologyDebugPortInfoWithUniqueId.
	UniquePortId() int32
	// SetUniquePortId assigns int32 provided by user to DebugTopologyDebugPortInfoWithUniqueId
	SetUniquePortId(value int32) DebugTopologyDebugPortInfoWithUniqueId
	// HasUniquePortId checks if UniquePortId has been set in DebugTopologyDebugPortInfoWithUniqueId
	HasUniquePortId() bool
	// PortInfo returns DebugTopologyDebugPortInfo, set in DebugTopologyDebugPortInfoWithUniqueId.
	// DebugTopologyDebugPortInfo is tBD
	PortInfo() DebugTopologyDebugPortInfo
	// SetPortInfo assigns DebugTopologyDebugPortInfo provided by user to DebugTopologyDebugPortInfoWithUniqueId.
	// DebugTopologyDebugPortInfo is tBD
	SetPortInfo(value DebugTopologyDebugPortInfo) DebugTopologyDebugPortInfoWithUniqueId
	// HasPortInfo checks if PortInfo has been set in DebugTopologyDebugPortInfoWithUniqueId
	HasPortInfo() bool
	setNil()
}

func (obj *debugTopologyDebugPortInfoWithUniqueId) populateXml(xObj *Argument) error {

	if obj.HasUniquePortId() {

		member := Member{
			Name:  "uniqueportid",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.UniquePortId()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *debugTopologyDebugPortInfoWithUniqueId) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// UniquePortId returns a int32
func (obj *debugTopologyDebugPortInfoWithUniqueId) UniquePortId() int32 {

	return *obj.obj.UniquePortId

}

// TBD
// UniquePortId returns a int32
func (obj *debugTopologyDebugPortInfoWithUniqueId) HasUniquePortId() bool {
	return obj.obj.UniquePortId != nil
}

// TBD
// SetUniquePortId sets the int32 value in the DebugTopologyDebugPortInfoWithUniqueId object
func (obj *debugTopologyDebugPortInfoWithUniqueId) SetUniquePortId(value int32) DebugTopologyDebugPortInfoWithUniqueId {

	obj.obj.UniquePortId = &value
	return obj
}

// TBD
// PortInfo returns a DebugTopologyDebugPortInfo
func (obj *debugTopologyDebugPortInfoWithUniqueId) PortInfo() DebugTopologyDebugPortInfo {
	if obj.obj.PortInfo == nil {
		obj.obj.PortInfo = NewDebugTopologyDebugPortInfo().Msg()
	}
	if obj.portInfoHolder == nil {
		obj.portInfoHolder = &debugTopologyDebugPortInfo{obj: obj.obj.PortInfo}
	}
	return obj.portInfoHolder
}

// TBD
// PortInfo returns a DebugTopologyDebugPortInfo
func (obj *debugTopologyDebugPortInfoWithUniqueId) HasPortInfo() bool {
	return obj.obj.PortInfo != nil
}

// TBD
// SetPortInfo sets the DebugTopologyDebugPortInfo value in the DebugTopologyDebugPortInfoWithUniqueId object
func (obj *debugTopologyDebugPortInfoWithUniqueId) SetPortInfo(value DebugTopologyDebugPortInfo) DebugTopologyDebugPortInfoWithUniqueId {

	obj.portInfoHolder = nil
	obj.obj.PortInfo = value.Msg()

	return obj
}

func (obj *debugTopologyDebugPortInfoWithUniqueId) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortInfo != nil {

		obj.PortInfo().validateObj(vObj, set_default)
	}

}

func (obj *debugTopologyDebugPortInfoWithUniqueId) setDefault() {

}

// ***** CapturePacketCountType *****
type capturePacketCountType struct {
	validation
	obj *otg.CapturePacketCountType
}

func NewCapturePacketCountType() CapturePacketCountType {
	obj := capturePacketCountType{obj: &otg.CapturePacketCountType{}}
	obj.setDefault()
	return &obj
}

func (obj *capturePacketCountType) Msg() *otg.CapturePacketCountType {
	return obj.obj
}

func (obj *capturePacketCountType) SetMsg(msg *otg.CapturePacketCountType) CapturePacketCountType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *capturePacketCountType) ToProto() (*otg.CapturePacketCountType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *capturePacketCountType) FromProto(msg *otg.CapturePacketCountType) (CapturePacketCountType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *capturePacketCountType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *capturePacketCountType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *capturePacketCountType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *capturePacketCountType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *capturePacketCountType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *capturePacketCountType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *capturePacketCountType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *capturePacketCountType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *capturePacketCountType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *capturePacketCountType) Clone() (CapturePacketCountType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewCapturePacketCountType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *capturePacketCountType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// CapturePacketCountType is tBD
type CapturePacketCountType interface {
	Validation
	// Msg marshals CapturePacketCountType to protobuf object *otg.CapturePacketCountType
	// and doesn't set defaults
	Msg() *otg.CapturePacketCountType
	// SetMsg unmarshals CapturePacketCountType from protobuf object *otg.CapturePacketCountType
	// and doesn't set defaults
	SetMsg(*otg.CapturePacketCountType) CapturePacketCountType
	// ToProto marshals CapturePacketCountType to protobuf object *otg.CapturePacketCountType
	ToProto() (*otg.CapturePacketCountType, error)
	// ToPbText marshals CapturePacketCountType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals CapturePacketCountType to YAML text
	ToYaml() (string, error)
	// ToJson marshals CapturePacketCountType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals CapturePacketCountType from protobuf object *otg.CapturePacketCountType
	FromProto(msg *otg.CapturePacketCountType) (CapturePacketCountType, error)
	// FromPbText unmarshals CapturePacketCountType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals CapturePacketCountType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals CapturePacketCountType from JSON text
	FromJson(value string) error
	// Validate validates CapturePacketCountType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (CapturePacketCountType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Direction returns CapturePacketCountTypeDirectionEnum, set in CapturePacketCountType
	Direction() CapturePacketCountTypeDirectionEnum
	// SetDirection assigns CapturePacketCountTypeDirectionEnum provided by user to CapturePacketCountType
	SetDirection(value CapturePacketCountTypeDirectionEnum) CapturePacketCountType
	// HasDirection checks if Direction has been set in CapturePacketCountType
	HasDirection() bool
	// TotalPkts returns int32, set in CapturePacketCountType.
	TotalPkts() int32
	// SetTotalPkts assigns int32 provided by user to CapturePacketCountType
	SetTotalPkts(value int32) CapturePacketCountType
	// HasTotalPkts checks if TotalPkts has been set in CapturePacketCountType
	HasTotalPkts() bool
}

func (obj *capturePacketCountType) populateXml(xObj *Argument) error {

	if obj.HasDirection() {

		member := Member{
			Name:  "direction",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Capture+eDirection",
			Value: strconv.FormatInt(int64(obj.obj.Direction.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasTotalPkts() {

		member := Member{
			Name:  "totalpkts",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.TotalPkts()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *capturePacketCountType) populateFromXml(xObj *RetVal) error {

	return nil
}

type CapturePacketCountTypeDirectionEnum string

// Enum of Direction on CapturePacketCountType
var CapturePacketCountTypeDirection = struct {
	KRX            CapturePacketCountTypeDirectionEnum
	KTX            CapturePacketCountTypeDirectionEnum
	KBIDIRECTIONAL CapturePacketCountTypeDirectionEnum
}{
	KRX:            CapturePacketCountTypeDirectionEnum("kRx"),
	KTX:            CapturePacketCountTypeDirectionEnum("kTx"),
	KBIDIRECTIONAL: CapturePacketCountTypeDirectionEnum("kBidirectional"),
}

func (obj *capturePacketCountType) Direction() CapturePacketCountTypeDirectionEnum {
	return CapturePacketCountTypeDirectionEnum(obj.obj.Direction.Enum().String())
}

// TBD
// Direction returns a string
func (obj *capturePacketCountType) HasDirection() bool {
	return obj.obj.Direction != nil
}

func (obj *capturePacketCountType) SetDirection(value CapturePacketCountTypeDirectionEnum) CapturePacketCountType {
	intValue, ok := otg.CapturePacketCountType_Direction_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on CapturePacketCountTypeDirectionEnum", string(value)))
		return obj
	}
	enumValue := otg.CapturePacketCountType_Direction_Enum(intValue)
	obj.obj.Direction = &enumValue

	return obj
}

// TBD
// TotalPkts returns a int32
func (obj *capturePacketCountType) TotalPkts() int32 {

	return *obj.obj.TotalPkts

}

// TBD
// TotalPkts returns a int32
func (obj *capturePacketCountType) HasTotalPkts() bool {
	return obj.obj.TotalPkts != nil
}

// TBD
// SetTotalPkts sets the int32 value in the CapturePacketCountType object
func (obj *capturePacketCountType) SetTotalPkts(value int32) CapturePacketCountType {

	obj.obj.TotalPkts = &value
	return obj
}

func (obj *capturePacketCountType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *capturePacketCountType) setDefault() {

}

// ***** CaptureStatusType *****
type captureStatusType struct {
	validation
	obj *otg.CaptureStatusType
}

func NewCaptureStatusType() CaptureStatusType {
	obj := captureStatusType{obj: &otg.CaptureStatusType{}}
	obj.setDefault()
	return &obj
}

func (obj *captureStatusType) Msg() *otg.CaptureStatusType {
	return obj.obj
}

func (obj *captureStatusType) SetMsg(msg *otg.CaptureStatusType) CaptureStatusType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *captureStatusType) ToProto() (*otg.CaptureStatusType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *captureStatusType) FromProto(msg *otg.CaptureStatusType) (CaptureStatusType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *captureStatusType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *captureStatusType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureStatusType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureStatusType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *captureStatusType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureStatusType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *captureStatusType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *captureStatusType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *captureStatusType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *captureStatusType) Clone() (CaptureStatusType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewCaptureStatusType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *captureStatusType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// CaptureStatusType is tBD
type CaptureStatusType interface {
	Validation
	// Msg marshals CaptureStatusType to protobuf object *otg.CaptureStatusType
	// and doesn't set defaults
	Msg() *otg.CaptureStatusType
	// SetMsg unmarshals CaptureStatusType from protobuf object *otg.CaptureStatusType
	// and doesn't set defaults
	SetMsg(*otg.CaptureStatusType) CaptureStatusType
	// ToProto marshals CaptureStatusType to protobuf object *otg.CaptureStatusType
	ToProto() (*otg.CaptureStatusType, error)
	// ToPbText marshals CaptureStatusType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals CaptureStatusType to YAML text
	ToYaml() (string, error)
	// ToJson marshals CaptureStatusType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals CaptureStatusType from protobuf object *otg.CaptureStatusType
	FromProto(msg *otg.CaptureStatusType) (CaptureStatusType, error)
	// FromPbText unmarshals CaptureStatusType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals CaptureStatusType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals CaptureStatusType from JSON text
	FromJson(value string) error
	// Validate validates CaptureStatusType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (CaptureStatusType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Direction returns CaptureStatusTypeDirectionEnum, set in CaptureStatusType
	Direction() CaptureStatusTypeDirectionEnum
	// SetDirection assigns CaptureStatusTypeDirectionEnum provided by user to CaptureStatusType
	SetDirection(value CaptureStatusTypeDirectionEnum) CaptureStatusType
	// HasDirection checks if Direction has been set in CaptureStatusType
	HasDirection() bool
	// IsWrapped returns bool, set in CaptureStatusType.
	IsWrapped() bool
	// SetIsWrapped assigns bool provided by user to CaptureStatusType
	SetIsWrapped(value bool) CaptureStatusType
	// HasIsWrapped checks if IsWrapped has been set in CaptureStatusType
	HasIsWrapped() bool
	// IsFull returns bool, set in CaptureStatusType.
	IsFull() bool
	// SetIsFull assigns bool provided by user to CaptureStatusType
	SetIsFull(value bool) CaptureStatusType
	// HasIsFull checks if IsFull has been set in CaptureStatusType
	HasIsFull() bool
	// PktsAvailable returns bool, set in CaptureStatusType.
	PktsAvailable() bool
	// SetPktsAvailable assigns bool provided by user to CaptureStatusType
	SetPktsAvailable(value bool) CaptureStatusType
	// HasPktsAvailable checks if PktsAvailable has been set in CaptureStatusType
	HasPktsAvailable() bool
	// TotalPkts returns int32, set in CaptureStatusType.
	TotalPkts() int32
	// SetTotalPkts assigns int32 provided by user to CaptureStatusType
	SetTotalPkts(value int32) CaptureStatusType
	// HasTotalPkts checks if TotalPkts has been set in CaptureStatusType
	HasTotalPkts() bool
	// TotalBytes returns int64, set in CaptureStatusType.
	TotalBytes() int64
	// SetTotalBytes assigns int64 provided by user to CaptureStatusType
	SetTotalBytes(value int64) CaptureStatusType
	// HasTotalBytes checks if TotalBytes has been set in CaptureStatusType
	HasTotalBytes() bool
	// TriggerIndex returns int32, set in CaptureStatusType.
	TriggerIndex() int32
	// SetTriggerIndex assigns int32 provided by user to CaptureStatusType
	SetTriggerIndex(value int32) CaptureStatusType
	// HasTriggerIndex checks if TriggerIndex has been set in CaptureStatusType
	HasTriggerIndex() bool
	// State returns CaptureStatusTypeStateEnum, set in CaptureStatusType
	State() CaptureStatusTypeStateEnum
	// SetState assigns CaptureStatusTypeStateEnum provided by user to CaptureStatusType
	SetState(value CaptureStatusTypeStateEnum) CaptureStatusType
	// HasState checks if State has been set in CaptureStatusType
	HasState() bool
}

func (obj *captureStatusType) populateXml(xObj *Argument) error {

	if obj.HasDirection() {

		member := Member{
			Name:  "direction",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Capture+eDirection",
			Value: strconv.FormatInt(int64(obj.obj.Direction.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIsWrapped() {
		var value string
		if obj.IsWrapped() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "iswrapped",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIsFull() {
		var value string
		if obj.IsFull() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "isfull",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasPktsAvailable() {
		var value string
		if obj.PktsAvailable() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "pktsavailable",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasTotalPkts() {

		member := Member{
			Name:  "totalpkts",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.TotalPkts()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasTotalBytes() {

		member := Member{
			Name:  "totalbytes",
			Type:  "int64",
			Value: strconv.FormatInt(obj.TotalBytes(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasTriggerIndex() {

		member := Member{
			Name:  "triggerindex",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.TriggerIndex()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasState() {

		member := Member{
			Name:  "state",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Capture+eCaptureState",
			Value: strconv.FormatInt(int64(obj.obj.State.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *captureStatusType) populateFromXml(xObj *RetVal) error {

	return nil
}

type CaptureStatusTypeDirectionEnum string

// Enum of Direction on CaptureStatusType
var CaptureStatusTypeDirection = struct {
	KRX            CaptureStatusTypeDirectionEnum
	KTX            CaptureStatusTypeDirectionEnum
	KBIDIRECTIONAL CaptureStatusTypeDirectionEnum
}{
	KRX:            CaptureStatusTypeDirectionEnum("kRx"),
	KTX:            CaptureStatusTypeDirectionEnum("kTx"),
	KBIDIRECTIONAL: CaptureStatusTypeDirectionEnum("kBidirectional"),
}

func (obj *captureStatusType) Direction() CaptureStatusTypeDirectionEnum {
	return CaptureStatusTypeDirectionEnum(obj.obj.Direction.Enum().String())
}

// TBD
// Direction returns a string
func (obj *captureStatusType) HasDirection() bool {
	return obj.obj.Direction != nil
}

func (obj *captureStatusType) SetDirection(value CaptureStatusTypeDirectionEnum) CaptureStatusType {
	intValue, ok := otg.CaptureStatusType_Direction_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on CaptureStatusTypeDirectionEnum", string(value)))
		return obj
	}
	enumValue := otg.CaptureStatusType_Direction_Enum(intValue)
	obj.obj.Direction = &enumValue

	return obj
}

// TBD
// IsWrapped returns a bool
func (obj *captureStatusType) IsWrapped() bool {

	return *obj.obj.IsWrapped

}

// TBD
// IsWrapped returns a bool
func (obj *captureStatusType) HasIsWrapped() bool {
	return obj.obj.IsWrapped != nil
}

// TBD
// SetIsWrapped sets the bool value in the CaptureStatusType object
func (obj *captureStatusType) SetIsWrapped(value bool) CaptureStatusType {

	obj.obj.IsWrapped = &value
	return obj
}

// TBD
// IsFull returns a bool
func (obj *captureStatusType) IsFull() bool {

	return *obj.obj.IsFull

}

// TBD
// IsFull returns a bool
func (obj *captureStatusType) HasIsFull() bool {
	return obj.obj.IsFull != nil
}

// TBD
// SetIsFull sets the bool value in the CaptureStatusType object
func (obj *captureStatusType) SetIsFull(value bool) CaptureStatusType {

	obj.obj.IsFull = &value
	return obj
}

// TBD
// PktsAvailable returns a bool
func (obj *captureStatusType) PktsAvailable() bool {

	return *obj.obj.PktsAvailable

}

// TBD
// PktsAvailable returns a bool
func (obj *captureStatusType) HasPktsAvailable() bool {
	return obj.obj.PktsAvailable != nil
}

// TBD
// SetPktsAvailable sets the bool value in the CaptureStatusType object
func (obj *captureStatusType) SetPktsAvailable(value bool) CaptureStatusType {

	obj.obj.PktsAvailable = &value
	return obj
}

// TBD
// TotalPkts returns a int32
func (obj *captureStatusType) TotalPkts() int32 {

	return *obj.obj.TotalPkts

}

// TBD
// TotalPkts returns a int32
func (obj *captureStatusType) HasTotalPkts() bool {
	return obj.obj.TotalPkts != nil
}

// TBD
// SetTotalPkts sets the int32 value in the CaptureStatusType object
func (obj *captureStatusType) SetTotalPkts(value int32) CaptureStatusType {

	obj.obj.TotalPkts = &value
	return obj
}

// TBD
// TotalBytes returns a int64
func (obj *captureStatusType) TotalBytes() int64 {

	return *obj.obj.TotalBytes

}

// TBD
// TotalBytes returns a int64
func (obj *captureStatusType) HasTotalBytes() bool {
	return obj.obj.TotalBytes != nil
}

// TBD
// SetTotalBytes sets the int64 value in the CaptureStatusType object
func (obj *captureStatusType) SetTotalBytes(value int64) CaptureStatusType {

	obj.obj.TotalBytes = &value
	return obj
}

// TBD
// TriggerIndex returns a int32
func (obj *captureStatusType) TriggerIndex() int32 {

	return *obj.obj.TriggerIndex

}

// TBD
// TriggerIndex returns a int32
func (obj *captureStatusType) HasTriggerIndex() bool {
	return obj.obj.TriggerIndex != nil
}

// TBD
// SetTriggerIndex sets the int32 value in the CaptureStatusType object
func (obj *captureStatusType) SetTriggerIndex(value int32) CaptureStatusType {

	obj.obj.TriggerIndex = &value
	return obj
}

type CaptureStatusTypeStateEnum string

// Enum of State on CaptureStatusType
var CaptureStatusTypeState = struct {
	KCAPTURESTOPPED CaptureStatusTypeStateEnum
	KCAPTURESTARTED CaptureStatusTypeStateEnum
}{
	KCAPTURESTOPPED: CaptureStatusTypeStateEnum("kCaptureStopped"),
	KCAPTURESTARTED: CaptureStatusTypeStateEnum("kCaptureStarted"),
}

func (obj *captureStatusType) State() CaptureStatusTypeStateEnum {
	return CaptureStatusTypeStateEnum(obj.obj.State.Enum().String())
}

// The current state of the capture system.
// State returns a string
func (obj *captureStatusType) HasState() bool {
	return obj.obj.State != nil
}

func (obj *captureStatusType) SetState(value CaptureStatusTypeStateEnum) CaptureStatusType {
	intValue, ok := otg.CaptureStatusType_State_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on CaptureStatusTypeStateEnum", string(value)))
		return obj
	}
	enumValue := otg.CaptureStatusType_State_Enum(intValue)
	obj.obj.State = &enumValue

	return obj
}

func (obj *captureStatusType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *captureStatusType) setDefault() {

}

// ***** MacSecTxMacSecSaKeyStatusType *****
type macSecTxMacSecSaKeyStatusType struct {
	validation
	obj        *otg.MacSecTxMacSecSaKeyStatusType
	scIdHolder IdTypeSecureChannelId
}

func NewMacSecTxMacSecSaKeyStatusType() MacSecTxMacSecSaKeyStatusType {
	obj := macSecTxMacSecSaKeyStatusType{obj: &otg.MacSecTxMacSecSaKeyStatusType{}}
	obj.setDefault()
	return &obj
}

func (obj *macSecTxMacSecSaKeyStatusType) Msg() *otg.MacSecTxMacSecSaKeyStatusType {
	return obj.obj
}

func (obj *macSecTxMacSecSaKeyStatusType) SetMsg(msg *otg.MacSecTxMacSecSaKeyStatusType) MacSecTxMacSecSaKeyStatusType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *macSecTxMacSecSaKeyStatusType) ToProto() (*otg.MacSecTxMacSecSaKeyStatusType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *macSecTxMacSecSaKeyStatusType) FromProto(msg *otg.MacSecTxMacSecSaKeyStatusType) (MacSecTxMacSecSaKeyStatusType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *macSecTxMacSecSaKeyStatusType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *macSecTxMacSecSaKeyStatusType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *macSecTxMacSecSaKeyStatusType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecTxMacSecSaKeyStatusType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *macSecTxMacSecSaKeyStatusType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecTxMacSecSaKeyStatusType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *macSecTxMacSecSaKeyStatusType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *macSecTxMacSecSaKeyStatusType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *macSecTxMacSecSaKeyStatusType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *macSecTxMacSecSaKeyStatusType) Clone() (MacSecTxMacSecSaKeyStatusType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewMacSecTxMacSecSaKeyStatusType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *macSecTxMacSecSaKeyStatusType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *macSecTxMacSecSaKeyStatusType) setNil() {
	obj.scIdHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// MacSecTxMacSecSaKeyStatusType is tBD
type MacSecTxMacSecSaKeyStatusType interface {
	Validation
	// Msg marshals MacSecTxMacSecSaKeyStatusType to protobuf object *otg.MacSecTxMacSecSaKeyStatusType
	// and doesn't set defaults
	Msg() *otg.MacSecTxMacSecSaKeyStatusType
	// SetMsg unmarshals MacSecTxMacSecSaKeyStatusType from protobuf object *otg.MacSecTxMacSecSaKeyStatusType
	// and doesn't set defaults
	SetMsg(*otg.MacSecTxMacSecSaKeyStatusType) MacSecTxMacSecSaKeyStatusType
	// ToProto marshals MacSecTxMacSecSaKeyStatusType to protobuf object *otg.MacSecTxMacSecSaKeyStatusType
	ToProto() (*otg.MacSecTxMacSecSaKeyStatusType, error)
	// ToPbText marshals MacSecTxMacSecSaKeyStatusType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals MacSecTxMacSecSaKeyStatusType to YAML text
	ToYaml() (string, error)
	// ToJson marshals MacSecTxMacSecSaKeyStatusType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals MacSecTxMacSecSaKeyStatusType from protobuf object *otg.MacSecTxMacSecSaKeyStatusType
	FromProto(msg *otg.MacSecTxMacSecSaKeyStatusType) (MacSecTxMacSecSaKeyStatusType, error)
	// FromPbText unmarshals MacSecTxMacSecSaKeyStatusType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals MacSecTxMacSecSaKeyStatusType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals MacSecTxMacSecSaKeyStatusType from JSON text
	FromJson(value string) error
	// Validate validates MacSecTxMacSecSaKeyStatusType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (MacSecTxMacSecSaKeyStatusType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ScId returns IdTypeSecureChannelId, set in MacSecTxMacSecSaKeyStatusType.
	// IdTypeSecureChannelId is tBD
	ScId() IdTypeSecureChannelId
	// SetScId assigns IdTypeSecureChannelId provided by user to MacSecTxMacSecSaKeyStatusType.
	// IdTypeSecureChannelId is tBD
	SetScId(value IdTypeSecureChannelId) MacSecTxMacSecSaKeyStatusType
	// HasScId checks if ScId has been set in MacSecTxMacSecSaKeyStatusType
	HasScId() bool
	// Key0Status returns MacSecTxMacSecSaKeyStatusTypeKey0StatusEnum, set in MacSecTxMacSecSaKeyStatusType
	Key0Status() MacSecTxMacSecSaKeyStatusTypeKey0StatusEnum
	// SetKey0Status assigns MacSecTxMacSecSaKeyStatusTypeKey0StatusEnum provided by user to MacSecTxMacSecSaKeyStatusType
	SetKey0Status(value MacSecTxMacSecSaKeyStatusTypeKey0StatusEnum) MacSecTxMacSecSaKeyStatusType
	// HasKey0Status checks if Key0Status has been set in MacSecTxMacSecSaKeyStatusType
	HasKey0Status() bool
	// Key1Status returns MacSecTxMacSecSaKeyStatusTypeKey1StatusEnum, set in MacSecTxMacSecSaKeyStatusType
	Key1Status() MacSecTxMacSecSaKeyStatusTypeKey1StatusEnum
	// SetKey1Status assigns MacSecTxMacSecSaKeyStatusTypeKey1StatusEnum provided by user to MacSecTxMacSecSaKeyStatusType
	SetKey1Status(value MacSecTxMacSecSaKeyStatusTypeKey1StatusEnum) MacSecTxMacSecSaKeyStatusType
	// HasKey1Status checks if Key1Status has been set in MacSecTxMacSecSaKeyStatusType
	HasKey1Status() bool
	setNil()
}

func (obj *macSecTxMacSecSaKeyStatusType) populateXml(xObj *Argument) error {

	if obj.HasKey0Status() {

		member := Member{
			Name:  "key0status",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.MacSec+eMacSecScKeyState",
			Value: strconv.FormatInt(int64(obj.obj.Key0Status.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasKey1Status() {

		member := Member{
			Name:  "key1status",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.MacSec+eMacSecScKeyState",
			Value: strconv.FormatInt(int64(obj.obj.Key1Status.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *macSecTxMacSecSaKeyStatusType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// ScId returns a IdTypeSecureChannelId
func (obj *macSecTxMacSecSaKeyStatusType) ScId() IdTypeSecureChannelId {
	if obj.obj.ScId == nil {
		obj.obj.ScId = NewIdTypeSecureChannelId().Msg()
	}
	if obj.scIdHolder == nil {
		obj.scIdHolder = &idTypeSecureChannelId{obj: obj.obj.ScId}
	}
	return obj.scIdHolder
}

// TBD
// ScId returns a IdTypeSecureChannelId
func (obj *macSecTxMacSecSaKeyStatusType) HasScId() bool {
	return obj.obj.ScId != nil
}

// TBD
// SetScId sets the IdTypeSecureChannelId value in the MacSecTxMacSecSaKeyStatusType object
func (obj *macSecTxMacSecSaKeyStatusType) SetScId(value IdTypeSecureChannelId) MacSecTxMacSecSaKeyStatusType {

	obj.scIdHolder = nil
	obj.obj.ScId = value.Msg()

	return obj
}

type MacSecTxMacSecSaKeyStatusTypeKey0StatusEnum string

// Enum of Key0Status on MacSecTxMacSecSaKeyStatusType
var MacSecTxMacSecSaKeyStatusTypeKey0Status = struct {
	KEXPIRED MacSecTxMacSecSaKeyStatusTypeKey0StatusEnum
	KACTIVE  MacSecTxMacSecSaKeyStatusTypeKey0StatusEnum
	KFRESH   MacSecTxMacSecSaKeyStatusTypeKey0StatusEnum
}{
	KEXPIRED: MacSecTxMacSecSaKeyStatusTypeKey0StatusEnum("kExpired"),
	KACTIVE:  MacSecTxMacSecSaKeyStatusTypeKey0StatusEnum("kActive"),
	KFRESH:   MacSecTxMacSecSaKeyStatusTypeKey0StatusEnum("kFresh"),
}

func (obj *macSecTxMacSecSaKeyStatusType) Key0Status() MacSecTxMacSecSaKeyStatusTypeKey0StatusEnum {
	return MacSecTxMacSecSaKeyStatusTypeKey0StatusEnum(obj.obj.Key0Status.Enum().String())
}

// TBD
// Key0Status returns a string
func (obj *macSecTxMacSecSaKeyStatusType) HasKey0Status() bool {
	return obj.obj.Key0Status != nil
}

func (obj *macSecTxMacSecSaKeyStatusType) SetKey0Status(value MacSecTxMacSecSaKeyStatusTypeKey0StatusEnum) MacSecTxMacSecSaKeyStatusType {
	intValue, ok := otg.MacSecTxMacSecSaKeyStatusType_Key0Status_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on MacSecTxMacSecSaKeyStatusTypeKey0StatusEnum", string(value)))
		return obj
	}
	enumValue := otg.MacSecTxMacSecSaKeyStatusType_Key0Status_Enum(intValue)
	obj.obj.Key0Status = &enumValue

	return obj
}

type MacSecTxMacSecSaKeyStatusTypeKey1StatusEnum string

// Enum of Key1Status on MacSecTxMacSecSaKeyStatusType
var MacSecTxMacSecSaKeyStatusTypeKey1Status = struct {
	KEXPIRED MacSecTxMacSecSaKeyStatusTypeKey1StatusEnum
	KACTIVE  MacSecTxMacSecSaKeyStatusTypeKey1StatusEnum
	KFRESH   MacSecTxMacSecSaKeyStatusTypeKey1StatusEnum
}{
	KEXPIRED: MacSecTxMacSecSaKeyStatusTypeKey1StatusEnum("kExpired"),
	KACTIVE:  MacSecTxMacSecSaKeyStatusTypeKey1StatusEnum("kActive"),
	KFRESH:   MacSecTxMacSecSaKeyStatusTypeKey1StatusEnum("kFresh"),
}

func (obj *macSecTxMacSecSaKeyStatusType) Key1Status() MacSecTxMacSecSaKeyStatusTypeKey1StatusEnum {
	return MacSecTxMacSecSaKeyStatusTypeKey1StatusEnum(obj.obj.Key1Status.Enum().String())
}

// TBD
// Key1Status returns a string
func (obj *macSecTxMacSecSaKeyStatusType) HasKey1Status() bool {
	return obj.obj.Key1Status != nil
}

func (obj *macSecTxMacSecSaKeyStatusType) SetKey1Status(value MacSecTxMacSecSaKeyStatusTypeKey1StatusEnum) MacSecTxMacSecSaKeyStatusType {
	intValue, ok := otg.MacSecTxMacSecSaKeyStatusType_Key1Status_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on MacSecTxMacSecSaKeyStatusTypeKey1StatusEnum", string(value)))
		return obj
	}
	enumValue := otg.MacSecTxMacSecSaKeyStatusType_Key1Status_Enum(intValue)
	obj.obj.Key1Status = &enumValue

	return obj
}

func (obj *macSecTxMacSecSaKeyStatusType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ScId != nil {

		obj.ScId().validateObj(vObj, set_default)
	}

}

func (obj *macSecTxMacSecSaKeyStatusType) setDefault() {

}

// ***** MacSecRxMacSecSaKeyStatusType *****
type macSecRxMacSecSaKeyStatusType struct {
	validation
	obj        *otg.MacSecRxMacSecSaKeyStatusType
	scIdHolder IdTypeSecureChannelId
}

func NewMacSecRxMacSecSaKeyStatusType() MacSecRxMacSecSaKeyStatusType {
	obj := macSecRxMacSecSaKeyStatusType{obj: &otg.MacSecRxMacSecSaKeyStatusType{}}
	obj.setDefault()
	return &obj
}

func (obj *macSecRxMacSecSaKeyStatusType) Msg() *otg.MacSecRxMacSecSaKeyStatusType {
	return obj.obj
}

func (obj *macSecRxMacSecSaKeyStatusType) SetMsg(msg *otg.MacSecRxMacSecSaKeyStatusType) MacSecRxMacSecSaKeyStatusType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *macSecRxMacSecSaKeyStatusType) ToProto() (*otg.MacSecRxMacSecSaKeyStatusType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *macSecRxMacSecSaKeyStatusType) FromProto(msg *otg.MacSecRxMacSecSaKeyStatusType) (MacSecRxMacSecSaKeyStatusType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *macSecRxMacSecSaKeyStatusType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *macSecRxMacSecSaKeyStatusType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *macSecRxMacSecSaKeyStatusType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecRxMacSecSaKeyStatusType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *macSecRxMacSecSaKeyStatusType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *macSecRxMacSecSaKeyStatusType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *macSecRxMacSecSaKeyStatusType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *macSecRxMacSecSaKeyStatusType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *macSecRxMacSecSaKeyStatusType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *macSecRxMacSecSaKeyStatusType) Clone() (MacSecRxMacSecSaKeyStatusType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewMacSecRxMacSecSaKeyStatusType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *macSecRxMacSecSaKeyStatusType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *macSecRxMacSecSaKeyStatusType) setNil() {
	obj.scIdHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// MacSecRxMacSecSaKeyStatusType is tBD
type MacSecRxMacSecSaKeyStatusType interface {
	Validation
	// Msg marshals MacSecRxMacSecSaKeyStatusType to protobuf object *otg.MacSecRxMacSecSaKeyStatusType
	// and doesn't set defaults
	Msg() *otg.MacSecRxMacSecSaKeyStatusType
	// SetMsg unmarshals MacSecRxMacSecSaKeyStatusType from protobuf object *otg.MacSecRxMacSecSaKeyStatusType
	// and doesn't set defaults
	SetMsg(*otg.MacSecRxMacSecSaKeyStatusType) MacSecRxMacSecSaKeyStatusType
	// ToProto marshals MacSecRxMacSecSaKeyStatusType to protobuf object *otg.MacSecRxMacSecSaKeyStatusType
	ToProto() (*otg.MacSecRxMacSecSaKeyStatusType, error)
	// ToPbText marshals MacSecRxMacSecSaKeyStatusType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals MacSecRxMacSecSaKeyStatusType to YAML text
	ToYaml() (string, error)
	// ToJson marshals MacSecRxMacSecSaKeyStatusType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals MacSecRxMacSecSaKeyStatusType from protobuf object *otg.MacSecRxMacSecSaKeyStatusType
	FromProto(msg *otg.MacSecRxMacSecSaKeyStatusType) (MacSecRxMacSecSaKeyStatusType, error)
	// FromPbText unmarshals MacSecRxMacSecSaKeyStatusType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals MacSecRxMacSecSaKeyStatusType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals MacSecRxMacSecSaKeyStatusType from JSON text
	FromJson(value string) error
	// Validate validates MacSecRxMacSecSaKeyStatusType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (MacSecRxMacSecSaKeyStatusType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ScId returns IdTypeSecureChannelId, set in MacSecRxMacSecSaKeyStatusType.
	// IdTypeSecureChannelId is tBD
	ScId() IdTypeSecureChannelId
	// SetScId assigns IdTypeSecureChannelId provided by user to MacSecRxMacSecSaKeyStatusType.
	// IdTypeSecureChannelId is tBD
	SetScId(value IdTypeSecureChannelId) MacSecRxMacSecSaKeyStatusType
	// HasScId checks if ScId has been set in MacSecRxMacSecSaKeyStatusType
	HasScId() bool
	// Key0Status returns MacSecRxMacSecSaKeyStatusTypeKey0StatusEnum, set in MacSecRxMacSecSaKeyStatusType
	Key0Status() MacSecRxMacSecSaKeyStatusTypeKey0StatusEnum
	// SetKey0Status assigns MacSecRxMacSecSaKeyStatusTypeKey0StatusEnum provided by user to MacSecRxMacSecSaKeyStatusType
	SetKey0Status(value MacSecRxMacSecSaKeyStatusTypeKey0StatusEnum) MacSecRxMacSecSaKeyStatusType
	// HasKey0Status checks if Key0Status has been set in MacSecRxMacSecSaKeyStatusType
	HasKey0Status() bool
	// Lpn0 returns int64, set in MacSecRxMacSecSaKeyStatusType.
	Lpn0() int64
	// SetLpn0 assigns int64 provided by user to MacSecRxMacSecSaKeyStatusType
	SetLpn0(value int64) MacSecRxMacSecSaKeyStatusType
	// HasLpn0 checks if Lpn0 has been set in MacSecRxMacSecSaKeyStatusType
	HasLpn0() bool
	// Key1Status returns MacSecRxMacSecSaKeyStatusTypeKey1StatusEnum, set in MacSecRxMacSecSaKeyStatusType
	Key1Status() MacSecRxMacSecSaKeyStatusTypeKey1StatusEnum
	// SetKey1Status assigns MacSecRxMacSecSaKeyStatusTypeKey1StatusEnum provided by user to MacSecRxMacSecSaKeyStatusType
	SetKey1Status(value MacSecRxMacSecSaKeyStatusTypeKey1StatusEnum) MacSecRxMacSecSaKeyStatusType
	// HasKey1Status checks if Key1Status has been set in MacSecRxMacSecSaKeyStatusType
	HasKey1Status() bool
	// Lpn1 returns int64, set in MacSecRxMacSecSaKeyStatusType.
	Lpn1() int64
	// SetLpn1 assigns int64 provided by user to MacSecRxMacSecSaKeyStatusType
	SetLpn1(value int64) MacSecRxMacSecSaKeyStatusType
	// HasLpn1 checks if Lpn1 has been set in MacSecRxMacSecSaKeyStatusType
	HasLpn1() bool
	setNil()
}

func (obj *macSecRxMacSecSaKeyStatusType) populateXml(xObj *Argument) error {

	if obj.HasKey0Status() {

		member := Member{
			Name:  "key0status",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.MacSec+eMacSecScKeyState",
			Value: strconv.FormatInt(int64(obj.obj.Key0Status.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasLpn0() {

		member := Member{
			Name:  "lpn0",
			Type:  "int64",
			Value: strconv.FormatInt(obj.Lpn0(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasKey1Status() {

		member := Member{
			Name:  "key1status",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.MacSec+eMacSecScKeyState",
			Value: strconv.FormatInt(int64(obj.obj.Key1Status.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasLpn1() {

		member := Member{
			Name:  "lpn1",
			Type:  "int64",
			Value: strconv.FormatInt(obj.Lpn1(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *macSecRxMacSecSaKeyStatusType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// ScId returns a IdTypeSecureChannelId
func (obj *macSecRxMacSecSaKeyStatusType) ScId() IdTypeSecureChannelId {
	if obj.obj.ScId == nil {
		obj.obj.ScId = NewIdTypeSecureChannelId().Msg()
	}
	if obj.scIdHolder == nil {
		obj.scIdHolder = &idTypeSecureChannelId{obj: obj.obj.ScId}
	}
	return obj.scIdHolder
}

// TBD
// ScId returns a IdTypeSecureChannelId
func (obj *macSecRxMacSecSaKeyStatusType) HasScId() bool {
	return obj.obj.ScId != nil
}

// TBD
// SetScId sets the IdTypeSecureChannelId value in the MacSecRxMacSecSaKeyStatusType object
func (obj *macSecRxMacSecSaKeyStatusType) SetScId(value IdTypeSecureChannelId) MacSecRxMacSecSaKeyStatusType {

	obj.scIdHolder = nil
	obj.obj.ScId = value.Msg()

	return obj
}

type MacSecRxMacSecSaKeyStatusTypeKey0StatusEnum string

// Enum of Key0Status on MacSecRxMacSecSaKeyStatusType
var MacSecRxMacSecSaKeyStatusTypeKey0Status = struct {
	KEXPIRED MacSecRxMacSecSaKeyStatusTypeKey0StatusEnum
	KACTIVE  MacSecRxMacSecSaKeyStatusTypeKey0StatusEnum
	KFRESH   MacSecRxMacSecSaKeyStatusTypeKey0StatusEnum
}{
	KEXPIRED: MacSecRxMacSecSaKeyStatusTypeKey0StatusEnum("kExpired"),
	KACTIVE:  MacSecRxMacSecSaKeyStatusTypeKey0StatusEnum("kActive"),
	KFRESH:   MacSecRxMacSecSaKeyStatusTypeKey0StatusEnum("kFresh"),
}

func (obj *macSecRxMacSecSaKeyStatusType) Key0Status() MacSecRxMacSecSaKeyStatusTypeKey0StatusEnum {
	return MacSecRxMacSecSaKeyStatusTypeKey0StatusEnum(obj.obj.Key0Status.Enum().String())
}

// TBD
// Key0Status returns a string
func (obj *macSecRxMacSecSaKeyStatusType) HasKey0Status() bool {
	return obj.obj.Key0Status != nil
}

func (obj *macSecRxMacSecSaKeyStatusType) SetKey0Status(value MacSecRxMacSecSaKeyStatusTypeKey0StatusEnum) MacSecRxMacSecSaKeyStatusType {
	intValue, ok := otg.MacSecRxMacSecSaKeyStatusType_Key0Status_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on MacSecRxMacSecSaKeyStatusTypeKey0StatusEnum", string(value)))
		return obj
	}
	enumValue := otg.MacSecRxMacSecSaKeyStatusType_Key0Status_Enum(intValue)
	obj.obj.Key0Status = &enumValue

	return obj
}

// Current State of the LPN value for the Key0 of SA.   Only the lower 32 bits are valid for GCM modes.
// Lpn0 returns a int64
func (obj *macSecRxMacSecSaKeyStatusType) Lpn0() int64 {

	return *obj.obj.Lpn0

}

// Current State of the LPN value for the Key0 of SA.   Only the lower 32 bits are valid for GCM modes.
// Lpn0 returns a int64
func (obj *macSecRxMacSecSaKeyStatusType) HasLpn0() bool {
	return obj.obj.Lpn0 != nil
}

// Current State of the LPN value for the Key0 of SA.   Only the lower 32 bits are valid for GCM modes.
// SetLpn0 sets the int64 value in the MacSecRxMacSecSaKeyStatusType object
func (obj *macSecRxMacSecSaKeyStatusType) SetLpn0(value int64) MacSecRxMacSecSaKeyStatusType {

	obj.obj.Lpn0 = &value
	return obj
}

type MacSecRxMacSecSaKeyStatusTypeKey1StatusEnum string

// Enum of Key1Status on MacSecRxMacSecSaKeyStatusType
var MacSecRxMacSecSaKeyStatusTypeKey1Status = struct {
	KEXPIRED MacSecRxMacSecSaKeyStatusTypeKey1StatusEnum
	KACTIVE  MacSecRxMacSecSaKeyStatusTypeKey1StatusEnum
	KFRESH   MacSecRxMacSecSaKeyStatusTypeKey1StatusEnum
}{
	KEXPIRED: MacSecRxMacSecSaKeyStatusTypeKey1StatusEnum("kExpired"),
	KACTIVE:  MacSecRxMacSecSaKeyStatusTypeKey1StatusEnum("kActive"),
	KFRESH:   MacSecRxMacSecSaKeyStatusTypeKey1StatusEnum("kFresh"),
}

func (obj *macSecRxMacSecSaKeyStatusType) Key1Status() MacSecRxMacSecSaKeyStatusTypeKey1StatusEnum {
	return MacSecRxMacSecSaKeyStatusTypeKey1StatusEnum(obj.obj.Key1Status.Enum().String())
}

// TBD
// Key1Status returns a string
func (obj *macSecRxMacSecSaKeyStatusType) HasKey1Status() bool {
	return obj.obj.Key1Status != nil
}

func (obj *macSecRxMacSecSaKeyStatusType) SetKey1Status(value MacSecRxMacSecSaKeyStatusTypeKey1StatusEnum) MacSecRxMacSecSaKeyStatusType {
	intValue, ok := otg.MacSecRxMacSecSaKeyStatusType_Key1Status_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on MacSecRxMacSecSaKeyStatusTypeKey1StatusEnum", string(value)))
		return obj
	}
	enumValue := otg.MacSecRxMacSecSaKeyStatusType_Key1Status_Enum(intValue)
	obj.obj.Key1Status = &enumValue

	return obj
}

// Current State of the LPN value for the Key1 of SA.   Only the lower 32 bits are valid for GCM modes.
// Lpn1 returns a int64
func (obj *macSecRxMacSecSaKeyStatusType) Lpn1() int64 {

	return *obj.obj.Lpn1

}

// Current State of the LPN value for the Key1 of SA.   Only the lower 32 bits are valid for GCM modes.
// Lpn1 returns a int64
func (obj *macSecRxMacSecSaKeyStatusType) HasLpn1() bool {
	return obj.obj.Lpn1 != nil
}

// Current State of the LPN value for the Key1 of SA.   Only the lower 32 bits are valid for GCM modes.
// SetLpn1 sets the int64 value in the MacSecRxMacSecSaKeyStatusType object
func (obj *macSecRxMacSecSaKeyStatusType) SetLpn1(value int64) MacSecRxMacSecSaKeyStatusType {

	obj.obj.Lpn1 = &value
	return obj
}

func (obj *macSecRxMacSecSaKeyStatusType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ScId != nil {

		obj.ScId().validateObj(vObj, set_default)
	}

}

func (obj *macSecRxMacSecSaKeyStatusType) setDefault() {

}

// ***** StatCatalogStHtgCatalogStatList *****
type statCatalogStHtgCatalogStatList struct {
	validation
	obj                        *otg.StatCatalogStHtgCatalogStatList
	stHtgCatalogStatListHolder StatCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter
}

func NewStatCatalogStHtgCatalogStatList() StatCatalogStHtgCatalogStatList {
	obj := statCatalogStHtgCatalogStatList{obj: &otg.StatCatalogStHtgCatalogStatList{}}
	obj.setDefault()
	return &obj
}

func (obj *statCatalogStHtgCatalogStatList) Msg() *otg.StatCatalogStHtgCatalogStatList {
	return obj.obj
}

func (obj *statCatalogStHtgCatalogStatList) SetMsg(msg *otg.StatCatalogStHtgCatalogStatList) StatCatalogStHtgCatalogStatList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *statCatalogStHtgCatalogStatList) ToProto() (*otg.StatCatalogStHtgCatalogStatList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *statCatalogStHtgCatalogStatList) FromProto(msg *otg.StatCatalogStHtgCatalogStatList) (StatCatalogStHtgCatalogStatList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *statCatalogStHtgCatalogStatList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *statCatalogStHtgCatalogStatList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *statCatalogStHtgCatalogStatList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *statCatalogStHtgCatalogStatList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *statCatalogStHtgCatalogStatList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *statCatalogStHtgCatalogStatList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *statCatalogStHtgCatalogStatList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *statCatalogStHtgCatalogStatList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *statCatalogStHtgCatalogStatList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *statCatalogStHtgCatalogStatList) Clone() (StatCatalogStHtgCatalogStatList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStatCatalogStHtgCatalogStatList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *statCatalogStHtgCatalogStatList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *statCatalogStHtgCatalogStatList) setNil() {
	obj.stHtgCatalogStatListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StatCatalogStHtgCatalogStatList is tBD
type StatCatalogStHtgCatalogStatList interface {
	Validation
	// Msg marshals StatCatalogStHtgCatalogStatList to protobuf object *otg.StatCatalogStHtgCatalogStatList
	// and doesn't set defaults
	Msg() *otg.StatCatalogStHtgCatalogStatList
	// SetMsg unmarshals StatCatalogStHtgCatalogStatList from protobuf object *otg.StatCatalogStHtgCatalogStatList
	// and doesn't set defaults
	SetMsg(*otg.StatCatalogStHtgCatalogStatList) StatCatalogStHtgCatalogStatList
	// ToProto marshals StatCatalogStHtgCatalogStatList to protobuf object *otg.StatCatalogStHtgCatalogStatList
	ToProto() (*otg.StatCatalogStHtgCatalogStatList, error)
	// ToPbText marshals StatCatalogStHtgCatalogStatList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StatCatalogStHtgCatalogStatList to YAML text
	ToYaml() (string, error)
	// ToJson marshals StatCatalogStHtgCatalogStatList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StatCatalogStHtgCatalogStatList from protobuf object *otg.StatCatalogStHtgCatalogStatList
	FromProto(msg *otg.StatCatalogStHtgCatalogStatList) (StatCatalogStHtgCatalogStatList, error)
	// FromPbText unmarshals StatCatalogStHtgCatalogStatList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StatCatalogStHtgCatalogStatList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StatCatalogStHtgCatalogStatList from JSON text
	FromJson(value string) error
	// Validate validates StatCatalogStHtgCatalogStatList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StatCatalogStHtgCatalogStatList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// StHtgCatalogStatList returns StatCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIterIter, set in StatCatalogStHtgCatalogStatList
	StHtgCatalogStatList() StatCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter
	setNil()
}

func (obj *statCatalogStHtgCatalogStatList) populateXml(xObj *Argument) error {

	if len(obj.StHtgCatalogStatList().Items()) != 0 {
		for _, item := range obj.StHtgCatalogStatList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *statCatalogStHtgCatalogStatList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// StHtgCatalogStatList returns a []StatCatalogStHtgCatalogStat
func (obj *statCatalogStHtgCatalogStatList) StHtgCatalogStatList() StatCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter {
	if len(obj.obj.StHtgCatalogStatList) == 0 {
		obj.obj.StHtgCatalogStatList = []*otg.StatCatalogStHtgCatalogStat{}
	}
	if obj.stHtgCatalogStatListHolder == nil {
		obj.stHtgCatalogStatListHolder = newStatCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter(&obj.obj.StHtgCatalogStatList).setMsg(obj)
	}
	return obj.stHtgCatalogStatListHolder
}

type statCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter struct {
	obj                              *statCatalogStHtgCatalogStatList
	statCatalogStHtgCatalogStatSlice []StatCatalogStHtgCatalogStat
	fieldPtr                         *[]*otg.StatCatalogStHtgCatalogStat
}

func newStatCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter(ptr *[]*otg.StatCatalogStHtgCatalogStat) StatCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter {
	return &statCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter{fieldPtr: ptr}
}

type StatCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter interface {
	setMsg(*statCatalogStHtgCatalogStatList) StatCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter
	Items() []StatCatalogStHtgCatalogStat
	Add() StatCatalogStHtgCatalogStat
	Append(items ...StatCatalogStHtgCatalogStat) StatCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter
	Set(index int, newObj StatCatalogStHtgCatalogStat) StatCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter
	Clear() StatCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter
	clearHolderSlice() StatCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter
	appendHolderSlice(item StatCatalogStHtgCatalogStat) StatCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter
}

func (obj *statCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter) setMsg(msg *statCatalogStHtgCatalogStatList) StatCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&statCatalogStHtgCatalogStat{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *statCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter) Items() []StatCatalogStHtgCatalogStat {
	return obj.statCatalogStHtgCatalogStatSlice
}

func (obj *statCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter) Add() StatCatalogStHtgCatalogStat {
	newObj := &otg.StatCatalogStHtgCatalogStat{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &statCatalogStHtgCatalogStat{obj: newObj}
	newLibObj.setDefault()
	obj.statCatalogStHtgCatalogStatSlice = append(obj.statCatalogStHtgCatalogStatSlice, newLibObj)
	return newLibObj
}

func (obj *statCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter) Append(items ...StatCatalogStHtgCatalogStat) StatCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.statCatalogStHtgCatalogStatSlice = append(obj.statCatalogStHtgCatalogStatSlice, item)
	}
	return obj
}

func (obj *statCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter) Set(index int, newObj StatCatalogStHtgCatalogStat) StatCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.statCatalogStHtgCatalogStatSlice[index] = newObj
	return obj
}
func (obj *statCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter) Clear() StatCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.StatCatalogStHtgCatalogStat{}
		obj.statCatalogStHtgCatalogStatSlice = []StatCatalogStHtgCatalogStat{}
	}
	return obj
}
func (obj *statCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter) clearHolderSlice() StatCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter {
	if len(obj.statCatalogStHtgCatalogStatSlice) > 0 {
		obj.statCatalogStHtgCatalogStatSlice = []StatCatalogStHtgCatalogStat{}
	}
	return obj
}
func (obj *statCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter) appendHolderSlice(item StatCatalogStHtgCatalogStat) StatCatalogStHtgCatalogStatListStatCatalogStHtgCatalogStatIter {
	obj.statCatalogStHtgCatalogStatSlice = append(obj.statCatalogStHtgCatalogStatSlice, item)
	return obj
}

func (obj *statCatalogStHtgCatalogStatList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.StHtgCatalogStatList) != 0 {

		if set_default {
			obj.StHtgCatalogStatList().clearHolderSlice()
			for _, item := range obj.obj.StHtgCatalogStatList {
				obj.StHtgCatalogStatList().appendHolderSlice(&statCatalogStHtgCatalogStat{obj: item})
			}
		}
		for _, item := range obj.StHtgCatalogStatList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *statCatalogStHtgCatalogStatList) setDefault() {

}

// ***** PortPfcPriorityQueueType *****
type portPfcPriorityQueueType struct {
	validation
	obj         *otg.PortPfcPriorityQueueType
	queueHolder PortPfcPriorityQueueChannelSet
}

func NewPortPfcPriorityQueueType() PortPfcPriorityQueueType {
	obj := portPfcPriorityQueueType{obj: &otg.PortPfcPriorityQueueType{}}
	obj.setDefault()
	return &obj
}

func (obj *portPfcPriorityQueueType) Msg() *otg.PortPfcPriorityQueueType {
	return obj.obj
}

func (obj *portPfcPriorityQueueType) SetMsg(msg *otg.PortPfcPriorityQueueType) PortPfcPriorityQueueType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *portPfcPriorityQueueType) ToProto() (*otg.PortPfcPriorityQueueType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *portPfcPriorityQueueType) FromProto(msg *otg.PortPfcPriorityQueueType) (PortPfcPriorityQueueType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *portPfcPriorityQueueType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *portPfcPriorityQueueType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portPfcPriorityQueueType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portPfcPriorityQueueType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *portPfcPriorityQueueType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portPfcPriorityQueueType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *portPfcPriorityQueueType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *portPfcPriorityQueueType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *portPfcPriorityQueueType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *portPfcPriorityQueueType) Clone() (PortPfcPriorityQueueType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPortPfcPriorityQueueType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *portPfcPriorityQueueType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *portPfcPriorityQueueType) setNil() {
	obj.queueHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// PortPfcPriorityQueueType is tBD
type PortPfcPriorityQueueType interface {
	Validation
	// Msg marshals PortPfcPriorityQueueType to protobuf object *otg.PortPfcPriorityQueueType
	// and doesn't set defaults
	Msg() *otg.PortPfcPriorityQueueType
	// SetMsg unmarshals PortPfcPriorityQueueType from protobuf object *otg.PortPfcPriorityQueueType
	// and doesn't set defaults
	SetMsg(*otg.PortPfcPriorityQueueType) PortPfcPriorityQueueType
	// ToProto marshals PortPfcPriorityQueueType to protobuf object *otg.PortPfcPriorityQueueType
	ToProto() (*otg.PortPfcPriorityQueueType, error)
	// ToPbText marshals PortPfcPriorityQueueType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PortPfcPriorityQueueType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PortPfcPriorityQueueType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PortPfcPriorityQueueType from protobuf object *otg.PortPfcPriorityQueueType
	FromProto(msg *otg.PortPfcPriorityQueueType) (PortPfcPriorityQueueType, error)
	// FromPbText unmarshals PortPfcPriorityQueueType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PortPfcPriorityQueueType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PortPfcPriorityQueueType from JSON text
	FromJson(value string) error
	// Validate validates PortPfcPriorityQueueType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PortPfcPriorityQueueType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Enable returns bool, set in PortPfcPriorityQueueType.
	Enable() bool
	// SetEnable assigns bool provided by user to PortPfcPriorityQueueType
	SetEnable(value bool) PortPfcPriorityQueueType
	// HasEnable checks if Enable has been set in PortPfcPriorityQueueType
	HasEnable() bool
	// Queue returns PortPfcPriorityQueueChannelSet, set in PortPfcPriorityQueueType.
	// PortPfcPriorityQueueChannelSet is tBD
	Queue() PortPfcPriorityQueueChannelSet
	// SetQueue assigns PortPfcPriorityQueueChannelSet provided by user to PortPfcPriorityQueueType.
	// PortPfcPriorityQueueChannelSet is tBD
	SetQueue(value PortPfcPriorityQueueChannelSet) PortPfcPriorityQueueType
	// HasQueue checks if Queue has been set in PortPfcPriorityQueueType
	HasQueue() bool
	setNil()
}

func (obj *portPfcPriorityQueueType) populateXml(xObj *Argument) error {

	if obj.HasEnable() {
		var value string
		if obj.Enable() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enable",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *portPfcPriorityQueueType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Enable returns a bool
func (obj *portPfcPriorityQueueType) Enable() bool {

	return *obj.obj.Enable

}

// TBD
// Enable returns a bool
func (obj *portPfcPriorityQueueType) HasEnable() bool {
	return obj.obj.Enable != nil
}

// TBD
// SetEnable sets the bool value in the PortPfcPriorityQueueType object
func (obj *portPfcPriorityQueueType) SetEnable(value bool) PortPfcPriorityQueueType {

	obj.obj.Enable = &value
	return obj
}

// TBD
// Queue returns a PortPfcPriorityQueueChannelSet
func (obj *portPfcPriorityQueueType) Queue() PortPfcPriorityQueueChannelSet {
	if obj.obj.Queue == nil {
		obj.obj.Queue = NewPortPfcPriorityQueueChannelSet().Msg()
	}
	if obj.queueHolder == nil {
		obj.queueHolder = &portPfcPriorityQueueChannelSet{obj: obj.obj.Queue}
	}
	return obj.queueHolder
}

// TBD
// Queue returns a PortPfcPriorityQueueChannelSet
func (obj *portPfcPriorityQueueType) HasQueue() bool {
	return obj.obj.Queue != nil
}

// TBD
// SetQueue sets the PortPfcPriorityQueueChannelSet value in the PortPfcPriorityQueueType object
func (obj *portPfcPriorityQueueType) SetQueue(value PortPfcPriorityQueueChannelSet) PortPfcPriorityQueueType {

	obj.queueHolder = nil
	obj.obj.Queue = value.Msg()

	return obj
}

func (obj *portPfcPriorityQueueType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Queue != nil {

		obj.Queue().validateObj(vObj, set_default)
	}

}

func (obj *portPfcPriorityQueueType) setDefault() {

}

// ***** PortTxLaneList *****
type portTxLaneList struct {
	validation
	obj              *otg.PortTxLaneList
	txLaneListHolder PortTxLaneListPortTxLaneTypeIter
}

func NewPortTxLaneList() PortTxLaneList {
	obj := portTxLaneList{obj: &otg.PortTxLaneList{}}
	obj.setDefault()
	return &obj
}

func (obj *portTxLaneList) Msg() *otg.PortTxLaneList {
	return obj.obj
}

func (obj *portTxLaneList) SetMsg(msg *otg.PortTxLaneList) PortTxLaneList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *portTxLaneList) ToProto() (*otg.PortTxLaneList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *portTxLaneList) FromProto(msg *otg.PortTxLaneList) (PortTxLaneList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *portTxLaneList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *portTxLaneList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portTxLaneList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portTxLaneList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *portTxLaneList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portTxLaneList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *portTxLaneList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *portTxLaneList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *portTxLaneList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *portTxLaneList) Clone() (PortTxLaneList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPortTxLaneList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *portTxLaneList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *portTxLaneList) setNil() {
	obj.txLaneListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// PortTxLaneList is tBD
type PortTxLaneList interface {
	Validation
	// Msg marshals PortTxLaneList to protobuf object *otg.PortTxLaneList
	// and doesn't set defaults
	Msg() *otg.PortTxLaneList
	// SetMsg unmarshals PortTxLaneList from protobuf object *otg.PortTxLaneList
	// and doesn't set defaults
	SetMsg(*otg.PortTxLaneList) PortTxLaneList
	// ToProto marshals PortTxLaneList to protobuf object *otg.PortTxLaneList
	ToProto() (*otg.PortTxLaneList, error)
	// ToPbText marshals PortTxLaneList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PortTxLaneList to YAML text
	ToYaml() (string, error)
	// ToJson marshals PortTxLaneList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PortTxLaneList from protobuf object *otg.PortTxLaneList
	FromProto(msg *otg.PortTxLaneList) (PortTxLaneList, error)
	// FromPbText unmarshals PortTxLaneList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PortTxLaneList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PortTxLaneList from JSON text
	FromJson(value string) error
	// Validate validates PortTxLaneList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PortTxLaneList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// TxLaneList returns PortTxLaneListPortTxLaneTypeIterIter, set in PortTxLaneList
	TxLaneList() PortTxLaneListPortTxLaneTypeIter
	setNil()
}

func (obj *portTxLaneList) populateXml(xObj *Argument) error {

	if len(obj.TxLaneList().Items()) != 0 {
		for _, item := range obj.TxLaneList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *portTxLaneList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// TxLaneList returns a []PortTxLaneType
func (obj *portTxLaneList) TxLaneList() PortTxLaneListPortTxLaneTypeIter {
	if len(obj.obj.TxLaneList) == 0 {
		obj.obj.TxLaneList = []*otg.PortTxLaneType{}
	}
	if obj.txLaneListHolder == nil {
		obj.txLaneListHolder = newPortTxLaneListPortTxLaneTypeIter(&obj.obj.TxLaneList).setMsg(obj)
	}
	return obj.txLaneListHolder
}

type portTxLaneListPortTxLaneTypeIter struct {
	obj                 *portTxLaneList
	portTxLaneTypeSlice []PortTxLaneType
	fieldPtr            *[]*otg.PortTxLaneType
}

func newPortTxLaneListPortTxLaneTypeIter(ptr *[]*otg.PortTxLaneType) PortTxLaneListPortTxLaneTypeIter {
	return &portTxLaneListPortTxLaneTypeIter{fieldPtr: ptr}
}

type PortTxLaneListPortTxLaneTypeIter interface {
	setMsg(*portTxLaneList) PortTxLaneListPortTxLaneTypeIter
	Items() []PortTxLaneType
	Add() PortTxLaneType
	Append(items ...PortTxLaneType) PortTxLaneListPortTxLaneTypeIter
	Set(index int, newObj PortTxLaneType) PortTxLaneListPortTxLaneTypeIter
	Clear() PortTxLaneListPortTxLaneTypeIter
	clearHolderSlice() PortTxLaneListPortTxLaneTypeIter
	appendHolderSlice(item PortTxLaneType) PortTxLaneListPortTxLaneTypeIter
}

func (obj *portTxLaneListPortTxLaneTypeIter) setMsg(msg *portTxLaneList) PortTxLaneListPortTxLaneTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&portTxLaneType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *portTxLaneListPortTxLaneTypeIter) Items() []PortTxLaneType {
	return obj.portTxLaneTypeSlice
}

func (obj *portTxLaneListPortTxLaneTypeIter) Add() PortTxLaneType {
	newObj := &otg.PortTxLaneType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &portTxLaneType{obj: newObj}
	newLibObj.setDefault()
	obj.portTxLaneTypeSlice = append(obj.portTxLaneTypeSlice, newLibObj)
	return newLibObj
}

func (obj *portTxLaneListPortTxLaneTypeIter) Append(items ...PortTxLaneType) PortTxLaneListPortTxLaneTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.portTxLaneTypeSlice = append(obj.portTxLaneTypeSlice, item)
	}
	return obj
}

func (obj *portTxLaneListPortTxLaneTypeIter) Set(index int, newObj PortTxLaneType) PortTxLaneListPortTxLaneTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.portTxLaneTypeSlice[index] = newObj
	return obj
}
func (obj *portTxLaneListPortTxLaneTypeIter) Clear() PortTxLaneListPortTxLaneTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.PortTxLaneType{}
		obj.portTxLaneTypeSlice = []PortTxLaneType{}
	}
	return obj
}
func (obj *portTxLaneListPortTxLaneTypeIter) clearHolderSlice() PortTxLaneListPortTxLaneTypeIter {
	if len(obj.portTxLaneTypeSlice) > 0 {
		obj.portTxLaneTypeSlice = []PortTxLaneType{}
	}
	return obj
}
func (obj *portTxLaneListPortTxLaneTypeIter) appendHolderSlice(item PortTxLaneType) PortTxLaneListPortTxLaneTypeIter {
	obj.portTxLaneTypeSlice = append(obj.portTxLaneTypeSlice, item)
	return obj
}

func (obj *portTxLaneList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.TxLaneList) != 0 {

		if set_default {
			obj.TxLaneList().clearHolderSlice()
			for _, item := range obj.obj.TxLaneList {
				obj.TxLaneList().appendHolderSlice(&portTxLaneType{obj: item})
			}
		}
		for _, item := range obj.TxLaneList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *portTxLaneList) setDefault() {

}

// ***** PFTypeKBType *****
type pFTypeKBType struct {
	validation
	obj *otg.PFTypeKBType
}

func NewPFTypeKBType() PFTypeKBType {
	obj := pFTypeKBType{obj: &otg.PFTypeKBType{}}
	obj.setDefault()
	return &obj
}

func (obj *pFTypeKBType) Msg() *otg.PFTypeKBType {
	return obj.obj
}

func (obj *pFTypeKBType) SetMsg(msg *otg.PFTypeKBType) PFTypeKBType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *pFTypeKBType) ToProto() (*otg.PFTypeKBType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *pFTypeKBType) FromProto(msg *otg.PFTypeKBType) (PFTypeKBType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *pFTypeKBType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *pFTypeKBType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *pFTypeKBType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypeKBType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *pFTypeKBType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypeKBType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *pFTypeKBType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *pFTypeKBType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *pFTypeKBType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *pFTypeKBType) Clone() (PFTypeKBType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPFTypeKBType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *pFTypeKBType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// PFTypeKBType is model a quantity of data in KB units.
type PFTypeKBType interface {
	Validation
	// Msg marshals PFTypeKBType to protobuf object *otg.PFTypeKBType
	// and doesn't set defaults
	Msg() *otg.PFTypeKBType
	// SetMsg unmarshals PFTypeKBType from protobuf object *otg.PFTypeKBType
	// and doesn't set defaults
	SetMsg(*otg.PFTypeKBType) PFTypeKBType
	// ToProto marshals PFTypeKBType to protobuf object *otg.PFTypeKBType
	ToProto() (*otg.PFTypeKBType, error)
	// ToPbText marshals PFTypeKBType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PFTypeKBType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PFTypeKBType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PFTypeKBType from protobuf object *otg.PFTypeKBType
	FromProto(msg *otg.PFTypeKBType) (PFTypeKBType, error)
	// FromPbText unmarshals PFTypeKBType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PFTypeKBType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PFTypeKBType from JSON text
	FromJson(value string) error
	// Validate validates PFTypeKBType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PFTypeKBType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// KB returns int32, set in PFTypeKBType.
	KB() int32
	// SetKB assigns int32 provided by user to PFTypeKBType
	SetKB(value int32) PFTypeKBType
	// HasKB checks if KB has been set in PFTypeKBType
	HasKB() bool
}

func (obj *pFTypeKBType) populateXml(xObj *Argument) error {

	if obj.HasKB() {

		member := Member{
			Name:  "kb",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.KB()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *pFTypeKBType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// KB returns a int32
func (obj *pFTypeKBType) KB() int32 {

	return *obj.obj.KB

}

// TBD
// KB returns a int32
func (obj *pFTypeKBType) HasKB() bool {
	return obj.obj.KB != nil
}

// TBD
// SetKB sets the int32 value in the PFTypeKBType object
func (obj *pFTypeKBType) SetKB(value int32) PFTypeKBType {

	obj.obj.KB = &value
	return obj
}

func (obj *pFTypeKBType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *pFTypeKBType) setDefault() {

}

// ***** CapturePatternType *****
type capturePatternType struct {
	validation
	obj                  *otg.CapturePatternType
	patternIdHolder      IdTypeCapturePatternId
	srcAddrPatternHolder CaptureMacPatternType
	dstAddrPatternHolder CaptureMacPatternType
	dataPatternHolder    CaptureDataPatternType
	qosPatternHolder     CaptureQoSPatternType
}

func NewCapturePatternType() CapturePatternType {
	obj := capturePatternType{obj: &otg.CapturePatternType{}}
	obj.setDefault()
	return &obj
}

func (obj *capturePatternType) Msg() *otg.CapturePatternType {
	return obj.obj
}

func (obj *capturePatternType) SetMsg(msg *otg.CapturePatternType) CapturePatternType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *capturePatternType) ToProto() (*otg.CapturePatternType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *capturePatternType) FromProto(msg *otg.CapturePatternType) (CapturePatternType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *capturePatternType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *capturePatternType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *capturePatternType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *capturePatternType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *capturePatternType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *capturePatternType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *capturePatternType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *capturePatternType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *capturePatternType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *capturePatternType) Clone() (CapturePatternType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewCapturePatternType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *capturePatternType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *capturePatternType) setNil() {
	obj.patternIdHolder = nil
	obj.srcAddrPatternHolder = nil
	obj.dstAddrPatternHolder = nil
	obj.dataPatternHolder = nil
	obj.qosPatternHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// CapturePatternType is tBD
type CapturePatternType interface {
	Validation
	// Msg marshals CapturePatternType to protobuf object *otg.CapturePatternType
	// and doesn't set defaults
	Msg() *otg.CapturePatternType
	// SetMsg unmarshals CapturePatternType from protobuf object *otg.CapturePatternType
	// and doesn't set defaults
	SetMsg(*otg.CapturePatternType) CapturePatternType
	// ToProto marshals CapturePatternType to protobuf object *otg.CapturePatternType
	ToProto() (*otg.CapturePatternType, error)
	// ToPbText marshals CapturePatternType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals CapturePatternType to YAML text
	ToYaml() (string, error)
	// ToJson marshals CapturePatternType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals CapturePatternType from protobuf object *otg.CapturePatternType
	FromProto(msg *otg.CapturePatternType) (CapturePatternType, error)
	// FromPbText unmarshals CapturePatternType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals CapturePatternType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals CapturePatternType from JSON text
	FromJson(value string) error
	// Validate validates CapturePatternType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (CapturePatternType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// PatternId returns IdTypeCapturePatternId, set in CapturePatternType.
	// IdTypeCapturePatternId is tBD
	PatternId() IdTypeCapturePatternId
	// SetPatternId assigns IdTypeCapturePatternId provided by user to CapturePatternType.
	// IdTypeCapturePatternId is tBD
	SetPatternId(value IdTypeCapturePatternId) CapturePatternType
	// HasPatternId checks if PatternId has been set in CapturePatternType
	HasPatternId() bool
	// PatternKind returns CapturePatternTypePatternKindEnum, set in CapturePatternType
	PatternKind() CapturePatternTypePatternKindEnum
	// SetPatternKind assigns CapturePatternTypePatternKindEnum provided by user to CapturePatternType
	SetPatternKind(value CapturePatternTypePatternKindEnum) CapturePatternType
	// HasPatternKind checks if PatternKind has been set in CapturePatternType
	HasPatternKind() bool
	// SrcAddrPattern returns CaptureMacPatternType, set in CapturePatternType.
	// CaptureMacPatternType is tBD
	SrcAddrPattern() CaptureMacPatternType
	// SetSrcAddrPattern assigns CaptureMacPatternType provided by user to CapturePatternType.
	// CaptureMacPatternType is tBD
	SetSrcAddrPattern(value CaptureMacPatternType) CapturePatternType
	// HasSrcAddrPattern checks if SrcAddrPattern has been set in CapturePatternType
	HasSrcAddrPattern() bool
	// DstAddrPattern returns CaptureMacPatternType, set in CapturePatternType.
	// CaptureMacPatternType is tBD
	DstAddrPattern() CaptureMacPatternType
	// SetDstAddrPattern assigns CaptureMacPatternType provided by user to CapturePatternType.
	// CaptureMacPatternType is tBD
	SetDstAddrPattern(value CaptureMacPatternType) CapturePatternType
	// HasDstAddrPattern checks if DstAddrPattern has been set in CapturePatternType
	HasDstAddrPattern() bool
	// DataPattern returns CaptureDataPatternType, set in CapturePatternType.
	// CaptureDataPatternType is tBD
	DataPattern() CaptureDataPatternType
	// SetDataPattern assigns CaptureDataPatternType provided by user to CapturePatternType.
	// CaptureDataPatternType is tBD
	SetDataPattern(value CaptureDataPatternType) CapturePatternType
	// HasDataPattern checks if DataPattern has been set in CapturePatternType
	HasDataPattern() bool
	// QosPattern returns CaptureQoSPatternType, set in CapturePatternType.
	// CaptureQoSPatternType is tBD
	QosPattern() CaptureQoSPatternType
	// SetQosPattern assigns CaptureQoSPatternType provided by user to CapturePatternType.
	// CaptureQoSPatternType is tBD
	SetQosPattern(value CaptureQoSPatternType) CapturePatternType
	// HasQosPattern checks if QosPattern has been set in CapturePatternType
	HasQosPattern() bool
	setNil()
}

func (obj *capturePatternType) populateXml(xObj *Argument) error {

	if obj.HasPatternKind() {

		member := Member{
			Name:  "patternkind",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Capture+ePatternKind",
			Value: strconv.FormatInt(int64(obj.obj.PatternKind.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *capturePatternType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// PatternId returns a IdTypeCapturePatternId
func (obj *capturePatternType) PatternId() IdTypeCapturePatternId {
	if obj.obj.PatternId == nil {
		obj.obj.PatternId = NewIdTypeCapturePatternId().Msg()
	}
	if obj.patternIdHolder == nil {
		obj.patternIdHolder = &idTypeCapturePatternId{obj: obj.obj.PatternId}
	}
	return obj.patternIdHolder
}

// TBD
// PatternId returns a IdTypeCapturePatternId
func (obj *capturePatternType) HasPatternId() bool {
	return obj.obj.PatternId != nil
}

// TBD
// SetPatternId sets the IdTypeCapturePatternId value in the CapturePatternType object
func (obj *capturePatternType) SetPatternId(value IdTypeCapturePatternId) CapturePatternType {

	obj.patternIdHolder = nil
	obj.obj.PatternId = value.Msg()

	return obj
}

type CapturePatternTypePatternKindEnum string

// Enum of PatternKind on CapturePatternType
var CapturePatternTypePatternKind = struct {
	KSRCADDRPATTERN CapturePatternTypePatternKindEnum
	KDSTADDRPATTERN CapturePatternTypePatternKindEnum
	KDATAPATTERN    CapturePatternTypePatternKindEnum
	KQOSPATTERN     CapturePatternTypePatternKindEnum
}{
	KSRCADDRPATTERN: CapturePatternTypePatternKindEnum("kSrcAddrPattern"),
	KDSTADDRPATTERN: CapturePatternTypePatternKindEnum("kDstAddrPattern"),
	KDATAPATTERN:    CapturePatternTypePatternKindEnum("kDataPattern"),
	KQOSPATTERN:     CapturePatternTypePatternKindEnum("kQoSPattern"),
}

func (obj *capturePatternType) PatternKind() CapturePatternTypePatternKindEnum {
	return CapturePatternTypePatternKindEnum(obj.obj.PatternKind.Enum().String())
}

// The kind of pattern determines the data field content   of the rest of the structure.   Consult CAPTURE-PATTERN-TYPES to determine the number of   the different kinds of patterns available.
// PatternKind returns a string
func (obj *capturePatternType) HasPatternKind() bool {
	return obj.obj.PatternKind != nil
}

func (obj *capturePatternType) SetPatternKind(value CapturePatternTypePatternKindEnum) CapturePatternType {
	intValue, ok := otg.CapturePatternType_PatternKind_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on CapturePatternTypePatternKindEnum", string(value)))
		return obj
	}
	enumValue := otg.CapturePatternType_PatternKind_Enum(intValue)
	obj.obj.PatternKind = &enumValue

	return obj
}

// TBD
// SrcAddrPattern returns a CaptureMacPatternType
func (obj *capturePatternType) SrcAddrPattern() CaptureMacPatternType {
	if obj.obj.SrcAddrPattern == nil {
		obj.obj.SrcAddrPattern = NewCaptureMacPatternType().Msg()
	}
	if obj.srcAddrPatternHolder == nil {
		obj.srcAddrPatternHolder = &captureMacPatternType{obj: obj.obj.SrcAddrPattern}
	}
	return obj.srcAddrPatternHolder
}

// TBD
// SrcAddrPattern returns a CaptureMacPatternType
func (obj *capturePatternType) HasSrcAddrPattern() bool {
	return obj.obj.SrcAddrPattern != nil
}

// TBD
// SetSrcAddrPattern sets the CaptureMacPatternType value in the CapturePatternType object
func (obj *capturePatternType) SetSrcAddrPattern(value CaptureMacPatternType) CapturePatternType {

	obj.srcAddrPatternHolder = nil
	obj.obj.SrcAddrPattern = value.Msg()

	return obj
}

// TBD
// DstAddrPattern returns a CaptureMacPatternType
func (obj *capturePatternType) DstAddrPattern() CaptureMacPatternType {
	if obj.obj.DstAddrPattern == nil {
		obj.obj.DstAddrPattern = NewCaptureMacPatternType().Msg()
	}
	if obj.dstAddrPatternHolder == nil {
		obj.dstAddrPatternHolder = &captureMacPatternType{obj: obj.obj.DstAddrPattern}
	}
	return obj.dstAddrPatternHolder
}

// TBD
// DstAddrPattern returns a CaptureMacPatternType
func (obj *capturePatternType) HasDstAddrPattern() bool {
	return obj.obj.DstAddrPattern != nil
}

// TBD
// SetDstAddrPattern sets the CaptureMacPatternType value in the CapturePatternType object
func (obj *capturePatternType) SetDstAddrPattern(value CaptureMacPatternType) CapturePatternType {

	obj.dstAddrPatternHolder = nil
	obj.obj.DstAddrPattern = value.Msg()

	return obj
}

// TBD
// DataPattern returns a CaptureDataPatternType
func (obj *capturePatternType) DataPattern() CaptureDataPatternType {
	if obj.obj.DataPattern == nil {
		obj.obj.DataPattern = NewCaptureDataPatternType().Msg()
	}
	if obj.dataPatternHolder == nil {
		obj.dataPatternHolder = &captureDataPatternType{obj: obj.obj.DataPattern}
	}
	return obj.dataPatternHolder
}

// TBD
// DataPattern returns a CaptureDataPatternType
func (obj *capturePatternType) HasDataPattern() bool {
	return obj.obj.DataPattern != nil
}

// TBD
// SetDataPattern sets the CaptureDataPatternType value in the CapturePatternType object
func (obj *capturePatternType) SetDataPattern(value CaptureDataPatternType) CapturePatternType {

	obj.dataPatternHolder = nil
	obj.obj.DataPattern = value.Msg()

	return obj
}

// TBD
// QosPattern returns a CaptureQoSPatternType
func (obj *capturePatternType) QosPattern() CaptureQoSPatternType {
	if obj.obj.QosPattern == nil {
		obj.obj.QosPattern = NewCaptureQoSPatternType().Msg()
	}
	if obj.qosPatternHolder == nil {
		obj.qosPatternHolder = &captureQoSPatternType{obj: obj.obj.QosPattern}
	}
	return obj.qosPatternHolder
}

// TBD
// QosPattern returns a CaptureQoSPatternType
func (obj *capturePatternType) HasQosPattern() bool {
	return obj.obj.QosPattern != nil
}

// TBD
// SetQosPattern sets the CaptureQoSPatternType value in the CapturePatternType object
func (obj *capturePatternType) SetQosPattern(value CaptureQoSPatternType) CapturePatternType {

	obj.qosPatternHolder = nil
	obj.obj.QosPattern = value.Msg()

	return obj
}

func (obj *capturePatternType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PatternId != nil {

		obj.PatternId().validateObj(vObj, set_default)
	}

	if obj.obj.SrcAddrPattern != nil {

		obj.SrcAddrPattern().validateObj(vObj, set_default)
	}

	if obj.obj.DstAddrPattern != nil {

		obj.DstAddrPattern().validateObj(vObj, set_default)
	}

	if obj.obj.DataPattern != nil {

		obj.DataPattern().validateObj(vObj, set_default)
	}

	if obj.obj.QosPattern != nil {

		obj.QosPattern().validateObj(vObj, set_default)
	}

}

func (obj *capturePatternType) setDefault() {

}

// ***** CaptureExpressionType *****
type captureExpressionType struct {
	validation
	obj                           *otg.CaptureExpressionType
	frameSizeRangeHolder          CaptureFrameSizeRangeType
	filterContentHolder           CaptureExpressionContent
	filterExpressionContentHolder CaptureExpressionContent
}

func NewCaptureExpressionType() CaptureExpressionType {
	obj := captureExpressionType{obj: &otg.CaptureExpressionType{}}
	obj.setDefault()
	return &obj
}

func (obj *captureExpressionType) Msg() *otg.CaptureExpressionType {
	return obj.obj
}

func (obj *captureExpressionType) SetMsg(msg *otg.CaptureExpressionType) CaptureExpressionType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *captureExpressionType) ToProto() (*otg.CaptureExpressionType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *captureExpressionType) FromProto(msg *otg.CaptureExpressionType) (CaptureExpressionType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *captureExpressionType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *captureExpressionType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureExpressionType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureExpressionType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *captureExpressionType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureExpressionType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *captureExpressionType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *captureExpressionType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *captureExpressionType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *captureExpressionType) Clone() (CaptureExpressionType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewCaptureExpressionType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *captureExpressionType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *captureExpressionType) setNil() {
	obj.frameSizeRangeHolder = nil
	obj.filterContentHolder = nil
	obj.filterExpressionContentHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// CaptureExpressionType is tBD
type CaptureExpressionType interface {
	Validation
	// Msg marshals CaptureExpressionType to protobuf object *otg.CaptureExpressionType
	// and doesn't set defaults
	Msg() *otg.CaptureExpressionType
	// SetMsg unmarshals CaptureExpressionType from protobuf object *otg.CaptureExpressionType
	// and doesn't set defaults
	SetMsg(*otg.CaptureExpressionType) CaptureExpressionType
	// ToProto marshals CaptureExpressionType to protobuf object *otg.CaptureExpressionType
	ToProto() (*otg.CaptureExpressionType, error)
	// ToPbText marshals CaptureExpressionType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals CaptureExpressionType to YAML text
	ToYaml() (string, error)
	// ToJson marshals CaptureExpressionType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals CaptureExpressionType from protobuf object *otg.CaptureExpressionType
	FromProto(msg *otg.CaptureExpressionType) (CaptureExpressionType, error)
	// FromPbText unmarshals CaptureExpressionType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals CaptureExpressionType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals CaptureExpressionType from JSON text
	FromJson(value string) error
	// Validate validates CaptureExpressionType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (CaptureExpressionType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ExpressionKind returns CaptureExpressionTypeExpressionKindEnum, set in CaptureExpressionType
	ExpressionKind() CaptureExpressionTypeExpressionKindEnum
	// SetExpressionKind assigns CaptureExpressionTypeExpressionKindEnum provided by user to CaptureExpressionType
	SetExpressionKind(value CaptureExpressionTypeExpressionKindEnum) CaptureExpressionType
	// HasExpressionKind checks if ExpressionKind has been set in CaptureExpressionType
	HasExpressionKind() bool
	// ErrorMatch returns CaptureExpressionTypeErrorMatchEnum, set in CaptureExpressionType
	ErrorMatch() CaptureExpressionTypeErrorMatchEnum
	// SetErrorMatch assigns CaptureExpressionTypeErrorMatchEnum provided by user to CaptureExpressionType
	SetErrorMatch(value CaptureExpressionTypeErrorMatchEnum) CaptureExpressionType
	// HasErrorMatch checks if ErrorMatch has been set in CaptureExpressionType
	HasErrorMatch() bool
	// FrameSizeRange returns CaptureFrameSizeRangeType, set in CaptureExpressionType.
	// CaptureFrameSizeRangeType is tBD
	FrameSizeRange() CaptureFrameSizeRangeType
	// SetFrameSizeRange assigns CaptureFrameSizeRangeType provided by user to CaptureExpressionType.
	// CaptureFrameSizeRangeType is tBD
	SetFrameSizeRange(value CaptureFrameSizeRangeType) CaptureExpressionType
	// HasFrameSizeRange checks if FrameSizeRange has been set in CaptureExpressionType
	HasFrameSizeRange() bool
	// SonetCircuitList returns CaptureExpressionTypeSonetCircuitListEnum, set in CaptureExpressionType
	SonetCircuitList() CaptureExpressionTypeSonetCircuitListEnum
	// SetSonetCircuitList assigns CaptureExpressionTypeSonetCircuitListEnum provided by user to CaptureExpressionType
	SetSonetCircuitList(value CaptureExpressionTypeSonetCircuitListEnum) CaptureExpressionType
	// HasSonetCircuitList checks if SonetCircuitList has been set in CaptureExpressionType
	HasSonetCircuitList() bool
	// FilterContent returns CaptureExpressionContent, set in CaptureExpressionType.
	// CaptureExpressionContent is tBD
	FilterContent() CaptureExpressionContent
	// SetFilterContent assigns CaptureExpressionContent provided by user to CaptureExpressionType.
	// CaptureExpressionContent is tBD
	SetFilterContent(value CaptureExpressionContent) CaptureExpressionType
	// HasFilterContent checks if FilterContent has been set in CaptureExpressionType
	HasFilterContent() bool
	// IsExpressionEnabled returns bool, set in CaptureExpressionType.
	IsExpressionEnabled() bool
	// SetIsExpressionEnabled assigns bool provided by user to CaptureExpressionType
	SetIsExpressionEnabled(value bool) CaptureExpressionType
	// HasIsExpressionEnabled checks if IsExpressionEnabled has been set in CaptureExpressionType
	HasIsExpressionEnabled() bool
	// FilterExpressionContent returns CaptureExpressionContent, set in CaptureExpressionType.
	// CaptureExpressionContent is tBD
	FilterExpressionContent() CaptureExpressionContent
	// SetFilterExpressionContent assigns CaptureExpressionContent provided by user to CaptureExpressionType.
	// CaptureExpressionContent is tBD
	SetFilterExpressionContent(value CaptureExpressionContent) CaptureExpressionType
	// HasFilterExpressionContent checks if FilterExpressionContent has been set in CaptureExpressionType
	HasFilterExpressionContent() bool
	// ExpressionParserType returns CaptureExpressionTypeExpressionParserTypeEnum, set in CaptureExpressionType
	ExpressionParserType() CaptureExpressionTypeExpressionParserTypeEnum
	// SetExpressionParserType assigns CaptureExpressionTypeExpressionParserTypeEnum provided by user to CaptureExpressionType
	SetExpressionParserType(value CaptureExpressionTypeExpressionParserTypeEnum) CaptureExpressionType
	// HasExpressionParserType checks if ExpressionParserType has been set in CaptureExpressionType
	HasExpressionParserType() bool
	setNil()
}

func (obj *captureExpressionType) populateXml(xObj *Argument) error {

	if obj.HasExpressionKind() {

		member := Member{
			Name:  "expressionkind",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Capture+eExpressionKind",
			Value: strconv.FormatInt(int64(obj.obj.ExpressionKind.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasErrorMatch() {

		member := Member{
			Name:  "errormatch",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Capture+eErrorMatch",
			Value: strconv.FormatInt(int64(obj.obj.ErrorMatch.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSonetCircuitList() {

		member := Member{
			Name:  "sonetcircuitlist",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Capture+eCircuitList",
			Value: strconv.FormatInt(int64(obj.obj.SonetCircuitList.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIsExpressionEnabled() {
		var value string
		if obj.IsExpressionEnabled() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "isexpressionenabled",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasExpressionParserType() {

		member := Member{
			Name:  "expressionparsertype",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Capture+eFilterExpressionParserType",
			Value: strconv.FormatInt(int64(obj.obj.ExpressionParserType.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *captureExpressionType) populateFromXml(xObj *RetVal) error {

	return nil
}

type CaptureExpressionTypeExpressionKindEnum string

// Enum of ExpressionKind on CaptureExpressionType
var CaptureExpressionTypeExpressionKind = struct {
	KUDS     CaptureExpressionTypeExpressionKindEnum
	KTRIGGER CaptureExpressionTypeExpressionKindEnum
	KFILTER  CaptureExpressionTypeExpressionKindEnum
}{
	KUDS:     CaptureExpressionTypeExpressionKindEnum("kUds"),
	KTRIGGER: CaptureExpressionTypeExpressionKindEnum("kTrigger"),
	KFILTER:  CaptureExpressionTypeExpressionKindEnum("kFilter"),
}

func (obj *captureExpressionType) ExpressionKind() CaptureExpressionTypeExpressionKindEnum {
	return CaptureExpressionTypeExpressionKindEnum(obj.obj.ExpressionKind.Enum().String())
}

// The expressionKind indicates the type of expression stored   in the ExpressionType.      The expression can be a trigger, a filter or an UDS.
// ExpressionKind returns a string
func (obj *captureExpressionType) HasExpressionKind() bool {
	return obj.obj.ExpressionKind != nil
}

func (obj *captureExpressionType) SetExpressionKind(value CaptureExpressionTypeExpressionKindEnum) CaptureExpressionType {
	intValue, ok := otg.CaptureExpressionType_ExpressionKind_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on CaptureExpressionTypeExpressionKindEnum", string(value)))
		return obj
	}
	enumValue := otg.CaptureExpressionType_ExpressionKind_Enum(intValue)
	obj.obj.ExpressionKind = &enumValue

	return obj
}

type CaptureExpressionTypeErrorMatchEnum string

// Enum of ErrorMatch on CaptureExpressionType
var CaptureExpressionTypeErrorMatch = struct {
	KANYFRAME                    CaptureExpressionTypeErrorMatchEnum
	KERRGOODFRAME                CaptureExpressionTypeErrorMatchEnum
	KERRBADCRC                   CaptureExpressionTypeErrorMatchEnum
	KERRBADFRAME                 CaptureExpressionTypeErrorMatchEnum
	KERRANYSEQUENCEERROR         CaptureExpressionTypeErrorMatchEnum
	KERRSMALLSEQUENCEERROR       CaptureExpressionTypeErrorMatchEnum
	KERRBIGSEQUENCEERROR         CaptureExpressionTypeErrorMatchEnum
	KERRREVERSESEQUENCEERROR     CaptureExpressionTypeErrorMatchEnum
	KERRDATAINTEGRITYERROR       CaptureExpressionTypeErrorMatchEnum
	KERRANYIPTCPUDPCHECKSUMERROR CaptureExpressionTypeErrorMatchEnum
	KERRREVERSEDUPLICATEPACKET   CaptureExpressionTypeErrorMatchEnum
	KERRSEQUENCEGAP              CaptureExpressionTypeErrorMatchEnum
	KERRCDLERRORS                CaptureExpressionTypeErrorMatchEnum
	KERRFCOEINVALIDFRAME         CaptureExpressionTypeErrorMatchEnum
}{
	KANYFRAME:                    CaptureExpressionTypeErrorMatchEnum("kAnyFrame"),
	KERRGOODFRAME:                CaptureExpressionTypeErrorMatchEnum("kErrGoodFrame"),
	KERRBADCRC:                   CaptureExpressionTypeErrorMatchEnum("kErrBadCRC"),
	KERRBADFRAME:                 CaptureExpressionTypeErrorMatchEnum("kErrBadFrame"),
	KERRANYSEQUENCEERROR:         CaptureExpressionTypeErrorMatchEnum("kErrAnySequenceError"),
	KERRSMALLSEQUENCEERROR:       CaptureExpressionTypeErrorMatchEnum("kErrSmallSequenceError"),
	KERRBIGSEQUENCEERROR:         CaptureExpressionTypeErrorMatchEnum("kErrBigSequenceError"),
	KERRREVERSESEQUENCEERROR:     CaptureExpressionTypeErrorMatchEnum("kErrReverseSequenceError"),
	KERRDATAINTEGRITYERROR:       CaptureExpressionTypeErrorMatchEnum("kErrDataIntegrityError"),
	KERRANYIPTCPUDPCHECKSUMERROR: CaptureExpressionTypeErrorMatchEnum("kErrAnyIpTcpUdpChecksumError"),
	KERRREVERSEDUPLICATEPACKET:   CaptureExpressionTypeErrorMatchEnum("kErrReverseDuplicatePacket"),
	KERRSEQUENCEGAP:              CaptureExpressionTypeErrorMatchEnum("kErrSequenceGap"),
	KERRCDLERRORS:                CaptureExpressionTypeErrorMatchEnum("kErrCdlErrors"),
	KERRFCOEINVALIDFRAME:         CaptureExpressionTypeErrorMatchEnum("kErrFCoEInvalidFrame"),
}

func (obj *captureExpressionType) ErrorMatch() CaptureExpressionTypeErrorMatchEnum {
	return CaptureExpressionTypeErrorMatchEnum(obj.obj.ErrorMatch.Enum().String())
}

// TBD
// ErrorMatch returns a string
func (obj *captureExpressionType) HasErrorMatch() bool {
	return obj.obj.ErrorMatch != nil
}

func (obj *captureExpressionType) SetErrorMatch(value CaptureExpressionTypeErrorMatchEnum) CaptureExpressionType {
	intValue, ok := otg.CaptureExpressionType_ErrorMatch_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on CaptureExpressionTypeErrorMatchEnum", string(value)))
		return obj
	}
	enumValue := otg.CaptureExpressionType_ErrorMatch_Enum(intValue)
	obj.obj.ErrorMatch = &enumValue

	return obj
}

// The FrameSizeRange can optionally be specified to restrict   the filter to only those frames with matching sizes.
// FrameSizeRange returns a CaptureFrameSizeRangeType
func (obj *captureExpressionType) FrameSizeRange() CaptureFrameSizeRangeType {
	if obj.obj.FrameSizeRange == nil {
		obj.obj.FrameSizeRange = NewCaptureFrameSizeRangeType().Msg()
	}
	if obj.frameSizeRangeHolder == nil {
		obj.frameSizeRangeHolder = &captureFrameSizeRangeType{obj: obj.obj.FrameSizeRange}
	}
	return obj.frameSizeRangeHolder
}

// The FrameSizeRange can optionally be specified to restrict   the filter to only those frames with matching sizes.
// FrameSizeRange returns a CaptureFrameSizeRangeType
func (obj *captureExpressionType) HasFrameSizeRange() bool {
	return obj.obj.FrameSizeRange != nil
}

// The FrameSizeRange can optionally be specified to restrict   the filter to only those frames with matching sizes.
// SetFrameSizeRange sets the CaptureFrameSizeRangeType value in the CaptureExpressionType object
func (obj *captureExpressionType) SetFrameSizeRange(value CaptureFrameSizeRangeType) CaptureExpressionType {

	obj.frameSizeRangeHolder = nil
	obj.obj.FrameSizeRange = value.Msg()

	return obj
}

type CaptureExpressionTypeSonetCircuitListEnum string

// Enum of SonetCircuitList on CaptureExpressionType
var CaptureExpressionTypeSonetCircuitList = struct {
	KANYCIRCUIT  CaptureExpressionTypeSonetCircuitListEnum
	KCIRCUITLIST CaptureExpressionTypeSonetCircuitListEnum
}{
	KANYCIRCUIT:  CaptureExpressionTypeSonetCircuitListEnum("kAnyCircuit"),
	KCIRCUITLIST: CaptureExpressionTypeSonetCircuitListEnum("kCircuitList"),
}

func (obj *captureExpressionType) SonetCircuitList() CaptureExpressionTypeSonetCircuitListEnum {
	return CaptureExpressionTypeSonetCircuitListEnum(obj.obj.SonetCircuitList.Enum().String())
}

// SonetCircuitList returns a string
func (obj *captureExpressionType) HasSonetCircuitList() bool {
	return obj.obj.SonetCircuitList != nil
}

func (obj *captureExpressionType) SetSonetCircuitList(value CaptureExpressionTypeSonetCircuitListEnum) CaptureExpressionType {
	intValue, ok := otg.CaptureExpressionType_SonetCircuitList_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on CaptureExpressionTypeSonetCircuitListEnum", string(value)))
		return obj
	}
	enumValue := otg.CaptureExpressionType_SonetCircuitList_Enum(intValue)
	obj.obj.SonetCircuitList = &enumValue

	return obj
}

// The ExpressionContent contains the "UDS Filter" as a     list of expressionElementType-s.
// FilterContent returns a CaptureExpressionContent
func (obj *captureExpressionType) FilterContent() CaptureExpressionContent {
	if obj.obj.FilterContent == nil {
		obj.obj.FilterContent = NewCaptureExpressionContent().Msg()
	}
	if obj.filterContentHolder == nil {
		obj.filterContentHolder = &captureExpressionContent{obj: obj.obj.FilterContent}
	}
	return obj.filterContentHolder
}

// The ExpressionContent contains the "UDS Filter" as a     list of expressionElementType-s.
// FilterContent returns a CaptureExpressionContent
func (obj *captureExpressionType) HasFilterContent() bool {
	return obj.obj.FilterContent != nil
}

// The ExpressionContent contains the "UDS Filter" as a     list of expressionElementType-s.
// SetFilterContent sets the CaptureExpressionContent value in the CaptureExpressionType object
func (obj *captureExpressionType) SetFilterContent(value CaptureExpressionContent) CaptureExpressionType {

	obj.filterContentHolder = nil
	obj.obj.FilterContent = value.Msg()

	return obj
}

// States if "UDS Filter Expression" need to be programmed.  If yes then "UDS Filter" will be ignored.
// IsExpressionEnabled returns a bool
func (obj *captureExpressionType) IsExpressionEnabled() bool {

	return *obj.obj.IsExpressionEnabled

}

// States if "UDS Filter Expression" need to be programmed.  If yes then "UDS Filter" will be ignored.
// IsExpressionEnabled returns a bool
func (obj *captureExpressionType) HasIsExpressionEnabled() bool {
	return obj.obj.IsExpressionEnabled != nil
}

// States if "UDS Filter Expression" need to be programmed.  If yes then "UDS Filter" will be ignored.
// SetIsExpressionEnabled sets the bool value in the CaptureExpressionType object
func (obj *captureExpressionType) SetIsExpressionEnabled(value bool) CaptureExpressionType {

	obj.obj.IsExpressionEnabled = &value
	return obj
}

// The ExpressionContent contains the "UDS Filter Expression" as a  list of expressionElementType-s.
// FilterExpressionContent returns a CaptureExpressionContent
func (obj *captureExpressionType) FilterExpressionContent() CaptureExpressionContent {
	if obj.obj.FilterExpressionContent == nil {
		obj.obj.FilterExpressionContent = NewCaptureExpressionContent().Msg()
	}
	if obj.filterExpressionContentHolder == nil {
		obj.filterExpressionContentHolder = &captureExpressionContent{obj: obj.obj.FilterExpressionContent}
	}
	return obj.filterExpressionContentHolder
}

// The ExpressionContent contains the "UDS Filter Expression" as a  list of expressionElementType-s.
// FilterExpressionContent returns a CaptureExpressionContent
func (obj *captureExpressionType) HasFilterExpressionContent() bool {
	return obj.obj.FilterExpressionContent != nil
}

// The ExpressionContent contains the "UDS Filter Expression" as a  list of expressionElementType-s.
// SetFilterExpressionContent sets the CaptureExpressionContent value in the CaptureExpressionType object
func (obj *captureExpressionType) SetFilterExpressionContent(value CaptureExpressionContent) CaptureExpressionType {

	obj.filterExpressionContentHolder = nil
	obj.obj.FilterExpressionContent = value.Msg()

	return obj
}

type CaptureExpressionTypeExpressionParserTypeEnum string

// Enum of ExpressionParserType on CaptureExpressionType
var CaptureExpressionTypeExpressionParserType = struct {
	KSIMPLEEXPRESSIONPARSER  CaptureExpressionTypeExpressionParserTypeEnum
	KCOMPLEXEXPRESSIONPARSER CaptureExpressionTypeExpressionParserTypeEnum
	KTOKAIDOEXPRESSIONPARSER CaptureExpressionTypeExpressionParserTypeEnum
}{
	KSIMPLEEXPRESSIONPARSER:  CaptureExpressionTypeExpressionParserTypeEnum("kSimpleExpressionParser"),
	KCOMPLEXEXPRESSIONPARSER: CaptureExpressionTypeExpressionParserTypeEnum("kComplexExpressionParser"),
	KTOKAIDOEXPRESSIONPARSER: CaptureExpressionTypeExpressionParserTypeEnum("kTokaidoExpressionParser"),
}

func (obj *captureExpressionType) ExpressionParserType() CaptureExpressionTypeExpressionParserTypeEnum {
	return CaptureExpressionTypeExpressionParserTypeEnum(obj.obj.ExpressionParserType.Enum().String())
}

// This expression parser type specify how to parse and programme  "filterExpressionContent".
// ExpressionParserType returns a string
func (obj *captureExpressionType) HasExpressionParserType() bool {
	return obj.obj.ExpressionParserType != nil
}

func (obj *captureExpressionType) SetExpressionParserType(value CaptureExpressionTypeExpressionParserTypeEnum) CaptureExpressionType {
	intValue, ok := otg.CaptureExpressionType_ExpressionParserType_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on CaptureExpressionTypeExpressionParserTypeEnum", string(value)))
		return obj
	}
	enumValue := otg.CaptureExpressionType_ExpressionParserType_Enum(intValue)
	obj.obj.ExpressionParserType = &enumValue

	return obj
}

func (obj *captureExpressionType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.FrameSizeRange != nil {

		obj.FrameSizeRange().validateObj(vObj, set_default)
	}

	if obj.obj.FilterContent != nil {

		obj.FilterContent().validateObj(vObj, set_default)
	}

	if obj.obj.FilterExpressionContent != nil {

		obj.FilterExpressionContent().validateObj(vObj, set_default)
	}

}

func (obj *captureExpressionType) setDefault() {

}

// ***** PacketGroupSizeBinList *****
type packetGroupSizeBinList struct {
	validation
	obj *otg.PacketGroupSizeBinList
}

func NewPacketGroupSizeBinList() PacketGroupSizeBinList {
	obj := packetGroupSizeBinList{obj: &otg.PacketGroupSizeBinList{}}
	obj.setDefault()
	return &obj
}

func (obj *packetGroupSizeBinList) Msg() *otg.PacketGroupSizeBinList {
	return obj.obj
}

func (obj *packetGroupSizeBinList) SetMsg(msg *otg.PacketGroupSizeBinList) PacketGroupSizeBinList {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *packetGroupSizeBinList) ToProto() (*otg.PacketGroupSizeBinList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *packetGroupSizeBinList) FromProto(msg *otg.PacketGroupSizeBinList) (PacketGroupSizeBinList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *packetGroupSizeBinList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *packetGroupSizeBinList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *packetGroupSizeBinList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *packetGroupSizeBinList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *packetGroupSizeBinList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *packetGroupSizeBinList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *packetGroupSizeBinList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *packetGroupSizeBinList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *packetGroupSizeBinList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *packetGroupSizeBinList) Clone() (PacketGroupSizeBinList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPacketGroupSizeBinList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *packetGroupSizeBinList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// PacketGroupSizeBinList is tBD
type PacketGroupSizeBinList interface {
	Validation
	// Msg marshals PacketGroupSizeBinList to protobuf object *otg.PacketGroupSizeBinList
	// and doesn't set defaults
	Msg() *otg.PacketGroupSizeBinList
	// SetMsg unmarshals PacketGroupSizeBinList from protobuf object *otg.PacketGroupSizeBinList
	// and doesn't set defaults
	SetMsg(*otg.PacketGroupSizeBinList) PacketGroupSizeBinList
	// ToProto marshals PacketGroupSizeBinList to protobuf object *otg.PacketGroupSizeBinList
	ToProto() (*otg.PacketGroupSizeBinList, error)
	// ToPbText marshals PacketGroupSizeBinList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PacketGroupSizeBinList to YAML text
	ToYaml() (string, error)
	// ToJson marshals PacketGroupSizeBinList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PacketGroupSizeBinList from protobuf object *otg.PacketGroupSizeBinList
	FromProto(msg *otg.PacketGroupSizeBinList) (PacketGroupSizeBinList, error)
	// FromPbText unmarshals PacketGroupSizeBinList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PacketGroupSizeBinList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PacketGroupSizeBinList from JSON text
	FromJson(value string) error
	// Validate validates PacketGroupSizeBinList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PacketGroupSizeBinList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// SizeBinList returns []int32, set in PacketGroupSizeBinList.
	SizeBinList() []int32
	// SetSizeBinList assigns []int32 provided by user to PacketGroupSizeBinList
	SetSizeBinList(value []int32) PacketGroupSizeBinList
}

func (obj *packetGroupSizeBinList) populateXml(xObj *Argument) error {

	if len(obj.SizeBinList()) != 0 {
		for _, item := range obj.SizeBinList() {
			it := Item{
				Type:  "None",
				Value: strconv.FormatInt(int64(item), 10),
			}

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *packetGroupSizeBinList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// SizeBinList returns a []int32
func (obj *packetGroupSizeBinList) SizeBinList() []int32 {
	if obj.obj.SizeBinList == nil {
		obj.obj.SizeBinList = make([]int32, 0)
	}
	return obj.obj.SizeBinList
}

// description is TBD
// SetSizeBinList sets the []int32 value in the PacketGroupSizeBinList object
func (obj *packetGroupSizeBinList) SetSizeBinList(value []int32) PacketGroupSizeBinList {

	if obj.obj.SizeBinList == nil {
		obj.obj.SizeBinList = make([]int32, 0)
	}
	obj.obj.SizeBinList = value

	return obj
}

func (obj *packetGroupSizeBinList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *packetGroupSizeBinList) setDefault() {

}

// ***** SplitPacketGroupConfigurationType *****
type splitPacketGroupConfigurationType struct {
	validation
	obj *otg.SplitPacketGroupConfigurationType
}

func NewSplitPacketGroupConfigurationType() SplitPacketGroupConfigurationType {
	obj := splitPacketGroupConfigurationType{obj: &otg.SplitPacketGroupConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *splitPacketGroupConfigurationType) Msg() *otg.SplitPacketGroupConfigurationType {
	return obj.obj
}

func (obj *splitPacketGroupConfigurationType) SetMsg(msg *otg.SplitPacketGroupConfigurationType) SplitPacketGroupConfigurationType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *splitPacketGroupConfigurationType) ToProto() (*otg.SplitPacketGroupConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *splitPacketGroupConfigurationType) FromProto(msg *otg.SplitPacketGroupConfigurationType) (SplitPacketGroupConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *splitPacketGroupConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *splitPacketGroupConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *splitPacketGroupConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *splitPacketGroupConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *splitPacketGroupConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *splitPacketGroupConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *splitPacketGroupConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *splitPacketGroupConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *splitPacketGroupConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *splitPacketGroupConfigurationType) Clone() (SplitPacketGroupConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewSplitPacketGroupConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *splitPacketGroupConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// SplitPacketGroupConfigurationType is tBD
type SplitPacketGroupConfigurationType interface {
	Validation
	// Msg marshals SplitPacketGroupConfigurationType to protobuf object *otg.SplitPacketGroupConfigurationType
	// and doesn't set defaults
	Msg() *otg.SplitPacketGroupConfigurationType
	// SetMsg unmarshals SplitPacketGroupConfigurationType from protobuf object *otg.SplitPacketGroupConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.SplitPacketGroupConfigurationType) SplitPacketGroupConfigurationType
	// ToProto marshals SplitPacketGroupConfigurationType to protobuf object *otg.SplitPacketGroupConfigurationType
	ToProto() (*otg.SplitPacketGroupConfigurationType, error)
	// ToPbText marshals SplitPacketGroupConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals SplitPacketGroupConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals SplitPacketGroupConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals SplitPacketGroupConfigurationType from protobuf object *otg.SplitPacketGroupConfigurationType
	FromProto(msg *otg.SplitPacketGroupConfigurationType) (SplitPacketGroupConfigurationType, error)
	// FromPbText unmarshals SplitPacketGroupConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals SplitPacketGroupConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals SplitPacketGroupConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates SplitPacketGroupConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (SplitPacketGroupConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// GroupIdOffset returns int32, set in SplitPacketGroupConfigurationType.
	GroupIdOffset() int32
	// SetGroupIdOffset assigns int32 provided by user to SplitPacketGroupConfigurationType
	SetGroupIdOffset(value int32) SplitPacketGroupConfigurationType
	// HasGroupIdOffset checks if GroupIdOffset has been set in SplitPacketGroupConfigurationType
	HasGroupIdOffset() bool
	// GroupIdOffsetBaseType returns SplitPacketGroupConfigurationTypeGroupIdOffsetBaseTypeEnum, set in SplitPacketGroupConfigurationType
	GroupIdOffsetBaseType() SplitPacketGroupConfigurationTypeGroupIdOffsetBaseTypeEnum
	// SetGroupIdOffsetBaseType assigns SplitPacketGroupConfigurationTypeGroupIdOffsetBaseTypeEnum provided by user to SplitPacketGroupConfigurationType
	SetGroupIdOffsetBaseType(value SplitPacketGroupConfigurationTypeGroupIdOffsetBaseTypeEnum) SplitPacketGroupConfigurationType
	// HasGroupIdOffsetBaseType checks if GroupIdOffsetBaseType has been set in SplitPacketGroupConfigurationType
	HasGroupIdOffsetBaseType() bool
	// GroupIdWidth returns int32, set in SplitPacketGroupConfigurationType.
	GroupIdWidth() int32
	// SetGroupIdWidth assigns int32 provided by user to SplitPacketGroupConfigurationType
	SetGroupIdWidth(value int32) SplitPacketGroupConfigurationType
	// HasGroupIdWidth checks if GroupIdWidth has been set in SplitPacketGroupConfigurationType
	HasGroupIdWidth() bool
	// GroupIdMask returns int32, set in SplitPacketGroupConfigurationType.
	GroupIdMask() int32
	// SetGroupIdMask assigns int32 provided by user to SplitPacketGroupConfigurationType
	SetGroupIdMask(value int32) SplitPacketGroupConfigurationType
	// HasGroupIdMask checks if GroupIdMask has been set in SplitPacketGroupConfigurationType
	HasGroupIdMask() bool
}

func (obj *splitPacketGroupConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasGroupIdOffset() {

		member := Member{
			Name:  "groupidoffset",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.GroupIdOffset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasGroupIdOffsetBaseType() {

		member := Member{
			Name:  "groupidoffsetbasetype",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.SplitPacketGroup+eSplitPgidOffsetBaseTypes",
			Value: strconv.FormatInt(int64(obj.obj.GroupIdOffsetBaseType.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasGroupIdWidth() {

		member := Member{
			Name:  "groupidwidth",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.GroupIdWidth()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasGroupIdMask() {

		member := Member{
			Name:  "groupidmask",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.GroupIdMask()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *splitPacketGroupConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// The offset, in bytes, from the starting point set in groupIdOffsetBaseType.
// GroupIdOffset returns a int32
func (obj *splitPacketGroupConfigurationType) GroupIdOffset() int32 {

	return *obj.obj.GroupIdOffset

}

// The offset, in bytes, from the starting point set in groupIdOffsetBaseType.
// GroupIdOffset returns a int32
func (obj *splitPacketGroupConfigurationType) HasGroupIdOffset() bool {
	return obj.obj.GroupIdOffset != nil
}

// The offset, in bytes, from the starting point set in groupIdOffsetBaseType.
// SetGroupIdOffset sets the int32 value in the SplitPacketGroupConfigurationType object
func (obj *splitPacketGroupConfigurationType) SetGroupIdOffset(value int32) SplitPacketGroupConfigurationType {

	obj.obj.GroupIdOffset = &value
	return obj
}

type SplitPacketGroupConfigurationTypeGroupIdOffsetBaseTypeEnum string

// Enum of GroupIdOffsetBaseType on SplitPacketGroupConfigurationType
var SplitPacketGroupConfigurationTypeGroupIdOffsetBaseType = struct {
	KOFFSETSTARTOFFRAME  SplitPacketGroupConfigurationTypeGroupIdOffsetBaseTypeEnum
	KOFFSETFROMSIGNATURE SplitPacketGroupConfigurationTypeGroupIdOffsetBaseTypeEnum
}{
	KOFFSETSTARTOFFRAME:  SplitPacketGroupConfigurationTypeGroupIdOffsetBaseTypeEnum("kOffsetStartOfFrame"),
	KOFFSETFROMSIGNATURE: SplitPacketGroupConfigurationTypeGroupIdOffsetBaseTypeEnum("kOffsetFromSignature"),
}

func (obj *splitPacketGroupConfigurationType) GroupIdOffsetBaseType() SplitPacketGroupConfigurationTypeGroupIdOffsetBaseTypeEnum {
	return SplitPacketGroupConfigurationTypeGroupIdOffsetBaseTypeEnum(obj.obj.GroupIdOffsetBaseType.Enum().String())
}

// Where in the packet to start the offset for the PGID split section.
// GroupIdOffsetBaseType returns a string
func (obj *splitPacketGroupConfigurationType) HasGroupIdOffsetBaseType() bool {
	return obj.obj.GroupIdOffsetBaseType != nil
}

func (obj *splitPacketGroupConfigurationType) SetGroupIdOffsetBaseType(value SplitPacketGroupConfigurationTypeGroupIdOffsetBaseTypeEnum) SplitPacketGroupConfigurationType {
	intValue, ok := otg.SplitPacketGroupConfigurationType_GroupIdOffsetBaseType_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on SplitPacketGroupConfigurationTypeGroupIdOffsetBaseTypeEnum", string(value)))
		return obj
	}
	enumValue := otg.SplitPacketGroupConfigurationType_GroupIdOffsetBaseType_Enum(intValue)
	obj.obj.GroupIdOffsetBaseType = &enumValue

	return obj
}

// The number of bytes in the PGID split section.
// GroupIdWidth returns a int32
func (obj *splitPacketGroupConfigurationType) GroupIdWidth() int32 {

	return *obj.obj.GroupIdWidth

}

// The number of bytes in the PGID split section.
// GroupIdWidth returns a int32
func (obj *splitPacketGroupConfigurationType) HasGroupIdWidth() bool {
	return obj.obj.GroupIdWidth != nil
}

// The number of bytes in the PGID split section.
// SetGroupIdWidth sets the int32 value in the SplitPacketGroupConfigurationType object
func (obj *splitPacketGroupConfigurationType) SetGroupIdWidth(value int32) SplitPacketGroupConfigurationType {

	obj.obj.GroupIdWidth = &value
	return obj
}

// The bit mask for the PGID group.
// GroupIdMask returns a int32
func (obj *splitPacketGroupConfigurationType) GroupIdMask() int32 {

	return *obj.obj.GroupIdMask

}

// The bit mask for the PGID group.
// GroupIdMask returns a int32
func (obj *splitPacketGroupConfigurationType) HasGroupIdMask() bool {
	return obj.obj.GroupIdMask != nil
}

// The bit mask for the PGID group.
// SetGroupIdMask sets the int32 value in the SplitPacketGroupConfigurationType object
func (obj *splitPacketGroupConfigurationType) SetGroupIdMask(value int32) SplitPacketGroupConfigurationType {

	obj.obj.GroupIdMask = &value
	return obj
}

func (obj *splitPacketGroupConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *splitPacketGroupConfigurationType) setDefault() {

}

// ***** StreamConfigurationDataType *****
type streamConfigurationDataType struct {
	validation
	obj                            *otg.StreamConfigurationDataType
	streamControlHolder            StreamStreamControlType
	interFrameGapControlHolder     StreamInterFrameGapControlType
	rateControlHolder              StreamRateControlType
	interBurstGapControlHolder     StreamInterBurstGapControlType
	interStreamGapControlHolder    StreamInterStreamGapControlType
	dstAddrControlHolder           StreamDstAddrControlType
	srcAddrControlHolder           StreamSrcAddrControlType
	frameControlHolder             StreamFrameControlType
	bgndDataControlHolder          StreamBackgroundDataControlType
	protocolHeadersHolder          StreamProtocolHeaderInfoListType
	udfConfigurationHolder         UdfUdfConfigurationType
	tableUdfConfigurationHolder    TableUdfTableUdfConfigurationType
	sequenceUdfConfigurationHolder UdfSequenceUdfConfigurationType
	dataIntegrityTxHolder          StreamDataIntegrityTxType
	autodetectSignatureTxHolder    StreamAutodetectSignatureTxType
	sizeBinsTxHolder               PacketGroupSizeBinsType
	macSecHolder                   MacSecMacSecStreamControlType
}

func NewStreamConfigurationDataType() StreamConfigurationDataType {
	obj := streamConfigurationDataType{obj: &otg.StreamConfigurationDataType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamConfigurationDataType) Msg() *otg.StreamConfigurationDataType {
	return obj.obj
}

func (obj *streamConfigurationDataType) SetMsg(msg *otg.StreamConfigurationDataType) StreamConfigurationDataType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamConfigurationDataType) ToProto() (*otg.StreamConfigurationDataType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamConfigurationDataType) FromProto(msg *otg.StreamConfigurationDataType) (StreamConfigurationDataType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamConfigurationDataType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamConfigurationDataType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamConfigurationDataType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamConfigurationDataType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamConfigurationDataType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamConfigurationDataType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamConfigurationDataType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamConfigurationDataType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamConfigurationDataType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamConfigurationDataType) Clone() (StreamConfigurationDataType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamConfigurationDataType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamConfigurationDataType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamConfigurationDataType) setNil() {
	obj.streamControlHolder = nil
	obj.interFrameGapControlHolder = nil
	obj.rateControlHolder = nil
	obj.interBurstGapControlHolder = nil
	obj.interStreamGapControlHolder = nil
	obj.dstAddrControlHolder = nil
	obj.srcAddrControlHolder = nil
	obj.frameControlHolder = nil
	obj.bgndDataControlHolder = nil
	obj.protocolHeadersHolder = nil
	obj.udfConfigurationHolder = nil
	obj.tableUdfConfigurationHolder = nil
	obj.sequenceUdfConfigurationHolder = nil
	obj.dataIntegrityTxHolder = nil
	obj.autodetectSignatureTxHolder = nil
	obj.sizeBinsTxHolder = nil
	obj.macSecHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamConfigurationDataType is tBD
type StreamConfigurationDataType interface {
	Validation
	// Msg marshals StreamConfigurationDataType to protobuf object *otg.StreamConfigurationDataType
	// and doesn't set defaults
	Msg() *otg.StreamConfigurationDataType
	// SetMsg unmarshals StreamConfigurationDataType from protobuf object *otg.StreamConfigurationDataType
	// and doesn't set defaults
	SetMsg(*otg.StreamConfigurationDataType) StreamConfigurationDataType
	// ToProto marshals StreamConfigurationDataType to protobuf object *otg.StreamConfigurationDataType
	ToProto() (*otg.StreamConfigurationDataType, error)
	// ToPbText marshals StreamConfigurationDataType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamConfigurationDataType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamConfigurationDataType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamConfigurationDataType from protobuf object *otg.StreamConfigurationDataType
	FromProto(msg *otg.StreamConfigurationDataType) (StreamConfigurationDataType, error)
	// FromPbText unmarshals StreamConfigurationDataType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamConfigurationDataType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamConfigurationDataType from JSON text
	FromJson(value string) error
	// Validate validates StreamConfigurationDataType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamConfigurationDataType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// StreamControl returns StreamStreamControlType, set in StreamConfigurationDataType.
	// StreamStreamControlType is tBD
	StreamControl() StreamStreamControlType
	// SetStreamControl assigns StreamStreamControlType provided by user to StreamConfigurationDataType.
	// StreamStreamControlType is tBD
	SetStreamControl(value StreamStreamControlType) StreamConfigurationDataType
	// HasStreamControl checks if StreamControl has been set in StreamConfigurationDataType
	HasStreamControl() bool
	// InterFrameGapControl returns StreamInterFrameGapControlType, set in StreamConfigurationDataType.
	// StreamInterFrameGapControlType is tBD
	InterFrameGapControl() StreamInterFrameGapControlType
	// SetInterFrameGapControl assigns StreamInterFrameGapControlType provided by user to StreamConfigurationDataType.
	// StreamInterFrameGapControlType is tBD
	SetInterFrameGapControl(value StreamInterFrameGapControlType) StreamConfigurationDataType
	// HasInterFrameGapControl checks if InterFrameGapControl has been set in StreamConfigurationDataType
	HasInterFrameGapControl() bool
	// RateControl returns StreamRateControlType, set in StreamConfigurationDataType.
	// StreamRateControlType is tBD
	RateControl() StreamRateControlType
	// SetRateControl assigns StreamRateControlType provided by user to StreamConfigurationDataType.
	// StreamRateControlType is tBD
	SetRateControl(value StreamRateControlType) StreamConfigurationDataType
	// HasRateControl checks if RateControl has been set in StreamConfigurationDataType
	HasRateControl() bool
	// InterBurstGapControl returns StreamInterBurstGapControlType, set in StreamConfigurationDataType.
	// StreamInterBurstGapControlType is tBD
	InterBurstGapControl() StreamInterBurstGapControlType
	// SetInterBurstGapControl assigns StreamInterBurstGapControlType provided by user to StreamConfigurationDataType.
	// StreamInterBurstGapControlType is tBD
	SetInterBurstGapControl(value StreamInterBurstGapControlType) StreamConfigurationDataType
	// HasInterBurstGapControl checks if InterBurstGapControl has been set in StreamConfigurationDataType
	HasInterBurstGapControl() bool
	// InterStreamGapControl returns StreamInterStreamGapControlType, set in StreamConfigurationDataType.
	// StreamInterStreamGapControlType is tBD
	InterStreamGapControl() StreamInterStreamGapControlType
	// SetInterStreamGapControl assigns StreamInterStreamGapControlType provided by user to StreamConfigurationDataType.
	// StreamInterStreamGapControlType is tBD
	SetInterStreamGapControl(value StreamInterStreamGapControlType) StreamConfigurationDataType
	// HasInterStreamGapControl checks if InterStreamGapControl has been set in StreamConfigurationDataType
	HasInterStreamGapControl() bool
	// DstAddrControl returns StreamDstAddrControlType, set in StreamConfigurationDataType.
	// StreamDstAddrControlType is tBD
	DstAddrControl() StreamDstAddrControlType
	// SetDstAddrControl assigns StreamDstAddrControlType provided by user to StreamConfigurationDataType.
	// StreamDstAddrControlType is tBD
	SetDstAddrControl(value StreamDstAddrControlType) StreamConfigurationDataType
	// HasDstAddrControl checks if DstAddrControl has been set in StreamConfigurationDataType
	HasDstAddrControl() bool
	// SrcAddrControl returns StreamSrcAddrControlType, set in StreamConfigurationDataType.
	// StreamSrcAddrControlType is tBD
	SrcAddrControl() StreamSrcAddrControlType
	// SetSrcAddrControl assigns StreamSrcAddrControlType provided by user to StreamConfigurationDataType.
	// StreamSrcAddrControlType is tBD
	SetSrcAddrControl(value StreamSrcAddrControlType) StreamConfigurationDataType
	// HasSrcAddrControl checks if SrcAddrControl has been set in StreamConfigurationDataType
	HasSrcAddrControl() bool
	// FrameControl returns StreamFrameControlType, set in StreamConfigurationDataType.
	// StreamFrameControlType is tBD
	FrameControl() StreamFrameControlType
	// SetFrameControl assigns StreamFrameControlType provided by user to StreamConfigurationDataType.
	// StreamFrameControlType is tBD
	SetFrameControl(value StreamFrameControlType) StreamConfigurationDataType
	// HasFrameControl checks if FrameControl has been set in StreamConfigurationDataType
	HasFrameControl() bool
	// BgndDataControl returns StreamBackgroundDataControlType, set in StreamConfigurationDataType.
	// StreamBackgroundDataControlType is tBD
	BgndDataControl() StreamBackgroundDataControlType
	// SetBgndDataControl assigns StreamBackgroundDataControlType provided by user to StreamConfigurationDataType.
	// StreamBackgroundDataControlType is tBD
	SetBgndDataControl(value StreamBackgroundDataControlType) StreamConfigurationDataType
	// HasBgndDataControl checks if BgndDataControl has been set in StreamConfigurationDataType
	HasBgndDataControl() bool
	// ProtocolHeaders returns StreamProtocolHeaderInfoListType, set in StreamConfigurationDataType.
	// StreamProtocolHeaderInfoListType is tBD
	ProtocolHeaders() StreamProtocolHeaderInfoListType
	// SetProtocolHeaders assigns StreamProtocolHeaderInfoListType provided by user to StreamConfigurationDataType.
	// StreamProtocolHeaderInfoListType is tBD
	SetProtocolHeaders(value StreamProtocolHeaderInfoListType) StreamConfigurationDataType
	// HasProtocolHeaders checks if ProtocolHeaders has been set in StreamConfigurationDataType
	HasProtocolHeaders() bool
	// UdfConfiguration returns UdfUdfConfigurationType, set in StreamConfigurationDataType.
	// UdfUdfConfigurationType is tBD
	UdfConfiguration() UdfUdfConfigurationType
	// SetUdfConfiguration assigns UdfUdfConfigurationType provided by user to StreamConfigurationDataType.
	// UdfUdfConfigurationType is tBD
	SetUdfConfiguration(value UdfUdfConfigurationType) StreamConfigurationDataType
	// HasUdfConfiguration checks if UdfConfiguration has been set in StreamConfigurationDataType
	HasUdfConfiguration() bool
	// TableUdfConfiguration returns TableUdfTableUdfConfigurationType, set in StreamConfigurationDataType.
	// TableUdfTableUdfConfigurationType is tBD
	TableUdfConfiguration() TableUdfTableUdfConfigurationType
	// SetTableUdfConfiguration assigns TableUdfTableUdfConfigurationType provided by user to StreamConfigurationDataType.
	// TableUdfTableUdfConfigurationType is tBD
	SetTableUdfConfiguration(value TableUdfTableUdfConfigurationType) StreamConfigurationDataType
	// HasTableUdfConfiguration checks if TableUdfConfiguration has been set in StreamConfigurationDataType
	HasTableUdfConfiguration() bool
	// SequenceUdfConfiguration returns UdfSequenceUdfConfigurationType, set in StreamConfigurationDataType.
	// UdfSequenceUdfConfigurationType is tBD
	SequenceUdfConfiguration() UdfSequenceUdfConfigurationType
	// SetSequenceUdfConfiguration assigns UdfSequenceUdfConfigurationType provided by user to StreamConfigurationDataType.
	// UdfSequenceUdfConfigurationType is tBD
	SetSequenceUdfConfiguration(value UdfSequenceUdfConfigurationType) StreamConfigurationDataType
	// HasSequenceUdfConfiguration checks if SequenceUdfConfiguration has been set in StreamConfigurationDataType
	HasSequenceUdfConfiguration() bool
	// DataIntegrityTx returns StreamDataIntegrityTxType, set in StreamConfigurationDataType.
	// StreamDataIntegrityTxType is tBD
	DataIntegrityTx() StreamDataIntegrityTxType
	// SetDataIntegrityTx assigns StreamDataIntegrityTxType provided by user to StreamConfigurationDataType.
	// StreamDataIntegrityTxType is tBD
	SetDataIntegrityTx(value StreamDataIntegrityTxType) StreamConfigurationDataType
	// HasDataIntegrityTx checks if DataIntegrityTx has been set in StreamConfigurationDataType
	HasDataIntegrityTx() bool
	// AutodetectSignatureTx returns StreamAutodetectSignatureTxType, set in StreamConfigurationDataType.
	// StreamAutodetectSignatureTxType is tBD
	AutodetectSignatureTx() StreamAutodetectSignatureTxType
	// SetAutodetectSignatureTx assigns StreamAutodetectSignatureTxType provided by user to StreamConfigurationDataType.
	// StreamAutodetectSignatureTxType is tBD
	SetAutodetectSignatureTx(value StreamAutodetectSignatureTxType) StreamConfigurationDataType
	// HasAutodetectSignatureTx checks if AutodetectSignatureTx has been set in StreamConfigurationDataType
	HasAutodetectSignatureTx() bool
	// SizeBinsTx returns PacketGroupSizeBinsType, set in StreamConfigurationDataType.
	// PacketGroupSizeBinsType is tBD
	SizeBinsTx() PacketGroupSizeBinsType
	// SetSizeBinsTx assigns PacketGroupSizeBinsType provided by user to StreamConfigurationDataType.
	// PacketGroupSizeBinsType is tBD
	SetSizeBinsTx(value PacketGroupSizeBinsType) StreamConfigurationDataType
	// HasSizeBinsTx checks if SizeBinsTx has been set in StreamConfigurationDataType
	HasSizeBinsTx() bool
	// MacSec returns MacSecMacSecStreamControlType, set in StreamConfigurationDataType.
	// MacSecMacSecStreamControlType is tBD
	MacSec() MacSecMacSecStreamControlType
	// SetMacSec assigns MacSecMacSecStreamControlType provided by user to StreamConfigurationDataType.
	// MacSecMacSecStreamControlType is tBD
	SetMacSec(value MacSecMacSecStreamControlType) StreamConfigurationDataType
	// HasMacSec checks if MacSec has been set in StreamConfigurationDataType
	HasMacSec() bool
	setNil()
}

func (obj *streamConfigurationDataType) populateXml(xObj *Argument) error {

	return nil
}

func (obj *streamConfigurationDataType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// StreamControl returns a StreamStreamControlType
func (obj *streamConfigurationDataType) StreamControl() StreamStreamControlType {
	if obj.obj.StreamControl == nil {
		obj.obj.StreamControl = NewStreamStreamControlType().Msg()
	}
	if obj.streamControlHolder == nil {
		obj.streamControlHolder = &streamStreamControlType{obj: obj.obj.StreamControl}
	}
	return obj.streamControlHolder
}

// TBD
// StreamControl returns a StreamStreamControlType
func (obj *streamConfigurationDataType) HasStreamControl() bool {
	return obj.obj.StreamControl != nil
}

// TBD
// SetStreamControl sets the StreamStreamControlType value in the StreamConfigurationDataType object
func (obj *streamConfigurationDataType) SetStreamControl(value StreamStreamControlType) StreamConfigurationDataType {

	obj.streamControlHolder = nil
	obj.obj.StreamControl = value.Msg()

	return obj
}

// TBD
// InterFrameGapControl returns a StreamInterFrameGapControlType
func (obj *streamConfigurationDataType) InterFrameGapControl() StreamInterFrameGapControlType {
	if obj.obj.InterFrameGapControl == nil {
		obj.obj.InterFrameGapControl = NewStreamInterFrameGapControlType().Msg()
	}
	if obj.interFrameGapControlHolder == nil {
		obj.interFrameGapControlHolder = &streamInterFrameGapControlType{obj: obj.obj.InterFrameGapControl}
	}
	return obj.interFrameGapControlHolder
}

// TBD
// InterFrameGapControl returns a StreamInterFrameGapControlType
func (obj *streamConfigurationDataType) HasInterFrameGapControl() bool {
	return obj.obj.InterFrameGapControl != nil
}

// TBD
// SetInterFrameGapControl sets the StreamInterFrameGapControlType value in the StreamConfigurationDataType object
func (obj *streamConfigurationDataType) SetInterFrameGapControl(value StreamInterFrameGapControlType) StreamConfigurationDataType {

	obj.interFrameGapControlHolder = nil
	obj.obj.InterFrameGapControl = value.Msg()

	return obj
}

// TBD
// RateControl returns a StreamRateControlType
func (obj *streamConfigurationDataType) RateControl() StreamRateControlType {
	if obj.obj.RateControl == nil {
		obj.obj.RateControl = NewStreamRateControlType().Msg()
	}
	if obj.rateControlHolder == nil {
		obj.rateControlHolder = &streamRateControlType{obj: obj.obj.RateControl}
	}
	return obj.rateControlHolder
}

// TBD
// RateControl returns a StreamRateControlType
func (obj *streamConfigurationDataType) HasRateControl() bool {
	return obj.obj.RateControl != nil
}

// TBD
// SetRateControl sets the StreamRateControlType value in the StreamConfigurationDataType object
func (obj *streamConfigurationDataType) SetRateControl(value StreamRateControlType) StreamConfigurationDataType {

	obj.rateControlHolder = nil
	obj.obj.RateControl = value.Msg()

	return obj
}

// TBD
// InterBurstGapControl returns a StreamInterBurstGapControlType
func (obj *streamConfigurationDataType) InterBurstGapControl() StreamInterBurstGapControlType {
	if obj.obj.InterBurstGapControl == nil {
		obj.obj.InterBurstGapControl = NewStreamInterBurstGapControlType().Msg()
	}
	if obj.interBurstGapControlHolder == nil {
		obj.interBurstGapControlHolder = &streamInterBurstGapControlType{obj: obj.obj.InterBurstGapControl}
	}
	return obj.interBurstGapControlHolder
}

// TBD
// InterBurstGapControl returns a StreamInterBurstGapControlType
func (obj *streamConfigurationDataType) HasInterBurstGapControl() bool {
	return obj.obj.InterBurstGapControl != nil
}

// TBD
// SetInterBurstGapControl sets the StreamInterBurstGapControlType value in the StreamConfigurationDataType object
func (obj *streamConfigurationDataType) SetInterBurstGapControl(value StreamInterBurstGapControlType) StreamConfigurationDataType {

	obj.interBurstGapControlHolder = nil
	obj.obj.InterBurstGapControl = value.Msg()

	return obj
}

// TBD
// InterStreamGapControl returns a StreamInterStreamGapControlType
func (obj *streamConfigurationDataType) InterStreamGapControl() StreamInterStreamGapControlType {
	if obj.obj.InterStreamGapControl == nil {
		obj.obj.InterStreamGapControl = NewStreamInterStreamGapControlType().Msg()
	}
	if obj.interStreamGapControlHolder == nil {
		obj.interStreamGapControlHolder = &streamInterStreamGapControlType{obj: obj.obj.InterStreamGapControl}
	}
	return obj.interStreamGapControlHolder
}

// TBD
// InterStreamGapControl returns a StreamInterStreamGapControlType
func (obj *streamConfigurationDataType) HasInterStreamGapControl() bool {
	return obj.obj.InterStreamGapControl != nil
}

// TBD
// SetInterStreamGapControl sets the StreamInterStreamGapControlType value in the StreamConfigurationDataType object
func (obj *streamConfigurationDataType) SetInterStreamGapControl(value StreamInterStreamGapControlType) StreamConfigurationDataType {

	obj.interStreamGapControlHolder = nil
	obj.obj.InterStreamGapControl = value.Msg()

	return obj
}

// TBD
// DstAddrControl returns a StreamDstAddrControlType
func (obj *streamConfigurationDataType) DstAddrControl() StreamDstAddrControlType {
	if obj.obj.DstAddrControl == nil {
		obj.obj.DstAddrControl = NewStreamDstAddrControlType().Msg()
	}
	if obj.dstAddrControlHolder == nil {
		obj.dstAddrControlHolder = &streamDstAddrControlType{obj: obj.obj.DstAddrControl}
	}
	return obj.dstAddrControlHolder
}

// TBD
// DstAddrControl returns a StreamDstAddrControlType
func (obj *streamConfigurationDataType) HasDstAddrControl() bool {
	return obj.obj.DstAddrControl != nil
}

// TBD
// SetDstAddrControl sets the StreamDstAddrControlType value in the StreamConfigurationDataType object
func (obj *streamConfigurationDataType) SetDstAddrControl(value StreamDstAddrControlType) StreamConfigurationDataType {

	obj.dstAddrControlHolder = nil
	obj.obj.DstAddrControl = value.Msg()

	return obj
}

// TBD
// SrcAddrControl returns a StreamSrcAddrControlType
func (obj *streamConfigurationDataType) SrcAddrControl() StreamSrcAddrControlType {
	if obj.obj.SrcAddrControl == nil {
		obj.obj.SrcAddrControl = NewStreamSrcAddrControlType().Msg()
	}
	if obj.srcAddrControlHolder == nil {
		obj.srcAddrControlHolder = &streamSrcAddrControlType{obj: obj.obj.SrcAddrControl}
	}
	return obj.srcAddrControlHolder
}

// TBD
// SrcAddrControl returns a StreamSrcAddrControlType
func (obj *streamConfigurationDataType) HasSrcAddrControl() bool {
	return obj.obj.SrcAddrControl != nil
}

// TBD
// SetSrcAddrControl sets the StreamSrcAddrControlType value in the StreamConfigurationDataType object
func (obj *streamConfigurationDataType) SetSrcAddrControl(value StreamSrcAddrControlType) StreamConfigurationDataType {

	obj.srcAddrControlHolder = nil
	obj.obj.SrcAddrControl = value.Msg()

	return obj
}

// TBD
// FrameControl returns a StreamFrameControlType
func (obj *streamConfigurationDataType) FrameControl() StreamFrameControlType {
	if obj.obj.FrameControl == nil {
		obj.obj.FrameControl = NewStreamFrameControlType().Msg()
	}
	if obj.frameControlHolder == nil {
		obj.frameControlHolder = &streamFrameControlType{obj: obj.obj.FrameControl}
	}
	return obj.frameControlHolder
}

// TBD
// FrameControl returns a StreamFrameControlType
func (obj *streamConfigurationDataType) HasFrameControl() bool {
	return obj.obj.FrameControl != nil
}

// TBD
// SetFrameControl sets the StreamFrameControlType value in the StreamConfigurationDataType object
func (obj *streamConfigurationDataType) SetFrameControl(value StreamFrameControlType) StreamConfigurationDataType {

	obj.frameControlHolder = nil
	obj.obj.FrameControl = value.Msg()

	return obj
}

// TBD
// BgndDataControl returns a StreamBackgroundDataControlType
func (obj *streamConfigurationDataType) BgndDataControl() StreamBackgroundDataControlType {
	if obj.obj.BgndDataControl == nil {
		obj.obj.BgndDataControl = NewStreamBackgroundDataControlType().Msg()
	}
	if obj.bgndDataControlHolder == nil {
		obj.bgndDataControlHolder = &streamBackgroundDataControlType{obj: obj.obj.BgndDataControl}
	}
	return obj.bgndDataControlHolder
}

// TBD
// BgndDataControl returns a StreamBackgroundDataControlType
func (obj *streamConfigurationDataType) HasBgndDataControl() bool {
	return obj.obj.BgndDataControl != nil
}

// TBD
// SetBgndDataControl sets the StreamBackgroundDataControlType value in the StreamConfigurationDataType object
func (obj *streamConfigurationDataType) SetBgndDataControl(value StreamBackgroundDataControlType) StreamConfigurationDataType {

	obj.bgndDataControlHolder = nil
	obj.obj.BgndDataControl = value.Msg()

	return obj
}

// TBD
// ProtocolHeaders returns a StreamProtocolHeaderInfoListType
func (obj *streamConfigurationDataType) ProtocolHeaders() StreamProtocolHeaderInfoListType {
	if obj.obj.ProtocolHeaders == nil {
		obj.obj.ProtocolHeaders = NewStreamProtocolHeaderInfoListType().Msg()
	}
	if obj.protocolHeadersHolder == nil {
		obj.protocolHeadersHolder = &streamProtocolHeaderInfoListType{obj: obj.obj.ProtocolHeaders}
	}
	return obj.protocolHeadersHolder
}

// TBD
// ProtocolHeaders returns a StreamProtocolHeaderInfoListType
func (obj *streamConfigurationDataType) HasProtocolHeaders() bool {
	return obj.obj.ProtocolHeaders != nil
}

// TBD
// SetProtocolHeaders sets the StreamProtocolHeaderInfoListType value in the StreamConfigurationDataType object
func (obj *streamConfigurationDataType) SetProtocolHeaders(value StreamProtocolHeaderInfoListType) StreamConfigurationDataType {

	obj.protocolHeadersHolder = nil
	obj.obj.ProtocolHeaders = value.Msg()

	return obj
}

// TBD
// UdfConfiguration returns a UdfUdfConfigurationType
func (obj *streamConfigurationDataType) UdfConfiguration() UdfUdfConfigurationType {
	if obj.obj.UdfConfiguration == nil {
		obj.obj.UdfConfiguration = NewUdfUdfConfigurationType().Msg()
	}
	if obj.udfConfigurationHolder == nil {
		obj.udfConfigurationHolder = &udfUdfConfigurationType{obj: obj.obj.UdfConfiguration}
	}
	return obj.udfConfigurationHolder
}

// TBD
// UdfConfiguration returns a UdfUdfConfigurationType
func (obj *streamConfigurationDataType) HasUdfConfiguration() bool {
	return obj.obj.UdfConfiguration != nil
}

// TBD
// SetUdfConfiguration sets the UdfUdfConfigurationType value in the StreamConfigurationDataType object
func (obj *streamConfigurationDataType) SetUdfConfiguration(value UdfUdfConfigurationType) StreamConfigurationDataType {

	obj.udfConfigurationHolder = nil
	obj.obj.UdfConfiguration = value.Msg()

	return obj
}

// TBD
// TableUdfConfiguration returns a TableUdfTableUdfConfigurationType
func (obj *streamConfigurationDataType) TableUdfConfiguration() TableUdfTableUdfConfigurationType {
	if obj.obj.TableUdfConfiguration == nil {
		obj.obj.TableUdfConfiguration = NewTableUdfTableUdfConfigurationType().Msg()
	}
	if obj.tableUdfConfigurationHolder == nil {
		obj.tableUdfConfigurationHolder = &tableUdfTableUdfConfigurationType{obj: obj.obj.TableUdfConfiguration}
	}
	return obj.tableUdfConfigurationHolder
}

// TBD
// TableUdfConfiguration returns a TableUdfTableUdfConfigurationType
func (obj *streamConfigurationDataType) HasTableUdfConfiguration() bool {
	return obj.obj.TableUdfConfiguration != nil
}

// TBD
// SetTableUdfConfiguration sets the TableUdfTableUdfConfigurationType value in the StreamConfigurationDataType object
func (obj *streamConfigurationDataType) SetTableUdfConfiguration(value TableUdfTableUdfConfigurationType) StreamConfigurationDataType {

	obj.tableUdfConfigurationHolder = nil
	obj.obj.TableUdfConfiguration = value.Msg()

	return obj
}

// TBD
// SequenceUdfConfiguration returns a UdfSequenceUdfConfigurationType
func (obj *streamConfigurationDataType) SequenceUdfConfiguration() UdfSequenceUdfConfigurationType {
	if obj.obj.SequenceUdfConfiguration == nil {
		obj.obj.SequenceUdfConfiguration = NewUdfSequenceUdfConfigurationType().Msg()
	}
	if obj.sequenceUdfConfigurationHolder == nil {
		obj.sequenceUdfConfigurationHolder = &udfSequenceUdfConfigurationType{obj: obj.obj.SequenceUdfConfiguration}
	}
	return obj.sequenceUdfConfigurationHolder
}

// TBD
// SequenceUdfConfiguration returns a UdfSequenceUdfConfigurationType
func (obj *streamConfigurationDataType) HasSequenceUdfConfiguration() bool {
	return obj.obj.SequenceUdfConfiguration != nil
}

// TBD
// SetSequenceUdfConfiguration sets the UdfSequenceUdfConfigurationType value in the StreamConfigurationDataType object
func (obj *streamConfigurationDataType) SetSequenceUdfConfiguration(value UdfSequenceUdfConfigurationType) StreamConfigurationDataType {

	obj.sequenceUdfConfigurationHolder = nil
	obj.obj.SequenceUdfConfiguration = value.Msg()

	return obj
}

// TBD
// DataIntegrityTx returns a StreamDataIntegrityTxType
func (obj *streamConfigurationDataType) DataIntegrityTx() StreamDataIntegrityTxType {
	if obj.obj.DataIntegrityTx == nil {
		obj.obj.DataIntegrityTx = NewStreamDataIntegrityTxType().Msg()
	}
	if obj.dataIntegrityTxHolder == nil {
		obj.dataIntegrityTxHolder = &streamDataIntegrityTxType{obj: obj.obj.DataIntegrityTx}
	}
	return obj.dataIntegrityTxHolder
}

// TBD
// DataIntegrityTx returns a StreamDataIntegrityTxType
func (obj *streamConfigurationDataType) HasDataIntegrityTx() bool {
	return obj.obj.DataIntegrityTx != nil
}

// TBD
// SetDataIntegrityTx sets the StreamDataIntegrityTxType value in the StreamConfigurationDataType object
func (obj *streamConfigurationDataType) SetDataIntegrityTx(value StreamDataIntegrityTxType) StreamConfigurationDataType {

	obj.dataIntegrityTxHolder = nil
	obj.obj.DataIntegrityTx = value.Msg()

	return obj
}

// TBD
// AutodetectSignatureTx returns a StreamAutodetectSignatureTxType
func (obj *streamConfigurationDataType) AutodetectSignatureTx() StreamAutodetectSignatureTxType {
	if obj.obj.AutodetectSignatureTx == nil {
		obj.obj.AutodetectSignatureTx = NewStreamAutodetectSignatureTxType().Msg()
	}
	if obj.autodetectSignatureTxHolder == nil {
		obj.autodetectSignatureTxHolder = &streamAutodetectSignatureTxType{obj: obj.obj.AutodetectSignatureTx}
	}
	return obj.autodetectSignatureTxHolder
}

// TBD
// AutodetectSignatureTx returns a StreamAutodetectSignatureTxType
func (obj *streamConfigurationDataType) HasAutodetectSignatureTx() bool {
	return obj.obj.AutodetectSignatureTx != nil
}

// TBD
// SetAutodetectSignatureTx sets the StreamAutodetectSignatureTxType value in the StreamConfigurationDataType object
func (obj *streamConfigurationDataType) SetAutodetectSignatureTx(value StreamAutodetectSignatureTxType) StreamConfigurationDataType {

	obj.autodetectSignatureTxHolder = nil
	obj.obj.AutodetectSignatureTx = value.Msg()

	return obj
}

// TBD
// SizeBinsTx returns a PacketGroupSizeBinsType
func (obj *streamConfigurationDataType) SizeBinsTx() PacketGroupSizeBinsType {
	if obj.obj.SizeBinsTx == nil {
		obj.obj.SizeBinsTx = NewPacketGroupSizeBinsType().Msg()
	}
	if obj.sizeBinsTxHolder == nil {
		obj.sizeBinsTxHolder = &packetGroupSizeBinsType{obj: obj.obj.SizeBinsTx}
	}
	return obj.sizeBinsTxHolder
}

// TBD
// SizeBinsTx returns a PacketGroupSizeBinsType
func (obj *streamConfigurationDataType) HasSizeBinsTx() bool {
	return obj.obj.SizeBinsTx != nil
}

// TBD
// SetSizeBinsTx sets the PacketGroupSizeBinsType value in the StreamConfigurationDataType object
func (obj *streamConfigurationDataType) SetSizeBinsTx(value PacketGroupSizeBinsType) StreamConfigurationDataType {

	obj.sizeBinsTxHolder = nil
	obj.obj.SizeBinsTx = value.Msg()

	return obj
}

// TBD
// MacSec returns a MacSecMacSecStreamControlType
func (obj *streamConfigurationDataType) MacSec() MacSecMacSecStreamControlType {
	if obj.obj.MacSec == nil {
		obj.obj.MacSec = NewMacSecMacSecStreamControlType().Msg()
	}
	if obj.macSecHolder == nil {
		obj.macSecHolder = &macSecMacSecStreamControlType{obj: obj.obj.MacSec}
	}
	return obj.macSecHolder
}

// TBD
// MacSec returns a MacSecMacSecStreamControlType
func (obj *streamConfigurationDataType) HasMacSec() bool {
	return obj.obj.MacSec != nil
}

// TBD
// SetMacSec sets the MacSecMacSecStreamControlType value in the StreamConfigurationDataType object
func (obj *streamConfigurationDataType) SetMacSec(value MacSecMacSecStreamControlType) StreamConfigurationDataType {

	obj.macSecHolder = nil
	obj.obj.MacSec = value.Msg()

	return obj
}

func (obj *streamConfigurationDataType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.StreamControl != nil {

		obj.StreamControl().validateObj(vObj, set_default)
	}

	if obj.obj.InterFrameGapControl != nil {

		obj.InterFrameGapControl().validateObj(vObj, set_default)
	}

	if obj.obj.RateControl != nil {

		obj.RateControl().validateObj(vObj, set_default)
	}

	if obj.obj.InterBurstGapControl != nil {

		obj.InterBurstGapControl().validateObj(vObj, set_default)
	}

	if obj.obj.InterStreamGapControl != nil {

		obj.InterStreamGapControl().validateObj(vObj, set_default)
	}

	if obj.obj.DstAddrControl != nil {

		obj.DstAddrControl().validateObj(vObj, set_default)
	}

	if obj.obj.SrcAddrControl != nil {

		obj.SrcAddrControl().validateObj(vObj, set_default)
	}

	if obj.obj.FrameControl != nil {

		obj.FrameControl().validateObj(vObj, set_default)
	}

	if obj.obj.BgndDataControl != nil {

		obj.BgndDataControl().validateObj(vObj, set_default)
	}

	if obj.obj.ProtocolHeaders != nil {

		obj.ProtocolHeaders().validateObj(vObj, set_default)
	}

	if obj.obj.UdfConfiguration != nil {

		obj.UdfConfiguration().validateObj(vObj, set_default)
	}

	if obj.obj.TableUdfConfiguration != nil {

		obj.TableUdfConfiguration().validateObj(vObj, set_default)
	}

	if obj.obj.SequenceUdfConfiguration != nil {

		obj.SequenceUdfConfiguration().validateObj(vObj, set_default)
	}

	if obj.obj.DataIntegrityTx != nil {

		obj.DataIntegrityTx().validateObj(vObj, set_default)
	}

	if obj.obj.AutodetectSignatureTx != nil {

		obj.AutodetectSignatureTx().validateObj(vObj, set_default)
	}

	if obj.obj.SizeBinsTx != nil {

		obj.SizeBinsTx().validateObj(vObj, set_default)
	}

	if obj.obj.MacSec != nil {

		obj.MacSec().validateObj(vObj, set_default)
	}

}

func (obj *streamConfigurationDataType) setDefault() {

}

// ***** StreamBackgroundDataType *****
type streamBackgroundDataType struct {
	validation
	obj *otg.StreamBackgroundDataType
}

func NewStreamBackgroundDataType() StreamBackgroundDataType {
	obj := streamBackgroundDataType{obj: &otg.StreamBackgroundDataType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamBackgroundDataType) Msg() *otg.StreamBackgroundDataType {
	return obj.obj
}

func (obj *streamBackgroundDataType) SetMsg(msg *otg.StreamBackgroundDataType) StreamBackgroundDataType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamBackgroundDataType) ToProto() (*otg.StreamBackgroundDataType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamBackgroundDataType) FromProto(msg *otg.StreamBackgroundDataType) (StreamBackgroundDataType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamBackgroundDataType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamBackgroundDataType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamBackgroundDataType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamBackgroundDataType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamBackgroundDataType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamBackgroundDataType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamBackgroundDataType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamBackgroundDataType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamBackgroundDataType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamBackgroundDataType) Clone() (StreamBackgroundDataType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamBackgroundDataType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamBackgroundDataType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// StreamBackgroundDataType is tBD
type StreamBackgroundDataType interface {
	Validation
	// Msg marshals StreamBackgroundDataType to protobuf object *otg.StreamBackgroundDataType
	// and doesn't set defaults
	Msg() *otg.StreamBackgroundDataType
	// SetMsg unmarshals StreamBackgroundDataType from protobuf object *otg.StreamBackgroundDataType
	// and doesn't set defaults
	SetMsg(*otg.StreamBackgroundDataType) StreamBackgroundDataType
	// ToProto marshals StreamBackgroundDataType to protobuf object *otg.StreamBackgroundDataType
	ToProto() (*otg.StreamBackgroundDataType, error)
	// ToPbText marshals StreamBackgroundDataType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamBackgroundDataType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamBackgroundDataType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamBackgroundDataType from protobuf object *otg.StreamBackgroundDataType
	FromProto(msg *otg.StreamBackgroundDataType) (StreamBackgroundDataType, error)
	// FromPbText unmarshals StreamBackgroundDataType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamBackgroundDataType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamBackgroundDataType from JSON text
	FromJson(value string) error
	// Validate validates StreamBackgroundDataType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamBackgroundDataType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Protocol returns string, set in StreamBackgroundDataType.
	Protocol() string
	// SetProtocol assigns string provided by user to StreamBackgroundDataType
	SetProtocol(value string) StreamBackgroundDataType
	// HasProtocol checks if Protocol has been set in StreamBackgroundDataType
	HasProtocol() bool
	// Pattern returns string, set in StreamBackgroundDataType.
	Pattern() string
	// SetPattern assigns string provided by user to StreamBackgroundDataType
	SetPattern(value string) StreamBackgroundDataType
	// HasPattern checks if Pattern has been set in StreamBackgroundDataType
	HasPattern() bool
}

func (obj *streamBackgroundDataType) populateXml(xObj *Argument) error {

	if obj.HasProtocol() {

		member := Member{
			Name:  "protocol",
			Type:  "octets",
			Value: obj.Protocol(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasPattern() {

		member := Member{
			Name:  "pattern",
			Type:  "octets",
			Value: obj.Pattern(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamBackgroundDataType) populateFromXml(xObj *RetVal) error {

	return nil
}

// Specify the initial octets of the packets that determine the protocol   carried in this stream. The protocol will be followed by the octets   that form the rest of the octets in the packet.
// Protocol returns a string
func (obj *streamBackgroundDataType) Protocol() string {

	return *obj.obj.Protocol

}

// Specify the initial octets of the packets that determine the protocol   carried in this stream. The protocol will be followed by the octets   that form the rest of the octets in the packet.
// Protocol returns a string
func (obj *streamBackgroundDataType) HasProtocol() bool {
	return obj.obj.Protocol != nil
}

// Specify the initial octets of the packets that determine the protocol   carried in this stream. The protocol will be followed by the octets   that form the rest of the octets in the packet.
// SetProtocol sets the string value in the StreamBackgroundDataType object
func (obj *streamBackgroundDataType) SetProtocol(value string) StreamBackgroundDataType {

	obj.obj.Protocol = &value
	return obj
}

// Specify a user-defined pattern of data to be transmitted on this   stream. The patternType must be set to kRepeatPattern or kPattern   otherwise this setting is ignored.
// Pattern returns a string
func (obj *streamBackgroundDataType) Pattern() string {

	return *obj.obj.Pattern

}

// Specify a user-defined pattern of data to be transmitted on this   stream. The patternType must be set to kRepeatPattern or kPattern   otherwise this setting is ignored.
// Pattern returns a string
func (obj *streamBackgroundDataType) HasPattern() bool {
	return obj.obj.Pattern != nil
}

// Specify a user-defined pattern of data to be transmitted on this   stream. The patternType must be set to kRepeatPattern or kPattern   otherwise this setting is ignored.
// SetPattern sets the string value in the StreamBackgroundDataType object
func (obj *streamBackgroundDataType) SetPattern(value string) StreamBackgroundDataType {

	obj.obj.Pattern = &value
	return obj
}

func (obj *streamBackgroundDataType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *streamBackgroundDataType) setDefault() {

}

// ***** UdfRangeListType *****
type udfRangeListType struct {
	validation
	obj                     *otg.UdfRangeListType
	udfIdHolder             IdTypeUdfId
	initValuesHolder        UdfUdfMVDataType
	repeatCountValuesHolder UdfUdfMVDataType
	stepValuesHolder        UdfUdfMVDataType
}

func NewUdfRangeListType() UdfRangeListType {
	obj := udfRangeListType{obj: &otg.UdfRangeListType{}}
	obj.setDefault()
	return &obj
}

func (obj *udfRangeListType) Msg() *otg.UdfRangeListType {
	return obj.obj
}

func (obj *udfRangeListType) SetMsg(msg *otg.UdfRangeListType) UdfRangeListType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *udfRangeListType) ToProto() (*otg.UdfRangeListType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *udfRangeListType) FromProto(msg *otg.UdfRangeListType) (UdfRangeListType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *udfRangeListType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *udfRangeListType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *udfRangeListType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfRangeListType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *udfRangeListType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfRangeListType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *udfRangeListType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *udfRangeListType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *udfRangeListType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *udfRangeListType) Clone() (UdfRangeListType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewUdfRangeListType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *udfRangeListType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *udfRangeListType) setNil() {
	obj.udfIdHolder = nil
	obj.initValuesHolder = nil
	obj.repeatCountValuesHolder = nil
	obj.stepValuesHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// UdfRangeListType is tBD
type UdfRangeListType interface {
	Validation
	// Msg marshals UdfRangeListType to protobuf object *otg.UdfRangeListType
	// and doesn't set defaults
	Msg() *otg.UdfRangeListType
	// SetMsg unmarshals UdfRangeListType from protobuf object *otg.UdfRangeListType
	// and doesn't set defaults
	SetMsg(*otg.UdfRangeListType) UdfRangeListType
	// ToProto marshals UdfRangeListType to protobuf object *otg.UdfRangeListType
	ToProto() (*otg.UdfRangeListType, error)
	// ToPbText marshals UdfRangeListType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals UdfRangeListType to YAML text
	ToYaml() (string, error)
	// ToJson marshals UdfRangeListType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals UdfRangeListType from protobuf object *otg.UdfRangeListType
	FromProto(msg *otg.UdfRangeListType) (UdfRangeListType, error)
	// FromPbText unmarshals UdfRangeListType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals UdfRangeListType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals UdfRangeListType from JSON text
	FromJson(value string) error
	// Validate validates UdfRangeListType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (UdfRangeListType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// UdfId returns IdTypeUdfId, set in UdfRangeListType.
	// IdTypeUdfId is tBD
	UdfId() IdTypeUdfId
	// SetUdfId assigns IdTypeUdfId provided by user to UdfRangeListType.
	// IdTypeUdfId is tBD
	SetUdfId(value IdTypeUdfId) UdfRangeListType
	// HasUdfId checks if UdfId has been set in UdfRangeListType
	HasUdfId() bool
	// InitValues returns UdfUdfMVDataType, set in UdfRangeListType.
	// UdfUdfMVDataType is tBD
	InitValues() UdfUdfMVDataType
	// SetInitValues assigns UdfUdfMVDataType provided by user to UdfRangeListType.
	// UdfUdfMVDataType is tBD
	SetInitValues(value UdfUdfMVDataType) UdfRangeListType
	// HasInitValues checks if InitValues has been set in UdfRangeListType
	HasInitValues() bool
	// RepeatCountValues returns UdfUdfMVDataType, set in UdfRangeListType.
	// UdfUdfMVDataType is tBD
	RepeatCountValues() UdfUdfMVDataType
	// SetRepeatCountValues assigns UdfUdfMVDataType provided by user to UdfRangeListType.
	// UdfUdfMVDataType is tBD
	SetRepeatCountValues(value UdfUdfMVDataType) UdfRangeListType
	// HasRepeatCountValues checks if RepeatCountValues has been set in UdfRangeListType
	HasRepeatCountValues() bool
	// StepValues returns UdfUdfMVDataType, set in UdfRangeListType.
	// UdfUdfMVDataType is tBD
	StepValues() UdfUdfMVDataType
	// SetStepValues assigns UdfUdfMVDataType provided by user to UdfRangeListType.
	// UdfUdfMVDataType is tBD
	SetStepValues(value UdfUdfMVDataType) UdfRangeListType
	// HasStepValues checks if StepValues has been set in UdfRangeListType
	HasStepValues() bool
	setNil()
}

func (obj *udfRangeListType) populateXml(xObj *Argument) error {

	return nil
}

func (obj *udfRangeListType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// UdfId returns a IdTypeUdfId
func (obj *udfRangeListType) UdfId() IdTypeUdfId {
	if obj.obj.UdfId == nil {
		obj.obj.UdfId = NewIdTypeUdfId().Msg()
	}
	if obj.udfIdHolder == nil {
		obj.udfIdHolder = &idTypeUdfId{obj: obj.obj.UdfId}
	}
	return obj.udfIdHolder
}

// TBD
// UdfId returns a IdTypeUdfId
func (obj *udfRangeListType) HasUdfId() bool {
	return obj.obj.UdfId != nil
}

// TBD
// SetUdfId sets the IdTypeUdfId value in the UdfRangeListType object
func (obj *udfRangeListType) SetUdfId(value IdTypeUdfId) UdfRangeListType {

	obj.udfIdHolder = nil
	obj.obj.UdfId = value.Msg()

	return obj
}

// TBD
// InitValues returns a UdfUdfMVDataType
func (obj *udfRangeListType) InitValues() UdfUdfMVDataType {
	if obj.obj.InitValues == nil {
		obj.obj.InitValues = NewUdfUdfMVDataType().Msg()
	}
	if obj.initValuesHolder == nil {
		obj.initValuesHolder = &udfUdfMVDataType{obj: obj.obj.InitValues}
	}
	return obj.initValuesHolder
}

// TBD
// InitValues returns a UdfUdfMVDataType
func (obj *udfRangeListType) HasInitValues() bool {
	return obj.obj.InitValues != nil
}

// TBD
// SetInitValues sets the UdfUdfMVDataType value in the UdfRangeListType object
func (obj *udfRangeListType) SetInitValues(value UdfUdfMVDataType) UdfRangeListType {

	obj.initValuesHolder = nil
	obj.obj.InitValues = value.Msg()

	return obj
}

// TBD
// RepeatCountValues returns a UdfUdfMVDataType
func (obj *udfRangeListType) RepeatCountValues() UdfUdfMVDataType {
	if obj.obj.RepeatCountValues == nil {
		obj.obj.RepeatCountValues = NewUdfUdfMVDataType().Msg()
	}
	if obj.repeatCountValuesHolder == nil {
		obj.repeatCountValuesHolder = &udfUdfMVDataType{obj: obj.obj.RepeatCountValues}
	}
	return obj.repeatCountValuesHolder
}

// TBD
// RepeatCountValues returns a UdfUdfMVDataType
func (obj *udfRangeListType) HasRepeatCountValues() bool {
	return obj.obj.RepeatCountValues != nil
}

// TBD
// SetRepeatCountValues sets the UdfUdfMVDataType value in the UdfRangeListType object
func (obj *udfRangeListType) SetRepeatCountValues(value UdfUdfMVDataType) UdfRangeListType {

	obj.repeatCountValuesHolder = nil
	obj.obj.RepeatCountValues = value.Msg()

	return obj
}

// TBD
// StepValues returns a UdfUdfMVDataType
func (obj *udfRangeListType) StepValues() UdfUdfMVDataType {
	if obj.obj.StepValues == nil {
		obj.obj.StepValues = NewUdfUdfMVDataType().Msg()
	}
	if obj.stepValuesHolder == nil {
		obj.stepValuesHolder = &udfUdfMVDataType{obj: obj.obj.StepValues}
	}
	return obj.stepValuesHolder
}

// TBD
// StepValues returns a UdfUdfMVDataType
func (obj *udfRangeListType) HasStepValues() bool {
	return obj.obj.StepValues != nil
}

// TBD
// SetStepValues sets the UdfUdfMVDataType value in the UdfRangeListType object
func (obj *udfRangeListType) SetStepValues(value UdfUdfMVDataType) UdfRangeListType {

	obj.stepValuesHolder = nil
	obj.obj.StepValues = value.Msg()

	return obj
}

func (obj *udfRangeListType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.UdfId != nil {

		obj.UdfId().validateObj(vObj, set_default)
	}

	if obj.obj.InitValues != nil {

		obj.InitValues().validateObj(vObj, set_default)
	}

	if obj.obj.RepeatCountValues != nil {

		obj.RepeatCountValues().validateObj(vObj, set_default)
	}

	if obj.obj.StepValues != nil {

		obj.StepValues().validateObj(vObj, set_default)
	}

}

func (obj *udfRangeListType) setDefault() {

}

// ***** TableUdfColumnMVDataType *****
type tableUdfColumnMVDataType struct {
	validation
	obj            *otg.TableUdfColumnMVDataType
	columnIdHolder TableUdfColId
}

func NewTableUdfColumnMVDataType() TableUdfColumnMVDataType {
	obj := tableUdfColumnMVDataType{obj: &otg.TableUdfColumnMVDataType{}}
	obj.setDefault()
	return &obj
}

func (obj *tableUdfColumnMVDataType) Msg() *otg.TableUdfColumnMVDataType {
	return obj.obj
}

func (obj *tableUdfColumnMVDataType) SetMsg(msg *otg.TableUdfColumnMVDataType) TableUdfColumnMVDataType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *tableUdfColumnMVDataType) ToProto() (*otg.TableUdfColumnMVDataType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *tableUdfColumnMVDataType) FromProto(msg *otg.TableUdfColumnMVDataType) (TableUdfColumnMVDataType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *tableUdfColumnMVDataType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *tableUdfColumnMVDataType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *tableUdfColumnMVDataType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *tableUdfColumnMVDataType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *tableUdfColumnMVDataType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *tableUdfColumnMVDataType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *tableUdfColumnMVDataType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *tableUdfColumnMVDataType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *tableUdfColumnMVDataType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *tableUdfColumnMVDataType) Clone() (TableUdfColumnMVDataType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewTableUdfColumnMVDataType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *tableUdfColumnMVDataType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *tableUdfColumnMVDataType) setNil() {
	obj.columnIdHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// TableUdfColumnMVDataType is tBD
type TableUdfColumnMVDataType interface {
	Validation
	// Msg marshals TableUdfColumnMVDataType to protobuf object *otg.TableUdfColumnMVDataType
	// and doesn't set defaults
	Msg() *otg.TableUdfColumnMVDataType
	// SetMsg unmarshals TableUdfColumnMVDataType from protobuf object *otg.TableUdfColumnMVDataType
	// and doesn't set defaults
	SetMsg(*otg.TableUdfColumnMVDataType) TableUdfColumnMVDataType
	// ToProto marshals TableUdfColumnMVDataType to protobuf object *otg.TableUdfColumnMVDataType
	ToProto() (*otg.TableUdfColumnMVDataType, error)
	// ToPbText marshals TableUdfColumnMVDataType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals TableUdfColumnMVDataType to YAML text
	ToYaml() (string, error)
	// ToJson marshals TableUdfColumnMVDataType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals TableUdfColumnMVDataType from protobuf object *otg.TableUdfColumnMVDataType
	FromProto(msg *otg.TableUdfColumnMVDataType) (TableUdfColumnMVDataType, error)
	// FromPbText unmarshals TableUdfColumnMVDataType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals TableUdfColumnMVDataType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals TableUdfColumnMVDataType from JSON text
	FromJson(value string) error
	// Validate validates TableUdfColumnMVDataType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (TableUdfColumnMVDataType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ColumnId returns TableUdfColId, set in TableUdfColumnMVDataType.
	// TableUdfColId is tBD
	ColumnId() TableUdfColId
	// SetColumnId assigns TableUdfColId provided by user to TableUdfColumnMVDataType.
	// TableUdfColId is tBD
	SetColumnId(value TableUdfColId) TableUdfColumnMVDataType
	// HasColumnId checks if ColumnId has been set in TableUdfColumnMVDataType
	HasColumnId() bool
	// Data returns string, set in TableUdfColumnMVDataType.
	Data() string
	// SetData assigns string provided by user to TableUdfColumnMVDataType
	SetData(value string) TableUdfColumnMVDataType
	// HasData checks if Data has been set in TableUdfColumnMVDataType
	HasData() bool
	setNil()
}

func (obj *tableUdfColumnMVDataType) populateXml(xObj *Argument) error {

	if obj.HasData() {

		member := Member{
			Name:  "data",
			Type:  "octets",
			Value: obj.Data(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *tableUdfColumnMVDataType) populateFromXml(xObj *RetVal) error {

	return nil
}

// The column index, 0 based.
// ColumnId returns a TableUdfColId
func (obj *tableUdfColumnMVDataType) ColumnId() TableUdfColId {
	if obj.obj.ColumnId == nil {
		obj.obj.ColumnId = NewTableUdfColId().Msg()
	}
	if obj.columnIdHolder == nil {
		obj.columnIdHolder = &tableUdfColId{obj: obj.obj.ColumnId}
	}
	return obj.columnIdHolder
}

// The column index, 0 based.
// ColumnId returns a TableUdfColId
func (obj *tableUdfColumnMVDataType) HasColumnId() bool {
	return obj.obj.ColumnId != nil
}

// The column index, 0 based.
// SetColumnId sets the TableUdfColId value in the TableUdfColumnMVDataType object
func (obj *tableUdfColumnMVDataType) SetColumnId(value TableUdfColId) TableUdfColumnMVDataType {

	obj.columnIdHolder = nil
	obj.obj.ColumnId = value.Msg()

	return obj
}

// MultiValue containing data for the entire column
// Data returns a string
func (obj *tableUdfColumnMVDataType) Data() string {

	return *obj.obj.Data

}

// MultiValue containing data for the entire column
// Data returns a string
func (obj *tableUdfColumnMVDataType) HasData() bool {
	return obj.obj.Data != nil
}

// MultiValue containing data for the entire column
// SetData sets the string value in the TableUdfColumnMVDataType object
func (obj *tableUdfColumnMVDataType) SetData(value string) TableUdfColumnMVDataType {

	obj.obj.Data = &value
	return obj
}

func (obj *tableUdfColumnMVDataType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ColumnId != nil {

		obj.ColumnId().validateObj(vObj, set_default)
	}

}

func (obj *tableUdfColumnMVDataType) setDefault() {

}

// ***** UdfKillBitListType *****
type udfKillBitListType struct {
	validation
	obj            *otg.UdfKillBitListType
	udfIdHolder    IdTypeUdfId
	killBitsHolder UdfUdfMVDataType
}

func NewUdfKillBitListType() UdfKillBitListType {
	obj := udfKillBitListType{obj: &otg.UdfKillBitListType{}}
	obj.setDefault()
	return &obj
}

func (obj *udfKillBitListType) Msg() *otg.UdfKillBitListType {
	return obj.obj
}

func (obj *udfKillBitListType) SetMsg(msg *otg.UdfKillBitListType) UdfKillBitListType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *udfKillBitListType) ToProto() (*otg.UdfKillBitListType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *udfKillBitListType) FromProto(msg *otg.UdfKillBitListType) (UdfKillBitListType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *udfKillBitListType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *udfKillBitListType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *udfKillBitListType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfKillBitListType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *udfKillBitListType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfKillBitListType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *udfKillBitListType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *udfKillBitListType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *udfKillBitListType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *udfKillBitListType) Clone() (UdfKillBitListType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewUdfKillBitListType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *udfKillBitListType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *udfKillBitListType) setNil() {
	obj.udfIdHolder = nil
	obj.killBitsHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// UdfKillBitListType is tBD
type UdfKillBitListType interface {
	Validation
	// Msg marshals UdfKillBitListType to protobuf object *otg.UdfKillBitListType
	// and doesn't set defaults
	Msg() *otg.UdfKillBitListType
	// SetMsg unmarshals UdfKillBitListType from protobuf object *otg.UdfKillBitListType
	// and doesn't set defaults
	SetMsg(*otg.UdfKillBitListType) UdfKillBitListType
	// ToProto marshals UdfKillBitListType to protobuf object *otg.UdfKillBitListType
	ToProto() (*otg.UdfKillBitListType, error)
	// ToPbText marshals UdfKillBitListType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals UdfKillBitListType to YAML text
	ToYaml() (string, error)
	// ToJson marshals UdfKillBitListType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals UdfKillBitListType from protobuf object *otg.UdfKillBitListType
	FromProto(msg *otg.UdfKillBitListType) (UdfKillBitListType, error)
	// FromPbText unmarshals UdfKillBitListType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals UdfKillBitListType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals UdfKillBitListType from JSON text
	FromJson(value string) error
	// Validate validates UdfKillBitListType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (UdfKillBitListType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// UdfId returns IdTypeUdfId, set in UdfKillBitListType.
	// IdTypeUdfId is tBD
	UdfId() IdTypeUdfId
	// SetUdfId assigns IdTypeUdfId provided by user to UdfKillBitListType.
	// IdTypeUdfId is tBD
	SetUdfId(value IdTypeUdfId) UdfKillBitListType
	// HasUdfId checks if UdfId has been set in UdfKillBitListType
	HasUdfId() bool
	// KillBits returns UdfUdfMVDataType, set in UdfKillBitListType.
	// UdfUdfMVDataType is tBD
	KillBits() UdfUdfMVDataType
	// SetKillBits assigns UdfUdfMVDataType provided by user to UdfKillBitListType.
	// UdfUdfMVDataType is tBD
	SetKillBits(value UdfUdfMVDataType) UdfKillBitListType
	// HasKillBits checks if KillBits has been set in UdfKillBitListType
	HasKillBits() bool
	setNil()
}

func (obj *udfKillBitListType) populateXml(xObj *Argument) error {

	return nil
}

func (obj *udfKillBitListType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// UdfId returns a IdTypeUdfId
func (obj *udfKillBitListType) UdfId() IdTypeUdfId {
	if obj.obj.UdfId == nil {
		obj.obj.UdfId = NewIdTypeUdfId().Msg()
	}
	if obj.udfIdHolder == nil {
		obj.udfIdHolder = &idTypeUdfId{obj: obj.obj.UdfId}
	}
	return obj.udfIdHolder
}

// TBD
// UdfId returns a IdTypeUdfId
func (obj *udfKillBitListType) HasUdfId() bool {
	return obj.obj.UdfId != nil
}

// TBD
// SetUdfId sets the IdTypeUdfId value in the UdfKillBitListType object
func (obj *udfKillBitListType) SetUdfId(value IdTypeUdfId) UdfKillBitListType {

	obj.udfIdHolder = nil
	obj.obj.UdfId = value.Msg()

	return obj
}

// TBD
// KillBits returns a UdfUdfMVDataType
func (obj *udfKillBitListType) KillBits() UdfUdfMVDataType {
	if obj.obj.KillBits == nil {
		obj.obj.KillBits = NewUdfUdfMVDataType().Msg()
	}
	if obj.killBitsHolder == nil {
		obj.killBitsHolder = &udfUdfMVDataType{obj: obj.obj.KillBits}
	}
	return obj.killBitsHolder
}

// TBD
// KillBits returns a UdfUdfMVDataType
func (obj *udfKillBitListType) HasKillBits() bool {
	return obj.obj.KillBits != nil
}

// TBD
// SetKillBits sets the UdfUdfMVDataType value in the UdfKillBitListType object
func (obj *udfKillBitListType) SetKillBits(value UdfUdfMVDataType) UdfKillBitListType {

	obj.killBitsHolder = nil
	obj.obj.KillBits = value.Msg()

	return obj
}

func (obj *udfKillBitListType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.UdfId != nil {

		obj.UdfId().validateObj(vObj, set_default)
	}

	if obj.obj.KillBits != nil {

		obj.KillBits().validateObj(vObj, set_default)
	}

}

func (obj *udfKillBitListType) setDefault() {

}

// ***** UdfValueListType *****
type udfValueListType struct {
	validation
	obj          *otg.UdfValueListType
	udfIdHolder  IdTypeUdfId
	valuesHolder UdfUdfMVDataType
}

func NewUdfValueListType() UdfValueListType {
	obj := udfValueListType{obj: &otg.UdfValueListType{}}
	obj.setDefault()
	return &obj
}

func (obj *udfValueListType) Msg() *otg.UdfValueListType {
	return obj.obj
}

func (obj *udfValueListType) SetMsg(msg *otg.UdfValueListType) UdfValueListType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *udfValueListType) ToProto() (*otg.UdfValueListType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *udfValueListType) FromProto(msg *otg.UdfValueListType) (UdfValueListType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *udfValueListType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *udfValueListType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *udfValueListType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfValueListType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *udfValueListType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfValueListType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *udfValueListType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *udfValueListType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *udfValueListType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *udfValueListType) Clone() (UdfValueListType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewUdfValueListType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *udfValueListType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *udfValueListType) setNil() {
	obj.udfIdHolder = nil
	obj.valuesHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// UdfValueListType is tBD
type UdfValueListType interface {
	Validation
	// Msg marshals UdfValueListType to protobuf object *otg.UdfValueListType
	// and doesn't set defaults
	Msg() *otg.UdfValueListType
	// SetMsg unmarshals UdfValueListType from protobuf object *otg.UdfValueListType
	// and doesn't set defaults
	SetMsg(*otg.UdfValueListType) UdfValueListType
	// ToProto marshals UdfValueListType to protobuf object *otg.UdfValueListType
	ToProto() (*otg.UdfValueListType, error)
	// ToPbText marshals UdfValueListType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals UdfValueListType to YAML text
	ToYaml() (string, error)
	// ToJson marshals UdfValueListType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals UdfValueListType from protobuf object *otg.UdfValueListType
	FromProto(msg *otg.UdfValueListType) (UdfValueListType, error)
	// FromPbText unmarshals UdfValueListType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals UdfValueListType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals UdfValueListType from JSON text
	FromJson(value string) error
	// Validate validates UdfValueListType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (UdfValueListType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// UdfId returns IdTypeUdfId, set in UdfValueListType.
	// IdTypeUdfId is tBD
	UdfId() IdTypeUdfId
	// SetUdfId assigns IdTypeUdfId provided by user to UdfValueListType.
	// IdTypeUdfId is tBD
	SetUdfId(value IdTypeUdfId) UdfValueListType
	// HasUdfId checks if UdfId has been set in UdfValueListType
	HasUdfId() bool
	// Values returns UdfUdfMVDataType, set in UdfValueListType.
	// UdfUdfMVDataType is tBD
	Values() UdfUdfMVDataType
	// SetValues assigns UdfUdfMVDataType provided by user to UdfValueListType.
	// UdfUdfMVDataType is tBD
	SetValues(value UdfUdfMVDataType) UdfValueListType
	// HasValues checks if Values has been set in UdfValueListType
	HasValues() bool
	setNil()
}

func (obj *udfValueListType) populateXml(xObj *Argument) error {

	return nil
}

func (obj *udfValueListType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// UdfId returns a IdTypeUdfId
func (obj *udfValueListType) UdfId() IdTypeUdfId {
	if obj.obj.UdfId == nil {
		obj.obj.UdfId = NewIdTypeUdfId().Msg()
	}
	if obj.udfIdHolder == nil {
		obj.udfIdHolder = &idTypeUdfId{obj: obj.obj.UdfId}
	}
	return obj.udfIdHolder
}

// TBD
// UdfId returns a IdTypeUdfId
func (obj *udfValueListType) HasUdfId() bool {
	return obj.obj.UdfId != nil
}

// TBD
// SetUdfId sets the IdTypeUdfId value in the UdfValueListType object
func (obj *udfValueListType) SetUdfId(value IdTypeUdfId) UdfValueListType {

	obj.udfIdHolder = nil
	obj.obj.UdfId = value.Msg()

	return obj
}

// TBD
// Values returns a UdfUdfMVDataType
func (obj *udfValueListType) Values() UdfUdfMVDataType {
	if obj.obj.Values == nil {
		obj.obj.Values = NewUdfUdfMVDataType().Msg()
	}
	if obj.valuesHolder == nil {
		obj.valuesHolder = &udfUdfMVDataType{obj: obj.obj.Values}
	}
	return obj.valuesHolder
}

// TBD
// Values returns a UdfUdfMVDataType
func (obj *udfValueListType) HasValues() bool {
	return obj.obj.Values != nil
}

// TBD
// SetValues sets the UdfUdfMVDataType value in the UdfValueListType object
func (obj *udfValueListType) SetValues(value UdfUdfMVDataType) UdfValueListType {

	obj.valuesHolder = nil
	obj.obj.Values = value.Msg()

	return obj
}

func (obj *udfValueListType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.UdfId != nil {

		obj.UdfId().validateObj(vObj, set_default)
	}

	if obj.obj.Values != nil {

		obj.Values().validateObj(vObj, set_default)
	}

}

func (obj *udfValueListType) setDefault() {

}

// ***** StatCatalogStHtgCatalogStat *****
type statCatalogStHtgCatalogStat struct {
	validation
	obj *otg.StatCatalogStHtgCatalogStat
}

func NewStatCatalogStHtgCatalogStat() StatCatalogStHtgCatalogStat {
	obj := statCatalogStHtgCatalogStat{obj: &otg.StatCatalogStHtgCatalogStat{}}
	obj.setDefault()
	return &obj
}

func (obj *statCatalogStHtgCatalogStat) Msg() *otg.StatCatalogStHtgCatalogStat {
	return obj.obj
}

func (obj *statCatalogStHtgCatalogStat) SetMsg(msg *otg.StatCatalogStHtgCatalogStat) StatCatalogStHtgCatalogStat {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *statCatalogStHtgCatalogStat) ToProto() (*otg.StatCatalogStHtgCatalogStat, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *statCatalogStHtgCatalogStat) FromProto(msg *otg.StatCatalogStHtgCatalogStat) (StatCatalogStHtgCatalogStat, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *statCatalogStHtgCatalogStat) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *statCatalogStHtgCatalogStat) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *statCatalogStHtgCatalogStat) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *statCatalogStHtgCatalogStat) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *statCatalogStHtgCatalogStat) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *statCatalogStHtgCatalogStat) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *statCatalogStHtgCatalogStat) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *statCatalogStHtgCatalogStat) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *statCatalogStHtgCatalogStat) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *statCatalogStHtgCatalogStat) Clone() (StatCatalogStHtgCatalogStat, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStatCatalogStHtgCatalogStat()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *statCatalogStHtgCatalogStat) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// StatCatalogStHtgCatalogStat is tBD
type StatCatalogStHtgCatalogStat interface {
	Validation
	// Msg marshals StatCatalogStHtgCatalogStat to protobuf object *otg.StatCatalogStHtgCatalogStat
	// and doesn't set defaults
	Msg() *otg.StatCatalogStHtgCatalogStat
	// SetMsg unmarshals StatCatalogStHtgCatalogStat from protobuf object *otg.StatCatalogStHtgCatalogStat
	// and doesn't set defaults
	SetMsg(*otg.StatCatalogStHtgCatalogStat) StatCatalogStHtgCatalogStat
	// ToProto marshals StatCatalogStHtgCatalogStat to protobuf object *otg.StatCatalogStHtgCatalogStat
	ToProto() (*otg.StatCatalogStHtgCatalogStat, error)
	// ToPbText marshals StatCatalogStHtgCatalogStat to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StatCatalogStHtgCatalogStat to YAML text
	ToYaml() (string, error)
	// ToJson marshals StatCatalogStHtgCatalogStat to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StatCatalogStHtgCatalogStat from protobuf object *otg.StatCatalogStHtgCatalogStat
	FromProto(msg *otg.StatCatalogStHtgCatalogStat) (StatCatalogStHtgCatalogStat, error)
	// FromPbText unmarshals StatCatalogStHtgCatalogStat from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StatCatalogStHtgCatalogStat from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StatCatalogStHtgCatalogStat from JSON text
	FromJson(value string) error
	// Validate validates StatCatalogStHtgCatalogStat
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StatCatalogStHtgCatalogStat, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Name returns string, set in StatCatalogStHtgCatalogStat.
	Name() string
	// SetName assigns string provided by user to StatCatalogStHtgCatalogStat
	SetName(value string) StatCatalogStHtgCatalogStat
	// HasName checks if Name has been set in StatCatalogStHtgCatalogStat
	HasName() bool
	// Description returns string, set in StatCatalogStHtgCatalogStat.
	Description() string
	// SetDescription assigns string provided by user to StatCatalogStHtgCatalogStat
	SetDescription(value string) StatCatalogStHtgCatalogStat
	// HasDescription checks if Description has been set in StatCatalogStHtgCatalogStat
	HasDescription() bool
	// StatId returns int32, set in StatCatalogStHtgCatalogStat.
	StatId() int32
	// SetStatId assigns int32 provided by user to StatCatalogStHtgCatalogStat
	SetStatId(value int32) StatCatalogStHtgCatalogStat
	// HasStatId checks if StatId has been set in StatCatalogStHtgCatalogStat
	HasStatId() bool
	// StatEnginePath returns string, set in StatCatalogStHtgCatalogStat.
	StatEnginePath() string
	// SetStatEnginePath assigns string provided by user to StatCatalogStHtgCatalogStat
	SetStatEnginePath(value string) StatCatalogStHtgCatalogStat
	// HasStatEnginePath checks if StatEnginePath has been set in StatCatalogStHtgCatalogStat
	HasStatEnginePath() bool
	// StatValueType returns StatCatalogStHtgCatalogStatStatValueTypeEnum, set in StatCatalogStHtgCatalogStat
	StatValueType() StatCatalogStHtgCatalogStatStatValueTypeEnum
	// SetStatValueType assigns StatCatalogStHtgCatalogStatStatValueTypeEnum provided by user to StatCatalogStHtgCatalogStat
	SetStatValueType(value StatCatalogStHtgCatalogStatStatValueTypeEnum) StatCatalogStHtgCatalogStat
	// HasStatValueType checks if StatValueType has been set in StatCatalogStHtgCatalogStat
	HasStatValueType() bool
	// StatType returns StatCatalogStHtgCatalogStatStatTypeEnum, set in StatCatalogStHtgCatalogStat
	StatType() StatCatalogStHtgCatalogStatStatTypeEnum
	// SetStatType assigns StatCatalogStHtgCatalogStatStatTypeEnum provided by user to StatCatalogStHtgCatalogStat
	SetStatType(value StatCatalogStHtgCatalogStatStatTypeEnum) StatCatalogStHtgCatalogStat
	// HasStatType checks if StatType has been set in StatCatalogStHtgCatalogStat
	HasStatType() bool
	// IndexMin returns int32, set in StatCatalogStHtgCatalogStat.
	IndexMin() int32
	// SetIndexMin assigns int32 provided by user to StatCatalogStHtgCatalogStat
	SetIndexMin(value int32) StatCatalogStHtgCatalogStat
	// HasIndexMin checks if IndexMin has been set in StatCatalogStHtgCatalogStat
	HasIndexMin() bool
	// IndexMax returns int32, set in StatCatalogStHtgCatalogStat.
	IndexMax() int32
	// SetIndexMax assigns int32 provided by user to StatCatalogStHtgCatalogStat
	SetIndexMax(value int32) StatCatalogStHtgCatalogStat
	// HasIndexMax checks if IndexMax has been set in StatCatalogStHtgCatalogStat
	HasIndexMax() bool
	// ModeList returns string, set in StatCatalogStHtgCatalogStat.
	ModeList() string
	// SetModeList assigns string provided by user to StatCatalogStHtgCatalogStat
	SetModeList(value string) StatCatalogStHtgCatalogStat
	// HasModeList checks if ModeList has been set in StatCatalogStHtgCatalogStat
	HasModeList() bool
}

func (obj *statCatalogStHtgCatalogStat) populateXml(xObj *Argument) error {

	if obj.HasName() {

		member := Member{
			Name:  "name",
			Type:  "string",
			Value: obj.Name(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasDescription() {

		member := Member{
			Name:  "description",
			Type:  "string",
			Value: obj.Description(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasStatId() {

		member := Member{
			Name:  "statid",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.StatId()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasStatEnginePath() {

		member := Member{
			Name:  "statenginepath",
			Type:  "string",
			Value: obj.StatEnginePath(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasStatValueType() {

		member := Member{
			Name:  "statvaluetype",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.StatCatalog+eValueType",
			Value: strconv.FormatInt(int64(obj.obj.StatValueType.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasStatType() {

		member := Member{
			Name:  "stattype",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.StatCatalog+eStatType",
			Value: strconv.FormatInt(int64(obj.obj.StatType.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIndexMin() {

		member := Member{
			Name:  "indexmin",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.IndexMin()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIndexMax() {

		member := Member{
			Name:  "indexmax",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.IndexMax()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasModeList() {

		member := Member{
			Name:  "modelist",
			Type:  "string",
			Value: obj.ModeList(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *statCatalogStHtgCatalogStat) populateFromXml(xObj *RetVal) error {

	return nil
}

// Stat name.
// Name returns a string
func (obj *statCatalogStHtgCatalogStat) Name() string {

	return *obj.obj.Name

}

// Stat name.
// Name returns a string
func (obj *statCatalogStHtgCatalogStat) HasName() bool {
	return obj.obj.Name != nil
}

// Stat name.
// SetName sets the string value in the StatCatalogStHtgCatalogStat object
func (obj *statCatalogStHtgCatalogStat) SetName(value string) StatCatalogStHtgCatalogStat {

	obj.obj.Name = &value
	return obj
}

// Stat description.
// Description returns a string
func (obj *statCatalogStHtgCatalogStat) Description() string {

	return *obj.obj.Description

}

// Stat description.
// Description returns a string
func (obj *statCatalogStHtgCatalogStat) HasDescription() bool {
	return obj.obj.Description != nil
}

// Stat description.
// SetDescription sets the string value in the StatCatalogStHtgCatalogStat object
func (obj *statCatalogStHtgCatalogStat) SetDescription(value string) StatCatalogStHtgCatalogStat {

	obj.obj.Description = &value
	return obj
}

// Stat id .
// StatId returns a int32
func (obj *statCatalogStHtgCatalogStat) StatId() int32 {

	return *obj.obj.StatId

}

// Stat id .
// StatId returns a int32
func (obj *statCatalogStHtgCatalogStat) HasStatId() bool {
	return obj.obj.StatId != nil
}

// Stat id .
// SetStatId sets the int32 value in the StatCatalogStHtgCatalogStat object
func (obj *statCatalogStHtgCatalogStat) SetStatId(value int32) StatCatalogStHtgCatalogStat {

	obj.obj.StatId = &value
	return obj
}

// Stat path.
// StatEnginePath returns a string
func (obj *statCatalogStHtgCatalogStat) StatEnginePath() string {

	return *obj.obj.StatEnginePath

}

// Stat path.
// StatEnginePath returns a string
func (obj *statCatalogStHtgCatalogStat) HasStatEnginePath() bool {
	return obj.obj.StatEnginePath != nil
}

// Stat path.
// SetStatEnginePath sets the string value in the StatCatalogStHtgCatalogStat object
func (obj *statCatalogStHtgCatalogStat) SetStatEnginePath(value string) StatCatalogStHtgCatalogStat {

	obj.obj.StatEnginePath = &value
	return obj
}

type StatCatalogStHtgCatalogStatStatValueTypeEnum string

// Enum of StatValueType on StatCatalogStHtgCatalogStat
var StatCatalogStHtgCatalogStatStatValueType = struct {
	KCOUNTER StatCatalogStHtgCatalogStatStatValueTypeEnum
	KSTRING  StatCatalogStHtgCatalogStatStatValueTypeEnum
	KPAIR    StatCatalogStHtgCatalogStatStatValueTypeEnum
}{
	KCOUNTER: StatCatalogStHtgCatalogStatStatValueTypeEnum("kCounter"),
	KSTRING:  StatCatalogStHtgCatalogStatStatValueTypeEnum("kString"),
	KPAIR:    StatCatalogStHtgCatalogStatStatValueTypeEnum("kPair"),
}

func (obj *statCatalogStHtgCatalogStat) StatValueType() StatCatalogStHtgCatalogStatStatValueTypeEnum {
	return StatCatalogStHtgCatalogStatStatValueTypeEnum(obj.obj.StatValueType.Enum().String())
}

// Stat path.
// StatValueType returns a string
func (obj *statCatalogStHtgCatalogStat) HasStatValueType() bool {
	return obj.obj.StatValueType != nil
}

func (obj *statCatalogStHtgCatalogStat) SetStatValueType(value StatCatalogStHtgCatalogStatStatValueTypeEnum) StatCatalogStHtgCatalogStat {
	intValue, ok := otg.StatCatalogStHtgCatalogStat_StatValueType_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on StatCatalogStHtgCatalogStatStatValueTypeEnum", string(value)))
		return obj
	}
	enumValue := otg.StatCatalogStHtgCatalogStat_StatValueType_Enum(intValue)
	obj.obj.StatValueType = &enumValue

	return obj
}

type StatCatalogStHtgCatalogStatStatTypeEnum string

// Enum of StatType on StatCatalogStHtgCatalogStat
var StatCatalogStHtgCatalogStatStatType = struct {
	KDEFAULT StatCatalogStHtgCatalogStatStatTypeEnum
	KARRAY   StatCatalogStHtgCatalogStatStatTypeEnum
}{
	KDEFAULT: StatCatalogStHtgCatalogStatStatTypeEnum("kDefault"),
	KARRAY:   StatCatalogStHtgCatalogStatStatTypeEnum("kArray"),
}

func (obj *statCatalogStHtgCatalogStat) StatType() StatCatalogStHtgCatalogStatStatTypeEnum {
	return StatCatalogStHtgCatalogStatStatTypeEnum(obj.obj.StatType.Enum().String())
}

// Mapped from Stat ValueType
// StatType returns a string
func (obj *statCatalogStHtgCatalogStat) HasStatType() bool {
	return obj.obj.StatType != nil
}

func (obj *statCatalogStHtgCatalogStat) SetStatType(value StatCatalogStHtgCatalogStatStatTypeEnum) StatCatalogStHtgCatalogStat {
	intValue, ok := otg.StatCatalogStHtgCatalogStat_StatType_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on StatCatalogStHtgCatalogStatStatTypeEnum", string(value)))
		return obj
	}
	enumValue := otg.StatCatalogStHtgCatalogStat_StatType_Enum(intValue)
	obj.obj.StatType = &enumValue

	return obj
}

// Mapped from StatArraySize. Always 0.
// IndexMin returns a int32
func (obj *statCatalogStHtgCatalogStat) IndexMin() int32 {

	return *obj.obj.IndexMin

}

// Mapped from StatArraySize. Always 0.
// IndexMin returns a int32
func (obj *statCatalogStHtgCatalogStat) HasIndexMin() bool {
	return obj.obj.IndexMin != nil
}

// Mapped from StatArraySize. Always 0.
// SetIndexMin sets the int32 value in the StatCatalogStHtgCatalogStat object
func (obj *statCatalogStHtgCatalogStat) SetIndexMin(value int32) StatCatalogStHtgCatalogStat {

	obj.obj.IndexMin = &value
	return obj
}

// Mapped from StatArraySize. ArraySize -1.
// IndexMax returns a int32
func (obj *statCatalogStHtgCatalogStat) IndexMax() int32 {

	return *obj.obj.IndexMax

}

// Mapped from StatArraySize. ArraySize -1.
// IndexMax returns a int32
func (obj *statCatalogStHtgCatalogStat) HasIndexMax() bool {
	return obj.obj.IndexMax != nil
}

// Mapped from StatArraySize. ArraySize -1.
// SetIndexMax sets the int32 value in the StatCatalogStHtgCatalogStat object
func (obj *statCatalogStHtgCatalogStat) SetIndexMax(value int32) StatCatalogStHtgCatalogStat {

	obj.obj.IndexMax = &value
	return obj
}

// Stat modeList.
// ModeList returns a string
func (obj *statCatalogStHtgCatalogStat) ModeList() string {

	return *obj.obj.ModeList

}

// Stat modeList.
// ModeList returns a string
func (obj *statCatalogStHtgCatalogStat) HasModeList() bool {
	return obj.obj.ModeList != nil
}

// Stat modeList.
// SetModeList sets the string value in the StatCatalogStHtgCatalogStat object
func (obj *statCatalogStHtgCatalogStat) SetModeList(value string) StatCatalogStHtgCatalogStat {

	obj.obj.ModeList = &value
	return obj
}

func (obj *statCatalogStHtgCatalogStat) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *statCatalogStHtgCatalogStat) setDefault() {

}

// ***** PortPfcPriorityQueueChannelSet *****
type portPfcPriorityQueueChannelSet struct {
	validation
	obj *otg.PortPfcPriorityQueueChannelSet
}

func NewPortPfcPriorityQueueChannelSet() PortPfcPriorityQueueChannelSet {
	obj := portPfcPriorityQueueChannelSet{obj: &otg.PortPfcPriorityQueueChannelSet{}}
	obj.setDefault()
	return &obj
}

func (obj *portPfcPriorityQueueChannelSet) Msg() *otg.PortPfcPriorityQueueChannelSet {
	return obj.obj
}

func (obj *portPfcPriorityQueueChannelSet) SetMsg(msg *otg.PortPfcPriorityQueueChannelSet) PortPfcPriorityQueueChannelSet {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *portPfcPriorityQueueChannelSet) ToProto() (*otg.PortPfcPriorityQueueChannelSet, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *portPfcPriorityQueueChannelSet) FromProto(msg *otg.PortPfcPriorityQueueChannelSet) (PortPfcPriorityQueueChannelSet, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *portPfcPriorityQueueChannelSet) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *portPfcPriorityQueueChannelSet) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portPfcPriorityQueueChannelSet) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portPfcPriorityQueueChannelSet) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *portPfcPriorityQueueChannelSet) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portPfcPriorityQueueChannelSet) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *portPfcPriorityQueueChannelSet) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *portPfcPriorityQueueChannelSet) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *portPfcPriorityQueueChannelSet) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *portPfcPriorityQueueChannelSet) Clone() (PortPfcPriorityQueueChannelSet, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPortPfcPriorityQueueChannelSet()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *portPfcPriorityQueueChannelSet) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// PortPfcPriorityQueueChannelSet is tBD
type PortPfcPriorityQueueChannelSet interface {
	Validation
	// Msg marshals PortPfcPriorityQueueChannelSet to protobuf object *otg.PortPfcPriorityQueueChannelSet
	// and doesn't set defaults
	Msg() *otg.PortPfcPriorityQueueChannelSet
	// SetMsg unmarshals PortPfcPriorityQueueChannelSet from protobuf object *otg.PortPfcPriorityQueueChannelSet
	// and doesn't set defaults
	SetMsg(*otg.PortPfcPriorityQueueChannelSet) PortPfcPriorityQueueChannelSet
	// ToProto marshals PortPfcPriorityQueueChannelSet to protobuf object *otg.PortPfcPriorityQueueChannelSet
	ToProto() (*otg.PortPfcPriorityQueueChannelSet, error)
	// ToPbText marshals PortPfcPriorityQueueChannelSet to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PortPfcPriorityQueueChannelSet to YAML text
	ToYaml() (string, error)
	// ToJson marshals PortPfcPriorityQueueChannelSet to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PortPfcPriorityQueueChannelSet from protobuf object *otg.PortPfcPriorityQueueChannelSet
	FromProto(msg *otg.PortPfcPriorityQueueChannelSet) (PortPfcPriorityQueueChannelSet, error)
	// FromPbText unmarshals PortPfcPriorityQueueChannelSet from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PortPfcPriorityQueueChannelSet from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PortPfcPriorityQueueChannelSet from JSON text
	FromJson(value string) error
	// Validate validates PortPfcPriorityQueueChannelSet
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PortPfcPriorityQueueChannelSet, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// PfcPriorityQueueChannelSet returns []int32, set in PortPfcPriorityQueueChannelSet.
	PfcPriorityQueueChannelSet() []int32
	// SetPfcPriorityQueueChannelSet assigns []int32 provided by user to PortPfcPriorityQueueChannelSet
	SetPfcPriorityQueueChannelSet(value []int32) PortPfcPriorityQueueChannelSet
}

func (obj *portPfcPriorityQueueChannelSet) populateXml(xObj *Argument) error {

	if len(obj.PfcPriorityQueueChannelSet()) != 0 {
		for _, item := range obj.PfcPriorityQueueChannelSet() {
			it := Item{
				Type:  "None",
				Value: strconv.FormatInt(int64(item), 10),
			}

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *portPfcPriorityQueueChannelSet) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PfcPriorityQueueChannelSet returns a []int32
func (obj *portPfcPriorityQueueChannelSet) PfcPriorityQueueChannelSet() []int32 {
	if obj.obj.PfcPriorityQueueChannelSet == nil {
		obj.obj.PfcPriorityQueueChannelSet = make([]int32, 0)
	}
	return obj.obj.PfcPriorityQueueChannelSet
}

// description is TBD
// SetPfcPriorityQueueChannelSet sets the []int32 value in the PortPfcPriorityQueueChannelSet object
func (obj *portPfcPriorityQueueChannelSet) SetPfcPriorityQueueChannelSet(value []int32) PortPfcPriorityQueueChannelSet {

	if obj.obj.PfcPriorityQueueChannelSet == nil {
		obj.obj.PfcPriorityQueueChannelSet = make([]int32, 0)
	}
	obj.obj.PfcPriorityQueueChannelSet = value

	return obj
}

func (obj *portPfcPriorityQueueChannelSet) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *portPfcPriorityQueueChannelSet) setDefault() {

}

// ***** PortTxLaneType *****
type portTxLaneType struct {
	validation
	obj            *otg.PortTxLaneType
	laneSkewHolder PFTypePicoSecondsType
}

func NewPortTxLaneType() PortTxLaneType {
	obj := portTxLaneType{obj: &otg.PortTxLaneType{}}
	obj.setDefault()
	return &obj
}

func (obj *portTxLaneType) Msg() *otg.PortTxLaneType {
	return obj.obj
}

func (obj *portTxLaneType) SetMsg(msg *otg.PortTxLaneType) PortTxLaneType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *portTxLaneType) ToProto() (*otg.PortTxLaneType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *portTxLaneType) FromProto(msg *otg.PortTxLaneType) (PortTxLaneType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *portTxLaneType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *portTxLaneType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portTxLaneType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portTxLaneType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *portTxLaneType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *portTxLaneType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *portTxLaneType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *portTxLaneType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *portTxLaneType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *portTxLaneType) Clone() (PortTxLaneType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPortTxLaneType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *portTxLaneType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *portTxLaneType) setNil() {
	obj.laneSkewHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// PortTxLaneType is tBD
type PortTxLaneType interface {
	Validation
	// Msg marshals PortTxLaneType to protobuf object *otg.PortTxLaneType
	// and doesn't set defaults
	Msg() *otg.PortTxLaneType
	// SetMsg unmarshals PortTxLaneType from protobuf object *otg.PortTxLaneType
	// and doesn't set defaults
	SetMsg(*otg.PortTxLaneType) PortTxLaneType
	// ToProto marshals PortTxLaneType to protobuf object *otg.PortTxLaneType
	ToProto() (*otg.PortTxLaneType, error)
	// ToPbText marshals PortTxLaneType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PortTxLaneType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PortTxLaneType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PortTxLaneType from protobuf object *otg.PortTxLaneType
	FromProto(msg *otg.PortTxLaneType) (PortTxLaneType, error)
	// FromPbText unmarshals PortTxLaneType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PortTxLaneType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PortTxLaneType from JSON text
	FromJson(value string) error
	// Validate validates PortTxLaneType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PortTxLaneType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// PhysicalLane returns string, set in PortTxLaneType.
	PhysicalLane() string
	// SetPhysicalLane assigns string provided by user to PortTxLaneType
	SetPhysicalLane(value string) PortTxLaneType
	// HasPhysicalLane checks if PhysicalLane has been set in PortTxLaneType
	HasPhysicalLane() bool
	// PcsLane returns int32, set in PortTxLaneType.
	PcsLane() int32
	// SetPcsLane assigns int32 provided by user to PortTxLaneType
	SetPcsLane(value int32) PortTxLaneType
	// HasPcsLane checks if PcsLane has been set in PortTxLaneType
	HasPcsLane() bool
	// LaneSkew returns PFTypePicoSecondsType, set in PortTxLaneType.
	// PFTypePicoSecondsType is model a duration in picoseconds using a plain integer. This allows signed durations up to 4 months to expressed.
	LaneSkew() PFTypePicoSecondsType
	// SetLaneSkew assigns PFTypePicoSecondsType provided by user to PortTxLaneType.
	// PFTypePicoSecondsType is model a duration in picoseconds using a plain integer. This allows signed durations up to 4 months to expressed.
	SetLaneSkew(value PFTypePicoSecondsType) PortTxLaneType
	// HasLaneSkew checks if LaneSkew has been set in PortTxLaneType
	HasLaneSkew() bool
	setNil()
}

func (obj *portTxLaneType) populateXml(xObj *Argument) error {

	if obj.HasPhysicalLane() {

		member := Member{
			Name:  "physicallane",
			Type:  "string",
			Value: obj.PhysicalLane(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasPcsLane() {

		member := Member{
			Name:  "pcslane",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.PcsLane()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *portTxLaneType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// PhysicalLane returns a string
func (obj *portTxLaneType) PhysicalLane() string {

	return *obj.obj.PhysicalLane

}

// TBD
// PhysicalLane returns a string
func (obj *portTxLaneType) HasPhysicalLane() bool {
	return obj.obj.PhysicalLane != nil
}

// TBD
// SetPhysicalLane sets the string value in the PortTxLaneType object
func (obj *portTxLaneType) SetPhysicalLane(value string) PortTxLaneType {

	obj.obj.PhysicalLane = &value
	return obj
}

// TBD
// PcsLane returns a int32
func (obj *portTxLaneType) PcsLane() int32 {

	return *obj.obj.PcsLane

}

// TBD
// PcsLane returns a int32
func (obj *portTxLaneType) HasPcsLane() bool {
	return obj.obj.PcsLane != nil
}

// TBD
// SetPcsLane sets the int32 value in the PortTxLaneType object
func (obj *portTxLaneType) SetPcsLane(value int32) PortTxLaneType {

	obj.obj.PcsLane = &value
	return obj
}

// TBD
// LaneSkew returns a PFTypePicoSecondsType
func (obj *portTxLaneType) LaneSkew() PFTypePicoSecondsType {
	if obj.obj.LaneSkew == nil {
		obj.obj.LaneSkew = NewPFTypePicoSecondsType().Msg()
	}
	if obj.laneSkewHolder == nil {
		obj.laneSkewHolder = &pFTypePicoSecondsType{obj: obj.obj.LaneSkew}
	}
	return obj.laneSkewHolder
}

// TBD
// LaneSkew returns a PFTypePicoSecondsType
func (obj *portTxLaneType) HasLaneSkew() bool {
	return obj.obj.LaneSkew != nil
}

// TBD
// SetLaneSkew sets the PFTypePicoSecondsType value in the PortTxLaneType object
func (obj *portTxLaneType) SetLaneSkew(value PFTypePicoSecondsType) PortTxLaneType {

	obj.laneSkewHolder = nil
	obj.obj.LaneSkew = value.Msg()

	return obj
}

func (obj *portTxLaneType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.LaneSkew != nil {

		obj.LaneSkew().validateObj(vObj, set_default)
	}

}

func (obj *portTxLaneType) setDefault() {

}

// ***** IdTypeCapturePatternId *****
type idTypeCapturePatternId struct {
	validation
	obj *otg.IdTypeCapturePatternId
}

func NewIdTypeCapturePatternId() IdTypeCapturePatternId {
	obj := idTypeCapturePatternId{obj: &otg.IdTypeCapturePatternId{}}
	obj.setDefault()
	return &obj
}

func (obj *idTypeCapturePatternId) Msg() *otg.IdTypeCapturePatternId {
	return obj.obj
}

func (obj *idTypeCapturePatternId) SetMsg(msg *otg.IdTypeCapturePatternId) IdTypeCapturePatternId {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *idTypeCapturePatternId) ToProto() (*otg.IdTypeCapturePatternId, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *idTypeCapturePatternId) FromProto(msg *otg.IdTypeCapturePatternId) (IdTypeCapturePatternId, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *idTypeCapturePatternId) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *idTypeCapturePatternId) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *idTypeCapturePatternId) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *idTypeCapturePatternId) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *idTypeCapturePatternId) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *idTypeCapturePatternId) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *idTypeCapturePatternId) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *idTypeCapturePatternId) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *idTypeCapturePatternId) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *idTypeCapturePatternId) Clone() (IdTypeCapturePatternId, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewIdTypeCapturePatternId()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *idTypeCapturePatternId) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// IdTypeCapturePatternId is tBD
type IdTypeCapturePatternId interface {
	Validation
	// Msg marshals IdTypeCapturePatternId to protobuf object *otg.IdTypeCapturePatternId
	// and doesn't set defaults
	Msg() *otg.IdTypeCapturePatternId
	// SetMsg unmarshals IdTypeCapturePatternId from protobuf object *otg.IdTypeCapturePatternId
	// and doesn't set defaults
	SetMsg(*otg.IdTypeCapturePatternId) IdTypeCapturePatternId
	// ToProto marshals IdTypeCapturePatternId to protobuf object *otg.IdTypeCapturePatternId
	ToProto() (*otg.IdTypeCapturePatternId, error)
	// ToPbText marshals IdTypeCapturePatternId to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals IdTypeCapturePatternId to YAML text
	ToYaml() (string, error)
	// ToJson marshals IdTypeCapturePatternId to JSON text
	ToJson() (string, error)
	// FromProto unmarshals IdTypeCapturePatternId from protobuf object *otg.IdTypeCapturePatternId
	FromProto(msg *otg.IdTypeCapturePatternId) (IdTypeCapturePatternId, error)
	// FromPbText unmarshals IdTypeCapturePatternId from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals IdTypeCapturePatternId from YAML text
	FromYaml(value string) error
	// FromJson unmarshals IdTypeCapturePatternId from JSON text
	FromJson(value string) error
	// Validate validates IdTypeCapturePatternId
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (IdTypeCapturePatternId, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Id returns int32, set in IdTypeCapturePatternId.
	Id() int32
	// SetId assigns int32 provided by user to IdTypeCapturePatternId
	SetId(value int32) IdTypeCapturePatternId
	// HasId checks if Id has been set in IdTypeCapturePatternId
	HasId() bool
}

func (obj *idTypeCapturePatternId) populateXml(xObj *Argument) error {

	if obj.HasId() {

		member := Member{
			Name:  "id",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Id()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *idTypeCapturePatternId) populateFromXml(xObj *RetVal) error {

	return nil
}

// Each capture pattern within a capture buffer is identified with   a capture pattern id to allow the client to name each of the patterns.
// Id returns a int32
func (obj *idTypeCapturePatternId) Id() int32 {

	return *obj.obj.Id

}

// Each capture pattern within a capture buffer is identified with   a capture pattern id to allow the client to name each of the patterns.
// Id returns a int32
func (obj *idTypeCapturePatternId) HasId() bool {
	return obj.obj.Id != nil
}

// Each capture pattern within a capture buffer is identified with   a capture pattern id to allow the client to name each of the patterns.
// SetId sets the int32 value in the IdTypeCapturePatternId object
func (obj *idTypeCapturePatternId) SetId(value int32) IdTypeCapturePatternId {

	obj.obj.Id = &value
	return obj
}

func (obj *idTypeCapturePatternId) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *idTypeCapturePatternId) setDefault() {

}

// ***** CaptureMacPatternType *****
type captureMacPatternType struct {
	validation
	obj           *otg.CaptureMacPatternType
	addressHolder PFTypeMacAddressType
	selectHolder  PFTypeMacAddressType
}

func NewCaptureMacPatternType() CaptureMacPatternType {
	obj := captureMacPatternType{obj: &otg.CaptureMacPatternType{}}
	obj.setDefault()
	return &obj
}

func (obj *captureMacPatternType) Msg() *otg.CaptureMacPatternType {
	return obj.obj
}

func (obj *captureMacPatternType) SetMsg(msg *otg.CaptureMacPatternType) CaptureMacPatternType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *captureMacPatternType) ToProto() (*otg.CaptureMacPatternType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *captureMacPatternType) FromProto(msg *otg.CaptureMacPatternType) (CaptureMacPatternType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *captureMacPatternType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *captureMacPatternType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureMacPatternType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureMacPatternType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *captureMacPatternType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureMacPatternType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *captureMacPatternType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *captureMacPatternType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *captureMacPatternType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *captureMacPatternType) Clone() (CaptureMacPatternType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewCaptureMacPatternType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *captureMacPatternType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *captureMacPatternType) setNil() {
	obj.addressHolder = nil
	obj.selectHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// CaptureMacPatternType is tBD
type CaptureMacPatternType interface {
	Validation
	// Msg marshals CaptureMacPatternType to protobuf object *otg.CaptureMacPatternType
	// and doesn't set defaults
	Msg() *otg.CaptureMacPatternType
	// SetMsg unmarshals CaptureMacPatternType from protobuf object *otg.CaptureMacPatternType
	// and doesn't set defaults
	SetMsg(*otg.CaptureMacPatternType) CaptureMacPatternType
	// ToProto marshals CaptureMacPatternType to protobuf object *otg.CaptureMacPatternType
	ToProto() (*otg.CaptureMacPatternType, error)
	// ToPbText marshals CaptureMacPatternType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals CaptureMacPatternType to YAML text
	ToYaml() (string, error)
	// ToJson marshals CaptureMacPatternType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals CaptureMacPatternType from protobuf object *otg.CaptureMacPatternType
	FromProto(msg *otg.CaptureMacPatternType) (CaptureMacPatternType, error)
	// FromPbText unmarshals CaptureMacPatternType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals CaptureMacPatternType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals CaptureMacPatternType from JSON text
	FromJson(value string) error
	// Validate validates CaptureMacPatternType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (CaptureMacPatternType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Address returns PFTypeMacAddressType, set in CaptureMacPatternType.
	// PFTypeMacAddressType is the MAC address comprises 48 bits (6 octets) usually denoted using hexadecimal radix as 01:23:45:67:89:ab. The representation is held in the least significant 48 bits of an int64. The most significant 16 bits will be ignored.
	Address() PFTypeMacAddressType
	// SetAddress assigns PFTypeMacAddressType provided by user to CaptureMacPatternType.
	// PFTypeMacAddressType is the MAC address comprises 48 bits (6 octets) usually denoted using hexadecimal radix as 01:23:45:67:89:ab. The representation is held in the least significant 48 bits of an int64. The most significant 16 bits will be ignored.
	SetAddress(value PFTypeMacAddressType) CaptureMacPatternType
	// HasAddress checks if Address has been set in CaptureMacPatternType
	HasAddress() bool
	// Select returns PFTypeMacAddressType, set in CaptureMacPatternType.
	// PFTypeMacAddressType is the MAC address comprises 48 bits (6 octets) usually denoted using hexadecimal radix as 01:23:45:67:89:ab. The representation is held in the least significant 48 bits of an int64. The most significant 16 bits will be ignored.
	Select() PFTypeMacAddressType
	// SetSelect assigns PFTypeMacAddressType provided by user to CaptureMacPatternType.
	// PFTypeMacAddressType is the MAC address comprises 48 bits (6 octets) usually denoted using hexadecimal radix as 01:23:45:67:89:ab. The representation is held in the least significant 48 bits of an int64. The most significant 16 bits will be ignored.
	SetSelect(value PFTypeMacAddressType) CaptureMacPatternType
	// HasSelect checks if Select has been set in CaptureMacPatternType
	HasSelect() bool
	setNil()
}

func (obj *captureMacPatternType) populateXml(xObj *Argument) error {

	return nil
}

func (obj *captureMacPatternType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Address returns a PFTypeMacAddressType
func (obj *captureMacPatternType) Address() PFTypeMacAddressType {
	if obj.obj.Address == nil {
		obj.obj.Address = NewPFTypeMacAddressType().Msg()
	}
	if obj.addressHolder == nil {
		obj.addressHolder = &pFTypeMacAddressType{obj: obj.obj.Address}
	}
	return obj.addressHolder
}

// TBD
// Address returns a PFTypeMacAddressType
func (obj *captureMacPatternType) HasAddress() bool {
	return obj.obj.Address != nil
}

// TBD
// SetAddress sets the PFTypeMacAddressType value in the CaptureMacPatternType object
func (obj *captureMacPatternType) SetAddress(value PFTypeMacAddressType) CaptureMacPatternType {

	obj.addressHolder = nil
	obj.obj.Address = value.Msg()

	return obj
}

// TBD
// Select returns a PFTypeMacAddressType
func (obj *captureMacPatternType) Select() PFTypeMacAddressType {
	if obj.obj.Select == nil {
		obj.obj.Select = NewPFTypeMacAddressType().Msg()
	}
	if obj.selectHolder == nil {
		obj.selectHolder = &pFTypeMacAddressType{obj: obj.obj.Select}
	}
	return obj.selectHolder
}

// TBD
// Select returns a PFTypeMacAddressType
func (obj *captureMacPatternType) HasSelect() bool {
	return obj.obj.Select != nil
}

// TBD
// SetSelect sets the PFTypeMacAddressType value in the CaptureMacPatternType object
func (obj *captureMacPatternType) SetSelect(value PFTypeMacAddressType) CaptureMacPatternType {

	obj.selectHolder = nil
	obj.obj.Select = value.Msg()

	return obj
}

func (obj *captureMacPatternType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Address != nil {

		obj.Address().validateObj(vObj, set_default)
	}

	if obj.obj.Select != nil {

		obj.Select().validateObj(vObj, set_default)
	}

}

func (obj *captureMacPatternType) setDefault() {

}

// ***** CaptureDataPatternType *****
type captureDataPatternType struct {
	validation
	obj *otg.CaptureDataPatternType
}

func NewCaptureDataPatternType() CaptureDataPatternType {
	obj := captureDataPatternType{obj: &otg.CaptureDataPatternType{}}
	obj.setDefault()
	return &obj
}

func (obj *captureDataPatternType) Msg() *otg.CaptureDataPatternType {
	return obj.obj
}

func (obj *captureDataPatternType) SetMsg(msg *otg.CaptureDataPatternType) CaptureDataPatternType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *captureDataPatternType) ToProto() (*otg.CaptureDataPatternType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *captureDataPatternType) FromProto(msg *otg.CaptureDataPatternType) (CaptureDataPatternType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *captureDataPatternType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *captureDataPatternType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureDataPatternType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureDataPatternType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *captureDataPatternType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureDataPatternType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *captureDataPatternType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *captureDataPatternType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *captureDataPatternType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *captureDataPatternType) Clone() (CaptureDataPatternType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewCaptureDataPatternType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *captureDataPatternType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// CaptureDataPatternType is tBD
type CaptureDataPatternType interface {
	Validation
	// Msg marshals CaptureDataPatternType to protobuf object *otg.CaptureDataPatternType
	// and doesn't set defaults
	Msg() *otg.CaptureDataPatternType
	// SetMsg unmarshals CaptureDataPatternType from protobuf object *otg.CaptureDataPatternType
	// and doesn't set defaults
	SetMsg(*otg.CaptureDataPatternType) CaptureDataPatternType
	// ToProto marshals CaptureDataPatternType to protobuf object *otg.CaptureDataPatternType
	ToProto() (*otg.CaptureDataPatternType, error)
	// ToPbText marshals CaptureDataPatternType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals CaptureDataPatternType to YAML text
	ToYaml() (string, error)
	// ToJson marshals CaptureDataPatternType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals CaptureDataPatternType from protobuf object *otg.CaptureDataPatternType
	FromProto(msg *otg.CaptureDataPatternType) (CaptureDataPatternType, error)
	// FromPbText unmarshals CaptureDataPatternType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals CaptureDataPatternType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals CaptureDataPatternType from JSON text
	FromJson(value string) error
	// Validate validates CaptureDataPatternType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (CaptureDataPatternType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Anchor returns CaptureDataPatternTypeAnchorEnum, set in CaptureDataPatternType
	Anchor() CaptureDataPatternTypeAnchorEnum
	// SetAnchor assigns CaptureDataPatternTypeAnchorEnum provided by user to CaptureDataPatternType
	SetAnchor(value CaptureDataPatternTypeAnchorEnum) CaptureDataPatternType
	// HasAnchor checks if Anchor has been set in CaptureDataPatternType
	HasAnchor() bool
	// Offset returns int32, set in CaptureDataPatternType.
	Offset() int32
	// SetOffset assigns int32 provided by user to CaptureDataPatternType
	SetOffset(value int32) CaptureDataPatternType
	// HasOffset checks if Offset has been set in CaptureDataPatternType
	HasOffset() bool
	// Pattern returns string, set in CaptureDataPatternType.
	Pattern() string
	// SetPattern assigns string provided by user to CaptureDataPatternType
	SetPattern(value string) CaptureDataPatternType
	// HasPattern checks if Pattern has been set in CaptureDataPatternType
	HasPattern() bool
	// Select returns string, set in CaptureDataPatternType.
	Select() string
	// SetSelect assigns string provided by user to CaptureDataPatternType
	SetSelect(value string) CaptureDataPatternType
	// HasSelect checks if Select has been set in CaptureDataPatternType
	HasSelect() bool
}

func (obj *captureDataPatternType) populateXml(xObj *Argument) error {

	if obj.HasAnchor() {

		member := Member{
			Name:  "anchor",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Capture+eAnchor",
			Value: strconv.FormatInt(int64(obj.obj.Anchor.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasOffset() {

		member := Member{
			Name:  "offset",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Offset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasPattern() {

		member := Member{
			Name:  "pattern",
			Type:  "octets",
			Value: obj.Pattern(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSelect() {

		member := Member{
			Name:  "select",
			Type:  "octets",
			Value: obj.Select(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *captureDataPatternType) populateFromXml(xObj *RetVal) error {

	return nil
}

type CaptureDataPatternTypeAnchorEnum string

// Enum of Anchor on CaptureDataPatternType
var CaptureDataPatternTypeAnchor = struct {
	KSTARTOFFRAME    CaptureDataPatternTypeAnchorEnum
	KSTARTOFIP       CaptureDataPatternTypeAnchorEnum
	KSTARTOFPROTOCOL CaptureDataPatternTypeAnchorEnum
}{
	KSTARTOFFRAME:    CaptureDataPatternTypeAnchorEnum("kStartOfFrame"),
	KSTARTOFIP:       CaptureDataPatternTypeAnchorEnum("kStartOfIP"),
	KSTARTOFPROTOCOL: CaptureDataPatternTypeAnchorEnum("kStartOfProtocol"),
}

func (obj *captureDataPatternType) Anchor() CaptureDataPatternTypeAnchorEnum {
	return CaptureDataPatternTypeAnchorEnum(obj.obj.Anchor.Enum().String())
}

// Select the position from which to anchor the offset.
// Anchor returns a string
func (obj *captureDataPatternType) HasAnchor() bool {
	return obj.obj.Anchor != nil
}

func (obj *captureDataPatternType) SetAnchor(value CaptureDataPatternTypeAnchorEnum) CaptureDataPatternType {
	intValue, ok := otg.CaptureDataPatternType_Anchor_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on CaptureDataPatternTypeAnchorEnum", string(value)))
		return obj
	}
	enumValue := otg.CaptureDataPatternType_Anchor_Enum(intValue)
	obj.obj.Anchor = &enumValue

	return obj
}

// Offset to begin matching from the anchor.
// Offset returns a int32
func (obj *captureDataPatternType) Offset() int32 {

	return *obj.obj.Offset

}

// Offset to begin matching from the anchor.
// Offset returns a int32
func (obj *captureDataPatternType) HasOffset() bool {
	return obj.obj.Offset != nil
}

// Offset to begin matching from the anchor.
// SetOffset sets the int32 value in the CaptureDataPatternType object
func (obj *captureDataPatternType) SetOffset(value int32) CaptureDataPatternType {

	obj.obj.Offset = &value
	return obj
}

// Only frames that contain this pattern at the specified offset   are filtered, captured or counted.
// Pattern returns a string
func (obj *captureDataPatternType) Pattern() string {

	return *obj.obj.Pattern

}

// Only frames that contain this pattern at the specified offset   are filtered, captured or counted.
// Pattern returns a string
func (obj *captureDataPatternType) HasPattern() bool {
	return obj.obj.Pattern != nil
}

// Only frames that contain this pattern at the specified offset   are filtered, captured or counted.
// SetPattern sets the string value in the CaptureDataPatternType object
func (obj *captureDataPatternType) SetPattern(value string) CaptureDataPatternType {

	obj.obj.Pattern = &value
	return obj
}

// A bit mask that allows to specify which bits of the pattern   should be selected for matching in the pattern.
// Select returns a string
func (obj *captureDataPatternType) Select() string {

	return *obj.obj.Select

}

// A bit mask that allows to specify which bits of the pattern   should be selected for matching in the pattern.
// Select returns a string
func (obj *captureDataPatternType) HasSelect() bool {
	return obj.obj.Select != nil
}

// A bit mask that allows to specify which bits of the pattern   should be selected for matching in the pattern.
// SetSelect sets the string value in the CaptureDataPatternType object
func (obj *captureDataPatternType) SetSelect(value string) CaptureDataPatternType {

	obj.obj.Select = &value
	return obj
}

func (obj *captureDataPatternType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *captureDataPatternType) setDefault() {

}

// ***** CaptureQoSPatternType *****
type captureQoSPatternType struct {
	validation
	obj *otg.CaptureQoSPatternType
}

func NewCaptureQoSPatternType() CaptureQoSPatternType {
	obj := captureQoSPatternType{obj: &otg.CaptureQoSPatternType{}}
	obj.setDefault()
	return &obj
}

func (obj *captureQoSPatternType) Msg() *otg.CaptureQoSPatternType {
	return obj.obj
}

func (obj *captureQoSPatternType) SetMsg(msg *otg.CaptureQoSPatternType) CaptureQoSPatternType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *captureQoSPatternType) ToProto() (*otg.CaptureQoSPatternType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *captureQoSPatternType) FromProto(msg *otg.CaptureQoSPatternType) (CaptureQoSPatternType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *captureQoSPatternType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *captureQoSPatternType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureQoSPatternType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureQoSPatternType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *captureQoSPatternType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureQoSPatternType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *captureQoSPatternType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *captureQoSPatternType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *captureQoSPatternType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *captureQoSPatternType) Clone() (CaptureQoSPatternType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewCaptureQoSPatternType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *captureQoSPatternType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// CaptureQoSPatternType is tBD
type CaptureQoSPatternType interface {
	Validation
	// Msg marshals CaptureQoSPatternType to protobuf object *otg.CaptureQoSPatternType
	// and doesn't set defaults
	Msg() *otg.CaptureQoSPatternType
	// SetMsg unmarshals CaptureQoSPatternType from protobuf object *otg.CaptureQoSPatternType
	// and doesn't set defaults
	SetMsg(*otg.CaptureQoSPatternType) CaptureQoSPatternType
	// ToProto marshals CaptureQoSPatternType to protobuf object *otg.CaptureQoSPatternType
	ToProto() (*otg.CaptureQoSPatternType, error)
	// ToPbText marshals CaptureQoSPatternType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals CaptureQoSPatternType to YAML text
	ToYaml() (string, error)
	// ToJson marshals CaptureQoSPatternType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals CaptureQoSPatternType from protobuf object *otg.CaptureQoSPatternType
	FromProto(msg *otg.CaptureQoSPatternType) (CaptureQoSPatternType, error)
	// FromPbText unmarshals CaptureQoSPatternType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals CaptureQoSPatternType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals CaptureQoSPatternType from JSON text
	FromJson(value string) error
	// Validate validates CaptureQoSPatternType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (CaptureQoSPatternType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// QosByteOffset returns int32, set in CaptureQoSPatternType.
	QosByteOffset() int32
	// SetQosByteOffset assigns int32 provided by user to CaptureQoSPatternType
	SetQosByteOffset(value int32) CaptureQoSPatternType
	// HasQosByteOffset checks if QosByteOffset has been set in CaptureQoSPatternType
	HasQosByteOffset() bool
	// Anchor returns CaptureQoSPatternTypeAnchorEnum, set in CaptureQoSPatternType
	Anchor() CaptureQoSPatternTypeAnchorEnum
	// SetAnchor assigns CaptureQoSPatternTypeAnchorEnum provided by user to CaptureQoSPatternType
	SetAnchor(value CaptureQoSPatternTypeAnchorEnum) CaptureQoSPatternType
	// HasAnchor checks if Anchor has been set in CaptureQoSPatternType
	HasAnchor() bool
	// Offset returns int32, set in CaptureQoSPatternType.
	Offset() int32
	// SetOffset assigns int32 provided by user to CaptureQoSPatternType
	SetOffset(value int32) CaptureQoSPatternType
	// HasOffset checks if Offset has been set in CaptureQoSPatternType
	HasOffset() bool
	// Pattern returns string, set in CaptureQoSPatternType.
	Pattern() string
	// SetPattern assigns string provided by user to CaptureQoSPatternType
	SetPattern(value string) CaptureQoSPatternType
	// HasPattern checks if Pattern has been set in CaptureQoSPatternType
	HasPattern() bool
	// Select returns string, set in CaptureQoSPatternType.
	Select() string
	// SetSelect assigns string provided by user to CaptureQoSPatternType
	SetSelect(value string) CaptureQoSPatternType
	// HasSelect checks if Select has been set in CaptureQoSPatternType
	HasSelect() bool
}

func (obj *captureQoSPatternType) populateXml(xObj *Argument) error {

	if obj.HasQosByteOffset() {

		member := Member{
			Name:  "qosbyteoffset",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.QosByteOffset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasAnchor() {

		member := Member{
			Name:  "anchor",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Capture+eAnchor",
			Value: strconv.FormatInt(int64(obj.obj.Anchor.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasOffset() {

		member := Member{
			Name:  "offset",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Offset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasPattern() {

		member := Member{
			Name:  "pattern",
			Type:  "octets",
			Value: obj.Pattern(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSelect() {

		member := Member{
			Name:  "select",
			Type:  "octets",
			Value: obj.Select(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *captureQoSPatternType) populateFromXml(xObj *RetVal) error {

	return nil
}

// QoS byte offset.
// QosByteOffset returns a int32
func (obj *captureQoSPatternType) QosByteOffset() int32 {

	return *obj.obj.QosByteOffset

}

// QoS byte offset.
// QosByteOffset returns a int32
func (obj *captureQoSPatternType) HasQosByteOffset() bool {
	return obj.obj.QosByteOffset != nil
}

// QoS byte offset.
// SetQosByteOffset sets the int32 value in the CaptureQoSPatternType object
func (obj *captureQoSPatternType) SetQosByteOffset(value int32) CaptureQoSPatternType {

	obj.obj.QosByteOffset = &value
	return obj
}

type CaptureQoSPatternTypeAnchorEnum string

// Enum of Anchor on CaptureQoSPatternType
var CaptureQoSPatternTypeAnchor = struct {
	KSTARTOFFRAME    CaptureQoSPatternTypeAnchorEnum
	KSTARTOFIP       CaptureQoSPatternTypeAnchorEnum
	KSTARTOFPROTOCOL CaptureQoSPatternTypeAnchorEnum
}{
	KSTARTOFFRAME:    CaptureQoSPatternTypeAnchorEnum("kStartOfFrame"),
	KSTARTOFIP:       CaptureQoSPatternTypeAnchorEnum("kStartOfIP"),
	KSTARTOFPROTOCOL: CaptureQoSPatternTypeAnchorEnum("kStartOfProtocol"),
}

func (obj *captureQoSPatternType) Anchor() CaptureQoSPatternTypeAnchorEnum {
	return CaptureQoSPatternTypeAnchorEnum(obj.obj.Anchor.Enum().String())
}

// Select the position from which to anchor the offset.
// Anchor returns a string
func (obj *captureQoSPatternType) HasAnchor() bool {
	return obj.obj.Anchor != nil
}

func (obj *captureQoSPatternType) SetAnchor(value CaptureQoSPatternTypeAnchorEnum) CaptureQoSPatternType {
	intValue, ok := otg.CaptureQoSPatternType_Anchor_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on CaptureQoSPatternTypeAnchorEnum", string(value)))
		return obj
	}
	enumValue := otg.CaptureQoSPatternType_Anchor_Enum(intValue)
	obj.obj.Anchor = &enumValue

	return obj
}

// Offset to begin matching from the anchor.
// Offset returns a int32
func (obj *captureQoSPatternType) Offset() int32 {

	return *obj.obj.Offset

}

// Offset to begin matching from the anchor.
// Offset returns a int32
func (obj *captureQoSPatternType) HasOffset() bool {
	return obj.obj.Offset != nil
}

// Offset to begin matching from the anchor.
// SetOffset sets the int32 value in the CaptureQoSPatternType object
func (obj *captureQoSPatternType) SetOffset(value int32) CaptureQoSPatternType {

	obj.obj.Offset = &value
	return obj
}

// Only frames that contain this pattern at the specified offset   are filtered, captured or counted.
// Pattern returns a string
func (obj *captureQoSPatternType) Pattern() string {

	return *obj.obj.Pattern

}

// Only frames that contain this pattern at the specified offset   are filtered, captured or counted.
// Pattern returns a string
func (obj *captureQoSPatternType) HasPattern() bool {
	return obj.obj.Pattern != nil
}

// Only frames that contain this pattern at the specified offset   are filtered, captured or counted.
// SetPattern sets the string value in the CaptureQoSPatternType object
func (obj *captureQoSPatternType) SetPattern(value string) CaptureQoSPatternType {

	obj.obj.Pattern = &value
	return obj
}

// A bit mask that allows to specify which bits of the pattern   should be selected for matching in the pattern.
// Select returns a string
func (obj *captureQoSPatternType) Select() string {

	return *obj.obj.Select

}

// A bit mask that allows to specify which bits of the pattern   should be selected for matching in the pattern.
// Select returns a string
func (obj *captureQoSPatternType) HasSelect() bool {
	return obj.obj.Select != nil
}

// A bit mask that allows to specify which bits of the pattern   should be selected for matching in the pattern.
// SetSelect sets the string value in the CaptureQoSPatternType object
func (obj *captureQoSPatternType) SetSelect(value string) CaptureQoSPatternType {

	obj.obj.Select = &value
	return obj
}

func (obj *captureQoSPatternType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *captureQoSPatternType) setDefault() {

}

// ***** CaptureFrameSizeRangeType *****
type captureFrameSizeRangeType struct {
	validation
	obj *otg.CaptureFrameSizeRangeType
}

func NewCaptureFrameSizeRangeType() CaptureFrameSizeRangeType {
	obj := captureFrameSizeRangeType{obj: &otg.CaptureFrameSizeRangeType{}}
	obj.setDefault()
	return &obj
}

func (obj *captureFrameSizeRangeType) Msg() *otg.CaptureFrameSizeRangeType {
	return obj.obj
}

func (obj *captureFrameSizeRangeType) SetMsg(msg *otg.CaptureFrameSizeRangeType) CaptureFrameSizeRangeType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *captureFrameSizeRangeType) ToProto() (*otg.CaptureFrameSizeRangeType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *captureFrameSizeRangeType) FromProto(msg *otg.CaptureFrameSizeRangeType) (CaptureFrameSizeRangeType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *captureFrameSizeRangeType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *captureFrameSizeRangeType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureFrameSizeRangeType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureFrameSizeRangeType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *captureFrameSizeRangeType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureFrameSizeRangeType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *captureFrameSizeRangeType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *captureFrameSizeRangeType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *captureFrameSizeRangeType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *captureFrameSizeRangeType) Clone() (CaptureFrameSizeRangeType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewCaptureFrameSizeRangeType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *captureFrameSizeRangeType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// CaptureFrameSizeRangeType is tBD
type CaptureFrameSizeRangeType interface {
	Validation
	// Msg marshals CaptureFrameSizeRangeType to protobuf object *otg.CaptureFrameSizeRangeType
	// and doesn't set defaults
	Msg() *otg.CaptureFrameSizeRangeType
	// SetMsg unmarshals CaptureFrameSizeRangeType from protobuf object *otg.CaptureFrameSizeRangeType
	// and doesn't set defaults
	SetMsg(*otg.CaptureFrameSizeRangeType) CaptureFrameSizeRangeType
	// ToProto marshals CaptureFrameSizeRangeType to protobuf object *otg.CaptureFrameSizeRangeType
	ToProto() (*otg.CaptureFrameSizeRangeType, error)
	// ToPbText marshals CaptureFrameSizeRangeType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals CaptureFrameSizeRangeType to YAML text
	ToYaml() (string, error)
	// ToJson marshals CaptureFrameSizeRangeType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals CaptureFrameSizeRangeType from protobuf object *otg.CaptureFrameSizeRangeType
	FromProto(msg *otg.CaptureFrameSizeRangeType) (CaptureFrameSizeRangeType, error)
	// FromPbText unmarshals CaptureFrameSizeRangeType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals CaptureFrameSizeRangeType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals CaptureFrameSizeRangeType from JSON text
	FromJson(value string) error
	// Validate validates CaptureFrameSizeRangeType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (CaptureFrameSizeRangeType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// IsEnabled returns bool, set in CaptureFrameSizeRangeType.
	IsEnabled() bool
	// SetIsEnabled assigns bool provided by user to CaptureFrameSizeRangeType
	SetIsEnabled(value bool) CaptureFrameSizeRangeType
	// HasIsEnabled checks if IsEnabled has been set in CaptureFrameSizeRangeType
	HasIsEnabled() bool
	// IsInRange returns bool, set in CaptureFrameSizeRangeType.
	IsInRange() bool
	// SetIsInRange assigns bool provided by user to CaptureFrameSizeRangeType
	SetIsInRange(value bool) CaptureFrameSizeRangeType
	// HasIsInRange checks if IsInRange has been set in CaptureFrameSizeRangeType
	HasIsInRange() bool
	// From returns int32, set in CaptureFrameSizeRangeType.
	From() int32
	// SetFrom assigns int32 provided by user to CaptureFrameSizeRangeType
	SetFrom(value int32) CaptureFrameSizeRangeType
	// HasFrom checks if From has been set in CaptureFrameSizeRangeType
	HasFrom() bool
	// To returns int32, set in CaptureFrameSizeRangeType.
	To() int32
	// SetTo assigns int32 provided by user to CaptureFrameSizeRangeType
	SetTo(value int32) CaptureFrameSizeRangeType
	// HasTo checks if To has been set in CaptureFrameSizeRangeType
	HasTo() bool
}

func (obj *captureFrameSizeRangeType) populateXml(xObj *Argument) error {

	if obj.HasIsEnabled() {
		var value string
		if obj.IsEnabled() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "isenabled",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIsInRange() {
		var value string
		if obj.IsInRange() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "isinrange",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasFrom() {

		member := Member{
			Name:  "from",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.From()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasTo() {

		member := Member{
			Name:  "to",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.To()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *captureFrameSizeRangeType) populateFromXml(xObj *RetVal) error {

	return nil
}

// States if Range is Enabled or Not.
// IsEnabled returns a bool
func (obj *captureFrameSizeRangeType) IsEnabled() bool {

	return *obj.obj.IsEnabled

}

// States if Range is Enabled or Not.
// IsEnabled returns a bool
func (obj *captureFrameSizeRangeType) HasIsEnabled() bool {
	return obj.obj.IsEnabled != nil
}

// States if Range is Enabled or Not.
// SetIsEnabled sets the bool value in the CaptureFrameSizeRangeType object
func (obj *captureFrameSizeRangeType) SetIsEnabled(value bool) CaptureFrameSizeRangeType {

	obj.obj.IsEnabled = &value
	return obj
}

// States if Filter should applied in given range or out of given range.  If True: Greater Than "from" AND Less Than "to"  If False: Less Than "from" OR Greater Than "to"
// IsInRange returns a bool
func (obj *captureFrameSizeRangeType) IsInRange() bool {

	return *obj.obj.IsInRange

}

// States if Filter should applied in given range or out of given range.  If True: Greater Than "from" AND Less Than "to"  If False: Less Than "from" OR Greater Than "to"
// IsInRange returns a bool
func (obj *captureFrameSizeRangeType) HasIsInRange() bool {
	return obj.obj.IsInRange != nil
}

// States if Filter should applied in given range or out of given range.  If True: Greater Than "from" AND Less Than "to"  If False: Less Than "from" OR Greater Than "to"
// SetIsInRange sets the bool value in the CaptureFrameSizeRangeType object
func (obj *captureFrameSizeRangeType) SetIsInRange(value bool) CaptureFrameSizeRangeType {

	obj.obj.IsInRange = &value
	return obj
}

// TBD
// From returns a int32
func (obj *captureFrameSizeRangeType) From() int32 {

	return *obj.obj.From

}

// TBD
// From returns a int32
func (obj *captureFrameSizeRangeType) HasFrom() bool {
	return obj.obj.From != nil
}

// TBD
// SetFrom sets the int32 value in the CaptureFrameSizeRangeType object
func (obj *captureFrameSizeRangeType) SetFrom(value int32) CaptureFrameSizeRangeType {

	obj.obj.From = &value
	return obj
}

// TBD
// To returns a int32
func (obj *captureFrameSizeRangeType) To() int32 {

	return *obj.obj.To

}

// TBD
// To returns a int32
func (obj *captureFrameSizeRangeType) HasTo() bool {
	return obj.obj.To != nil
}

// TBD
// SetTo sets the int32 value in the CaptureFrameSizeRangeType object
func (obj *captureFrameSizeRangeType) SetTo(value int32) CaptureFrameSizeRangeType {

	obj.obj.To = &value
	return obj
}

func (obj *captureFrameSizeRangeType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *captureFrameSizeRangeType) setDefault() {

}

// ***** CaptureExpressionContent *****
type captureExpressionContent struct {
	validation
	obj                     *otg.CaptureExpressionContent
	expressionContentHolder CaptureExpressionContentCaptureExpressionElementTypeIter
}

func NewCaptureExpressionContent() CaptureExpressionContent {
	obj := captureExpressionContent{obj: &otg.CaptureExpressionContent{}}
	obj.setDefault()
	return &obj
}

func (obj *captureExpressionContent) Msg() *otg.CaptureExpressionContent {
	return obj.obj
}

func (obj *captureExpressionContent) SetMsg(msg *otg.CaptureExpressionContent) CaptureExpressionContent {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *captureExpressionContent) ToProto() (*otg.CaptureExpressionContent, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *captureExpressionContent) FromProto(msg *otg.CaptureExpressionContent) (CaptureExpressionContent, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *captureExpressionContent) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *captureExpressionContent) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureExpressionContent) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureExpressionContent) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *captureExpressionContent) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureExpressionContent) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *captureExpressionContent) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *captureExpressionContent) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *captureExpressionContent) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *captureExpressionContent) Clone() (CaptureExpressionContent, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewCaptureExpressionContent()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *captureExpressionContent) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *captureExpressionContent) setNil() {
	obj.expressionContentHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// CaptureExpressionContent is tBD
type CaptureExpressionContent interface {
	Validation
	// Msg marshals CaptureExpressionContent to protobuf object *otg.CaptureExpressionContent
	// and doesn't set defaults
	Msg() *otg.CaptureExpressionContent
	// SetMsg unmarshals CaptureExpressionContent from protobuf object *otg.CaptureExpressionContent
	// and doesn't set defaults
	SetMsg(*otg.CaptureExpressionContent) CaptureExpressionContent
	// ToProto marshals CaptureExpressionContent to protobuf object *otg.CaptureExpressionContent
	ToProto() (*otg.CaptureExpressionContent, error)
	// ToPbText marshals CaptureExpressionContent to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals CaptureExpressionContent to YAML text
	ToYaml() (string, error)
	// ToJson marshals CaptureExpressionContent to JSON text
	ToJson() (string, error)
	// FromProto unmarshals CaptureExpressionContent from protobuf object *otg.CaptureExpressionContent
	FromProto(msg *otg.CaptureExpressionContent) (CaptureExpressionContent, error)
	// FromPbText unmarshals CaptureExpressionContent from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals CaptureExpressionContent from YAML text
	FromYaml(value string) error
	// FromJson unmarshals CaptureExpressionContent from JSON text
	FromJson(value string) error
	// Validate validates CaptureExpressionContent
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (CaptureExpressionContent, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ExpressionContent returns CaptureExpressionContentCaptureExpressionElementTypeIterIter, set in CaptureExpressionContent
	ExpressionContent() CaptureExpressionContentCaptureExpressionElementTypeIter
	setNil()
}

func (obj *captureExpressionContent) populateXml(xObj *Argument) error {

	if len(obj.ExpressionContent().Items()) != 0 {
		for _, item := range obj.ExpressionContent().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *captureExpressionContent) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// ExpressionContent returns a []CaptureExpressionElementType
func (obj *captureExpressionContent) ExpressionContent() CaptureExpressionContentCaptureExpressionElementTypeIter {
	if len(obj.obj.ExpressionContent) == 0 {
		obj.obj.ExpressionContent = []*otg.CaptureExpressionElementType{}
	}
	if obj.expressionContentHolder == nil {
		obj.expressionContentHolder = newCaptureExpressionContentCaptureExpressionElementTypeIter(&obj.obj.ExpressionContent).setMsg(obj)
	}
	return obj.expressionContentHolder
}

type captureExpressionContentCaptureExpressionElementTypeIter struct {
	obj                               *captureExpressionContent
	captureExpressionElementTypeSlice []CaptureExpressionElementType
	fieldPtr                          *[]*otg.CaptureExpressionElementType
}

func newCaptureExpressionContentCaptureExpressionElementTypeIter(ptr *[]*otg.CaptureExpressionElementType) CaptureExpressionContentCaptureExpressionElementTypeIter {
	return &captureExpressionContentCaptureExpressionElementTypeIter{fieldPtr: ptr}
}

type CaptureExpressionContentCaptureExpressionElementTypeIter interface {
	setMsg(*captureExpressionContent) CaptureExpressionContentCaptureExpressionElementTypeIter
	Items() []CaptureExpressionElementType
	Add() CaptureExpressionElementType
	Append(items ...CaptureExpressionElementType) CaptureExpressionContentCaptureExpressionElementTypeIter
	Set(index int, newObj CaptureExpressionElementType) CaptureExpressionContentCaptureExpressionElementTypeIter
	Clear() CaptureExpressionContentCaptureExpressionElementTypeIter
	clearHolderSlice() CaptureExpressionContentCaptureExpressionElementTypeIter
	appendHolderSlice(item CaptureExpressionElementType) CaptureExpressionContentCaptureExpressionElementTypeIter
}

func (obj *captureExpressionContentCaptureExpressionElementTypeIter) setMsg(msg *captureExpressionContent) CaptureExpressionContentCaptureExpressionElementTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&captureExpressionElementType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *captureExpressionContentCaptureExpressionElementTypeIter) Items() []CaptureExpressionElementType {
	return obj.captureExpressionElementTypeSlice
}

func (obj *captureExpressionContentCaptureExpressionElementTypeIter) Add() CaptureExpressionElementType {
	newObj := &otg.CaptureExpressionElementType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &captureExpressionElementType{obj: newObj}
	newLibObj.setDefault()
	obj.captureExpressionElementTypeSlice = append(obj.captureExpressionElementTypeSlice, newLibObj)
	return newLibObj
}

func (obj *captureExpressionContentCaptureExpressionElementTypeIter) Append(items ...CaptureExpressionElementType) CaptureExpressionContentCaptureExpressionElementTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.captureExpressionElementTypeSlice = append(obj.captureExpressionElementTypeSlice, item)
	}
	return obj
}

func (obj *captureExpressionContentCaptureExpressionElementTypeIter) Set(index int, newObj CaptureExpressionElementType) CaptureExpressionContentCaptureExpressionElementTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.captureExpressionElementTypeSlice[index] = newObj
	return obj
}
func (obj *captureExpressionContentCaptureExpressionElementTypeIter) Clear() CaptureExpressionContentCaptureExpressionElementTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.CaptureExpressionElementType{}
		obj.captureExpressionElementTypeSlice = []CaptureExpressionElementType{}
	}
	return obj
}
func (obj *captureExpressionContentCaptureExpressionElementTypeIter) clearHolderSlice() CaptureExpressionContentCaptureExpressionElementTypeIter {
	if len(obj.captureExpressionElementTypeSlice) > 0 {
		obj.captureExpressionElementTypeSlice = []CaptureExpressionElementType{}
	}
	return obj
}
func (obj *captureExpressionContentCaptureExpressionElementTypeIter) appendHolderSlice(item CaptureExpressionElementType) CaptureExpressionContentCaptureExpressionElementTypeIter {
	obj.captureExpressionElementTypeSlice = append(obj.captureExpressionElementTypeSlice, item)
	return obj
}

func (obj *captureExpressionContent) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.ExpressionContent) != 0 {

		if set_default {
			obj.ExpressionContent().clearHolderSlice()
			for _, item := range obj.obj.ExpressionContent {
				obj.ExpressionContent().appendHolderSlice(&captureExpressionElementType{obj: item})
			}
		}
		for _, item := range obj.ExpressionContent().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *captureExpressionContent) setDefault() {

}

// ***** StreamStreamControlType *****
type streamStreamControlType struct {
	validation
	obj                    *otg.StreamStreamControlType
	returnToIdHolder       IdTypeStreamId
	tsnQbvGateConfigHolder StreamTsnQbvGateConfigType
	startTxDelayHolder     StreamTxDelayType
}

func NewStreamStreamControlType() StreamStreamControlType {
	obj := streamStreamControlType{obj: &otg.StreamStreamControlType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamStreamControlType) Msg() *otg.StreamStreamControlType {
	return obj.obj
}

func (obj *streamStreamControlType) SetMsg(msg *otg.StreamStreamControlType) StreamStreamControlType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamStreamControlType) ToProto() (*otg.StreamStreamControlType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamStreamControlType) FromProto(msg *otg.StreamStreamControlType) (StreamStreamControlType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamStreamControlType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamStreamControlType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamStreamControlType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamStreamControlType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamStreamControlType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamStreamControlType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamStreamControlType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamStreamControlType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamStreamControlType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamStreamControlType) Clone() (StreamStreamControlType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamStreamControlType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamStreamControlType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamStreamControlType) setNil() {
	obj.returnToIdHolder = nil
	obj.tsnQbvGateConfigHolder = nil
	obj.startTxDelayHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamStreamControlType is tBD
type StreamStreamControlType interface {
	Validation
	// Msg marshals StreamStreamControlType to protobuf object *otg.StreamStreamControlType
	// and doesn't set defaults
	Msg() *otg.StreamStreamControlType
	// SetMsg unmarshals StreamStreamControlType from protobuf object *otg.StreamStreamControlType
	// and doesn't set defaults
	SetMsg(*otg.StreamStreamControlType) StreamStreamControlType
	// ToProto marshals StreamStreamControlType to protobuf object *otg.StreamStreamControlType
	ToProto() (*otg.StreamStreamControlType, error)
	// ToPbText marshals StreamStreamControlType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamStreamControlType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamStreamControlType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamStreamControlType from protobuf object *otg.StreamStreamControlType
	FromProto(msg *otg.StreamStreamControlType) (StreamStreamControlType, error)
	// FromPbText unmarshals StreamStreamControlType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamStreamControlType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamStreamControlType from JSON text
	FromJson(value string) error
	// Validate validates StreamStreamControlType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamStreamControlType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Dma returns StreamStreamControlTypeDmaEnum, set in StreamStreamControlType
	Dma() StreamStreamControlTypeDmaEnum
	// SetDma assigns StreamStreamControlTypeDmaEnum provided by user to StreamStreamControlType
	SetDma(value StreamStreamControlTypeDmaEnum) StreamStreamControlType
	// HasDma checks if Dma has been set in StreamStreamControlType
	HasDma() bool
	// ReturnToId returns IdTypeStreamId, set in StreamStreamControlType.
	// IdTypeStreamId is tBD
	ReturnToId() IdTypeStreamId
	// SetReturnToId assigns IdTypeStreamId provided by user to StreamStreamControlType.
	// IdTypeStreamId is tBD
	SetReturnToId(value IdTypeStreamId) StreamStreamControlType
	// HasReturnToId checks if ReturnToId has been set in StreamStreamControlType
	HasReturnToId() bool
	// LoopCount returns int32, set in StreamStreamControlType.
	LoopCount() int32
	// SetLoopCount assigns int32 provided by user to StreamStreamControlType
	SetLoopCount(value int32) StreamStreamControlType
	// HasLoopCount checks if LoopCount has been set in StreamStreamControlType
	HasLoopCount() bool
	// NumBursts returns int64, set in StreamStreamControlType.
	NumBursts() int64
	// SetNumBursts assigns int64 provided by user to StreamStreamControlType
	SetNumBursts(value int64) StreamStreamControlType
	// HasNumBursts checks if NumBursts has been set in StreamStreamControlType
	HasNumBursts() bool
	// NumFrames returns int64, set in StreamStreamControlType.
	NumFrames() int64
	// SetNumFrames assigns int64 provided by user to StreamStreamControlType
	SetNumFrames(value int64) StreamStreamControlType
	// HasNumFrames checks if NumFrames has been set in StreamStreamControlType
	HasNumFrames() bool
	// PriorityGroup returns StreamStreamControlTypePriorityGroupEnum, set in StreamStreamControlType
	PriorityGroup() StreamStreamControlTypePriorityGroupEnum
	// SetPriorityGroup assigns StreamStreamControlTypePriorityGroupEnum provided by user to StreamStreamControlType
	SetPriorityGroup(value StreamStreamControlTypePriorityGroupEnum) StreamStreamControlType
	// HasPriorityGroup checks if PriorityGroup has been set in StreamStreamControlType
	HasPriorityGroup() bool
	// TsnQbvGateConfig returns StreamTsnQbvGateConfigType, set in StreamStreamControlType.
	// StreamTsnQbvGateConfigType is used to map a stream to a particular IEEE 802.1Qbv Gate.
	TsnQbvGateConfig() StreamTsnQbvGateConfigType
	// SetTsnQbvGateConfig assigns StreamTsnQbvGateConfigType provided by user to StreamStreamControlType.
	// StreamTsnQbvGateConfigType is used to map a stream to a particular IEEE 802.1Qbv Gate.
	SetTsnQbvGateConfig(value StreamTsnQbvGateConfigType) StreamStreamControlType
	// HasTsnQbvGateConfig checks if TsnQbvGateConfig has been set in StreamStreamControlType
	HasTsnQbvGateConfig() bool
	// AsyncIntEnable returns bool, set in StreamStreamControlType.
	AsyncIntEnable() bool
	// SetAsyncIntEnable assigns bool provided by user to StreamStreamControlType
	SetAsyncIntEnable(value bool) StreamStreamControlType
	// HasAsyncIntEnable checks if AsyncIntEnable has been set in StreamStreamControlType
	HasAsyncIntEnable() bool
	// AdjustMask returns StreamStreamControlTypeAdjustMaskEnum, set in StreamStreamControlType
	AdjustMask() StreamStreamControlTypeAdjustMaskEnum
	// SetAdjustMask assigns StreamStreamControlTypeAdjustMaskEnum provided by user to StreamStreamControlType
	SetAdjustMask(value StreamStreamControlTypeAdjustMaskEnum) StreamStreamControlType
	// HasAdjustMask checks if AdjustMask has been set in StreamStreamControlType
	HasAdjustMask() bool
	// EnableIncrFrameBurstOverride returns bool, set in StreamStreamControlType.
	EnableIncrFrameBurstOverride() bool
	// SetEnableIncrFrameBurstOverride assigns bool provided by user to StreamStreamControlType
	SetEnableIncrFrameBurstOverride(value bool) StreamStreamControlType
	// HasEnableIncrFrameBurstOverride checks if EnableIncrFrameBurstOverride has been set in StreamStreamControlType
	HasEnableIncrFrameBurstOverride() bool
	// EnableSourceInterface returns bool, set in StreamStreamControlType.
	EnableSourceInterface() bool
	// SetEnableSourceInterface assigns bool provided by user to StreamStreamControlType
	SetEnableSourceInterface(value bool) StreamStreamControlType
	// HasEnableSourceInterface checks if EnableSourceInterface has been set in StreamStreamControlType
	HasEnableSourceInterface() bool
	// EnableStatistic returns bool, set in StreamStreamControlType.
	EnableStatistic() bool
	// SetEnableStatistic assigns bool provided by user to StreamStreamControlType
	SetEnableStatistic(value bool) StreamStreamControlType
	// HasEnableStatistic checks if EnableStatistic has been set in StreamStreamControlType
	HasEnableStatistic() bool
	// EnableSuspend returns bool, set in StreamStreamControlType.
	EnableSuspend() bool
	// SetEnableSuspend assigns bool provided by user to StreamStreamControlType
	SetEnableSuspend(value bool) StreamStreamControlType
	// HasEnableSuspend checks if EnableSuspend has been set in StreamStreamControlType
	HasEnableSuspend() bool
	// RxTriggerEnable returns bool, set in StreamStreamControlType.
	RxTriggerEnable() bool
	// SetRxTriggerEnable assigns bool provided by user to StreamStreamControlType
	SetRxTriggerEnable(value bool) StreamStreamControlType
	// HasRxTriggerEnable checks if RxTriggerEnable has been set in StreamStreamControlType
	HasRxTriggerEnable() bool
	// StartTxDelay returns StreamTxDelayType, set in StreamStreamControlType.
	// StreamTxDelayType is model a packet transmission delay.
	StartTxDelay() StreamTxDelayType
	// SetStartTxDelay assigns StreamTxDelayType provided by user to StreamStreamControlType.
	// StreamTxDelayType is model a packet transmission delay.
	SetStartTxDelay(value StreamTxDelayType) StreamStreamControlType
	// HasStartTxDelay checks if StartTxDelay has been set in StreamStreamControlType
	HasStartTxDelay() bool
	setNil()
}

func (obj *streamStreamControlType) populateXml(xObj *Argument) error {

	if obj.HasDma() {

		member := Member{
			Name:  "dma",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Stream+eDma",
			Value: strconv.FormatInt(int64(obj.obj.Dma.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasLoopCount() {

		member := Member{
			Name:  "loopcount",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.LoopCount()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasNumBursts() {

		member := Member{
			Name:  "numbursts",
			Type:  "int64",
			Value: strconv.FormatInt(obj.NumBursts(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasNumFrames() {

		member := Member{
			Name:  "numframes",
			Type:  "int64",
			Value: strconv.FormatInt(obj.NumFrames(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasPriorityGroup() {

		member := Member{
			Name:  "prioritygroup",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Stream+ePriorityGroup",
			Value: strconv.FormatInt(int64(obj.obj.PriorityGroup.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasAsyncIntEnable() {
		var value string
		if obj.AsyncIntEnable() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "asyncintenable",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasAdjustMask() {

		member := Member{
			Name:  "adjustmask",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Stream+eAdjustMask",
			Value: strconv.FormatInt(int64(obj.obj.AdjustMask.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableIncrFrameBurstOverride() {
		var value string
		if obj.EnableIncrFrameBurstOverride() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enableincrframeburstoverride",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableSourceInterface() {
		var value string
		if obj.EnableSourceInterface() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablesourceinterface",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableStatistic() {
		var value string
		if obj.EnableStatistic() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablestatistic",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableSuspend() {
		var value string
		if obj.EnableSuspend() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablesuspend",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasRxTriggerEnable() {
		var value string
		if obj.RxTriggerEnable() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "rxtriggerenable",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamStreamControlType) populateFromXml(xObj *RetVal) error {

	return nil
}

type StreamStreamControlTypeDmaEnum string

// Enum of Dma on StreamStreamControlType
var StreamStreamControlTypeDma = struct {
	KCONTPACKET      StreamStreamControlTypeDmaEnum
	KCONTBURST       StreamStreamControlTypeDmaEnum
	KSTOPSTREAM      StreamStreamControlTypeDmaEnum
	KADVANCE         StreamStreamControlTypeDmaEnum
	KGOTOFIRST       StreamStreamControlTypeDmaEnum
	KFIRSTLOOPCOUNT  StreamStreamControlTypeDmaEnum
	KFIXEDBURSTCOUNT StreamStreamControlTypeDmaEnum
}{
	KCONTPACKET:      StreamStreamControlTypeDmaEnum("kContPacket"),
	KCONTBURST:       StreamStreamControlTypeDmaEnum("kContBurst"),
	KSTOPSTREAM:      StreamStreamControlTypeDmaEnum("kStopStream"),
	KADVANCE:         StreamStreamControlTypeDmaEnum("kAdvance"),
	KGOTOFIRST:       StreamStreamControlTypeDmaEnum("kGotoFirst"),
	KFIRSTLOOPCOUNT:  StreamStreamControlTypeDmaEnum("kFirstLoopCount"),
	KFIXEDBURSTCOUNT: StreamStreamControlTypeDmaEnum("kFixedBurstCount"),
}

func (obj *streamStreamControlType) Dma() StreamStreamControlTypeDmaEnum {
	return StreamStreamControlTypeDmaEnum(obj.obj.Dma.Enum().String())
}

// This determines the behaviour of the stream flow.
// Dma returns a string
func (obj *streamStreamControlType) HasDma() bool {
	return obj.obj.Dma != nil
}

func (obj *streamStreamControlType) SetDma(value StreamStreamControlTypeDmaEnum) StreamStreamControlType {
	intValue, ok := otg.StreamStreamControlType_Dma_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on StreamStreamControlTypeDmaEnum", string(value)))
		return obj
	}
	enumValue := otg.StreamStreamControlType_Dma_Enum(intValue)
	obj.obj.Dma = &enumValue

	return obj
}

// Configures the stream ID to which the control loops.
// ReturnToId returns a IdTypeStreamId
func (obj *streamStreamControlType) ReturnToId() IdTypeStreamId {
	if obj.obj.ReturnToId == nil {
		obj.obj.ReturnToId = NewIdTypeStreamId().Msg()
	}
	if obj.returnToIdHolder == nil {
		obj.returnToIdHolder = &idTypeStreamId{obj: obj.obj.ReturnToId}
	}
	return obj.returnToIdHolder
}

// Configures the stream ID to which the control loops.
// ReturnToId returns a IdTypeStreamId
func (obj *streamStreamControlType) HasReturnToId() bool {
	return obj.obj.ReturnToId != nil
}

// Configures the stream ID to which the control loops.
// SetReturnToId sets the IdTypeStreamId value in the StreamStreamControlType object
func (obj *streamStreamControlType) SetReturnToId(value IdTypeStreamId) StreamStreamControlType {

	obj.returnToIdHolder = nil
	obj.obj.ReturnToId = value.Msg()

	return obj
}

// Number of times to begin transmission of the first stream in the   list when dmaFirstLoopCount is set.
// LoopCount returns a int32
func (obj *streamStreamControlType) LoopCount() int32 {

	return *obj.obj.LoopCount

}

// Number of times to begin transmission of the first stream in the   list when dmaFirstLoopCount is set.
// LoopCount returns a int32
func (obj *streamStreamControlType) HasLoopCount() bool {
	return obj.obj.LoopCount != nil
}

// Number of times to begin transmission of the first stream in the   list when dmaFirstLoopCount is set.
// SetLoopCount sets the int32 value in the StreamStreamControlType object
func (obj *streamStreamControlType) SetLoopCount(value int32) StreamStreamControlType {

	obj.obj.LoopCount = &value
	return obj
}

// Number of bursts in the stream. If dmaContBurst or dmaContPacket   is set this option is ignored.
// NumBursts returns a int64
func (obj *streamStreamControlType) NumBursts() int64 {

	return *obj.obj.NumBursts

}

// Number of bursts in the stream. If dmaContBurst or dmaContPacket   is set this option is ignored.
// NumBursts returns a int64
func (obj *streamStreamControlType) HasNumBursts() bool {
	return obj.obj.NumBursts != nil
}

// Number of bursts in the stream. If dmaContBurst or dmaContPacket   is set this option is ignored.
// SetNumBursts sets the int64 value in the StreamStreamControlType object
func (obj *streamStreamControlType) SetNumBursts(value int64) StreamStreamControlType {

	obj.obj.NumBursts = &value
	return obj
}

// Number of maximum frames in the stream. If dmaContPacket is set   this option is ignored.
// NumFrames returns a int64
func (obj *streamStreamControlType) NumFrames() int64 {

	return *obj.obj.NumFrames

}

// Number of maximum frames in the stream. If dmaContPacket is set   this option is ignored.
// NumFrames returns a int64
func (obj *streamStreamControlType) HasNumFrames() bool {
	return obj.obj.NumFrames != nil
}

// Number of maximum frames in the stream. If dmaContPacket is set   this option is ignored.
// SetNumFrames sets the int64 value in the StreamStreamControlType object
func (obj *streamStreamControlType) SetNumFrames(value int64) StreamStreamControlType {

	obj.obj.NumFrames = &value
	return obj
}

type StreamStreamControlTypePriorityGroupEnum string

// Enum of PriorityGroup on StreamStreamControlType
var StreamStreamControlTypePriorityGroup = struct {
	KPRIORITYGROUP0       StreamStreamControlTypePriorityGroupEnum
	KPRIORITYGROUP1       StreamStreamControlTypePriorityGroupEnum
	KPRIORITYGROUP2       StreamStreamControlTypePriorityGroupEnum
	KPRIORITYGROUP3       StreamStreamControlTypePriorityGroupEnum
	KPRIORITYGROUP4       StreamStreamControlTypePriorityGroupEnum
	KPRIORITYGROUP5       StreamStreamControlTypePriorityGroupEnum
	KPRIORITYGROUP6       StreamStreamControlTypePriorityGroupEnum
	KPRIORITYGROUP7       StreamStreamControlTypePriorityGroupEnum
	KPRIORITYGROUP8       StreamStreamControlTypePriorityGroupEnum
	KPRIORITYGROUPCONTROL StreamStreamControlTypePriorityGroupEnum
}{
	KPRIORITYGROUP0:       StreamStreamControlTypePriorityGroupEnum("kPriorityGroup0"),
	KPRIORITYGROUP1:       StreamStreamControlTypePriorityGroupEnum("kPriorityGroup1"),
	KPRIORITYGROUP2:       StreamStreamControlTypePriorityGroupEnum("kPriorityGroup2"),
	KPRIORITYGROUP3:       StreamStreamControlTypePriorityGroupEnum("kPriorityGroup3"),
	KPRIORITYGROUP4:       StreamStreamControlTypePriorityGroupEnum("kPriorityGroup4"),
	KPRIORITYGROUP5:       StreamStreamControlTypePriorityGroupEnum("kPriorityGroup5"),
	KPRIORITYGROUP6:       StreamStreamControlTypePriorityGroupEnum("kPriorityGroup6"),
	KPRIORITYGROUP7:       StreamStreamControlTypePriorityGroupEnum("kPriorityGroup7"),
	KPRIORITYGROUP8:       StreamStreamControlTypePriorityGroupEnum("kPriorityGroup8"),
	KPRIORITYGROUPCONTROL: StreamStreamControlTypePriorityGroupEnum("kPriorityGroupControl"),
}

func (obj *streamStreamControlType) PriorityGroup() StreamStreamControlTypePriorityGroupEnum {
	return StreamStreamControlTypePriorityGroupEnum(obj.obj.PriorityGroup.Enum().String())
}

// Specifies the priority group of the stream.
// PriorityGroup returns a string
func (obj *streamStreamControlType) HasPriorityGroup() bool {
	return obj.obj.PriorityGroup != nil
}

func (obj *streamStreamControlType) SetPriorityGroup(value StreamStreamControlTypePriorityGroupEnum) StreamStreamControlType {
	intValue, ok := otg.StreamStreamControlType_PriorityGroup_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on StreamStreamControlTypePriorityGroupEnum", string(value)))
		return obj
	}
	enumValue := otg.StreamStreamControlType_PriorityGroup_Enum(intValue)
	obj.obj.PriorityGroup = &enumValue

	return obj
}

// Contains a structure which specifies the gate the stream   is mapped to and whether the feature is enabled or not.
// TsnQbvGateConfig returns a StreamTsnQbvGateConfigType
func (obj *streamStreamControlType) TsnQbvGateConfig() StreamTsnQbvGateConfigType {
	if obj.obj.TsnQbvGateConfig == nil {
		obj.obj.TsnQbvGateConfig = NewStreamTsnQbvGateConfigType().Msg()
	}
	if obj.tsnQbvGateConfigHolder == nil {
		obj.tsnQbvGateConfigHolder = &streamTsnQbvGateConfigType{obj: obj.obj.TsnQbvGateConfig}
	}
	return obj.tsnQbvGateConfigHolder
}

// Contains a structure which specifies the gate the stream   is mapped to and whether the feature is enabled or not.
// TsnQbvGateConfig returns a StreamTsnQbvGateConfigType
func (obj *streamStreamControlType) HasTsnQbvGateConfig() bool {
	return obj.obj.TsnQbvGateConfig != nil
}

// Contains a structure which specifies the gate the stream   is mapped to and whether the feature is enabled or not.
// SetTsnQbvGateConfig sets the StreamTsnQbvGateConfigType value in the StreamStreamControlType object
func (obj *streamStreamControlType) SetTsnQbvGateConfig(value StreamTsnQbvGateConfigType) StreamStreamControlType {

	obj.tsnQbvGateConfigHolder = nil
	obj.obj.TsnQbvGateConfig = value.Msg()

	return obj
}

// When this option is set to false, asynchronous transmit events   cannot interrupt the stream. The asynchronous event is logged   and is invoked as soon as a synchronous stream permits it. Note   that only one asynchronous event of a type stream is logged,   that is, if the same timer expired twice, only one asynchronous   event is logged due to that counter.
// AsyncIntEnable returns a bool
func (obj *streamStreamControlType) AsyncIntEnable() bool {

	return *obj.obj.AsyncIntEnable

}

// When this option is set to false, asynchronous transmit events   cannot interrupt the stream. The asynchronous event is logged   and is invoked as soon as a synchronous stream permits it. Note   that only one asynchronous event of a type stream is logged,   that is, if the same timer expired twice, only one asynchronous   event is logged due to that counter.
// AsyncIntEnable returns a bool
func (obj *streamStreamControlType) HasAsyncIntEnable() bool {
	return obj.obj.AsyncIntEnable != nil
}

// When this option is set to false, asynchronous transmit events   cannot interrupt the stream. The asynchronous event is logged   and is invoked as soon as a synchronous stream permits it. Note   that only one asynchronous event of a type stream is logged,   that is, if the same timer expired twice, only one asynchronous   event is logged due to that counter.
// SetAsyncIntEnable sets the bool value in the StreamStreamControlType object
func (obj *streamStreamControlType) SetAsyncIntEnable(value bool) StreamStreamControlType {

	obj.obj.AsyncIntEnable = &value
	return obj
}

type StreamStreamControlTypeAdjustMaskEnum string

// Enum of AdjustMask on StreamStreamControlType
var StreamStreamControlTypeAdjustMask = struct {
	KGAPNONE              StreamStreamControlTypeAdjustMaskEnum
	KGAPFRAME             StreamStreamControlTypeAdjustMaskEnum
	KGAPBURST             StreamStreamControlTypeAdjustMaskEnum
	KGAPSTREAM            StreamStreamControlTypeAdjustMaskEnum
	KADJUSTFRAMESIZEFIXED StreamStreamControlTypeAdjustMaskEnum
	KADJUSTFRAMESIZEMIN   StreamStreamControlTypeAdjustMaskEnum
	KADJUSTFRAMESIZEMAX   StreamStreamControlTypeAdjustMaskEnum
	KADJUSTNUMFRAMES      StreamStreamControlTypeAdjustMaskEnum
}{
	KGAPNONE:              StreamStreamControlTypeAdjustMaskEnum("kGapNone"),
	KGAPFRAME:             StreamStreamControlTypeAdjustMaskEnum("kGapFrame"),
	KGAPBURST:             StreamStreamControlTypeAdjustMaskEnum("kGapBurst"),
	KGAPSTREAM:            StreamStreamControlTypeAdjustMaskEnum("kGapStream"),
	KADJUSTFRAMESIZEFIXED: StreamStreamControlTypeAdjustMaskEnum("kAdjustFrameSizeFixed"),
	KADJUSTFRAMESIZEMIN:   StreamStreamControlTypeAdjustMaskEnum("kAdjustFrameSizeMin"),
	KADJUSTFRAMESIZEMAX:   StreamStreamControlTypeAdjustMaskEnum("kAdjustFrameSizeMax"),
	KADJUSTNUMFRAMES:      StreamStreamControlTypeAdjustMaskEnum("kAdjustNumFrames"),
}

func (obj *streamStreamControlType) AdjustMask() StreamStreamControlTypeAdjustMaskEnum {
	return StreamStreamControlTypeAdjustMaskEnum(obj.obj.AdjustMask.Enum().String())
}

// TBD
// AdjustMask returns a string
func (obj *streamStreamControlType) HasAdjustMask() bool {
	return obj.obj.AdjustMask != nil
}

func (obj *streamStreamControlType) SetAdjustMask(value StreamStreamControlTypeAdjustMaskEnum) StreamStreamControlType {
	intValue, ok := otg.StreamStreamControlType_AdjustMask_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on StreamStreamControlTypeAdjustMaskEnum", string(value)))
		return obj
	}
	enumValue := otg.StreamStreamControlType_AdjustMask_Enum(intValue)
	obj.obj.AdjustMask = &enumValue

	return obj
}

// Enable the packet burst override for increment frame mode.
// EnableIncrFrameBurstOverride returns a bool
func (obj *streamStreamControlType) EnableIncrFrameBurstOverride() bool {

	return *obj.obj.EnableIncrFrameBurstOverride

}

// Enable the packet burst override for increment frame mode.
// EnableIncrFrameBurstOverride returns a bool
func (obj *streamStreamControlType) HasEnableIncrFrameBurstOverride() bool {
	return obj.obj.EnableIncrFrameBurstOverride != nil
}

// Enable the packet burst override for increment frame mode.
// SetEnableIncrFrameBurstOverride sets the bool value in the StreamStreamControlType object
func (obj *streamStreamControlType) SetEnableIncrFrameBurstOverride(value bool) StreamStreamControlType {

	obj.obj.EnableIncrFrameBurstOverride = &value
	return obj
}

// If true, then the MAC address and source IP address associated with   an interface is used instead of the sa value and IP source address.   The particular interface to be used is specified in   interfaceDescription.
// EnableSourceInterface returns a bool
func (obj *streamStreamControlType) EnableSourceInterface() bool {

	return *obj.obj.EnableSourceInterface

}

// If true, then the MAC address and source IP address associated with   an interface is used instead of the sa value and IP source address.   The particular interface to be used is specified in   interfaceDescription.
// EnableSourceInterface returns a bool
func (obj *streamStreamControlType) HasEnableSourceInterface() bool {
	return obj.obj.EnableSourceInterface != nil
}

// If true, then the MAC address and source IP address associated with   an interface is used instead of the sa value and IP source address.   The particular interface to be used is specified in   interfaceDescription.
// SetEnableSourceInterface sets the bool value in the StreamStreamControlType object
func (obj *streamStreamControlType) SetEnableSourceInterface(value bool) StreamStreamControlType {

	obj.obj.EnableSourceInterface = &value
	return obj
}

// If true, then per-stream transmit statistics are enabled.
// EnableStatistic returns a bool
func (obj *streamStreamControlType) EnableStatistic() bool {

	return *obj.obj.EnableStatistic

}

// If true, then per-stream transmit statistics are enabled.
// EnableStatistic returns a bool
func (obj *streamStreamControlType) HasEnableStatistic() bool {
	return obj.obj.EnableStatistic != nil
}

// If true, then per-stream transmit statistics are enabled.
// SetEnableStatistic sets the bool value in the StreamStreamControlType object
func (obj *streamStreamControlType) SetEnableStatistic(value bool) StreamStreamControlType {

	obj.obj.EnableStatistic = &value
	return obj
}

// If true, then stream suspend command is enabled.
// EnableSuspend returns a bool
func (obj *streamStreamControlType) EnableSuspend() bool {

	return *obj.obj.EnableSuspend

}

// If true, then stream suspend command is enabled.
// EnableSuspend returns a bool
func (obj *streamStreamControlType) HasEnableSuspend() bool {
	return obj.obj.EnableSuspend != nil
}

// If true, then stream suspend command is enabled.
// SetEnableSuspend sets the bool value in the StreamStreamControlType object
func (obj *streamStreamControlType) SetEnableSuspend(value bool) StreamStreamControlType {

	obj.obj.EnableSuspend = &value
	return obj
}

// When set to true, the transmit engine waits for a pulse from   the receiver to start the stream.
// RxTriggerEnable returns a bool
func (obj *streamStreamControlType) RxTriggerEnable() bool {

	return *obj.obj.RxTriggerEnable

}

// When set to true, the transmit engine waits for a pulse from   the receiver to start the stream.
// RxTriggerEnable returns a bool
func (obj *streamStreamControlType) HasRxTriggerEnable() bool {
	return obj.obj.RxTriggerEnable != nil
}

// When set to true, the transmit engine waits for a pulse from   the receiver to start the stream.
// SetRxTriggerEnable sets the bool value in the StreamStreamControlType object
func (obj *streamStreamControlType) SetRxTriggerEnable(value bool) StreamStreamControlType {

	obj.obj.RxTriggerEnable = &value
	return obj
}

// Configure the delay before starting this stream.
// StartTxDelay returns a StreamTxDelayType
func (obj *streamStreamControlType) StartTxDelay() StreamTxDelayType {
	if obj.obj.StartTxDelay == nil {
		obj.obj.StartTxDelay = NewStreamTxDelayType().Msg()
	}
	if obj.startTxDelayHolder == nil {
		obj.startTxDelayHolder = &streamTxDelayType{obj: obj.obj.StartTxDelay}
	}
	return obj.startTxDelayHolder
}

// Configure the delay before starting this stream.
// StartTxDelay returns a StreamTxDelayType
func (obj *streamStreamControlType) HasStartTxDelay() bool {
	return obj.obj.StartTxDelay != nil
}

// Configure the delay before starting this stream.
// SetStartTxDelay sets the StreamTxDelayType value in the StreamStreamControlType object
func (obj *streamStreamControlType) SetStartTxDelay(value StreamTxDelayType) StreamStreamControlType {

	obj.startTxDelayHolder = nil
	obj.obj.StartTxDelay = value.Msg()

	return obj
}

func (obj *streamStreamControlType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ReturnToId != nil {

		obj.ReturnToId().validateObj(vObj, set_default)
	}

	if obj.obj.TsnQbvGateConfig != nil {

		obj.TsnQbvGateConfig().validateObj(vObj, set_default)
	}

	if obj.obj.StartTxDelay != nil {

		obj.StartTxDelay().validateObj(vObj, set_default)
	}

}

func (obj *streamStreamControlType) setDefault() {

}

// ***** StreamInterFrameGapControlType *****
type streamInterFrameGapControlType struct {
	validation
	obj              *otg.StreamInterFrameGapControlType
	ifgHolder        PFTypeGapTimeType
	ifgMinHolder     PFTypeGapTimeType
	ifgMaxHolder     PFTypeGapTimeType
	ifgPreciseHolder PFTypeGapPrecisionTimeType
}

func NewStreamInterFrameGapControlType() StreamInterFrameGapControlType {
	obj := streamInterFrameGapControlType{obj: &otg.StreamInterFrameGapControlType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamInterFrameGapControlType) Msg() *otg.StreamInterFrameGapControlType {
	return obj.obj
}

func (obj *streamInterFrameGapControlType) SetMsg(msg *otg.StreamInterFrameGapControlType) StreamInterFrameGapControlType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamInterFrameGapControlType) ToProto() (*otg.StreamInterFrameGapControlType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamInterFrameGapControlType) FromProto(msg *otg.StreamInterFrameGapControlType) (StreamInterFrameGapControlType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamInterFrameGapControlType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamInterFrameGapControlType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamInterFrameGapControlType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamInterFrameGapControlType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamInterFrameGapControlType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamInterFrameGapControlType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamInterFrameGapControlType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamInterFrameGapControlType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamInterFrameGapControlType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamInterFrameGapControlType) Clone() (StreamInterFrameGapControlType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamInterFrameGapControlType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamInterFrameGapControlType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamInterFrameGapControlType) setNil() {
	obj.ifgHolder = nil
	obj.ifgMinHolder = nil
	obj.ifgMaxHolder = nil
	obj.ifgPreciseHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamInterFrameGapControlType is tBD
type StreamInterFrameGapControlType interface {
	Validation
	// Msg marshals StreamInterFrameGapControlType to protobuf object *otg.StreamInterFrameGapControlType
	// and doesn't set defaults
	Msg() *otg.StreamInterFrameGapControlType
	// SetMsg unmarshals StreamInterFrameGapControlType from protobuf object *otg.StreamInterFrameGapControlType
	// and doesn't set defaults
	SetMsg(*otg.StreamInterFrameGapControlType) StreamInterFrameGapControlType
	// ToProto marshals StreamInterFrameGapControlType to protobuf object *otg.StreamInterFrameGapControlType
	ToProto() (*otg.StreamInterFrameGapControlType, error)
	// ToPbText marshals StreamInterFrameGapControlType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamInterFrameGapControlType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamInterFrameGapControlType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamInterFrameGapControlType from protobuf object *otg.StreamInterFrameGapControlType
	FromProto(msg *otg.StreamInterFrameGapControlType) (StreamInterFrameGapControlType, error)
	// FromPbText unmarshals StreamInterFrameGapControlType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamInterFrameGapControlType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamInterFrameGapControlType from JSON text
	FromJson(value string) error
	// Validate validates StreamInterFrameGapControlType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamInterFrameGapControlType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// IfgType returns StreamInterFrameGapControlTypeIfgTypeEnum, set in StreamInterFrameGapControlType
	IfgType() StreamInterFrameGapControlTypeIfgTypeEnum
	// SetIfgType assigns StreamInterFrameGapControlTypeIfgTypeEnum provided by user to StreamInterFrameGapControlType
	SetIfgType(value StreamInterFrameGapControlTypeIfgTypeEnum) StreamInterFrameGapControlType
	// HasIfgType checks if IfgType has been set in StreamInterFrameGapControlType
	HasIfgType() bool
	// Ifg returns PFTypeGapTimeType, set in StreamInterFrameGapControlType.
	// PFTypeGapTimeType is model interpacket gap and allow a diversity of units of measurement.
	Ifg() PFTypeGapTimeType
	// SetIfg assigns PFTypeGapTimeType provided by user to StreamInterFrameGapControlType.
	// PFTypeGapTimeType is model interpacket gap and allow a diversity of units of measurement.
	SetIfg(value PFTypeGapTimeType) StreamInterFrameGapControlType
	// HasIfg checks if Ifg has been set in StreamInterFrameGapControlType
	HasIfg() bool
	// IfgMin returns PFTypeGapTimeType, set in StreamInterFrameGapControlType.
	// PFTypeGapTimeType is model interpacket gap and allow a diversity of units of measurement.
	IfgMin() PFTypeGapTimeType
	// SetIfgMin assigns PFTypeGapTimeType provided by user to StreamInterFrameGapControlType.
	// PFTypeGapTimeType is model interpacket gap and allow a diversity of units of measurement.
	SetIfgMin(value PFTypeGapTimeType) StreamInterFrameGapControlType
	// HasIfgMin checks if IfgMin has been set in StreamInterFrameGapControlType
	HasIfgMin() bool
	// IfgMax returns PFTypeGapTimeType, set in StreamInterFrameGapControlType.
	// PFTypeGapTimeType is model interpacket gap and allow a diversity of units of measurement.
	IfgMax() PFTypeGapTimeType
	// SetIfgMax assigns PFTypeGapTimeType provided by user to StreamInterFrameGapControlType.
	// PFTypeGapTimeType is model interpacket gap and allow a diversity of units of measurement.
	SetIfgMax(value PFTypeGapTimeType) StreamInterFrameGapControlType
	// HasIfgMax checks if IfgMax has been set in StreamInterFrameGapControlType
	HasIfgMax() bool
	// IfgPrecise returns PFTypeGapPrecisionTimeType, set in StreamInterFrameGapControlType.
	// PFTypeGapPrecisionTimeType is model interpacket gap with precision and allow a diversity of units of measurement.
	IfgPrecise() PFTypeGapPrecisionTimeType
	// SetIfgPrecise assigns PFTypeGapPrecisionTimeType provided by user to StreamInterFrameGapControlType.
	// PFTypeGapPrecisionTimeType is model interpacket gap with precision and allow a diversity of units of measurement.
	SetIfgPrecise(value PFTypeGapPrecisionTimeType) StreamInterFrameGapControlType
	// HasIfgPrecise checks if IfgPrecise has been set in StreamInterFrameGapControlType
	HasIfgPrecise() bool
	setNil()
}

func (obj *streamInterFrameGapControlType) populateXml(xObj *Argument) error {

	if obj.HasIfgType() {

		member := Member{
			Name:  "ifgtype",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Stream+eIfgType",
			Value: strconv.FormatInt(int64(obj.obj.IfgType.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamInterFrameGapControlType) populateFromXml(xObj *RetVal) error {

	return nil
}

type StreamInterFrameGapControlTypeIfgTypeEnum string

// Enum of IfgType on StreamInterFrameGapControlType
var StreamInterFrameGapControlTypeIfgType = struct {
	KGAPFIXED  StreamInterFrameGapControlTypeIfgTypeEnum
	KGAPRANDOM StreamInterFrameGapControlTypeIfgTypeEnum
}{
	KGAPFIXED:  StreamInterFrameGapControlTypeIfgTypeEnum("kGapFixed"),
	KGAPRANDOM: StreamInterFrameGapControlTypeIfgTypeEnum("kGapRandom"),
}

func (obj *streamInterFrameGapControlType) IfgType() StreamInterFrameGapControlTypeIfgTypeEnum {
	return StreamInterFrameGapControlTypeIfgTypeEnum(obj.obj.IfgType.Enum().String())
}

// TBD
// IfgType returns a string
func (obj *streamInterFrameGapControlType) HasIfgType() bool {
	return obj.obj.IfgType != nil
}

func (obj *streamInterFrameGapControlType) SetIfgType(value StreamInterFrameGapControlTypeIfgTypeEnum) StreamInterFrameGapControlType {
	intValue, ok := otg.StreamInterFrameGapControlType_IfgType_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on StreamInterFrameGapControlTypeIfgTypeEnum", string(value)))
		return obj
	}
	enumValue := otg.StreamInterFrameGapControlType_IfgType_Enum(intValue)
	obj.obj.IfgType = &enumValue

	return obj
}

// TBD
// Ifg returns a PFTypeGapTimeType
func (obj *streamInterFrameGapControlType) Ifg() PFTypeGapTimeType {
	if obj.obj.Ifg == nil {
		obj.obj.Ifg = NewPFTypeGapTimeType().Msg()
	}
	if obj.ifgHolder == nil {
		obj.ifgHolder = &pFTypeGapTimeType{obj: obj.obj.Ifg}
	}
	return obj.ifgHolder
}

// TBD
// Ifg returns a PFTypeGapTimeType
func (obj *streamInterFrameGapControlType) HasIfg() bool {
	return obj.obj.Ifg != nil
}

// TBD
// SetIfg sets the PFTypeGapTimeType value in the StreamInterFrameGapControlType object
func (obj *streamInterFrameGapControlType) SetIfg(value PFTypeGapTimeType) StreamInterFrameGapControlType {

	obj.ifgHolder = nil
	obj.obj.Ifg = value.Msg()

	return obj
}

// TBD
// IfgMin returns a PFTypeGapTimeType
func (obj *streamInterFrameGapControlType) IfgMin() PFTypeGapTimeType {
	if obj.obj.IfgMin == nil {
		obj.obj.IfgMin = NewPFTypeGapTimeType().Msg()
	}
	if obj.ifgMinHolder == nil {
		obj.ifgMinHolder = &pFTypeGapTimeType{obj: obj.obj.IfgMin}
	}
	return obj.ifgMinHolder
}

// TBD
// IfgMin returns a PFTypeGapTimeType
func (obj *streamInterFrameGapControlType) HasIfgMin() bool {
	return obj.obj.IfgMin != nil
}

// TBD
// SetIfgMin sets the PFTypeGapTimeType value in the StreamInterFrameGapControlType object
func (obj *streamInterFrameGapControlType) SetIfgMin(value PFTypeGapTimeType) StreamInterFrameGapControlType {

	obj.ifgMinHolder = nil
	obj.obj.IfgMin = value.Msg()

	return obj
}

// TBD
// IfgMax returns a PFTypeGapTimeType
func (obj *streamInterFrameGapControlType) IfgMax() PFTypeGapTimeType {
	if obj.obj.IfgMax == nil {
		obj.obj.IfgMax = NewPFTypeGapTimeType().Msg()
	}
	if obj.ifgMaxHolder == nil {
		obj.ifgMaxHolder = &pFTypeGapTimeType{obj: obj.obj.IfgMax}
	}
	return obj.ifgMaxHolder
}

// TBD
// IfgMax returns a PFTypeGapTimeType
func (obj *streamInterFrameGapControlType) HasIfgMax() bool {
	return obj.obj.IfgMax != nil
}

// TBD
// SetIfgMax sets the PFTypeGapTimeType value in the StreamInterFrameGapControlType object
func (obj *streamInterFrameGapControlType) SetIfgMax(value PFTypeGapTimeType) StreamInterFrameGapControlType {

	obj.ifgMaxHolder = nil
	obj.obj.IfgMax = value.Msg()

	return obj
}

// TBD
// IfgPrecise returns a PFTypeGapPrecisionTimeType
func (obj *streamInterFrameGapControlType) IfgPrecise() PFTypeGapPrecisionTimeType {
	if obj.obj.IfgPrecise == nil {
		obj.obj.IfgPrecise = NewPFTypeGapPrecisionTimeType().Msg()
	}
	if obj.ifgPreciseHolder == nil {
		obj.ifgPreciseHolder = &pFTypeGapPrecisionTimeType{obj: obj.obj.IfgPrecise}
	}
	return obj.ifgPreciseHolder
}

// TBD
// IfgPrecise returns a PFTypeGapPrecisionTimeType
func (obj *streamInterFrameGapControlType) HasIfgPrecise() bool {
	return obj.obj.IfgPrecise != nil
}

// TBD
// SetIfgPrecise sets the PFTypeGapPrecisionTimeType value in the StreamInterFrameGapControlType object
func (obj *streamInterFrameGapControlType) SetIfgPrecise(value PFTypeGapPrecisionTimeType) StreamInterFrameGapControlType {

	obj.ifgPreciseHolder = nil
	obj.obj.IfgPrecise = value.Msg()

	return obj
}

func (obj *streamInterFrameGapControlType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Ifg != nil {

		obj.Ifg().validateObj(vObj, set_default)
	}

	if obj.obj.IfgMin != nil {

		obj.IfgMin().validateObj(vObj, set_default)
	}

	if obj.obj.IfgMax != nil {

		obj.IfgMax().validateObj(vObj, set_default)
	}

	if obj.obj.IfgPrecise != nil {

		obj.IfgPrecise().validateObj(vObj, set_default)
	}

}

func (obj *streamInterFrameGapControlType) setDefault() {

}

// ***** StreamRateControlType *****
type streamRateControlType struct {
	validation
	obj                     *otg.StreamRateControlType
	percentPacketRateHolder PFTypePercentType
}

func NewStreamRateControlType() StreamRateControlType {
	obj := streamRateControlType{obj: &otg.StreamRateControlType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamRateControlType) Msg() *otg.StreamRateControlType {
	return obj.obj
}

func (obj *streamRateControlType) SetMsg(msg *otg.StreamRateControlType) StreamRateControlType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamRateControlType) ToProto() (*otg.StreamRateControlType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamRateControlType) FromProto(msg *otg.StreamRateControlType) (StreamRateControlType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamRateControlType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamRateControlType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamRateControlType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamRateControlType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamRateControlType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamRateControlType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamRateControlType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamRateControlType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamRateControlType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamRateControlType) Clone() (StreamRateControlType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamRateControlType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamRateControlType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamRateControlType) setNil() {
	obj.percentPacketRateHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamRateControlType is tBD
type StreamRateControlType interface {
	Validation
	// Msg marshals StreamRateControlType to protobuf object *otg.StreamRateControlType
	// and doesn't set defaults
	Msg() *otg.StreamRateControlType
	// SetMsg unmarshals StreamRateControlType from protobuf object *otg.StreamRateControlType
	// and doesn't set defaults
	SetMsg(*otg.StreamRateControlType) StreamRateControlType
	// ToProto marshals StreamRateControlType to protobuf object *otg.StreamRateControlType
	ToProto() (*otg.StreamRateControlType, error)
	// ToPbText marshals StreamRateControlType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamRateControlType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamRateControlType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamRateControlType from protobuf object *otg.StreamRateControlType
	FromProto(msg *otg.StreamRateControlType) (StreamRateControlType, error)
	// FromPbText unmarshals StreamRateControlType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamRateControlType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamRateControlType from JSON text
	FromJson(value string) error
	// Validate validates StreamRateControlType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamRateControlType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// RateMode returns StreamRateControlTypeRateModeEnum, set in StreamRateControlType
	RateMode() StreamRateControlTypeRateModeEnum
	// SetRateMode assigns StreamRateControlTypeRateModeEnum provided by user to StreamRateControlType
	SetRateMode(value StreamRateControlTypeRateModeEnum) StreamRateControlType
	// HasRateMode checks if RateMode has been set in StreamRateControlType
	HasRateMode() bool
	// PercentPacketRate returns PFTypePercentType, set in StreamRateControlType.
	// PFTypePercentType is model a percentage using a fixed point representation. A value of 40.5% would be represented as (40 + 500000 / 1e6).
	PercentPacketRate() PFTypePercentType
	// SetPercentPacketRate assigns PFTypePercentType provided by user to StreamRateControlType.
	// PFTypePercentType is model a percentage using a fixed point representation. A value of 40.5% would be represented as (40 + 500000 / 1e6).
	SetPercentPacketRate(value PFTypePercentType) StreamRateControlType
	// HasPercentPacketRate checks if PercentPacketRate has been set in StreamRateControlType
	HasPercentPacketRate() bool
	// FpsRate returns float64, set in StreamRateControlType.
	FpsRate() float64
	// SetFpsRate assigns float64 provided by user to StreamRateControlType
	SetFpsRate(value float64) StreamRateControlType
	// HasFpsRate checks if FpsRate has been set in StreamRateControlType
	HasFpsRate() bool
	// BpsRate returns float64, set in StreamRateControlType.
	BpsRate() float64
	// SetBpsRate assigns float64 provided by user to StreamRateControlType
	SetBpsRate(value float64) StreamRateControlType
	// HasBpsRate checks if BpsRate has been set in StreamRateControlType
	HasBpsRate() bool
	setNil()
}

func (obj *streamRateControlType) populateXml(xObj *Argument) error {

	if obj.HasRateMode() {

		member := Member{
			Name:  "ratemode",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Stream+eRateMode",
			Value: strconv.FormatInt(int64(obj.obj.RateMode.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasFpsRate() {

		member := Member{
			Name: "fpsrate",
			Type: "double",
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasBpsRate() {

		member := Member{
			Name: "bpsrate",
			Type: "double",
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamRateControlType) populateFromXml(xObj *RetVal) error {

	return nil
}

type StreamRateControlTypeRateModeEnum string

// Enum of RateMode on StreamRateControlType
var StreamRateControlTypeRateMode = struct {
	KSTREAMRATEMODEGAP         StreamRateControlTypeRateModeEnum
	KSTREAMRATEMODEPERCENTRATE StreamRateControlTypeRateModeEnum
	KSTREAMRATEMODEFPS         StreamRateControlTypeRateModeEnum
	KSTREAMRATEMODEBPS         StreamRateControlTypeRateModeEnum
}{
	KSTREAMRATEMODEGAP:         StreamRateControlTypeRateModeEnum("kStreamRateModeGap"),
	KSTREAMRATEMODEPERCENTRATE: StreamRateControlTypeRateModeEnum("kStreamRateModePercentRate"),
	KSTREAMRATEMODEFPS:         StreamRateControlTypeRateModeEnum("kStreamRateModeFps"),
	KSTREAMRATEMODEBPS:         StreamRateControlTypeRateModeEnum("kStreamRateModeBps"),
}

func (obj *streamRateControlType) RateMode() StreamRateControlTypeRateModeEnum {
	return StreamRateControlTypeRateModeEnum(obj.obj.RateMode.Enum().String())
}

// Specifies whether to use the ifg or percentPacketRate to calculate   stream gap.
// RateMode returns a string
func (obj *streamRateControlType) HasRateMode() bool {
	return obj.obj.RateMode != nil
}

func (obj *streamRateControlType) SetRateMode(value StreamRateControlTypeRateModeEnum) StreamRateControlType {
	intValue, ok := otg.StreamRateControlType_RateMode_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on StreamRateControlTypeRateModeEnum", string(value)))
		return obj
	}
	enumValue := otg.StreamRateControlType_RateMode_Enum(intValue)
	obj.obj.RateMode = &enumValue

	return obj
}

// If rateMode is set to kUsePercentRate, then use this value as a   percent of maximum transmit rate for this stream. This command   sets all three gaps: IFG, IBG and ISG.
// PercentPacketRate returns a PFTypePercentType
func (obj *streamRateControlType) PercentPacketRate() PFTypePercentType {
	if obj.obj.PercentPacketRate == nil {
		obj.obj.PercentPacketRate = NewPFTypePercentType().Msg()
	}
	if obj.percentPacketRateHolder == nil {
		obj.percentPacketRateHolder = &pFTypePercentType{obj: obj.obj.PercentPacketRate}
	}
	return obj.percentPacketRateHolder
}

// If rateMode is set to kUsePercentRate, then use this value as a   percent of maximum transmit rate for this stream. This command   sets all three gaps: IFG, IBG and ISG.
// PercentPacketRate returns a PFTypePercentType
func (obj *streamRateControlType) HasPercentPacketRate() bool {
	return obj.obj.PercentPacketRate != nil
}

// If rateMode is set to kUsePercentRate, then use this value as a   percent of maximum transmit rate for this stream. This command   sets all three gaps: IFG, IBG and ISG.
// SetPercentPacketRate sets the PFTypePercentType value in the StreamRateControlType object
func (obj *streamRateControlType) SetPercentPacketRate(value PFTypePercentType) StreamRateControlType {

	obj.percentPacketRateHolder = nil
	obj.obj.PercentPacketRate = value.Msg()

	return obj
}

// If rateMode is set to streamRateModeFps, then use this value the   desired frames per second.
// FpsRate returns a float64
func (obj *streamRateControlType) FpsRate() float64 {

	return *obj.obj.FpsRate

}

// If rateMode is set to streamRateModeFps, then use this value the   desired frames per second.
// FpsRate returns a float64
func (obj *streamRateControlType) HasFpsRate() bool {
	return obj.obj.FpsRate != nil
}

// If rateMode is set to streamRateModeFps, then use this value the   desired frames per second.
// SetFpsRate sets the float64 value in the StreamRateControlType object
func (obj *streamRateControlType) SetFpsRate(value float64) StreamRateControlType {

	obj.obj.FpsRate = &value
	return obj
}

// If rateMode is set to kStreamRateModeBps, then use this value for the   desired bits per second.
// BpsRate returns a float64
func (obj *streamRateControlType) BpsRate() float64 {

	return *obj.obj.BpsRate

}

// If rateMode is set to kStreamRateModeBps, then use this value for the   desired bits per second.
// BpsRate returns a float64
func (obj *streamRateControlType) HasBpsRate() bool {
	return obj.obj.BpsRate != nil
}

// If rateMode is set to kStreamRateModeBps, then use this value for the   desired bits per second.
// SetBpsRate sets the float64 value in the StreamRateControlType object
func (obj *streamRateControlType) SetBpsRate(value float64) StreamRateControlType {

	obj.obj.BpsRate = &value
	return obj
}

func (obj *streamRateControlType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PercentPacketRate != nil {

		obj.PercentPacketRate().validateObj(vObj, set_default)
	}

}

func (obj *streamRateControlType) setDefault() {

}

// ***** StreamInterBurstGapControlType *****
type streamInterBurstGapControlType struct {
	validation
	obj              *otg.StreamInterBurstGapControlType
	ibgHolder        PFTypeGapTimeType
	ibgPreciseHolder PFTypeGapPrecisionTimeType
}

func NewStreamInterBurstGapControlType() StreamInterBurstGapControlType {
	obj := streamInterBurstGapControlType{obj: &otg.StreamInterBurstGapControlType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamInterBurstGapControlType) Msg() *otg.StreamInterBurstGapControlType {
	return obj.obj
}

func (obj *streamInterBurstGapControlType) SetMsg(msg *otg.StreamInterBurstGapControlType) StreamInterBurstGapControlType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamInterBurstGapControlType) ToProto() (*otg.StreamInterBurstGapControlType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamInterBurstGapControlType) FromProto(msg *otg.StreamInterBurstGapControlType) (StreamInterBurstGapControlType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamInterBurstGapControlType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamInterBurstGapControlType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamInterBurstGapControlType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamInterBurstGapControlType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamInterBurstGapControlType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamInterBurstGapControlType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamInterBurstGapControlType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamInterBurstGapControlType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamInterBurstGapControlType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamInterBurstGapControlType) Clone() (StreamInterBurstGapControlType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamInterBurstGapControlType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamInterBurstGapControlType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamInterBurstGapControlType) setNil() {
	obj.ibgHolder = nil
	obj.ibgPreciseHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamInterBurstGapControlType is tBD
type StreamInterBurstGapControlType interface {
	Validation
	// Msg marshals StreamInterBurstGapControlType to protobuf object *otg.StreamInterBurstGapControlType
	// and doesn't set defaults
	Msg() *otg.StreamInterBurstGapControlType
	// SetMsg unmarshals StreamInterBurstGapControlType from protobuf object *otg.StreamInterBurstGapControlType
	// and doesn't set defaults
	SetMsg(*otg.StreamInterBurstGapControlType) StreamInterBurstGapControlType
	// ToProto marshals StreamInterBurstGapControlType to protobuf object *otg.StreamInterBurstGapControlType
	ToProto() (*otg.StreamInterBurstGapControlType, error)
	// ToPbText marshals StreamInterBurstGapControlType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamInterBurstGapControlType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamInterBurstGapControlType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamInterBurstGapControlType from protobuf object *otg.StreamInterBurstGapControlType
	FromProto(msg *otg.StreamInterBurstGapControlType) (StreamInterBurstGapControlType, error)
	// FromPbText unmarshals StreamInterBurstGapControlType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamInterBurstGapControlType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamInterBurstGapControlType from JSON text
	FromJson(value string) error
	// Validate validates StreamInterBurstGapControlType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamInterBurstGapControlType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// EnableIbg returns bool, set in StreamInterBurstGapControlType.
	EnableIbg() bool
	// SetEnableIbg assigns bool provided by user to StreamInterBurstGapControlType
	SetEnableIbg(value bool) StreamInterBurstGapControlType
	// HasEnableIbg checks if EnableIbg has been set in StreamInterBurstGapControlType
	HasEnableIbg() bool
	// Ibg returns PFTypeGapTimeType, set in StreamInterBurstGapControlType.
	// PFTypeGapTimeType is model interpacket gap and allow a diversity of units of measurement.
	Ibg() PFTypeGapTimeType
	// SetIbg assigns PFTypeGapTimeType provided by user to StreamInterBurstGapControlType.
	// PFTypeGapTimeType is model interpacket gap and allow a diversity of units of measurement.
	SetIbg(value PFTypeGapTimeType) StreamInterBurstGapControlType
	// HasIbg checks if Ibg has been set in StreamInterBurstGapControlType
	HasIbg() bool
	// IbgPrecise returns PFTypeGapPrecisionTimeType, set in StreamInterBurstGapControlType.
	// PFTypeGapPrecisionTimeType is model interpacket gap with precision and allow a diversity of units of measurement.
	IbgPrecise() PFTypeGapPrecisionTimeType
	// SetIbgPrecise assigns PFTypeGapPrecisionTimeType provided by user to StreamInterBurstGapControlType.
	// PFTypeGapPrecisionTimeType is model interpacket gap with precision and allow a diversity of units of measurement.
	SetIbgPrecise(value PFTypeGapPrecisionTimeType) StreamInterBurstGapControlType
	// HasIbgPrecise checks if IbgPrecise has been set in StreamInterBurstGapControlType
	HasIbgPrecise() bool
	setNil()
}

func (obj *streamInterBurstGapControlType) populateXml(xObj *Argument) error {

	if obj.HasEnableIbg() {
		var value string
		if obj.EnableIbg() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enableibg",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamInterBurstGapControlType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// EnableIbg returns a bool
func (obj *streamInterBurstGapControlType) EnableIbg() bool {

	return *obj.obj.EnableIbg

}

// TBD
// EnableIbg returns a bool
func (obj *streamInterBurstGapControlType) HasEnableIbg() bool {
	return obj.obj.EnableIbg != nil
}

// TBD
// SetEnableIbg sets the bool value in the StreamInterBurstGapControlType object
func (obj *streamInterBurstGapControlType) SetEnableIbg(value bool) StreamInterBurstGapControlType {

	obj.obj.EnableIbg = &value
	return obj
}

// TBD
// Ibg returns a PFTypeGapTimeType
func (obj *streamInterBurstGapControlType) Ibg() PFTypeGapTimeType {
	if obj.obj.Ibg == nil {
		obj.obj.Ibg = NewPFTypeGapTimeType().Msg()
	}
	if obj.ibgHolder == nil {
		obj.ibgHolder = &pFTypeGapTimeType{obj: obj.obj.Ibg}
	}
	return obj.ibgHolder
}

// TBD
// Ibg returns a PFTypeGapTimeType
func (obj *streamInterBurstGapControlType) HasIbg() bool {
	return obj.obj.Ibg != nil
}

// TBD
// SetIbg sets the PFTypeGapTimeType value in the StreamInterBurstGapControlType object
func (obj *streamInterBurstGapControlType) SetIbg(value PFTypeGapTimeType) StreamInterBurstGapControlType {

	obj.ibgHolder = nil
	obj.obj.Ibg = value.Msg()

	return obj
}

// TBD
// IbgPrecise returns a PFTypeGapPrecisionTimeType
func (obj *streamInterBurstGapControlType) IbgPrecise() PFTypeGapPrecisionTimeType {
	if obj.obj.IbgPrecise == nil {
		obj.obj.IbgPrecise = NewPFTypeGapPrecisionTimeType().Msg()
	}
	if obj.ibgPreciseHolder == nil {
		obj.ibgPreciseHolder = &pFTypeGapPrecisionTimeType{obj: obj.obj.IbgPrecise}
	}
	return obj.ibgPreciseHolder
}

// TBD
// IbgPrecise returns a PFTypeGapPrecisionTimeType
func (obj *streamInterBurstGapControlType) HasIbgPrecise() bool {
	return obj.obj.IbgPrecise != nil
}

// TBD
// SetIbgPrecise sets the PFTypeGapPrecisionTimeType value in the StreamInterBurstGapControlType object
func (obj *streamInterBurstGapControlType) SetIbgPrecise(value PFTypeGapPrecisionTimeType) StreamInterBurstGapControlType {

	obj.ibgPreciseHolder = nil
	obj.obj.IbgPrecise = value.Msg()

	return obj
}

func (obj *streamInterBurstGapControlType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Ibg != nil {

		obj.Ibg().validateObj(vObj, set_default)
	}

	if obj.obj.IbgPrecise != nil {

		obj.IbgPrecise().validateObj(vObj, set_default)
	}

}

func (obj *streamInterBurstGapControlType) setDefault() {

}

// ***** StreamInterStreamGapControlType *****
type streamInterStreamGapControlType struct {
	validation
	obj              *otg.StreamInterStreamGapControlType
	isgHolder        PFTypeGapTimeType
	isgPreciseHolder PFTypeGapPrecisionTimeType
}

func NewStreamInterStreamGapControlType() StreamInterStreamGapControlType {
	obj := streamInterStreamGapControlType{obj: &otg.StreamInterStreamGapControlType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamInterStreamGapControlType) Msg() *otg.StreamInterStreamGapControlType {
	return obj.obj
}

func (obj *streamInterStreamGapControlType) SetMsg(msg *otg.StreamInterStreamGapControlType) StreamInterStreamGapControlType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamInterStreamGapControlType) ToProto() (*otg.StreamInterStreamGapControlType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamInterStreamGapControlType) FromProto(msg *otg.StreamInterStreamGapControlType) (StreamInterStreamGapControlType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamInterStreamGapControlType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamInterStreamGapControlType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamInterStreamGapControlType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamInterStreamGapControlType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamInterStreamGapControlType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamInterStreamGapControlType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamInterStreamGapControlType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamInterStreamGapControlType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamInterStreamGapControlType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamInterStreamGapControlType) Clone() (StreamInterStreamGapControlType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamInterStreamGapControlType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamInterStreamGapControlType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamInterStreamGapControlType) setNil() {
	obj.isgHolder = nil
	obj.isgPreciseHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamInterStreamGapControlType is tBD
type StreamInterStreamGapControlType interface {
	Validation
	// Msg marshals StreamInterStreamGapControlType to protobuf object *otg.StreamInterStreamGapControlType
	// and doesn't set defaults
	Msg() *otg.StreamInterStreamGapControlType
	// SetMsg unmarshals StreamInterStreamGapControlType from protobuf object *otg.StreamInterStreamGapControlType
	// and doesn't set defaults
	SetMsg(*otg.StreamInterStreamGapControlType) StreamInterStreamGapControlType
	// ToProto marshals StreamInterStreamGapControlType to protobuf object *otg.StreamInterStreamGapControlType
	ToProto() (*otg.StreamInterStreamGapControlType, error)
	// ToPbText marshals StreamInterStreamGapControlType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamInterStreamGapControlType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamInterStreamGapControlType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamInterStreamGapControlType from protobuf object *otg.StreamInterStreamGapControlType
	FromProto(msg *otg.StreamInterStreamGapControlType) (StreamInterStreamGapControlType, error)
	// FromPbText unmarshals StreamInterStreamGapControlType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamInterStreamGapControlType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamInterStreamGapControlType from JSON text
	FromJson(value string) error
	// Validate validates StreamInterStreamGapControlType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamInterStreamGapControlType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// EnableIsg returns bool, set in StreamInterStreamGapControlType.
	EnableIsg() bool
	// SetEnableIsg assigns bool provided by user to StreamInterStreamGapControlType
	SetEnableIsg(value bool) StreamInterStreamGapControlType
	// HasEnableIsg checks if EnableIsg has been set in StreamInterStreamGapControlType
	HasEnableIsg() bool
	// Isg returns PFTypeGapTimeType, set in StreamInterStreamGapControlType.
	// PFTypeGapTimeType is model interpacket gap and allow a diversity of units of measurement.
	Isg() PFTypeGapTimeType
	// SetIsg assigns PFTypeGapTimeType provided by user to StreamInterStreamGapControlType.
	// PFTypeGapTimeType is model interpacket gap and allow a diversity of units of measurement.
	SetIsg(value PFTypeGapTimeType) StreamInterStreamGapControlType
	// HasIsg checks if Isg has been set in StreamInterStreamGapControlType
	HasIsg() bool
	// IsgPrecise returns PFTypeGapPrecisionTimeType, set in StreamInterStreamGapControlType.
	// PFTypeGapPrecisionTimeType is model interpacket gap with precision and allow a diversity of units of measurement.
	IsgPrecise() PFTypeGapPrecisionTimeType
	// SetIsgPrecise assigns PFTypeGapPrecisionTimeType provided by user to StreamInterStreamGapControlType.
	// PFTypeGapPrecisionTimeType is model interpacket gap with precision and allow a diversity of units of measurement.
	SetIsgPrecise(value PFTypeGapPrecisionTimeType) StreamInterStreamGapControlType
	// HasIsgPrecise checks if IsgPrecise has been set in StreamInterStreamGapControlType
	HasIsgPrecise() bool
	setNil()
}

func (obj *streamInterStreamGapControlType) populateXml(xObj *Argument) error {

	if obj.HasEnableIsg() {
		var value string
		if obj.EnableIsg() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enableisg",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamInterStreamGapControlType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// EnableIsg returns a bool
func (obj *streamInterStreamGapControlType) EnableIsg() bool {

	return *obj.obj.EnableIsg

}

// TBD
// EnableIsg returns a bool
func (obj *streamInterStreamGapControlType) HasEnableIsg() bool {
	return obj.obj.EnableIsg != nil
}

// TBD
// SetEnableIsg sets the bool value in the StreamInterStreamGapControlType object
func (obj *streamInterStreamGapControlType) SetEnableIsg(value bool) StreamInterStreamGapControlType {

	obj.obj.EnableIsg = &value
	return obj
}

// TBD
// Isg returns a PFTypeGapTimeType
func (obj *streamInterStreamGapControlType) Isg() PFTypeGapTimeType {
	if obj.obj.Isg == nil {
		obj.obj.Isg = NewPFTypeGapTimeType().Msg()
	}
	if obj.isgHolder == nil {
		obj.isgHolder = &pFTypeGapTimeType{obj: obj.obj.Isg}
	}
	return obj.isgHolder
}

// TBD
// Isg returns a PFTypeGapTimeType
func (obj *streamInterStreamGapControlType) HasIsg() bool {
	return obj.obj.Isg != nil
}

// TBD
// SetIsg sets the PFTypeGapTimeType value in the StreamInterStreamGapControlType object
func (obj *streamInterStreamGapControlType) SetIsg(value PFTypeGapTimeType) StreamInterStreamGapControlType {

	obj.isgHolder = nil
	obj.obj.Isg = value.Msg()

	return obj
}

// TBD
// IsgPrecise returns a PFTypeGapPrecisionTimeType
func (obj *streamInterStreamGapControlType) IsgPrecise() PFTypeGapPrecisionTimeType {
	if obj.obj.IsgPrecise == nil {
		obj.obj.IsgPrecise = NewPFTypeGapPrecisionTimeType().Msg()
	}
	if obj.isgPreciseHolder == nil {
		obj.isgPreciseHolder = &pFTypeGapPrecisionTimeType{obj: obj.obj.IsgPrecise}
	}
	return obj.isgPreciseHolder
}

// TBD
// IsgPrecise returns a PFTypeGapPrecisionTimeType
func (obj *streamInterStreamGapControlType) HasIsgPrecise() bool {
	return obj.obj.IsgPrecise != nil
}

// TBD
// SetIsgPrecise sets the PFTypeGapPrecisionTimeType value in the StreamInterStreamGapControlType object
func (obj *streamInterStreamGapControlType) SetIsgPrecise(value PFTypeGapPrecisionTimeType) StreamInterStreamGapControlType {

	obj.isgPreciseHolder = nil
	obj.obj.IsgPrecise = value.Msg()

	return obj
}

func (obj *streamInterStreamGapControlType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Isg != nil {

		obj.Isg().validateObj(vObj, set_default)
	}

	if obj.obj.IsgPrecise != nil {

		obj.IsgPrecise().validateObj(vObj, set_default)
	}

}

func (obj *streamInterStreamGapControlType) setDefault() {

}

// ***** StreamDstAddrControlType *****
type streamDstAddrControlType struct {
	validation
	obj                     *otg.StreamDstAddrControlType
	dstAddrHolder           PFTypeMacAddressType
	dstAddrMaskSelectHolder PFTypeMacAddressType
	dstAddrMaskValueHolder  PFTypeMacAddressType
}

func NewStreamDstAddrControlType() StreamDstAddrControlType {
	obj := streamDstAddrControlType{obj: &otg.StreamDstAddrControlType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamDstAddrControlType) Msg() *otg.StreamDstAddrControlType {
	return obj.obj
}

func (obj *streamDstAddrControlType) SetMsg(msg *otg.StreamDstAddrControlType) StreamDstAddrControlType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamDstAddrControlType) ToProto() (*otg.StreamDstAddrControlType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamDstAddrControlType) FromProto(msg *otg.StreamDstAddrControlType) (StreamDstAddrControlType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamDstAddrControlType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamDstAddrControlType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamDstAddrControlType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamDstAddrControlType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamDstAddrControlType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamDstAddrControlType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamDstAddrControlType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamDstAddrControlType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamDstAddrControlType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamDstAddrControlType) Clone() (StreamDstAddrControlType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamDstAddrControlType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamDstAddrControlType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamDstAddrControlType) setNil() {
	obj.dstAddrHolder = nil
	obj.dstAddrMaskSelectHolder = nil
	obj.dstAddrMaskValueHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamDstAddrControlType is tBD
type StreamDstAddrControlType interface {
	Validation
	// Msg marshals StreamDstAddrControlType to protobuf object *otg.StreamDstAddrControlType
	// and doesn't set defaults
	Msg() *otg.StreamDstAddrControlType
	// SetMsg unmarshals StreamDstAddrControlType from protobuf object *otg.StreamDstAddrControlType
	// and doesn't set defaults
	SetMsg(*otg.StreamDstAddrControlType) StreamDstAddrControlType
	// ToProto marshals StreamDstAddrControlType to protobuf object *otg.StreamDstAddrControlType
	ToProto() (*otg.StreamDstAddrControlType, error)
	// ToPbText marshals StreamDstAddrControlType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamDstAddrControlType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamDstAddrControlType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamDstAddrControlType from protobuf object *otg.StreamDstAddrControlType
	FromProto(msg *otg.StreamDstAddrControlType) (StreamDstAddrControlType, error)
	// FromPbText unmarshals StreamDstAddrControlType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamDstAddrControlType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamDstAddrControlType from JSON text
	FromJson(value string) error
	// Validate validates StreamDstAddrControlType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamDstAddrControlType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// DstAddr returns PFTypeMacAddressType, set in StreamDstAddrControlType.
	// PFTypeMacAddressType is the MAC address comprises 48 bits (6 octets) usually denoted using hexadecimal radix as 01:23:45:67:89:ab. The representation is held in the least significant 48 bits of an int64. The most significant 16 bits will be ignored.
	DstAddr() PFTypeMacAddressType
	// SetDstAddr assigns PFTypeMacAddressType provided by user to StreamDstAddrControlType.
	// PFTypeMacAddressType is the MAC address comprises 48 bits (6 octets) usually denoted using hexadecimal radix as 01:23:45:67:89:ab. The representation is held in the least significant 48 bits of an int64. The most significant 16 bits will be ignored.
	SetDstAddr(value PFTypeMacAddressType) StreamDstAddrControlType
	// HasDstAddr checks if DstAddr has been set in StreamDstAddrControlType
	HasDstAddr() bool
	// DstAddrMaskSelect returns PFTypeMacAddressType, set in StreamDstAddrControlType.
	// PFTypeMacAddressType is the MAC address comprises 48 bits (6 octets) usually denoted using hexadecimal radix as 01:23:45:67:89:ab. The representation is held in the least significant 48 bits of an int64. The most significant 16 bits will be ignored.
	DstAddrMaskSelect() PFTypeMacAddressType
	// SetDstAddrMaskSelect assigns PFTypeMacAddressType provided by user to StreamDstAddrControlType.
	// PFTypeMacAddressType is the MAC address comprises 48 bits (6 octets) usually denoted using hexadecimal radix as 01:23:45:67:89:ab. The representation is held in the least significant 48 bits of an int64. The most significant 16 bits will be ignored.
	SetDstAddrMaskSelect(value PFTypeMacAddressType) StreamDstAddrControlType
	// HasDstAddrMaskSelect checks if DstAddrMaskSelect has been set in StreamDstAddrControlType
	HasDstAddrMaskSelect() bool
	// DstAddrMaskValue returns PFTypeMacAddressType, set in StreamDstAddrControlType.
	// PFTypeMacAddressType is the MAC address comprises 48 bits (6 octets) usually denoted using hexadecimal radix as 01:23:45:67:89:ab. The representation is held in the least significant 48 bits of an int64. The most significant 16 bits will be ignored.
	DstAddrMaskValue() PFTypeMacAddressType
	// SetDstAddrMaskValue assigns PFTypeMacAddressType provided by user to StreamDstAddrControlType.
	// PFTypeMacAddressType is the MAC address comprises 48 bits (6 octets) usually denoted using hexadecimal radix as 01:23:45:67:89:ab. The representation is held in the least significant 48 bits of an int64. The most significant 16 bits will be ignored.
	SetDstAddrMaskValue(value PFTypeMacAddressType) StreamDstAddrControlType
	// HasDstAddrMaskValue checks if DstAddrMaskValue has been set in StreamDstAddrControlType
	HasDstAddrMaskValue() bool
	// DstAddrRepeatCounter returns StreamDstAddrControlTypeDstAddrRepeatCounterEnum, set in StreamDstAddrControlType
	DstAddrRepeatCounter() StreamDstAddrControlTypeDstAddrRepeatCounterEnum
	// SetDstAddrRepeatCounter assigns StreamDstAddrControlTypeDstAddrRepeatCounterEnum provided by user to StreamDstAddrControlType
	SetDstAddrRepeatCounter(value StreamDstAddrControlTypeDstAddrRepeatCounterEnum) StreamDstAddrControlType
	// HasDstAddrRepeatCounter checks if DstAddrRepeatCounter has been set in StreamDstAddrControlType
	HasDstAddrRepeatCounter() bool
	// DstAddrStep returns int64, set in StreamDstAddrControlType.
	DstAddrStep() int64
	// SetDstAddrStep assigns int64 provided by user to StreamDstAddrControlType
	SetDstAddrStep(value int64) StreamDstAddrControlType
	// HasDstAddrStep checks if DstAddrStep has been set in StreamDstAddrControlType
	HasDstAddrStep() bool
	// NumDstAddr returns int64, set in StreamDstAddrControlType.
	NumDstAddr() int64
	// SetNumDstAddr assigns int64 provided by user to StreamDstAddrControlType
	SetNumDstAddr(value int64) StreamDstAddrControlType
	// HasNumDstAddr checks if NumDstAddr has been set in StreamDstAddrControlType
	HasNumDstAddr() bool
	// EnableDstAddrContinueFromLastValue returns bool, set in StreamDstAddrControlType.
	EnableDstAddrContinueFromLastValue() bool
	// SetEnableDstAddrContinueFromLastValue assigns bool provided by user to StreamDstAddrControlType
	SetEnableDstAddrContinueFromLastValue(value bool) StreamDstAddrControlType
	// HasEnableDstAddrContinueFromLastValue checks if EnableDstAddrContinueFromLastValue has been set in StreamDstAddrControlType
	HasEnableDstAddrContinueFromLastValue() bool
	setNil()
}

func (obj *streamDstAddrControlType) populateXml(xObj *Argument) error {

	if obj.HasDstAddrRepeatCounter() {

		member := Member{
			Name:  "dstaddrrepeatcounter",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Stream+eAddressRepeatCounter",
			Value: strconv.FormatInt(int64(obj.obj.DstAddrRepeatCounter.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasDstAddrStep() {

		member := Member{
			Name:  "dstaddrstep",
			Type:  "int64",
			Value: strconv.FormatInt(obj.DstAddrStep(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasNumDstAddr() {

		member := Member{
			Name:  "numdstaddr",
			Type:  "int64",
			Value: strconv.FormatInt(obj.NumDstAddr(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableDstAddrContinueFromLastValue() {
		var value string
		if obj.EnableDstAddrContinueFromLastValue() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enabledstaddrcontinuefromlastvalue",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamDstAddrControlType) populateFromXml(xObj *RetVal) error {

	return nil
}

// Initial destination MAC address assigned to this stream.
// DstAddr returns a PFTypeMacAddressType
func (obj *streamDstAddrControlType) DstAddr() PFTypeMacAddressType {
	if obj.obj.DstAddr == nil {
		obj.obj.DstAddr = NewPFTypeMacAddressType().Msg()
	}
	if obj.dstAddrHolder == nil {
		obj.dstAddrHolder = &pFTypeMacAddressType{obj: obj.obj.DstAddr}
	}
	return obj.dstAddrHolder
}

// Initial destination MAC address assigned to this stream.
// DstAddr returns a PFTypeMacAddressType
func (obj *streamDstAddrControlType) HasDstAddr() bool {
	return obj.obj.DstAddr != nil
}

// Initial destination MAC address assigned to this stream.
// SetDstAddr sets the PFTypeMacAddressType value in the StreamDstAddrControlType object
func (obj *streamDstAddrControlType) SetDstAddr(value PFTypeMacAddressType) StreamDstAddrControlType {

	obj.dstAddrHolder = nil
	obj.obj.DstAddr = value.Msg()

	return obj
}

// Selects the bits in the 48-bit destination MAC address that are to be   masked by the value set by mDstAddrMaskValue.
// DstAddrMaskSelect returns a PFTypeMacAddressType
func (obj *streamDstAddrControlType) DstAddrMaskSelect() PFTypeMacAddressType {
	if obj.obj.DstAddrMaskSelect == nil {
		obj.obj.DstAddrMaskSelect = NewPFTypeMacAddressType().Msg()
	}
	if obj.dstAddrMaskSelectHolder == nil {
		obj.dstAddrMaskSelectHolder = &pFTypeMacAddressType{obj: obj.obj.DstAddrMaskSelect}
	}
	return obj.dstAddrMaskSelectHolder
}

// Selects the bits in the 48-bit destination MAC address that are to be   masked by the value set by mDstAddrMaskValue.
// DstAddrMaskSelect returns a PFTypeMacAddressType
func (obj *streamDstAddrControlType) HasDstAddrMaskSelect() bool {
	return obj.obj.DstAddrMaskSelect != nil
}

// Selects the bits in the 48-bit destination MAC address that are to be   masked by the value set by mDstAddrMaskValue.
// SetDstAddrMaskSelect sets the PFTypeMacAddressType value in the StreamDstAddrControlType object
func (obj *streamDstAddrControlType) SetDstAddrMaskSelect(value PFTypeMacAddressType) StreamDstAddrControlType {

	obj.dstAddrMaskSelectHolder = nil
	obj.obj.DstAddrMaskSelect = value.Msg()

	return obj
}

// Value of the masked bits selected by mDstAddrMaskSelect in the   destination MAC address.
// DstAddrMaskValue returns a PFTypeMacAddressType
func (obj *streamDstAddrControlType) DstAddrMaskValue() PFTypeMacAddressType {
	if obj.obj.DstAddrMaskValue == nil {
		obj.obj.DstAddrMaskValue = NewPFTypeMacAddressType().Msg()
	}
	if obj.dstAddrMaskValueHolder == nil {
		obj.dstAddrMaskValueHolder = &pFTypeMacAddressType{obj: obj.obj.DstAddrMaskValue}
	}
	return obj.dstAddrMaskValueHolder
}

// Value of the masked bits selected by mDstAddrMaskSelect in the   destination MAC address.
// DstAddrMaskValue returns a PFTypeMacAddressType
func (obj *streamDstAddrControlType) HasDstAddrMaskValue() bool {
	return obj.obj.DstAddrMaskValue != nil
}

// Value of the masked bits selected by mDstAddrMaskSelect in the   destination MAC address.
// SetDstAddrMaskValue sets the PFTypeMacAddressType value in the StreamDstAddrControlType object
func (obj *streamDstAddrControlType) SetDstAddrMaskValue(value PFTypeMacAddressType) StreamDstAddrControlType {

	obj.dstAddrMaskValueHolder = nil
	obj.obj.DstAddrMaskValue = value.Msg()

	return obj
}

type StreamDstAddrControlTypeDstAddrRepeatCounterEnum string

// Enum of DstAddrRepeatCounter on StreamDstAddrControlType
var StreamDstAddrControlTypeDstAddrRepeatCounter = struct {
	KINCREMENT             StreamDstAddrControlTypeDstAddrRepeatCounterEnum
	KCONTINCREMENT         StreamDstAddrControlTypeDstAddrRepeatCounterEnum
	KDECREMENT             StreamDstAddrControlTypeDstAddrRepeatCounterEnum
	KCONTDECREMENT         StreamDstAddrControlTypeDstAddrRepeatCounterEnum
	KIDLE                  StreamDstAddrControlTypeDstAddrRepeatCounterEnum
	KCTRRANDOM             StreamDstAddrControlTypeDstAddrRepeatCounterEnum
	KDSTADDRARP            StreamDstAddrControlTypeDstAddrRepeatCounterEnum
	KCONTJITTERTESTPATTERN StreamDstAddrControlTypeDstAddrRepeatCounterEnum
	KCONTRANDOMTESTPATTERN StreamDstAddrControlTypeDstAddrRepeatCounterEnum
}{
	KINCREMENT:             StreamDstAddrControlTypeDstAddrRepeatCounterEnum("kIncrement"),
	KCONTINCREMENT:         StreamDstAddrControlTypeDstAddrRepeatCounterEnum("kContIncrement"),
	KDECREMENT:             StreamDstAddrControlTypeDstAddrRepeatCounterEnum("kDecrement"),
	KCONTDECREMENT:         StreamDstAddrControlTypeDstAddrRepeatCounterEnum("kContDecrement"),
	KIDLE:                  StreamDstAddrControlTypeDstAddrRepeatCounterEnum("kIdle"),
	KCTRRANDOM:             StreamDstAddrControlTypeDstAddrRepeatCounterEnum("kCtrRandom"),
	KDSTADDRARP:            StreamDstAddrControlTypeDstAddrRepeatCounterEnum("kDstAddrArp"),
	KCONTJITTERTESTPATTERN: StreamDstAddrControlTypeDstAddrRepeatCounterEnum("kContJitterTestPattern"),
	KCONTRANDOMTESTPATTERN: StreamDstAddrControlTypeDstAddrRepeatCounterEnum("kContRandomTestPattern"),
}

func (obj *streamDstAddrControlType) DstAddrRepeatCounter() StreamDstAddrControlTypeDstAddrRepeatCounterEnum {
	return StreamDstAddrControlTypeDstAddrRepeatCounterEnum(obj.obj.DstAddrRepeatCounter.Enum().String())
}

// Specifies how the destination MAC address is incremented or decremented.
// DstAddrRepeatCounter returns a string
func (obj *streamDstAddrControlType) HasDstAddrRepeatCounter() bool {
	return obj.obj.DstAddrRepeatCounter != nil
}

func (obj *streamDstAddrControlType) SetDstAddrRepeatCounter(value StreamDstAddrControlTypeDstAddrRepeatCounterEnum) StreamDstAddrControlType {
	intValue, ok := otg.StreamDstAddrControlType_DstAddrRepeatCounter_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on StreamDstAddrControlTypeDstAddrRepeatCounterEnum", string(value)))
		return obj
	}
	enumValue := otg.StreamDstAddrControlType_DstAddrRepeatCounter_Enum(intValue)
	obj.obj.DstAddrRepeatCounter = &enumValue

	return obj
}

// If dstRepeatCounter is set to increment, contIncrement, decrement, or   contDecrement, and the load module supports an arbitrary step size,   then this is the value to increment/decrement the destination address   by for each address repetition.
// DstAddrStep returns a int64
func (obj *streamDstAddrControlType) DstAddrStep() int64 {

	return *obj.obj.DstAddrStep

}

// If dstRepeatCounter is set to increment, contIncrement, decrement, or   contDecrement, and the load module supports an arbitrary step size,   then this is the value to increment/decrement the destination address   by for each address repetition.
// DstAddrStep returns a int64
func (obj *streamDstAddrControlType) HasDstAddrStep() bool {
	return obj.obj.DstAddrStep != nil
}

// If dstRepeatCounter is set to increment, contIncrement, decrement, or   contDecrement, and the load module supports an arbitrary step size,   then this is the value to increment/decrement the destination address   by for each address repetition.
// SetDstAddrStep sets the int64 value in the StreamDstAddrControlType object
func (obj *streamDstAddrControlType) SetDstAddrStep(value int64) StreamDstAddrControlType {

	obj.obj.DstAddrStep = &value
	return obj
}

// Number of destination MAC addresses the stream is going to   be transmitted to. Must be more than 1 to set the mDstAddrRepeatCounter   to anything other than idle.
// NumDstAddr returns a int64
func (obj *streamDstAddrControlType) NumDstAddr() int64 {

	return *obj.obj.NumDstAddr

}

// Number of destination MAC addresses the stream is going to   be transmitted to. Must be more than 1 to set the mDstAddrRepeatCounter   to anything other than idle.
// NumDstAddr returns a int64
func (obj *streamDstAddrControlType) HasNumDstAddr() bool {
	return obj.obj.NumDstAddr != nil
}

// Number of destination MAC addresses the stream is going to   be transmitted to. Must be more than 1 to set the mDstAddrRepeatCounter   to anything other than idle.
// SetNumDstAddr sets the int64 value in the StreamDstAddrControlType object
func (obj *streamDstAddrControlType) SetNumDstAddr(value int64) StreamDstAddrControlType {

	obj.obj.NumDstAddr = &value
	return obj
}

// If true, then the MAC Destination Address of the stream will not   reset when returning to a stream ID, but continue from the   previous stream.
// EnableDstAddrContinueFromLastValue returns a bool
func (obj *streamDstAddrControlType) EnableDstAddrContinueFromLastValue() bool {

	return *obj.obj.EnableDstAddrContinueFromLastValue

}

// If true, then the MAC Destination Address of the stream will not   reset when returning to a stream ID, but continue from the   previous stream.
// EnableDstAddrContinueFromLastValue returns a bool
func (obj *streamDstAddrControlType) HasEnableDstAddrContinueFromLastValue() bool {
	return obj.obj.EnableDstAddrContinueFromLastValue != nil
}

// If true, then the MAC Destination Address of the stream will not   reset when returning to a stream ID, but continue from the   previous stream.
// SetEnableDstAddrContinueFromLastValue sets the bool value in the StreamDstAddrControlType object
func (obj *streamDstAddrControlType) SetEnableDstAddrContinueFromLastValue(value bool) StreamDstAddrControlType {

	obj.obj.EnableDstAddrContinueFromLastValue = &value
	return obj
}

func (obj *streamDstAddrControlType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.DstAddr != nil {

		obj.DstAddr().validateObj(vObj, set_default)
	}

	if obj.obj.DstAddrMaskSelect != nil {

		obj.DstAddrMaskSelect().validateObj(vObj, set_default)
	}

	if obj.obj.DstAddrMaskValue != nil {

		obj.DstAddrMaskValue().validateObj(vObj, set_default)
	}

}

func (obj *streamDstAddrControlType) setDefault() {

}

// ***** StreamSrcAddrControlType *****
type streamSrcAddrControlType struct {
	validation
	obj                     *otg.StreamSrcAddrControlType
	srcAddrHolder           PFTypeMacAddressType
	srcAddrMaskSelectHolder PFTypeMacAddressType
	srcAddrMaskValueHolder  PFTypeMacAddressType
}

func NewStreamSrcAddrControlType() StreamSrcAddrControlType {
	obj := streamSrcAddrControlType{obj: &otg.StreamSrcAddrControlType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamSrcAddrControlType) Msg() *otg.StreamSrcAddrControlType {
	return obj.obj
}

func (obj *streamSrcAddrControlType) SetMsg(msg *otg.StreamSrcAddrControlType) StreamSrcAddrControlType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamSrcAddrControlType) ToProto() (*otg.StreamSrcAddrControlType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamSrcAddrControlType) FromProto(msg *otg.StreamSrcAddrControlType) (StreamSrcAddrControlType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamSrcAddrControlType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamSrcAddrControlType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamSrcAddrControlType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamSrcAddrControlType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamSrcAddrControlType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamSrcAddrControlType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamSrcAddrControlType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamSrcAddrControlType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamSrcAddrControlType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamSrcAddrControlType) Clone() (StreamSrcAddrControlType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamSrcAddrControlType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamSrcAddrControlType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamSrcAddrControlType) setNil() {
	obj.srcAddrHolder = nil
	obj.srcAddrMaskSelectHolder = nil
	obj.srcAddrMaskValueHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamSrcAddrControlType is tBD
type StreamSrcAddrControlType interface {
	Validation
	// Msg marshals StreamSrcAddrControlType to protobuf object *otg.StreamSrcAddrControlType
	// and doesn't set defaults
	Msg() *otg.StreamSrcAddrControlType
	// SetMsg unmarshals StreamSrcAddrControlType from protobuf object *otg.StreamSrcAddrControlType
	// and doesn't set defaults
	SetMsg(*otg.StreamSrcAddrControlType) StreamSrcAddrControlType
	// ToProto marshals StreamSrcAddrControlType to protobuf object *otg.StreamSrcAddrControlType
	ToProto() (*otg.StreamSrcAddrControlType, error)
	// ToPbText marshals StreamSrcAddrControlType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamSrcAddrControlType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamSrcAddrControlType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamSrcAddrControlType from protobuf object *otg.StreamSrcAddrControlType
	FromProto(msg *otg.StreamSrcAddrControlType) (StreamSrcAddrControlType, error)
	// FromPbText unmarshals StreamSrcAddrControlType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamSrcAddrControlType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamSrcAddrControlType from JSON text
	FromJson(value string) error
	// Validate validates StreamSrcAddrControlType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamSrcAddrControlType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// SrcAddr returns PFTypeMacAddressType, set in StreamSrcAddrControlType.
	// PFTypeMacAddressType is the MAC address comprises 48 bits (6 octets) usually denoted using hexadecimal radix as 01:23:45:67:89:ab. The representation is held in the least significant 48 bits of an int64. The most significant 16 bits will be ignored.
	SrcAddr() PFTypeMacAddressType
	// SetSrcAddr assigns PFTypeMacAddressType provided by user to StreamSrcAddrControlType.
	// PFTypeMacAddressType is the MAC address comprises 48 bits (6 octets) usually denoted using hexadecimal radix as 01:23:45:67:89:ab. The representation is held in the least significant 48 bits of an int64. The most significant 16 bits will be ignored.
	SetSrcAddr(value PFTypeMacAddressType) StreamSrcAddrControlType
	// HasSrcAddr checks if SrcAddr has been set in StreamSrcAddrControlType
	HasSrcAddr() bool
	// SrcAddrMaskSelect returns PFTypeMacAddressType, set in StreamSrcAddrControlType.
	// PFTypeMacAddressType is the MAC address comprises 48 bits (6 octets) usually denoted using hexadecimal radix as 01:23:45:67:89:ab. The representation is held in the least significant 48 bits of an int64. The most significant 16 bits will be ignored.
	SrcAddrMaskSelect() PFTypeMacAddressType
	// SetSrcAddrMaskSelect assigns PFTypeMacAddressType provided by user to StreamSrcAddrControlType.
	// PFTypeMacAddressType is the MAC address comprises 48 bits (6 octets) usually denoted using hexadecimal radix as 01:23:45:67:89:ab. The representation is held in the least significant 48 bits of an int64. The most significant 16 bits will be ignored.
	SetSrcAddrMaskSelect(value PFTypeMacAddressType) StreamSrcAddrControlType
	// HasSrcAddrMaskSelect checks if SrcAddrMaskSelect has been set in StreamSrcAddrControlType
	HasSrcAddrMaskSelect() bool
	// SrcAddrMaskValue returns PFTypeMacAddressType, set in StreamSrcAddrControlType.
	// PFTypeMacAddressType is the MAC address comprises 48 bits (6 octets) usually denoted using hexadecimal radix as 01:23:45:67:89:ab. The representation is held in the least significant 48 bits of an int64. The most significant 16 bits will be ignored.
	SrcAddrMaskValue() PFTypeMacAddressType
	// SetSrcAddrMaskValue assigns PFTypeMacAddressType provided by user to StreamSrcAddrControlType.
	// PFTypeMacAddressType is the MAC address comprises 48 bits (6 octets) usually denoted using hexadecimal radix as 01:23:45:67:89:ab. The representation is held in the least significant 48 bits of an int64. The most significant 16 bits will be ignored.
	SetSrcAddrMaskValue(value PFTypeMacAddressType) StreamSrcAddrControlType
	// HasSrcAddrMaskValue checks if SrcAddrMaskValue has been set in StreamSrcAddrControlType
	HasSrcAddrMaskValue() bool
	// SrcAddrRepeatCounter returns StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum, set in StreamSrcAddrControlType
	SrcAddrRepeatCounter() StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum
	// SetSrcAddrRepeatCounter assigns StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum provided by user to StreamSrcAddrControlType
	SetSrcAddrRepeatCounter(value StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum) StreamSrcAddrControlType
	// HasSrcAddrRepeatCounter checks if SrcAddrRepeatCounter has been set in StreamSrcAddrControlType
	HasSrcAddrRepeatCounter() bool
	// SrcAddrStep returns int64, set in StreamSrcAddrControlType.
	SrcAddrStep() int64
	// SetSrcAddrStep assigns int64 provided by user to StreamSrcAddrControlType
	SetSrcAddrStep(value int64) StreamSrcAddrControlType
	// HasSrcAddrStep checks if SrcAddrStep has been set in StreamSrcAddrControlType
	HasSrcAddrStep() bool
	// NumSrcAddr returns int64, set in StreamSrcAddrControlType.
	NumSrcAddr() int64
	// SetNumSrcAddr assigns int64 provided by user to StreamSrcAddrControlType
	SetNumSrcAddr(value int64) StreamSrcAddrControlType
	// HasNumSrcAddr checks if NumSrcAddr has been set in StreamSrcAddrControlType
	HasNumSrcAddr() bool
	// EnableSrcContinueFromLastValue returns bool, set in StreamSrcAddrControlType.
	EnableSrcContinueFromLastValue() bool
	// SetEnableSrcContinueFromLastValue assigns bool provided by user to StreamSrcAddrControlType
	SetEnableSrcContinueFromLastValue(value bool) StreamSrcAddrControlType
	// HasEnableSrcContinueFromLastValue checks if EnableSrcContinueFromLastValue has been set in StreamSrcAddrControlType
	HasEnableSrcContinueFromLastValue() bool
	setNil()
}

func (obj *streamSrcAddrControlType) populateXml(xObj *Argument) error {

	if obj.HasSrcAddrRepeatCounter() {

		member := Member{
			Name:  "srcaddrrepeatcounter",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Stream+eAddressRepeatCounter",
			Value: strconv.FormatInt(int64(obj.obj.SrcAddrRepeatCounter.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSrcAddrStep() {

		member := Member{
			Name:  "srcaddrstep",
			Type:  "int64",
			Value: strconv.FormatInt(obj.SrcAddrStep(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasNumSrcAddr() {

		member := Member{
			Name:  "numsrcaddr",
			Type:  "int64",
			Value: strconv.FormatInt(obj.NumSrcAddr(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableSrcContinueFromLastValue() {
		var value string
		if obj.EnableSrcContinueFromLastValue() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablesrccontinuefromlastvalue",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamSrcAddrControlType) populateFromXml(xObj *RetVal) error {

	return nil
}

// Initial source MAC address assigned to this stream.
// SrcAddr returns a PFTypeMacAddressType
func (obj *streamSrcAddrControlType) SrcAddr() PFTypeMacAddressType {
	if obj.obj.SrcAddr == nil {
		obj.obj.SrcAddr = NewPFTypeMacAddressType().Msg()
	}
	if obj.srcAddrHolder == nil {
		obj.srcAddrHolder = &pFTypeMacAddressType{obj: obj.obj.SrcAddr}
	}
	return obj.srcAddrHolder
}

// Initial source MAC address assigned to this stream.
// SrcAddr returns a PFTypeMacAddressType
func (obj *streamSrcAddrControlType) HasSrcAddr() bool {
	return obj.obj.SrcAddr != nil
}

// Initial source MAC address assigned to this stream.
// SetSrcAddr sets the PFTypeMacAddressType value in the StreamSrcAddrControlType object
func (obj *streamSrcAddrControlType) SetSrcAddr(value PFTypeMacAddressType) StreamSrcAddrControlType {

	obj.srcAddrHolder = nil
	obj.obj.SrcAddr = value.Msg()

	return obj
}

// Selects the bits in the 48-bit source MAC address that are to be   masked by the value set by mDstAddrMaskValue.
// SrcAddrMaskSelect returns a PFTypeMacAddressType
func (obj *streamSrcAddrControlType) SrcAddrMaskSelect() PFTypeMacAddressType {
	if obj.obj.SrcAddrMaskSelect == nil {
		obj.obj.SrcAddrMaskSelect = NewPFTypeMacAddressType().Msg()
	}
	if obj.srcAddrMaskSelectHolder == nil {
		obj.srcAddrMaskSelectHolder = &pFTypeMacAddressType{obj: obj.obj.SrcAddrMaskSelect}
	}
	return obj.srcAddrMaskSelectHolder
}

// Selects the bits in the 48-bit source MAC address that are to be   masked by the value set by mDstAddrMaskValue.
// SrcAddrMaskSelect returns a PFTypeMacAddressType
func (obj *streamSrcAddrControlType) HasSrcAddrMaskSelect() bool {
	return obj.obj.SrcAddrMaskSelect != nil
}

// Selects the bits in the 48-bit source MAC address that are to be   masked by the value set by mDstAddrMaskValue.
// SetSrcAddrMaskSelect sets the PFTypeMacAddressType value in the StreamSrcAddrControlType object
func (obj *streamSrcAddrControlType) SetSrcAddrMaskSelect(value PFTypeMacAddressType) StreamSrcAddrControlType {

	obj.srcAddrMaskSelectHolder = nil
	obj.obj.SrcAddrMaskSelect = value.Msg()

	return obj
}

// Value of the masked bits selected by mSrcAddrMaskSelect in the   source MAC address.
// SrcAddrMaskValue returns a PFTypeMacAddressType
func (obj *streamSrcAddrControlType) SrcAddrMaskValue() PFTypeMacAddressType {
	if obj.obj.SrcAddrMaskValue == nil {
		obj.obj.SrcAddrMaskValue = NewPFTypeMacAddressType().Msg()
	}
	if obj.srcAddrMaskValueHolder == nil {
		obj.srcAddrMaskValueHolder = &pFTypeMacAddressType{obj: obj.obj.SrcAddrMaskValue}
	}
	return obj.srcAddrMaskValueHolder
}

// Value of the masked bits selected by mSrcAddrMaskSelect in the   source MAC address.
// SrcAddrMaskValue returns a PFTypeMacAddressType
func (obj *streamSrcAddrControlType) HasSrcAddrMaskValue() bool {
	return obj.obj.SrcAddrMaskValue != nil
}

// Value of the masked bits selected by mSrcAddrMaskSelect in the   source MAC address.
// SetSrcAddrMaskValue sets the PFTypeMacAddressType value in the StreamSrcAddrControlType object
func (obj *streamSrcAddrControlType) SetSrcAddrMaskValue(value PFTypeMacAddressType) StreamSrcAddrControlType {

	obj.srcAddrMaskValueHolder = nil
	obj.obj.SrcAddrMaskValue = value.Msg()

	return obj
}

type StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum string

// Enum of SrcAddrRepeatCounter on StreamSrcAddrControlType
var StreamSrcAddrControlTypeSrcAddrRepeatCounter = struct {
	KINCREMENT             StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum
	KCONTINCREMENT         StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum
	KDECREMENT             StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum
	KCONTDECREMENT         StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum
	KIDLE                  StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum
	KCTRRANDOM             StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum
	KDSTADDRARP            StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum
	KCONTJITTERTESTPATTERN StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum
	KCONTRANDOMTESTPATTERN StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum
}{
	KINCREMENT:             StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum("kIncrement"),
	KCONTINCREMENT:         StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum("kContIncrement"),
	KDECREMENT:             StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum("kDecrement"),
	KCONTDECREMENT:         StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum("kContDecrement"),
	KIDLE:                  StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum("kIdle"),
	KCTRRANDOM:             StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum("kCtrRandom"),
	KDSTADDRARP:            StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum("kDstAddrArp"),
	KCONTJITTERTESTPATTERN: StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum("kContJitterTestPattern"),
	KCONTRANDOMTESTPATTERN: StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum("kContRandomTestPattern"),
}

func (obj *streamSrcAddrControlType) SrcAddrRepeatCounter() StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum {
	return StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum(obj.obj.SrcAddrRepeatCounter.Enum().String())
}

// Specifies how the source MAC address is incremented or decremented.
// SrcAddrRepeatCounter returns a string
func (obj *streamSrcAddrControlType) HasSrcAddrRepeatCounter() bool {
	return obj.obj.SrcAddrRepeatCounter != nil
}

func (obj *streamSrcAddrControlType) SetSrcAddrRepeatCounter(value StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum) StreamSrcAddrControlType {
	intValue, ok := otg.StreamSrcAddrControlType_SrcAddrRepeatCounter_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on StreamSrcAddrControlTypeSrcAddrRepeatCounterEnum", string(value)))
		return obj
	}
	enumValue := otg.StreamSrcAddrControlType_SrcAddrRepeatCounter_Enum(intValue)
	obj.obj.SrcAddrRepeatCounter = &enumValue

	return obj
}

// If mSrcRepeatCounter is set to increment, contIncrement, decrement, or   contDecrement, and the load module supports an arbitrary step size,   then this is the value to increment/decrement the destination address   by for each address repetition.
// SrcAddrStep returns a int64
func (obj *streamSrcAddrControlType) SrcAddrStep() int64 {

	return *obj.obj.SrcAddrStep

}

// If mSrcRepeatCounter is set to increment, contIncrement, decrement, or   contDecrement, and the load module supports an arbitrary step size,   then this is the value to increment/decrement the destination address   by for each address repetition.
// SrcAddrStep returns a int64
func (obj *streamSrcAddrControlType) HasSrcAddrStep() bool {
	return obj.obj.SrcAddrStep != nil
}

// If mSrcRepeatCounter is set to increment, contIncrement, decrement, or   contDecrement, and the load module supports an arbitrary step size,   then this is the value to increment/decrement the destination address   by for each address repetition.
// SetSrcAddrStep sets the int64 value in the StreamSrcAddrControlType object
func (obj *streamSrcAddrControlType) SetSrcAddrStep(value int64) StreamSrcAddrControlType {

	obj.obj.SrcAddrStep = &value
	return obj
}

// Number of source MAC addresses the stream is going to   be transmitted to. Must be more than 1 to set the mSrcAddrRepeatCounter   to anything other than idle
// NumSrcAddr returns a int64
func (obj *streamSrcAddrControlType) NumSrcAddr() int64 {

	return *obj.obj.NumSrcAddr

}

// Number of source MAC addresses the stream is going to   be transmitted to. Must be more than 1 to set the mSrcAddrRepeatCounter   to anything other than idle
// NumSrcAddr returns a int64
func (obj *streamSrcAddrControlType) HasNumSrcAddr() bool {
	return obj.obj.NumSrcAddr != nil
}

// Number of source MAC addresses the stream is going to   be transmitted to. Must be more than 1 to set the mSrcAddrRepeatCounter   to anything other than idle
// SetNumSrcAddr sets the int64 value in the StreamSrcAddrControlType object
func (obj *streamSrcAddrControlType) SetNumSrcAddr(value int64) StreamSrcAddrControlType {

	obj.obj.NumSrcAddr = &value
	return obj
}

// If true, then the MAC Source Address of the stream will not reset   when returning to a stream ID, but continue from the previous stream.
// EnableSrcContinueFromLastValue returns a bool
func (obj *streamSrcAddrControlType) EnableSrcContinueFromLastValue() bool {

	return *obj.obj.EnableSrcContinueFromLastValue

}

// If true, then the MAC Source Address of the stream will not reset   when returning to a stream ID, but continue from the previous stream.
// EnableSrcContinueFromLastValue returns a bool
func (obj *streamSrcAddrControlType) HasEnableSrcContinueFromLastValue() bool {
	return obj.obj.EnableSrcContinueFromLastValue != nil
}

// If true, then the MAC Source Address of the stream will not reset   when returning to a stream ID, but continue from the previous stream.
// SetEnableSrcContinueFromLastValue sets the bool value in the StreamSrcAddrControlType object
func (obj *streamSrcAddrControlType) SetEnableSrcContinueFromLastValue(value bool) StreamSrcAddrControlType {

	obj.obj.EnableSrcContinueFromLastValue = &value
	return obj
}

func (obj *streamSrcAddrControlType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.SrcAddr != nil {

		obj.SrcAddr().validateObj(vObj, set_default)
	}

	if obj.obj.SrcAddrMaskSelect != nil {

		obj.SrcAddrMaskSelect().validateObj(vObj, set_default)
	}

	if obj.obj.SrcAddrMaskValue != nil {

		obj.SrcAddrMaskValue().validateObj(vObj, set_default)
	}

}

func (obj *streamSrcAddrControlType) setDefault() {

}

// ***** StreamFrameControlType *****
type streamFrameControlType struct {
	validation
	obj                         *otg.StreamFrameControlType
	framePreemptionTypeHolder   StreamFramePreemptionType
	averageFrameSizeHolder      PFTypeFixedPoint16
	randomSizeControlTypeHolder StreamRandomSizeControlType
}

func NewStreamFrameControlType() StreamFrameControlType {
	obj := streamFrameControlType{obj: &otg.StreamFrameControlType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamFrameControlType) Msg() *otg.StreamFrameControlType {
	return obj.obj
}

func (obj *streamFrameControlType) SetMsg(msg *otg.StreamFrameControlType) StreamFrameControlType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamFrameControlType) ToProto() (*otg.StreamFrameControlType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamFrameControlType) FromProto(msg *otg.StreamFrameControlType) (StreamFrameControlType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamFrameControlType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamFrameControlType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamFrameControlType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamFrameControlType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamFrameControlType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamFrameControlType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamFrameControlType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamFrameControlType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamFrameControlType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamFrameControlType) Clone() (StreamFrameControlType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamFrameControlType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamFrameControlType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamFrameControlType) setNil() {
	obj.framePreemptionTypeHolder = nil
	obj.averageFrameSizeHolder = nil
	obj.randomSizeControlTypeHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamFrameControlType is tBD
type StreamFrameControlType interface {
	Validation
	// Msg marshals StreamFrameControlType to protobuf object *otg.StreamFrameControlType
	// and doesn't set defaults
	Msg() *otg.StreamFrameControlType
	// SetMsg unmarshals StreamFrameControlType from protobuf object *otg.StreamFrameControlType
	// and doesn't set defaults
	SetMsg(*otg.StreamFrameControlType) StreamFrameControlType
	// ToProto marshals StreamFrameControlType to protobuf object *otg.StreamFrameControlType
	ToProto() (*otg.StreamFrameControlType, error)
	// ToPbText marshals StreamFrameControlType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamFrameControlType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamFrameControlType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamFrameControlType from protobuf object *otg.StreamFrameControlType
	FromProto(msg *otg.StreamFrameControlType) (StreamFrameControlType, error)
	// FromPbText unmarshals StreamFrameControlType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamFrameControlType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamFrameControlType from JSON text
	FromJson(value string) error
	// Validate validates StreamFrameControlType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamFrameControlType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// FramePreemptionType returns StreamFramePreemptionType, set in StreamFrameControlType.
	// StreamFramePreemptionType is models parameters to support Tx Frame Preemption
	FramePreemptionType() StreamFramePreemptionType
	// SetFramePreemptionType assigns StreamFramePreemptionType provided by user to StreamFrameControlType.
	// StreamFramePreemptionType is models parameters to support Tx Frame Preemption
	SetFramePreemptionType(value StreamFramePreemptionType) StreamFrameControlType
	// HasFramePreemptionType checks if FramePreemptionType has been set in StreamFrameControlType
	HasFramePreemptionType() bool
	// FrameSizeType returns StreamFrameControlTypeFrameSizeTypeEnum, set in StreamFrameControlType
	FrameSizeType() StreamFrameControlTypeFrameSizeTypeEnum
	// SetFrameSizeType assigns StreamFrameControlTypeFrameSizeTypeEnum provided by user to StreamFrameControlType
	SetFrameSizeType(value StreamFrameControlTypeFrameSizeTypeEnum) StreamFrameControlType
	// HasFrameSizeType checks if FrameSizeType has been set in StreamFrameControlType
	HasFrameSizeType() bool
	// FrameType returns int32, set in StreamFrameControlType.
	FrameType() int32
	// SetFrameType assigns int32 provided by user to StreamFrameControlType
	SetFrameType(value int32) StreamFrameControlType
	// HasFrameType checks if FrameType has been set in StreamFrameControlType
	HasFrameType() bool
	// AverageFrameSize returns PFTypeFixedPoint16, set in StreamFrameControlType.
	// PFTypeFixedPoint16 is this arithmetic type represents an unsigned fixed point number with 16 bits following the binary point.
	AverageFrameSize() PFTypeFixedPoint16
	// SetAverageFrameSize assigns PFTypeFixedPoint16 provided by user to StreamFrameControlType.
	// PFTypeFixedPoint16 is this arithmetic type represents an unsigned fixed point number with 16 bits following the binary point.
	SetAverageFrameSize(value PFTypeFixedPoint16) StreamFrameControlType
	// HasAverageFrameSize checks if AverageFrameSize has been set in StreamFrameControlType
	HasAverageFrameSize() bool
	// FrameSize returns int32, set in StreamFrameControlType.
	FrameSize() int32
	// SetFrameSize assigns int32 provided by user to StreamFrameControlType
	SetFrameSize(value int32) StreamFrameControlType
	// HasFrameSize checks if FrameSize has been set in StreamFrameControlType
	HasFrameSize() bool
	// FrameSizeStep returns int32, set in StreamFrameControlType.
	FrameSizeStep() int32
	// SetFrameSizeStep assigns int32 provided by user to StreamFrameControlType
	SetFrameSizeStep(value int32) StreamFrameControlType
	// HasFrameSizeStep checks if FrameSizeStep has been set in StreamFrameControlType
	HasFrameSizeStep() bool
	// FrameSizeCount returns int32, set in StreamFrameControlType.
	FrameSizeCount() int32
	// SetFrameSizeCount assigns int32 provided by user to StreamFrameControlType
	SetFrameSizeCount(value int32) StreamFrameControlType
	// HasFrameSizeCount checks if FrameSizeCount has been set in StreamFrameControlType
	HasFrameSizeCount() bool
	// FrameSizeMax returns int32, set in StreamFrameControlType.
	FrameSizeMax() int32
	// SetFrameSizeMax assigns int32 provided by user to StreamFrameControlType
	SetFrameSizeMax(value int32) StreamFrameControlType
	// HasFrameSizeMax checks if FrameSizeMax has been set in StreamFrameControlType
	HasFrameSizeMax() bool
	// FrameSizeMin returns int32, set in StreamFrameControlType.
	FrameSizeMin() int32
	// SetFrameSizeMin assigns int32 provided by user to StreamFrameControlType
	SetFrameSizeMin(value int32) StreamFrameControlType
	// HasFrameSizeMin checks if FrameSizeMin has been set in StreamFrameControlType
	HasFrameSizeMin() bool
	// EnforceMinGap returns int64, set in StreamFrameControlType.
	EnforceMinGap() int64
	// SetEnforceMinGap assigns int64 provided by user to StreamFrameControlType
	SetEnforceMinGap(value int64) StreamFrameControlType
	// HasEnforceMinGap checks if EnforceMinGap has been set in StreamFrameControlType
	HasEnforceMinGap() bool
	// PreambleData returns string, set in StreamFrameControlType.
	PreambleData() string
	// SetPreambleData assigns string provided by user to StreamFrameControlType
	SetPreambleData(value string) StreamFrameControlType
	// HasPreambleData checks if PreambleData has been set in StreamFrameControlType
	HasPreambleData() bool
	// PreambleDataLength returns int32, set in StreamFrameControlType.
	PreambleDataLength() int32
	// SetPreambleDataLength assigns int32 provided by user to StreamFrameControlType
	SetPreambleDataLength(value int32) StreamFrameControlType
	// HasPreambleDataLength checks if PreambleDataLength has been set in StreamFrameControlType
	HasPreambleDataLength() bool
	// PatternType returns StreamFrameControlTypePatternTypeEnum, set in StreamFrameControlType
	PatternType() StreamFrameControlTypePatternTypeEnum
	// SetPatternType assigns StreamFrameControlTypePatternTypeEnum provided by user to StreamFrameControlType
	SetPatternType(value StreamFrameControlTypePatternTypeEnum) StreamFrameControlType
	// HasPatternType checks if PatternType has been set in StreamFrameControlType
	HasPatternType() bool
	// FcsError returns StreamFrameControlTypeFcsErrorEnum, set in StreamFrameControlType
	FcsError() StreamFrameControlTypeFcsErrorEnum
	// SetFcsError assigns StreamFrameControlTypeFcsErrorEnum provided by user to StreamFrameControlType
	SetFcsError(value StreamFrameControlTypeFcsErrorEnum) StreamFrameControlType
	// HasFcsError checks if FcsError has been set in StreamFrameControlType
	HasFcsError() bool
	// EnableTimestamp returns bool, set in StreamFrameControlType.
	EnableTimestamp() bool
	// SetEnableTimestamp assigns bool provided by user to StreamFrameControlType
	SetEnableTimestamp(value bool) StreamFrameControlType
	// HasEnableTimestamp checks if EnableTimestamp has been set in StreamFrameControlType
	HasEnableTimestamp() bool
	// RandomSizeControlType returns StreamRandomSizeControlType, set in StreamFrameControlType.
	// StreamRandomSizeControlType is tBD
	RandomSizeControlType() StreamRandomSizeControlType
	// SetRandomSizeControlType assigns StreamRandomSizeControlType provided by user to StreamFrameControlType.
	// StreamRandomSizeControlType is tBD
	SetRandomSizeControlType(value StreamRandomSizeControlType) StreamFrameControlType
	// HasRandomSizeControlType checks if RandomSizeControlType has been set in StreamFrameControlType
	HasRandomSizeControlType() bool
	setNil()
}

func (obj *streamFrameControlType) populateXml(xObj *Argument) error {

	if obj.HasFrameSizeType() {

		member := Member{
			Name:  "framesizetype",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Stream+eFrameSizeType",
			Value: strconv.FormatInt(int64(obj.obj.FrameSizeType.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasFrameType() {

		member := Member{
			Name:  "frametype",
			Type:  "int16",
			Value: strconv.FormatInt(int64(obj.FrameType()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasFrameSize() {

		member := Member{
			Name:  "framesize",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.FrameSize()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasFrameSizeStep() {

		member := Member{
			Name:  "framesizestep",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.FrameSizeStep()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasFrameSizeCount() {

		member := Member{
			Name:  "framesizecount",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.FrameSizeCount()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasFrameSizeMax() {

		member := Member{
			Name:  "framesizemax",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.FrameSizeMax()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasFrameSizeMin() {

		member := Member{
			Name:  "framesizemin",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.FrameSizeMin()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnforceMinGap() {

		member := Member{
			Name:  "enforcemingap",
			Type:  "int64",
			Value: strconv.FormatInt(obj.EnforceMinGap(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasPreambleData() {

		member := Member{
			Name:  "preambledata",
			Type:  "octets",
			Value: obj.PreambleData(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasPreambleDataLength() {

		member := Member{
			Name:  "preambledatalength",
			Type:  "int16",
			Value: strconv.FormatInt(int64(obj.PreambleDataLength()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasPatternType() {

		member := Member{
			Name:  "patterntype",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Stream+ePatternType",
			Value: strconv.FormatInt(int64(obj.obj.PatternType.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasFcsError() {

		member := Member{
			Name:  "fcserror",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Stream+eFcsError",
			Value: strconv.FormatInt(int64(obj.obj.FcsError.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableTimestamp() {
		var value string
		if obj.EnableTimestamp() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enabletimestamp",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamFrameControlType) populateFromXml(xObj *RetVal) error {

	return nil
}

// Models parameters to support Tx Frame Preemption
// FramePreemptionType returns a StreamFramePreemptionType
func (obj *streamFrameControlType) FramePreemptionType() StreamFramePreemptionType {
	if obj.obj.FramePreemptionType == nil {
		obj.obj.FramePreemptionType = NewStreamFramePreemptionType().Msg()
	}
	if obj.framePreemptionTypeHolder == nil {
		obj.framePreemptionTypeHolder = &streamFramePreemptionType{obj: obj.obj.FramePreemptionType}
	}
	return obj.framePreemptionTypeHolder
}

// Models parameters to support Tx Frame Preemption
// FramePreemptionType returns a StreamFramePreemptionType
func (obj *streamFrameControlType) HasFramePreemptionType() bool {
	return obj.obj.FramePreemptionType != nil
}

// Models parameters to support Tx Frame Preemption
// SetFramePreemptionType sets the StreamFramePreemptionType value in the StreamFrameControlType object
func (obj *streamFrameControlType) SetFramePreemptionType(value StreamFramePreemptionType) StreamFrameControlType {

	obj.framePreemptionTypeHolder = nil
	obj.obj.FramePreemptionType = value.Msg()

	return obj
}

type StreamFrameControlTypeFrameSizeTypeEnum string

// Enum of FrameSizeType on StreamFrameControlType
var StreamFrameControlTypeFrameSizeType = struct {
	KSIZEFIXED  StreamFrameControlTypeFrameSizeTypeEnum
	KSIZERANDOM StreamFrameControlTypeFrameSizeTypeEnum
	KSIZEINCR   StreamFrameControlTypeFrameSizeTypeEnum
	KSIZEAUTO   StreamFrameControlTypeFrameSizeTypeEnum
}{
	KSIZEFIXED:  StreamFrameControlTypeFrameSizeTypeEnum("kSizeFixed"),
	KSIZERANDOM: StreamFrameControlTypeFrameSizeTypeEnum("kSizeRandom"),
	KSIZEINCR:   StreamFrameControlTypeFrameSizeTypeEnum("kSizeIncr"),
	KSIZEAUTO:   StreamFrameControlTypeFrameSizeTypeEnum("kSizeAuto"),
}

func (obj *streamFrameControlType) FrameSizeType() StreamFrameControlTypeFrameSizeTypeEnum {
	return StreamFrameControlTypeFrameSizeTypeEnum(obj.obj.FrameSizeType.Enum().String())
}

// TBD
// FrameSizeType returns a string
func (obj *streamFrameControlType) HasFrameSizeType() bool {
	return obj.obj.FrameSizeType != nil
}

func (obj *streamFrameControlType) SetFrameSizeType(value StreamFrameControlTypeFrameSizeTypeEnum) StreamFrameControlType {
	intValue, ok := otg.StreamFrameControlType_FrameSizeType_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on StreamFrameControlTypeFrameSizeTypeEnum", string(value)))
		return obj
	}
	enumValue := otg.StreamFrameControlType_FrameSizeType_Enum(intValue)
	obj.obj.FrameSizeType = &enumValue

	return obj
}

// The type field in the Ethernet frame, which does not apply to the   MAC layer frames.
// FrameType returns a int32
func (obj *streamFrameControlType) FrameType() int32 {

	return *obj.obj.FrameType

}

// The type field in the Ethernet frame, which does not apply to the   MAC layer frames.
// FrameType returns a int32
func (obj *streamFrameControlType) HasFrameType() bool {
	return obj.obj.FrameType != nil
}

// The type field in the Ethernet frame, which does not apply to the   MAC layer frames.
// SetFrameType sets the int32 value in the StreamFrameControlType object
func (obj *streamFrameControlType) SetFrameType(value int32) StreamFrameControlType {

	obj.obj.FrameType = &value
	return obj
}

// The computed average number of bytes per frame. This will equal   frameSize in simple cases, but will have a fractional component   in more complex scenarios.
// AverageFrameSize returns a PFTypeFixedPoint16
func (obj *streamFrameControlType) AverageFrameSize() PFTypeFixedPoint16 {
	if obj.obj.AverageFrameSize == nil {
		obj.obj.AverageFrameSize = NewPFTypeFixedPoint16().Msg()
	}
	if obj.averageFrameSizeHolder == nil {
		obj.averageFrameSizeHolder = &pFTypeFixedPoint16{obj: obj.obj.AverageFrameSize}
	}
	return obj.averageFrameSizeHolder
}

// The computed average number of bytes per frame. This will equal   frameSize in simple cases, but will have a fractional component   in more complex scenarios.
// AverageFrameSize returns a PFTypeFixedPoint16
func (obj *streamFrameControlType) HasAverageFrameSize() bool {
	return obj.obj.AverageFrameSize != nil
}

// The computed average number of bytes per frame. This will equal   frameSize in simple cases, but will have a fractional component   in more complex scenarios.
// SetAverageFrameSize sets the PFTypeFixedPoint16 value in the StreamFrameControlType object
func (obj *streamFrameControlType) SetAverageFrameSize(value PFTypeFixedPoint16) StreamFrameControlType {

	obj.averageFrameSizeHolder = nil
	obj.obj.AverageFrameSize = value.Msg()

	return obj
}

// Number of bytes in each frame in the stream. If frameSizeType is   set to sizeFixed, all frames in the stream have the same size. If   frameSizeType is set to sizeIncr then the initial frame has this size.
// FrameSize returns a int32
func (obj *streamFrameControlType) FrameSize() int32 {

	return *obj.obj.FrameSize

}

// Number of bytes in each frame in the stream. If frameSizeType is   set to sizeFixed, all frames in the stream have the same size. If   frameSizeType is set to sizeIncr then the initial frame has this size.
// FrameSize returns a int32
func (obj *streamFrameControlType) HasFrameSize() bool {
	return obj.obj.FrameSize != nil
}

// Number of bytes in each frame in the stream. If frameSizeType is   set to sizeFixed, all frames in the stream have the same size. If   frameSizeType is set to sizeIncr then the initial frame has this size.
// SetFrameSize sets the int32 value in the StreamFrameControlType object
func (obj *streamFrameControlType) SetFrameSize(value int32) StreamFrameControlType {

	obj.obj.FrameSize = &value
	return obj
}

// If frameSizeType is set to sizeIncr and the load module supports an   arbitrary step size, then this is the value to increment the frame   size by for each repetition.
// FrameSizeStep returns a int32
func (obj *streamFrameControlType) FrameSizeStep() int32 {

	return *obj.obj.FrameSizeStep

}

// If frameSizeType is set to sizeIncr and the load module supports an   arbitrary step size, then this is the value to increment the frame   size by for each repetition.
// FrameSizeStep returns a int32
func (obj *streamFrameControlType) HasFrameSizeStep() bool {
	return obj.obj.FrameSizeStep != nil
}

// If frameSizeType is set to sizeIncr and the load module supports an   arbitrary step size, then this is the value to increment the frame   size by for each repetition.
// SetFrameSizeStep sets the int32 value in the StreamFrameControlType object
func (obj *streamFrameControlType) SetFrameSizeStep(value int32) StreamFrameControlType {

	obj.obj.FrameSizeStep = &value
	return obj
}

// If frameSizeType is set to sizeIncr and the load module supports an   arbitrary step size, then the frame is incremented this many times   before resetting.
// FrameSizeCount returns a int32
func (obj *streamFrameControlType) FrameSizeCount() int32 {

	return *obj.obj.FrameSizeCount

}

// If frameSizeType is set to sizeIncr and the load module supports an   arbitrary step size, then the frame is incremented this many times   before resetting.
// FrameSizeCount returns a int32
func (obj *streamFrameControlType) HasFrameSizeCount() bool {
	return obj.obj.FrameSizeCount != nil
}

// If frameSizeType is set to sizeIncr and the load module supports an   arbitrary step size, then the frame is incremented this many times   before resetting.
// SetFrameSizeCount sets the int32 value in the StreamFrameControlType object
func (obj *streamFrameControlType) SetFrameSizeCount(value int32) StreamFrameControlType {

	obj.obj.FrameSizeCount = &value
	return obj
}

// The maximum frame size to be used when frame size of type sizeRandom   is selected.
// FrameSizeMax returns a int32
func (obj *streamFrameControlType) FrameSizeMax() int32 {

	return *obj.obj.FrameSizeMax

}

// The maximum frame size to be used when frame size of type sizeRandom   is selected.
// FrameSizeMax returns a int32
func (obj *streamFrameControlType) HasFrameSizeMax() bool {
	return obj.obj.FrameSizeMax != nil
}

// The maximum frame size to be used when frame size of type sizeRandom   is selected.
// SetFrameSizeMax sets the int32 value in the StreamFrameControlType object
func (obj *streamFrameControlType) SetFrameSizeMax(value int32) StreamFrameControlType {

	obj.obj.FrameSizeMax = &value
	return obj
}

// The minimum frame size to be used when frame size of type sizeRandom   is selected.
// FrameSizeMin returns a int32
func (obj *streamFrameControlType) FrameSizeMin() int32 {

	return *obj.obj.FrameSizeMin

}

// The minimum frame size to be used when frame size of type sizeRandom   is selected.
// FrameSizeMin returns a int32
func (obj *streamFrameControlType) HasFrameSizeMin() bool {
	return obj.obj.FrameSizeMin != nil
}

// The minimum frame size to be used when frame size of type sizeRandom   is selected.
// SetFrameSizeMin sets the int32 value in the StreamFrameControlType object
func (obj *streamFrameControlType) SetFrameSizeMin(value int32) StreamFrameControlType {

	obj.obj.FrameSizeMin = &value
	return obj
}

// When a port which supports this feature is in Advanced Scheduler Mode,   then this is the minimum gap that is ever inserted between packets.   The smallest value supported is 3.
// EnforceMinGap returns a int64
func (obj *streamFrameControlType) EnforceMinGap() int64 {

	return *obj.obj.EnforceMinGap

}

// When a port which supports this feature is in Advanced Scheduler Mode,   then this is the minimum gap that is ever inserted between packets.   The smallest value supported is 3.
// EnforceMinGap returns a int64
func (obj *streamFrameControlType) HasEnforceMinGap() bool {
	return obj.obj.EnforceMinGap != nil
}

// When a port which supports this feature is in Advanced Scheduler Mode,   then this is the minimum gap that is ever inserted between packets.   The smallest value supported is 3.
// SetEnforceMinGap sets the int64 value in the StreamFrameControlType object
func (obj *streamFrameControlType) SetEnforceMinGap(value int64) StreamFrameControlType {

	obj.obj.EnforceMinGap = &value
	return obj
}

// (10 Gigabit modules only) The 8 bytes in the preamble of the   10 Gigabit Ethernet frame. For SFD Detect Mode, Bytes 2 through 7   are configurable. For Byte Count Mode, Bytes 2 through 8 are   configurable. There must be at least two bytes in the preamble,   and at most 255.
// PreambleData returns a string
func (obj *streamFrameControlType) PreambleData() string {

	return *obj.obj.PreambleData

}

// (10 Gigabit modules only) The 8 bytes in the preamble of the   10 Gigabit Ethernet frame. For SFD Detect Mode, Bytes 2 through 7   are configurable. For Byte Count Mode, Bytes 2 through 8 are   configurable. There must be at least two bytes in the preamble,   and at most 255.
// PreambleData returns a string
func (obj *streamFrameControlType) HasPreambleData() bool {
	return obj.obj.PreambleData != nil
}

// (10 Gigabit modules only) The 8 bytes in the preamble of the   10 Gigabit Ethernet frame. For SFD Detect Mode, Bytes 2 through 7   are configurable. For Byte Count Mode, Bytes 2 through 8 are   configurable. There must be at least two bytes in the preamble,   and at most 255.
// SetPreambleData sets the string value in the StreamFrameControlType object
func (obj *streamFrameControlType) SetPreambleData(value string) StreamFrameControlType {

	obj.obj.PreambleData = &value
	return obj
}

// preambleDataLength field is length of preambleData will be used    in custom preamble feature.
// PreambleDataLength returns a int32
func (obj *streamFrameControlType) PreambleDataLength() int32 {

	return *obj.obj.PreambleDataLength

}

// preambleDataLength field is length of preambleData will be used    in custom preamble feature.
// PreambleDataLength returns a int32
func (obj *streamFrameControlType) HasPreambleDataLength() bool {
	return obj.obj.PreambleDataLength != nil
}

// preambleDataLength field is length of preambleData will be used    in custom preamble feature.
// SetPreambleDataLength sets the int32 value in the StreamFrameControlType object
func (obj *streamFrameControlType) SetPreambleDataLength(value int32) StreamFrameControlType {

	obj.obj.PreambleDataLength = &value
	return obj
}

type StreamFrameControlTypePatternTypeEnum string

// Enum of PatternType on StreamFrameControlType
var StreamFrameControlTypePatternType = struct {
	KRANDOM        StreamFrameControlTypePatternTypeEnum
	KINCRBYTE      StreamFrameControlTypePatternTypeEnum
	KINCRWORD      StreamFrameControlTypePatternTypeEnum
	KDECRBYTE      StreamFrameControlTypePatternTypeEnum
	KDECRWORD      StreamFrameControlTypePatternTypeEnum
	KPATTERN       StreamFrameControlTypePatternTypeEnum
	KREPEATPATTERN StreamFrameControlTypePatternTypeEnum
}{
	KRANDOM:        StreamFrameControlTypePatternTypeEnum("kRandom"),
	KINCRBYTE:      StreamFrameControlTypePatternTypeEnum("kIncrByte"),
	KINCRWORD:      StreamFrameControlTypePatternTypeEnum("kIncrWord"),
	KDECRBYTE:      StreamFrameControlTypePatternTypeEnum("kDecrByte"),
	KDECRWORD:      StreamFrameControlTypePatternTypeEnum("kDecrWord"),
	KPATTERN:       StreamFrameControlTypePatternTypeEnum("kPattern"),
	KREPEATPATTERN: StreamFrameControlTypePatternTypeEnum("kRepeatPattern"),
}

func (obj *streamFrameControlType) PatternType() StreamFrameControlTypePatternTypeEnum {
	return StreamFrameControlTypePatternTypeEnum(obj.obj.PatternType.Enum().String())
}

// Type of given patterns that is inserted in all the frames   transmitted on this stream.
// PatternType returns a string
func (obj *streamFrameControlType) HasPatternType() bool {
	return obj.obj.PatternType != nil
}

func (obj *streamFrameControlType) SetPatternType(value StreamFrameControlTypePatternTypeEnum) StreamFrameControlType {
	intValue, ok := otg.StreamFrameControlType_PatternType_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on StreamFrameControlTypePatternTypeEnum", string(value)))
		return obj
	}
	enumValue := otg.StreamFrameControlType_PatternType_Enum(intValue)
	obj.obj.PatternType = &enumValue

	return obj
}

type StreamFrameControlTypeFcsErrorEnum string

// Enum of FcsError on StreamFrameControlType
var StreamFrameControlTypeFcsError = struct {
	KSTREAMERRORGOOD      StreamFrameControlTypeFcsErrorEnum
	KSTREAMERRORALIGNMENT StreamFrameControlTypeFcsErrorEnum
	KSTREAMERRORDRIBBLE   StreamFrameControlTypeFcsErrorEnum
	KSTREAMERRORBADCRC    StreamFrameControlTypeFcsErrorEnum
	KSTREAMERRORNOCRC     StreamFrameControlTypeFcsErrorEnum
}{
	KSTREAMERRORGOOD:      StreamFrameControlTypeFcsErrorEnum("kStreamErrorGood"),
	KSTREAMERRORALIGNMENT: StreamFrameControlTypeFcsErrorEnum("kStreamErrorAlignment"),
	KSTREAMERRORDRIBBLE:   StreamFrameControlTypeFcsErrorEnum("kStreamErrorDribble"),
	KSTREAMERRORBADCRC:    StreamFrameControlTypeFcsErrorEnum("kStreamErrorBadCRC"),
	KSTREAMERRORNOCRC:     StreamFrameControlTypeFcsErrorEnum("kStreamErrorNoCRC"),
}

func (obj *streamFrameControlType) FcsError() StreamFrameControlTypeFcsErrorEnum {
	return StreamFrameControlTypeFcsErrorEnum(obj.obj.FcsError.Enum().String())
}

// The FCS error to be inserted in the frame.
// FcsError returns a string
func (obj *streamFrameControlType) HasFcsError() bool {
	return obj.obj.FcsError != nil
}

func (obj *streamFrameControlType) SetFcsError(value StreamFrameControlTypeFcsErrorEnum) StreamFrameControlType {
	intValue, ok := otg.StreamFrameControlType_FcsError_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on StreamFrameControlTypeFcsErrorEnum", string(value)))
		return obj
	}
	enumValue := otg.StreamFrameControlType_FcsError_Enum(intValue)
	obj.obj.FcsError = &enumValue

	return obj
}

// If true, 6 bytes of timestamp are inserted before the CRC of the frame.   This was previously known as the fir option, which is now deprecated.
// EnableTimestamp returns a bool
func (obj *streamFrameControlType) EnableTimestamp() bool {

	return *obj.obj.EnableTimestamp

}

// If true, 6 bytes of timestamp are inserted before the CRC of the frame.   This was previously known as the fir option, which is now deprecated.
// EnableTimestamp returns a bool
func (obj *streamFrameControlType) HasEnableTimestamp() bool {
	return obj.obj.EnableTimestamp != nil
}

// If true, 6 bytes of timestamp are inserted before the CRC of the frame.   This was previously known as the fir option, which is now deprecated.
// SetEnableTimestamp sets the bool value in the StreamFrameControlType object
func (obj *streamFrameControlType) SetEnableTimestamp(value bool) StreamFrameControlType {

	obj.obj.EnableTimestamp = &value
	return obj
}

// TBD
// RandomSizeControlType returns a StreamRandomSizeControlType
func (obj *streamFrameControlType) RandomSizeControlType() StreamRandomSizeControlType {
	if obj.obj.RandomSizeControlType == nil {
		obj.obj.RandomSizeControlType = NewStreamRandomSizeControlType().Msg()
	}
	if obj.randomSizeControlTypeHolder == nil {
		obj.randomSizeControlTypeHolder = &streamRandomSizeControlType{obj: obj.obj.RandomSizeControlType}
	}
	return obj.randomSizeControlTypeHolder
}

// TBD
// RandomSizeControlType returns a StreamRandomSizeControlType
func (obj *streamFrameControlType) HasRandomSizeControlType() bool {
	return obj.obj.RandomSizeControlType != nil
}

// TBD
// SetRandomSizeControlType sets the StreamRandomSizeControlType value in the StreamFrameControlType object
func (obj *streamFrameControlType) SetRandomSizeControlType(value StreamRandomSizeControlType) StreamFrameControlType {

	obj.randomSizeControlTypeHolder = nil
	obj.obj.RandomSizeControlType = value.Msg()

	return obj
}

func (obj *streamFrameControlType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.FramePreemptionType != nil {

		obj.FramePreemptionType().validateObj(vObj, set_default)
	}

	if obj.obj.AverageFrameSize != nil {

		obj.AverageFrameSize().validateObj(vObj, set_default)
	}

	if obj.obj.RandomSizeControlType != nil {

		obj.RandomSizeControlType().validateObj(vObj, set_default)
	}

}

func (obj *streamFrameControlType) setDefault() {

}

// ***** StreamBackgroundDataControlType *****
type streamBackgroundDataControlType struct {
	validation
	obj                     *otg.StreamBackgroundDataControlType
	backgroundOverlayHolder StreamBackgroundOverlayList
}

func NewStreamBackgroundDataControlType() StreamBackgroundDataControlType {
	obj := streamBackgroundDataControlType{obj: &otg.StreamBackgroundDataControlType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamBackgroundDataControlType) Msg() *otg.StreamBackgroundDataControlType {
	return obj.obj
}

func (obj *streamBackgroundDataControlType) SetMsg(msg *otg.StreamBackgroundDataControlType) StreamBackgroundDataControlType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamBackgroundDataControlType) ToProto() (*otg.StreamBackgroundDataControlType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamBackgroundDataControlType) FromProto(msg *otg.StreamBackgroundDataControlType) (StreamBackgroundDataControlType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamBackgroundDataControlType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamBackgroundDataControlType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamBackgroundDataControlType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamBackgroundDataControlType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamBackgroundDataControlType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamBackgroundDataControlType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamBackgroundDataControlType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamBackgroundDataControlType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamBackgroundDataControlType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamBackgroundDataControlType) Clone() (StreamBackgroundDataControlType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamBackgroundDataControlType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamBackgroundDataControlType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamBackgroundDataControlType) setNil() {
	obj.backgroundOverlayHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamBackgroundDataControlType is tBD
type StreamBackgroundDataControlType interface {
	Validation
	// Msg marshals StreamBackgroundDataControlType to protobuf object *otg.StreamBackgroundDataControlType
	// and doesn't set defaults
	Msg() *otg.StreamBackgroundDataControlType
	// SetMsg unmarshals StreamBackgroundDataControlType from protobuf object *otg.StreamBackgroundDataControlType
	// and doesn't set defaults
	SetMsg(*otg.StreamBackgroundDataControlType) StreamBackgroundDataControlType
	// ToProto marshals StreamBackgroundDataControlType to protobuf object *otg.StreamBackgroundDataControlType
	ToProto() (*otg.StreamBackgroundDataControlType, error)
	// ToPbText marshals StreamBackgroundDataControlType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamBackgroundDataControlType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamBackgroundDataControlType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamBackgroundDataControlType from protobuf object *otg.StreamBackgroundDataControlType
	FromProto(msg *otg.StreamBackgroundDataControlType) (StreamBackgroundDataControlType, error)
	// FromPbText unmarshals StreamBackgroundDataControlType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamBackgroundDataControlType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamBackgroundDataControlType from JSON text
	FromJson(value string) error
	// Validate validates StreamBackgroundDataControlType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamBackgroundDataControlType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Size returns int32, set in StreamBackgroundDataControlType.
	Size() int32
	// SetSize assigns int32 provided by user to StreamBackgroundDataControlType
	SetSize(value int32) StreamBackgroundDataControlType
	// HasSize checks if Size has been set in StreamBackgroundDataControlType
	HasSize() bool
	// BackgroundOverlay returns StreamBackgroundOverlayList, set in StreamBackgroundDataControlType.
	// StreamBackgroundOverlayList is tBD
	BackgroundOverlay() StreamBackgroundOverlayList
	// SetBackgroundOverlay assigns StreamBackgroundOverlayList provided by user to StreamBackgroundDataControlType.
	// StreamBackgroundOverlayList is tBD
	SetBackgroundOverlay(value StreamBackgroundOverlayList) StreamBackgroundDataControlType
	// HasBackgroundOverlay checks if BackgroundOverlay has been set in StreamBackgroundDataControlType
	HasBackgroundOverlay() bool
	setNil()
}

func (obj *streamBackgroundDataControlType) populateXml(xObj *Argument) error {

	if obj.HasSize() {

		member := Member{
			Name:  "size",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Size()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamBackgroundDataControlType) populateFromXml(xObj *RetVal) error {

	return nil
}

// Number of bytes of background data to allocate to this stream.
// Size returns a int32
func (obj *streamBackgroundDataControlType) Size() int32 {

	return *obj.obj.Size

}

// Number of bytes of background data to allocate to this stream.
// Size returns a int32
func (obj *streamBackgroundDataControlType) HasSize() bool {
	return obj.obj.Size != nil
}

// Number of bytes of background data to allocate to this stream.
// SetSize sets the int32 value in the StreamBackgroundDataControlType object
func (obj *streamBackgroundDataControlType) SetSize(value int32) StreamBackgroundDataControlType {

	obj.obj.Size = &value
	return obj
}

// TBD
// BackgroundOverlay returns a StreamBackgroundOverlayList
func (obj *streamBackgroundDataControlType) BackgroundOverlay() StreamBackgroundOverlayList {
	if obj.obj.BackgroundOverlay == nil {
		obj.obj.BackgroundOverlay = NewStreamBackgroundOverlayList().Msg()
	}
	if obj.backgroundOverlayHolder == nil {
		obj.backgroundOverlayHolder = &streamBackgroundOverlayList{obj: obj.obj.BackgroundOverlay}
	}
	return obj.backgroundOverlayHolder
}

// TBD
// BackgroundOverlay returns a StreamBackgroundOverlayList
func (obj *streamBackgroundDataControlType) HasBackgroundOverlay() bool {
	return obj.obj.BackgroundOverlay != nil
}

// TBD
// SetBackgroundOverlay sets the StreamBackgroundOverlayList value in the StreamBackgroundDataControlType object
func (obj *streamBackgroundDataControlType) SetBackgroundOverlay(value StreamBackgroundOverlayList) StreamBackgroundDataControlType {

	obj.backgroundOverlayHolder = nil
	obj.obj.BackgroundOverlay = value.Msg()

	return obj
}

func (obj *streamBackgroundDataControlType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.BackgroundOverlay != nil {

		obj.BackgroundOverlay().validateObj(vObj, set_default)
	}

}

func (obj *streamBackgroundDataControlType) setDefault() {

}

// ***** StreamProtocolHeaderInfoListType *****
type streamProtocolHeaderInfoListType struct {
	validation
	obj                       *otg.StreamProtocolHeaderInfoListType
	specialProtocolInfoHolder StreamSpecialProtocolInfoType
	protocolHeaderHolder      StreamProtocolHeaderInfoList
}

func NewStreamProtocolHeaderInfoListType() StreamProtocolHeaderInfoListType {
	obj := streamProtocolHeaderInfoListType{obj: &otg.StreamProtocolHeaderInfoListType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamProtocolHeaderInfoListType) Msg() *otg.StreamProtocolHeaderInfoListType {
	return obj.obj
}

func (obj *streamProtocolHeaderInfoListType) SetMsg(msg *otg.StreamProtocolHeaderInfoListType) StreamProtocolHeaderInfoListType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamProtocolHeaderInfoListType) ToProto() (*otg.StreamProtocolHeaderInfoListType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamProtocolHeaderInfoListType) FromProto(msg *otg.StreamProtocolHeaderInfoListType) (StreamProtocolHeaderInfoListType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamProtocolHeaderInfoListType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamProtocolHeaderInfoListType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamProtocolHeaderInfoListType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamProtocolHeaderInfoListType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamProtocolHeaderInfoListType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamProtocolHeaderInfoListType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamProtocolHeaderInfoListType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamProtocolHeaderInfoListType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamProtocolHeaderInfoListType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamProtocolHeaderInfoListType) Clone() (StreamProtocolHeaderInfoListType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamProtocolHeaderInfoListType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamProtocolHeaderInfoListType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamProtocolHeaderInfoListType) setNil() {
	obj.specialProtocolInfoHolder = nil
	obj.protocolHeaderHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamProtocolHeaderInfoListType is tBD
type StreamProtocolHeaderInfoListType interface {
	Validation
	// Msg marshals StreamProtocolHeaderInfoListType to protobuf object *otg.StreamProtocolHeaderInfoListType
	// and doesn't set defaults
	Msg() *otg.StreamProtocolHeaderInfoListType
	// SetMsg unmarshals StreamProtocolHeaderInfoListType from protobuf object *otg.StreamProtocolHeaderInfoListType
	// and doesn't set defaults
	SetMsg(*otg.StreamProtocolHeaderInfoListType) StreamProtocolHeaderInfoListType
	// ToProto marshals StreamProtocolHeaderInfoListType to protobuf object *otg.StreamProtocolHeaderInfoListType
	ToProto() (*otg.StreamProtocolHeaderInfoListType, error)
	// ToPbText marshals StreamProtocolHeaderInfoListType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamProtocolHeaderInfoListType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamProtocolHeaderInfoListType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamProtocolHeaderInfoListType from protobuf object *otg.StreamProtocolHeaderInfoListType
	FromProto(msg *otg.StreamProtocolHeaderInfoListType) (StreamProtocolHeaderInfoListType, error)
	// FromPbText unmarshals StreamProtocolHeaderInfoListType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamProtocolHeaderInfoListType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamProtocolHeaderInfoListType from JSON text
	FromJson(value string) error
	// Validate validates StreamProtocolHeaderInfoListType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamProtocolHeaderInfoListType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// SpecialProtocolInfo returns StreamSpecialProtocolInfoType, set in StreamProtocolHeaderInfoListType.
	// StreamSpecialProtocolInfoType is tBD
	SpecialProtocolInfo() StreamSpecialProtocolInfoType
	// SetSpecialProtocolInfo assigns StreamSpecialProtocolInfoType provided by user to StreamProtocolHeaderInfoListType.
	// StreamSpecialProtocolInfoType is tBD
	SetSpecialProtocolInfo(value StreamSpecialProtocolInfoType) StreamProtocolHeaderInfoListType
	// HasSpecialProtocolInfo checks if SpecialProtocolInfo has been set in StreamProtocolHeaderInfoListType
	HasSpecialProtocolInfo() bool
	// ProtocolHeader returns StreamProtocolHeaderInfoList, set in StreamProtocolHeaderInfoListType.
	// StreamProtocolHeaderInfoList is tBD
	ProtocolHeader() StreamProtocolHeaderInfoList
	// SetProtocolHeader assigns StreamProtocolHeaderInfoList provided by user to StreamProtocolHeaderInfoListType.
	// StreamProtocolHeaderInfoList is tBD
	SetProtocolHeader(value StreamProtocolHeaderInfoList) StreamProtocolHeaderInfoListType
	// HasProtocolHeader checks if ProtocolHeader has been set in StreamProtocolHeaderInfoListType
	HasProtocolHeader() bool
	setNil()
}

func (obj *streamProtocolHeaderInfoListType) populateXml(xObj *Argument) error {

	return nil
}

func (obj *streamProtocolHeaderInfoListType) populateFromXml(xObj *RetVal) error {

	return nil
}

// Special (global) protocol header info relevant to special cases.   (unfortunately this is how HW does it)
// SpecialProtocolInfo returns a StreamSpecialProtocolInfoType
func (obj *streamProtocolHeaderInfoListType) SpecialProtocolInfo() StreamSpecialProtocolInfoType {
	if obj.obj.SpecialProtocolInfo == nil {
		obj.obj.SpecialProtocolInfo = NewStreamSpecialProtocolInfoType().Msg()
	}
	if obj.specialProtocolInfoHolder == nil {
		obj.specialProtocolInfoHolder = &streamSpecialProtocolInfoType{obj: obj.obj.SpecialProtocolInfo}
	}
	return obj.specialProtocolInfoHolder
}

// Special (global) protocol header info relevant to special cases.   (unfortunately this is how HW does it)
// SpecialProtocolInfo returns a StreamSpecialProtocolInfoType
func (obj *streamProtocolHeaderInfoListType) HasSpecialProtocolInfo() bool {
	return obj.obj.SpecialProtocolInfo != nil
}

// Special (global) protocol header info relevant to special cases.   (unfortunately this is how HW does it)
// SetSpecialProtocolInfo sets the StreamSpecialProtocolInfoType value in the StreamProtocolHeaderInfoListType object
func (obj *streamProtocolHeaderInfoListType) SetSpecialProtocolInfo(value StreamSpecialProtocolInfoType) StreamProtocolHeaderInfoListType {

	obj.specialProtocolInfoHolder = nil
	obj.obj.SpecialProtocolInfo = value.Msg()

	return obj
}

// List of all the protocol header infos relevant to checksum/length insertion.
// ProtocolHeader returns a StreamProtocolHeaderInfoList
func (obj *streamProtocolHeaderInfoListType) ProtocolHeader() StreamProtocolHeaderInfoList {
	if obj.obj.ProtocolHeader == nil {
		obj.obj.ProtocolHeader = NewStreamProtocolHeaderInfoList().Msg()
	}
	if obj.protocolHeaderHolder == nil {
		obj.protocolHeaderHolder = &streamProtocolHeaderInfoList{obj: obj.obj.ProtocolHeader}
	}
	return obj.protocolHeaderHolder
}

// List of all the protocol header infos relevant to checksum/length insertion.
// ProtocolHeader returns a StreamProtocolHeaderInfoList
func (obj *streamProtocolHeaderInfoListType) HasProtocolHeader() bool {
	return obj.obj.ProtocolHeader != nil
}

// List of all the protocol header infos relevant to checksum/length insertion.
// SetProtocolHeader sets the StreamProtocolHeaderInfoList value in the StreamProtocolHeaderInfoListType object
func (obj *streamProtocolHeaderInfoListType) SetProtocolHeader(value StreamProtocolHeaderInfoList) StreamProtocolHeaderInfoListType {

	obj.protocolHeaderHolder = nil
	obj.obj.ProtocolHeader = value.Msg()

	return obj
}

func (obj *streamProtocolHeaderInfoListType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.SpecialProtocolInfo != nil {

		obj.SpecialProtocolInfo().validateObj(vObj, set_default)
	}

	if obj.obj.ProtocolHeader != nil {

		obj.ProtocolHeader().validateObj(vObj, set_default)
	}

}

func (obj *streamProtocolHeaderInfoListType) setDefault() {

}

// ***** UdfUdfConfigurationType *****
type udfUdfConfigurationType struct {
	validation
	obj           *otg.UdfUdfConfigurationType
	udfListHolder UdfUdfList
}

func NewUdfUdfConfigurationType() UdfUdfConfigurationType {
	obj := udfUdfConfigurationType{obj: &otg.UdfUdfConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *udfUdfConfigurationType) Msg() *otg.UdfUdfConfigurationType {
	return obj.obj
}

func (obj *udfUdfConfigurationType) SetMsg(msg *otg.UdfUdfConfigurationType) UdfUdfConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *udfUdfConfigurationType) ToProto() (*otg.UdfUdfConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *udfUdfConfigurationType) FromProto(msg *otg.UdfUdfConfigurationType) (UdfUdfConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *udfUdfConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *udfUdfConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *udfUdfConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfUdfConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *udfUdfConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfUdfConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *udfUdfConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *udfUdfConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *udfUdfConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *udfUdfConfigurationType) Clone() (UdfUdfConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewUdfUdfConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *udfUdfConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *udfUdfConfigurationType) setNil() {
	obj.udfListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// UdfUdfConfigurationType is tBD
type UdfUdfConfigurationType interface {
	Validation
	// Msg marshals UdfUdfConfigurationType to protobuf object *otg.UdfUdfConfigurationType
	// and doesn't set defaults
	Msg() *otg.UdfUdfConfigurationType
	// SetMsg unmarshals UdfUdfConfigurationType from protobuf object *otg.UdfUdfConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.UdfUdfConfigurationType) UdfUdfConfigurationType
	// ToProto marshals UdfUdfConfigurationType to protobuf object *otg.UdfUdfConfigurationType
	ToProto() (*otg.UdfUdfConfigurationType, error)
	// ToPbText marshals UdfUdfConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals UdfUdfConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals UdfUdfConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals UdfUdfConfigurationType from protobuf object *otg.UdfUdfConfigurationType
	FromProto(msg *otg.UdfUdfConfigurationType) (UdfUdfConfigurationType, error)
	// FromPbText unmarshals UdfUdfConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals UdfUdfConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals UdfUdfConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates UdfUdfConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (UdfUdfConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// UdfList returns UdfUdfList, set in UdfUdfConfigurationType.
	// UdfUdfList is tBD
	UdfList() UdfUdfList
	// SetUdfList assigns UdfUdfList provided by user to UdfUdfConfigurationType.
	// UdfUdfList is tBD
	SetUdfList(value UdfUdfList) UdfUdfConfigurationType
	// HasUdfList checks if UdfList has been set in UdfUdfConfigurationType
	HasUdfList() bool
	setNil()
}

func (obj *udfUdfConfigurationType) populateXml(xObj *Argument) error {

	return nil
}

func (obj *udfUdfConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// UdfList returns a UdfUdfList
func (obj *udfUdfConfigurationType) UdfList() UdfUdfList {
	if obj.obj.UdfList == nil {
		obj.obj.UdfList = NewUdfUdfList().Msg()
	}
	if obj.udfListHolder == nil {
		obj.udfListHolder = &udfUdfList{obj: obj.obj.UdfList}
	}
	return obj.udfListHolder
}

// TBD
// UdfList returns a UdfUdfList
func (obj *udfUdfConfigurationType) HasUdfList() bool {
	return obj.obj.UdfList != nil
}

// TBD
// SetUdfList sets the UdfUdfList value in the UdfUdfConfigurationType object
func (obj *udfUdfConfigurationType) SetUdfList(value UdfUdfList) UdfUdfConfigurationType {

	obj.udfListHolder = nil
	obj.obj.UdfList = value.Msg()

	return obj
}

func (obj *udfUdfConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.UdfList != nil {

		obj.UdfList().validateObj(vObj, set_default)
	}

}

func (obj *udfUdfConfigurationType) setDefault() {

}

// ***** TableUdfTableUdfConfigurationType *****
type tableUdfTableUdfConfigurationType struct {
	validation
	obj           *otg.TableUdfTableUdfConfigurationType
	columnsHolder TableUdfColumnSettingList
}

func NewTableUdfTableUdfConfigurationType() TableUdfTableUdfConfigurationType {
	obj := tableUdfTableUdfConfigurationType{obj: &otg.TableUdfTableUdfConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *tableUdfTableUdfConfigurationType) Msg() *otg.TableUdfTableUdfConfigurationType {
	return obj.obj
}

func (obj *tableUdfTableUdfConfigurationType) SetMsg(msg *otg.TableUdfTableUdfConfigurationType) TableUdfTableUdfConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *tableUdfTableUdfConfigurationType) ToProto() (*otg.TableUdfTableUdfConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *tableUdfTableUdfConfigurationType) FromProto(msg *otg.TableUdfTableUdfConfigurationType) (TableUdfTableUdfConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *tableUdfTableUdfConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *tableUdfTableUdfConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *tableUdfTableUdfConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *tableUdfTableUdfConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *tableUdfTableUdfConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *tableUdfTableUdfConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *tableUdfTableUdfConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *tableUdfTableUdfConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *tableUdfTableUdfConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *tableUdfTableUdfConfigurationType) Clone() (TableUdfTableUdfConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewTableUdfTableUdfConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *tableUdfTableUdfConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *tableUdfTableUdfConfigurationType) setNil() {
	obj.columnsHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// TableUdfTableUdfConfigurationType is tBD
type TableUdfTableUdfConfigurationType interface {
	Validation
	// Msg marshals TableUdfTableUdfConfigurationType to protobuf object *otg.TableUdfTableUdfConfigurationType
	// and doesn't set defaults
	Msg() *otg.TableUdfTableUdfConfigurationType
	// SetMsg unmarshals TableUdfTableUdfConfigurationType from protobuf object *otg.TableUdfTableUdfConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.TableUdfTableUdfConfigurationType) TableUdfTableUdfConfigurationType
	// ToProto marshals TableUdfTableUdfConfigurationType to protobuf object *otg.TableUdfTableUdfConfigurationType
	ToProto() (*otg.TableUdfTableUdfConfigurationType, error)
	// ToPbText marshals TableUdfTableUdfConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals TableUdfTableUdfConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals TableUdfTableUdfConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals TableUdfTableUdfConfigurationType from protobuf object *otg.TableUdfTableUdfConfigurationType
	FromProto(msg *otg.TableUdfTableUdfConfigurationType) (TableUdfTableUdfConfigurationType, error)
	// FromPbText unmarshals TableUdfTableUdfConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals TableUdfTableUdfConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals TableUdfTableUdfConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates TableUdfTableUdfConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (TableUdfTableUdfConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Rows returns int32, set in TableUdfTableUdfConfigurationType.
	Rows() int32
	// SetRows assigns int32 provided by user to TableUdfTableUdfConfigurationType
	SetRows(value int32) TableUdfTableUdfConfigurationType
	// HasRows checks if Rows has been set in TableUdfTableUdfConfigurationType
	HasRows() bool
	// Columns returns TableUdfColumnSettingList, set in TableUdfTableUdfConfigurationType.
	// TableUdfColumnSettingList is tBD
	Columns() TableUdfColumnSettingList
	// SetColumns assigns TableUdfColumnSettingList provided by user to TableUdfTableUdfConfigurationType.
	// TableUdfColumnSettingList is tBD
	SetColumns(value TableUdfColumnSettingList) TableUdfTableUdfConfigurationType
	// HasColumns checks if Columns has been set in TableUdfTableUdfConfigurationType
	HasColumns() bool
	setNil()
}

func (obj *tableUdfTableUdfConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasRows() {

		member := Member{
			Name:  "rows",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Rows()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *tableUdfTableUdfConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// Number of rows to allocate.
// Rows returns a int32
func (obj *tableUdfTableUdfConfigurationType) Rows() int32 {

	return *obj.obj.Rows

}

// Number of rows to allocate.
// Rows returns a int32
func (obj *tableUdfTableUdfConfigurationType) HasRows() bool {
	return obj.obj.Rows != nil
}

// Number of rows to allocate.
// SetRows sets the int32 value in the TableUdfTableUdfConfigurationType object
func (obj *tableUdfTableUdfConfigurationType) SetRows(value int32) TableUdfTableUdfConfigurationType {

	obj.obj.Rows = &value
	return obj
}

// Each column defines the locations within a packet that are to   be modified.
// Columns returns a TableUdfColumnSettingList
func (obj *tableUdfTableUdfConfigurationType) Columns() TableUdfColumnSettingList {
	if obj.obj.Columns == nil {
		obj.obj.Columns = NewTableUdfColumnSettingList().Msg()
	}
	if obj.columnsHolder == nil {
		obj.columnsHolder = &tableUdfColumnSettingList{obj: obj.obj.Columns}
	}
	return obj.columnsHolder
}

// Each column defines the locations within a packet that are to   be modified.
// Columns returns a TableUdfColumnSettingList
func (obj *tableUdfTableUdfConfigurationType) HasColumns() bool {
	return obj.obj.Columns != nil
}

// Each column defines the locations within a packet that are to   be modified.
// SetColumns sets the TableUdfColumnSettingList value in the TableUdfTableUdfConfigurationType object
func (obj *tableUdfTableUdfConfigurationType) SetColumns(value TableUdfColumnSettingList) TableUdfTableUdfConfigurationType {

	obj.columnsHolder = nil
	obj.obj.Columns = value.Msg()

	return obj
}

func (obj *tableUdfTableUdfConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Columns != nil {

		obj.Columns().validateObj(vObj, set_default)
	}

}

func (obj *tableUdfTableUdfConfigurationType) setDefault() {

}

// ***** UdfSequenceUdfConfigurationType *****
type udfSequenceUdfConfigurationType struct {
	validation
	obj                     *otg.UdfSequenceUdfConfigurationType
	associatedGroupIdHolder IdTypeStreamGroupId
	associatedUdfIdHolder   IdTypeUdfId
}

func NewUdfSequenceUdfConfigurationType() UdfSequenceUdfConfigurationType {
	obj := udfSequenceUdfConfigurationType{obj: &otg.UdfSequenceUdfConfigurationType{}}
	obj.setDefault()
	return &obj
}

func (obj *udfSequenceUdfConfigurationType) Msg() *otg.UdfSequenceUdfConfigurationType {
	return obj.obj
}

func (obj *udfSequenceUdfConfigurationType) SetMsg(msg *otg.UdfSequenceUdfConfigurationType) UdfSequenceUdfConfigurationType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *udfSequenceUdfConfigurationType) ToProto() (*otg.UdfSequenceUdfConfigurationType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *udfSequenceUdfConfigurationType) FromProto(msg *otg.UdfSequenceUdfConfigurationType) (UdfSequenceUdfConfigurationType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *udfSequenceUdfConfigurationType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *udfSequenceUdfConfigurationType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *udfSequenceUdfConfigurationType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfSequenceUdfConfigurationType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *udfSequenceUdfConfigurationType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfSequenceUdfConfigurationType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *udfSequenceUdfConfigurationType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *udfSequenceUdfConfigurationType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *udfSequenceUdfConfigurationType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *udfSequenceUdfConfigurationType) Clone() (UdfSequenceUdfConfigurationType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewUdfSequenceUdfConfigurationType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *udfSequenceUdfConfigurationType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *udfSequenceUdfConfigurationType) setNil() {
	obj.associatedGroupIdHolder = nil
	obj.associatedUdfIdHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// UdfSequenceUdfConfigurationType is tBD
type UdfSequenceUdfConfigurationType interface {
	Validation
	// Msg marshals UdfSequenceUdfConfigurationType to protobuf object *otg.UdfSequenceUdfConfigurationType
	// and doesn't set defaults
	Msg() *otg.UdfSequenceUdfConfigurationType
	// SetMsg unmarshals UdfSequenceUdfConfigurationType from protobuf object *otg.UdfSequenceUdfConfigurationType
	// and doesn't set defaults
	SetMsg(*otg.UdfSequenceUdfConfigurationType) UdfSequenceUdfConfigurationType
	// ToProto marshals UdfSequenceUdfConfigurationType to protobuf object *otg.UdfSequenceUdfConfigurationType
	ToProto() (*otg.UdfSequenceUdfConfigurationType, error)
	// ToPbText marshals UdfSequenceUdfConfigurationType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals UdfSequenceUdfConfigurationType to YAML text
	ToYaml() (string, error)
	// ToJson marshals UdfSequenceUdfConfigurationType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals UdfSequenceUdfConfigurationType from protobuf object *otg.UdfSequenceUdfConfigurationType
	FromProto(msg *otg.UdfSequenceUdfConfigurationType) (UdfSequenceUdfConfigurationType, error)
	// FromPbText unmarshals UdfSequenceUdfConfigurationType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals UdfSequenceUdfConfigurationType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals UdfSequenceUdfConfigurationType from JSON text
	FromJson(value string) error
	// Validate validates UdfSequenceUdfConfigurationType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (UdfSequenceUdfConfigurationType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Enable returns bool, set in UdfSequenceUdfConfigurationType.
	Enable() bool
	// SetEnable assigns bool provided by user to UdfSequenceUdfConfigurationType
	SetEnable(value bool) UdfSequenceUdfConfigurationType
	// HasEnable checks if Enable has been set in UdfSequenceUdfConfigurationType
	HasEnable() bool
	// ByteOffset returns int32, set in UdfSequenceUdfConfigurationType.
	ByteOffset() int32
	// SetByteOffset assigns int32 provided by user to UdfSequenceUdfConfigurationType
	SetByteOffset(value int32) UdfSequenceUdfConfigurationType
	// HasByteOffset checks if ByteOffset has been set in UdfSequenceUdfConfigurationType
	HasByteOffset() bool
	// AssociatedGroupId returns IdTypeStreamGroupId, set in UdfSequenceUdfConfigurationType.
	// IdTypeStreamGroupId is tBD
	AssociatedGroupId() IdTypeStreamGroupId
	// SetAssociatedGroupId assigns IdTypeStreamGroupId provided by user to UdfSequenceUdfConfigurationType.
	// IdTypeStreamGroupId is tBD
	SetAssociatedGroupId(value IdTypeStreamGroupId) UdfSequenceUdfConfigurationType
	// HasAssociatedGroupId checks if AssociatedGroupId has been set in UdfSequenceUdfConfigurationType
	HasAssociatedGroupId() bool
	// AssociatedUdfId returns IdTypeUdfId, set in UdfSequenceUdfConfigurationType.
	// IdTypeUdfId is tBD
	AssociatedUdfId() IdTypeUdfId
	// SetAssociatedUdfId assigns IdTypeUdfId provided by user to UdfSequenceUdfConfigurationType.
	// IdTypeUdfId is tBD
	SetAssociatedUdfId(value IdTypeUdfId) UdfSequenceUdfConfigurationType
	// HasAssociatedUdfId checks if AssociatedUdfId has been set in UdfSequenceUdfConfigurationType
	HasAssociatedUdfId() bool
	// AssociatedUdfBitPosition returns int32, set in UdfSequenceUdfConfigurationType.
	AssociatedUdfBitPosition() int32
	// SetAssociatedUdfBitPosition assigns int32 provided by user to UdfSequenceUdfConfigurationType
	SetAssociatedUdfBitPosition(value int32) UdfSequenceUdfConfigurationType
	// HasAssociatedUdfBitPosition checks if AssociatedUdfBitPosition has been set in UdfSequenceUdfConfigurationType
	HasAssociatedUdfBitPosition() bool
	// AssociatedUdfWidth returns int32, set in UdfSequenceUdfConfigurationType.
	AssociatedUdfWidth() int32
	// SetAssociatedUdfWidth assigns int32 provided by user to UdfSequenceUdfConfigurationType
	SetAssociatedUdfWidth(value int32) UdfSequenceUdfConfigurationType
	// HasAssociatedUdfWidth checks if AssociatedUdfWidth has been set in UdfSequenceUdfConfigurationType
	HasAssociatedUdfWidth() bool
	// AssociatedUdfMin returns int32, set in UdfSequenceUdfConfigurationType.
	AssociatedUdfMin() int32
	// SetAssociatedUdfMin assigns int32 provided by user to UdfSequenceUdfConfigurationType
	SetAssociatedUdfMin(value int32) UdfSequenceUdfConfigurationType
	// HasAssociatedUdfMin checks if AssociatedUdfMin has been set in UdfSequenceUdfConfigurationType
	HasAssociatedUdfMin() bool
	// AssociatedUdfMax returns int32, set in UdfSequenceUdfConfigurationType.
	AssociatedUdfMax() int32
	// SetAssociatedUdfMax assigns int32 provided by user to UdfSequenceUdfConfigurationType
	SetAssociatedUdfMax(value int32) UdfSequenceUdfConfigurationType
	// HasAssociatedUdfMax checks if AssociatedUdfMax has been set in UdfSequenceUdfConfigurationType
	HasAssociatedUdfMax() bool
	setNil()
}

func (obj *udfSequenceUdfConfigurationType) populateXml(xObj *Argument) error {

	if obj.HasEnable() {
		var value string
		if obj.Enable() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enable",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasByteOffset() {

		member := Member{
			Name:  "byteoffset",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.ByteOffset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasAssociatedUdfBitPosition() {

		member := Member{
			Name:  "associatedudfbitposition",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.AssociatedUdfBitPosition()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasAssociatedUdfWidth() {

		member := Member{
			Name:  "associatedudfwidth",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.AssociatedUdfWidth()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasAssociatedUdfMin() {

		member := Member{
			Name:  "associatedudfmin",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.AssociatedUdfMin()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasAssociatedUdfMax() {

		member := Member{
			Name:  "associatedudfmax",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.AssociatedUdfMax()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *udfSequenceUdfConfigurationType) populateFromXml(xObj *RetVal) error {

	return nil
}

// Enables the Sequence Number UDF function.
// Enable returns a bool
func (obj *udfSequenceUdfConfigurationType) Enable() bool {

	return *obj.obj.Enable

}

// Enables the Sequence Number UDF function.
// Enable returns a bool
func (obj *udfSequenceUdfConfigurationType) HasEnable() bool {
	return obj.obj.Enable != nil
}

// Enables the Sequence Number UDF function.
// SetEnable sets the bool value in the UdfSequenceUdfConfigurationType object
func (obj *udfSequenceUdfConfigurationType) SetEnable(value bool) UdfSequenceUdfConfigurationType {

	obj.obj.Enable = &value
	return obj
}

// The byte offset where the SequenceNumberUdf is placed.
// ByteOffset returns a int32
func (obj *udfSequenceUdfConfigurationType) ByteOffset() int32 {

	return *obj.obj.ByteOffset

}

// The byte offset where the SequenceNumberUdf is placed.
// ByteOffset returns a int32
func (obj *udfSequenceUdfConfigurationType) HasByteOffset() bool {
	return obj.obj.ByteOffset != nil
}

// The byte offset where the SequenceNumberUdf is placed.
// SetByteOffset sets the int32 value in the UdfSequenceUdfConfigurationType object
func (obj *udfSequenceUdfConfigurationType) SetByteOffset(value int32) UdfSequenceUdfConfigurationType {

	obj.obj.ByteOffset = &value
	return obj
}

// The group to which this stream belongs.
// AssociatedGroupId returns a IdTypeStreamGroupId
func (obj *udfSequenceUdfConfigurationType) AssociatedGroupId() IdTypeStreamGroupId {
	if obj.obj.AssociatedGroupId == nil {
		obj.obj.AssociatedGroupId = NewIdTypeStreamGroupId().Msg()
	}
	if obj.associatedGroupIdHolder == nil {
		obj.associatedGroupIdHolder = &idTypeStreamGroupId{obj: obj.obj.AssociatedGroupId}
	}
	return obj.associatedGroupIdHolder
}

// The group to which this stream belongs.
// AssociatedGroupId returns a IdTypeStreamGroupId
func (obj *udfSequenceUdfConfigurationType) HasAssociatedGroupId() bool {
	return obj.obj.AssociatedGroupId != nil
}

// The group to which this stream belongs.
// SetAssociatedGroupId sets the IdTypeStreamGroupId value in the UdfSequenceUdfConfigurationType object
func (obj *udfSequenceUdfConfigurationType) SetAssociatedGroupId(value IdTypeStreamGroupId) UdfSequenceUdfConfigurationType {

	obj.associatedGroupIdHolder = nil
	obj.obj.AssociatedGroupId = value.Msg()

	return obj
}

// The UDF that serves as the source for the flow number.
// AssociatedUdfId returns a IdTypeUdfId
func (obj *udfSequenceUdfConfigurationType) AssociatedUdfId() IdTypeUdfId {
	if obj.obj.AssociatedUdfId == nil {
		obj.obj.AssociatedUdfId = NewIdTypeUdfId().Msg()
	}
	if obj.associatedUdfIdHolder == nil {
		obj.associatedUdfIdHolder = &idTypeUdfId{obj: obj.obj.AssociatedUdfId}
	}
	return obj.associatedUdfIdHolder
}

// The UDF that serves as the source for the flow number.
// AssociatedUdfId returns a IdTypeUdfId
func (obj *udfSequenceUdfConfigurationType) HasAssociatedUdfId() bool {
	return obj.obj.AssociatedUdfId != nil
}

// The UDF that serves as the source for the flow number.
// SetAssociatedUdfId sets the IdTypeUdfId value in the UdfSequenceUdfConfigurationType object
func (obj *udfSequenceUdfConfigurationType) SetAssociatedUdfId(value IdTypeUdfId) UdfSequenceUdfConfigurationType {

	obj.associatedUdfIdHolder = nil
	obj.obj.AssociatedUdfId = value.Msg()

	return obj
}

// Bit offset of the flow number within the associated Udf.
// AssociatedUdfBitPosition returns a int32
func (obj *udfSequenceUdfConfigurationType) AssociatedUdfBitPosition() int32 {

	return *obj.obj.AssociatedUdfBitPosition

}

// Bit offset of the flow number within the associated Udf.
// AssociatedUdfBitPosition returns a int32
func (obj *udfSequenceUdfConfigurationType) HasAssociatedUdfBitPosition() bool {
	return obj.obj.AssociatedUdfBitPosition != nil
}

// Bit offset of the flow number within the associated Udf.
// SetAssociatedUdfBitPosition sets the int32 value in the UdfSequenceUdfConfigurationType object
func (obj *udfSequenceUdfConfigurationType) SetAssociatedUdfBitPosition(value int32) UdfSequenceUdfConfigurationType {

	obj.obj.AssociatedUdfBitPosition = &value
	return obj
}

// Width to use for the associated Udf. The value ranges from 1-32.
// AssociatedUdfWidth returns a int32
func (obj *udfSequenceUdfConfigurationType) AssociatedUdfWidth() int32 {

	return *obj.obj.AssociatedUdfWidth

}

// Width to use for the associated Udf. The value ranges from 1-32.
// AssociatedUdfWidth returns a int32
func (obj *udfSequenceUdfConfigurationType) HasAssociatedUdfWidth() bool {
	return obj.obj.AssociatedUdfWidth != nil
}

// Width to use for the associated Udf. The value ranges from 1-32.
// SetAssociatedUdfWidth sets the int32 value in the UdfSequenceUdfConfigurationType object
func (obj *udfSequenceUdfConfigurationType) SetAssociatedUdfWidth(value int32) UdfSequenceUdfConfigurationType {

	obj.obj.AssociatedUdfWidth = &value
	return obj
}

// The minimum value of the associated Udf. Must be less than UdfMax.
// AssociatedUdfMin returns a int32
func (obj *udfSequenceUdfConfigurationType) AssociatedUdfMin() int32 {

	return *obj.obj.AssociatedUdfMin

}

// The minimum value of the associated Udf. Must be less than UdfMax.
// AssociatedUdfMin returns a int32
func (obj *udfSequenceUdfConfigurationType) HasAssociatedUdfMin() bool {
	return obj.obj.AssociatedUdfMin != nil
}

// The minimum value of the associated Udf. Must be less than UdfMax.
// SetAssociatedUdfMin sets the int32 value in the UdfSequenceUdfConfigurationType object
func (obj *udfSequenceUdfConfigurationType) SetAssociatedUdfMin(value int32) UdfSequenceUdfConfigurationType {

	obj.obj.AssociatedUdfMin = &value
	return obj
}

// The maximum value of the associated Udf.
// AssociatedUdfMax returns a int32
func (obj *udfSequenceUdfConfigurationType) AssociatedUdfMax() int32 {

	return *obj.obj.AssociatedUdfMax

}

// The maximum value of the associated Udf.
// AssociatedUdfMax returns a int32
func (obj *udfSequenceUdfConfigurationType) HasAssociatedUdfMax() bool {
	return obj.obj.AssociatedUdfMax != nil
}

// The maximum value of the associated Udf.
// SetAssociatedUdfMax sets the int32 value in the UdfSequenceUdfConfigurationType object
func (obj *udfSequenceUdfConfigurationType) SetAssociatedUdfMax(value int32) UdfSequenceUdfConfigurationType {

	obj.obj.AssociatedUdfMax = &value
	return obj
}

func (obj *udfSequenceUdfConfigurationType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.AssociatedGroupId != nil {

		obj.AssociatedGroupId().validateObj(vObj, set_default)
	}

	if obj.obj.AssociatedUdfId != nil {

		obj.AssociatedUdfId().validateObj(vObj, set_default)
	}

}

func (obj *udfSequenceUdfConfigurationType) setDefault() {

}

// ***** StreamDataIntegrityTxType *****
type streamDataIntegrityTxType struct {
	validation
	obj *otg.StreamDataIntegrityTxType
}

func NewStreamDataIntegrityTxType() StreamDataIntegrityTxType {
	obj := streamDataIntegrityTxType{obj: &otg.StreamDataIntegrityTxType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamDataIntegrityTxType) Msg() *otg.StreamDataIntegrityTxType {
	return obj.obj
}

func (obj *streamDataIntegrityTxType) SetMsg(msg *otg.StreamDataIntegrityTxType) StreamDataIntegrityTxType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamDataIntegrityTxType) ToProto() (*otg.StreamDataIntegrityTxType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamDataIntegrityTxType) FromProto(msg *otg.StreamDataIntegrityTxType) (StreamDataIntegrityTxType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamDataIntegrityTxType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamDataIntegrityTxType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamDataIntegrityTxType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamDataIntegrityTxType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamDataIntegrityTxType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamDataIntegrityTxType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamDataIntegrityTxType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamDataIntegrityTxType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamDataIntegrityTxType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamDataIntegrityTxType) Clone() (StreamDataIntegrityTxType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamDataIntegrityTxType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamDataIntegrityTxType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// StreamDataIntegrityTxType is tBD
type StreamDataIntegrityTxType interface {
	Validation
	// Msg marshals StreamDataIntegrityTxType to protobuf object *otg.StreamDataIntegrityTxType
	// and doesn't set defaults
	Msg() *otg.StreamDataIntegrityTxType
	// SetMsg unmarshals StreamDataIntegrityTxType from protobuf object *otg.StreamDataIntegrityTxType
	// and doesn't set defaults
	SetMsg(*otg.StreamDataIntegrityTxType) StreamDataIntegrityTxType
	// ToProto marshals StreamDataIntegrityTxType to protobuf object *otg.StreamDataIntegrityTxType
	ToProto() (*otg.StreamDataIntegrityTxType, error)
	// ToPbText marshals StreamDataIntegrityTxType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamDataIntegrityTxType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamDataIntegrityTxType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamDataIntegrityTxType from protobuf object *otg.StreamDataIntegrityTxType
	FromProto(msg *otg.StreamDataIntegrityTxType) (StreamDataIntegrityTxType, error)
	// FromPbText unmarshals StreamDataIntegrityTxType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamDataIntegrityTxType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamDataIntegrityTxType from JSON text
	FromJson(value string) error
	// Validate validates StreamDataIntegrityTxType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamDataIntegrityTxType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Enable returns bool, set in StreamDataIntegrityTxType.
	Enable() bool
	// SetEnable assigns bool provided by user to StreamDataIntegrityTxType
	SetEnable(value bool) StreamDataIntegrityTxType
	// HasEnable checks if Enable has been set in StreamDataIntegrityTxType
	HasEnable() bool
	// InsertSignature returns bool, set in StreamDataIntegrityTxType.
	InsertSignature() bool
	// SetInsertSignature assigns bool provided by user to StreamDataIntegrityTxType
	SetInsertSignature(value bool) StreamDataIntegrityTxType
	// HasInsertSignature checks if InsertSignature has been set in StreamDataIntegrityTxType
	HasInsertSignature() bool
	// Signature returns string, set in StreamDataIntegrityTxType.
	Signature() string
	// SetSignature assigns string provided by user to StreamDataIntegrityTxType
	SetSignature(value string) StreamDataIntegrityTxType
	// HasSignature checks if Signature has been set in StreamDataIntegrityTxType
	HasSignature() bool
	// SignatureOffset returns int32, set in StreamDataIntegrityTxType.
	SignatureOffset() int32
	// SetSignatureOffset assigns int32 provided by user to StreamDataIntegrityTxType
	SetSignatureOffset(value int32) StreamDataIntegrityTxType
	// HasSignatureOffset checks if SignatureOffset has been set in StreamDataIntegrityTxType
	HasSignatureOffset() bool
	// DataIntegrityMode returns StreamDataIntegrityTxTypeDataIntegrityModeEnum, set in StreamDataIntegrityTxType
	DataIntegrityMode() StreamDataIntegrityTxTypeDataIntegrityModeEnum
	// SetDataIntegrityMode assigns StreamDataIntegrityTxTypeDataIntegrityModeEnum provided by user to StreamDataIntegrityTxType
	SetDataIntegrityMode(value StreamDataIntegrityTxTypeDataIntegrityModeEnum) StreamDataIntegrityTxType
	// HasDataIntegrityMode checks if DataIntegrityMode has been set in StreamDataIntegrityTxType
	HasDataIntegrityMode() bool
	// NumBytesFromEndOfFrame returns int32, set in StreamDataIntegrityTxType.
	NumBytesFromEndOfFrame() int32
	// SetNumBytesFromEndOfFrame assigns int32 provided by user to StreamDataIntegrityTxType
	SetNumBytesFromEndOfFrame(value int32) StreamDataIntegrityTxType
	// HasNumBytesFromEndOfFrame checks if NumBytesFromEndOfFrame has been set in StreamDataIntegrityTxType
	HasNumBytesFromEndOfFrame() bool
	// PayloadLength returns int32, set in StreamDataIntegrityTxType.
	PayloadLength() int32
	// SetPayloadLength assigns int32 provided by user to StreamDataIntegrityTxType
	SetPayloadLength(value int32) StreamDataIntegrityTxType
	// HasPayloadLength checks if PayloadLength has been set in StreamDataIntegrityTxType
	HasPayloadLength() bool
}

func (obj *streamDataIntegrityTxType) populateXml(xObj *Argument) error {

	if obj.HasEnable() {
		var value string
		if obj.Enable() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enable",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasInsertSignature() {
		var value string
		if obj.InsertSignature() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "insertsignature",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSignature() {

		member := Member{
			Name:  "signature",
			Type:  "octets",
			Value: obj.Signature(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSignatureOffset() {

		member := Member{
			Name:  "signatureoffset",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.SignatureOffset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasDataIntegrityMode() {

		member := Member{
			Name:  "dataintegritymode",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Stream+eDataIntegrityMode",
			Value: strconv.FormatInt(int64(obj.obj.DataIntegrityMode.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasNumBytesFromEndOfFrame() {

		member := Member{
			Name:  "numbytesfromendofframe",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.NumBytesFromEndOfFrame()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasPayloadLength() {

		member := Member{
			Name:  "payloadlength",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.PayloadLength()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamDataIntegrityTxType) populateFromXml(xObj *RetVal) error {

	return nil
}

// Indicates Whether data Integrity is Enabled or not.
// Enable returns a bool
func (obj *streamDataIntegrityTxType) Enable() bool {

	return *obj.obj.Enable

}

// Indicates Whether data Integrity is Enabled or not.
// Enable returns a bool
func (obj *streamDataIntegrityTxType) HasEnable() bool {
	return obj.obj.Enable != nil
}

// Indicates Whether data Integrity is Enabled or not.
// SetEnable sets the bool value in the StreamDataIntegrityTxType object
func (obj *streamDataIntegrityTxType) SetEnable(value bool) StreamDataIntegrityTxType {

	obj.obj.Enable = &value
	return obj
}

// Indicates that the data integrity signature shall be inserted into the   transmitted stream.
// InsertSignature returns a bool
func (obj *streamDataIntegrityTxType) InsertSignature() bool {

	return *obj.obj.InsertSignature

}

// Indicates that the data integrity signature shall be inserted into the   transmitted stream.
// InsertSignature returns a bool
func (obj *streamDataIntegrityTxType) HasInsertSignature() bool {
	return obj.obj.InsertSignature != nil
}

// Indicates that the data integrity signature shall be inserted into the   transmitted stream.
// SetInsertSignature sets the bool value in the StreamDataIntegrityTxType object
func (obj *streamDataIntegrityTxType) SetInsertSignature(value bool) StreamDataIntegrityTxType {

	obj.obj.InsertSignature = &value
	return obj
}

// In the transmitted packet, the signature uniquely identifies the    transmitted packet as one destined for receive port data integrity   filtering.  Default = '08 71 18 05'.
// Signature returns a string
func (obj *streamDataIntegrityTxType) Signature() string {

	return *obj.obj.Signature

}

// In the transmitted packet, the signature uniquely identifies the    transmitted packet as one destined for receive port data integrity   filtering.  Default = '08 71 18 05'.
// Signature returns a string
func (obj *streamDataIntegrityTxType) HasSignature() bool {
	return obj.obj.Signature != nil
}

// In the transmitted packet, the signature uniquely identifies the    transmitted packet as one destined for receive port data integrity   filtering.  Default = '08 71 18 05'.
// SetSignature sets the string value in the StreamDataIntegrityTxType object
func (obj *streamDataIntegrityTxType) SetSignature(value string) StreamDataIntegrityTxType {

	obj.obj.Signature = &value
	return obj
}

// The offset, within the packet, of the data integrity signature.
// SignatureOffset returns a int32
func (obj *streamDataIntegrityTxType) SignatureOffset() int32 {

	return *obj.obj.SignatureOffset

}

// The offset, within the packet, of the data integrity signature.
// SignatureOffset returns a int32
func (obj *streamDataIntegrityTxType) HasSignatureOffset() bool {
	return obj.obj.SignatureOffset != nil
}

// The offset, within the packet, of the data integrity signature.
// SetSignatureOffset sets the int32 value in the StreamDataIntegrityTxType object
func (obj *streamDataIntegrityTxType) SetSignatureOffset(value int32) StreamDataIntegrityTxType {

	obj.obj.SignatureOffset = &value
	return obj
}

type StreamDataIntegrityTxTypeDataIntegrityModeEnum string

// Enum of DataIntegrityMode on StreamDataIntegrityTxType
var StreamDataIntegrityTxTypeDataIntegrityMode = struct {
	KAUTO                        StreamDataIntegrityTxTypeDataIntegrityModeEnum
	KNUMBEROFBYTESFROMENDOFFRAME StreamDataIntegrityTxTypeDataIntegrityModeEnum
	KPAYLOADLENGTH               StreamDataIntegrityTxTypeDataIntegrityModeEnum
}{
	KAUTO:                        StreamDataIntegrityTxTypeDataIntegrityModeEnum("kAuto"),
	KNUMBEROFBYTESFROMENDOFFRAME: StreamDataIntegrityTxTypeDataIntegrityModeEnum("kNumberOfBytesFromEndOfFrame"),
	KPAYLOADLENGTH:               StreamDataIntegrityTxTypeDataIntegrityModeEnum("kPayloadLength"),
}

func (obj *streamDataIntegrityTxType) DataIntegrityMode() StreamDataIntegrityTxTypeDataIntegrityModeEnum {
	return StreamDataIntegrityTxTypeDataIntegrityModeEnum(obj.obj.DataIntegrityMode.Enum().String())
}

// Enables adding timestamp or data integrity checking as part of the   floating instrumentation header.
// DataIntegrityMode returns a string
func (obj *streamDataIntegrityTxType) HasDataIntegrityMode() bool {
	return obj.obj.DataIntegrityMode != nil
}

func (obj *streamDataIntegrityTxType) SetDataIntegrityMode(value StreamDataIntegrityTxTypeDataIntegrityModeEnum) StreamDataIntegrityTxType {
	intValue, ok := otg.StreamDataIntegrityTxType_DataIntegrityMode_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on StreamDataIntegrityTxTypeDataIntegrityModeEnum", string(value)))
		return obj
	}
	enumValue := otg.StreamDataIntegrityTxType_DataIntegrityMode_Enum(intValue)
	obj.obj.DataIntegrityMode = &enumValue

	return obj
}

// Specify the number of padding bytes needed from the end of the frame.   The number of padding bytes remains fixed with changing frame sizes.
// NumBytesFromEndOfFrame returns a int32
func (obj *streamDataIntegrityTxType) NumBytesFromEndOfFrame() int32 {

	return *obj.obj.NumBytesFromEndOfFrame

}

// Specify the number of padding bytes needed from the end of the frame.   The number of padding bytes remains fixed with changing frame sizes.
// NumBytesFromEndOfFrame returns a int32
func (obj *streamDataIntegrityTxType) HasNumBytesFromEndOfFrame() bool {
	return obj.obj.NumBytesFromEndOfFrame != nil
}

// Specify the number of padding bytes needed from the end of the frame.   The number of padding bytes remains fixed with changing frame sizes.
// SetNumBytesFromEndOfFrame sets the int32 value in the StreamDataIntegrityTxType object
func (obj *streamDataIntegrityTxType) SetNumBytesFromEndOfFrame(value int32) StreamDataIntegrityTxType {

	obj.obj.NumBytesFromEndOfFrame = &value
	return obj
}

// Specify the fixed data integrity payload length.  This length will not    change with changing frame sizes.
// PayloadLength returns a int32
func (obj *streamDataIntegrityTxType) PayloadLength() int32 {

	return *obj.obj.PayloadLength

}

// Specify the fixed data integrity payload length.  This length will not    change with changing frame sizes.
// PayloadLength returns a int32
func (obj *streamDataIntegrityTxType) HasPayloadLength() bool {
	return obj.obj.PayloadLength != nil
}

// Specify the fixed data integrity payload length.  This length will not    change with changing frame sizes.
// SetPayloadLength sets the int32 value in the StreamDataIntegrityTxType object
func (obj *streamDataIntegrityTxType) SetPayloadLength(value int32) StreamDataIntegrityTxType {

	obj.obj.PayloadLength = &value
	return obj
}

func (obj *streamDataIntegrityTxType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *streamDataIntegrityTxType) setDefault() {

}

// ***** StreamAutodetectSignatureTxType *****
type streamAutodetectSignatureTxType struct {
	validation
	obj *otg.StreamAutodetectSignatureTxType
}

func NewStreamAutodetectSignatureTxType() StreamAutodetectSignatureTxType {
	obj := streamAutodetectSignatureTxType{obj: &otg.StreamAutodetectSignatureTxType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamAutodetectSignatureTxType) Msg() *otg.StreamAutodetectSignatureTxType {
	return obj.obj
}

func (obj *streamAutodetectSignatureTxType) SetMsg(msg *otg.StreamAutodetectSignatureTxType) StreamAutodetectSignatureTxType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamAutodetectSignatureTxType) ToProto() (*otg.StreamAutodetectSignatureTxType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamAutodetectSignatureTxType) FromProto(msg *otg.StreamAutodetectSignatureTxType) (StreamAutodetectSignatureTxType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamAutodetectSignatureTxType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamAutodetectSignatureTxType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamAutodetectSignatureTxType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamAutodetectSignatureTxType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamAutodetectSignatureTxType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamAutodetectSignatureTxType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamAutodetectSignatureTxType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamAutodetectSignatureTxType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamAutodetectSignatureTxType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamAutodetectSignatureTxType) Clone() (StreamAutodetectSignatureTxType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamAutodetectSignatureTxType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamAutodetectSignatureTxType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// StreamAutodetectSignatureTxType is tBD
type StreamAutodetectSignatureTxType interface {
	Validation
	// Msg marshals StreamAutodetectSignatureTxType to protobuf object *otg.StreamAutodetectSignatureTxType
	// and doesn't set defaults
	Msg() *otg.StreamAutodetectSignatureTxType
	// SetMsg unmarshals StreamAutodetectSignatureTxType from protobuf object *otg.StreamAutodetectSignatureTxType
	// and doesn't set defaults
	SetMsg(*otg.StreamAutodetectSignatureTxType) StreamAutodetectSignatureTxType
	// ToProto marshals StreamAutodetectSignatureTxType to protobuf object *otg.StreamAutodetectSignatureTxType
	ToProto() (*otg.StreamAutodetectSignatureTxType, error)
	// ToPbText marshals StreamAutodetectSignatureTxType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamAutodetectSignatureTxType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamAutodetectSignatureTxType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamAutodetectSignatureTxType from protobuf object *otg.StreamAutodetectSignatureTxType
	FromProto(msg *otg.StreamAutodetectSignatureTxType) (StreamAutodetectSignatureTxType, error)
	// FromPbText unmarshals StreamAutodetectSignatureTxType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamAutodetectSignatureTxType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamAutodetectSignatureTxType from JSON text
	FromJson(value string) error
	// Validate validates StreamAutodetectSignatureTxType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamAutodetectSignatureTxType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// InsertSignature returns bool, set in StreamAutodetectSignatureTxType.
	InsertSignature() bool
	// SetInsertSignature assigns bool provided by user to StreamAutodetectSignatureTxType
	SetInsertSignature(value bool) StreamAutodetectSignatureTxType
	// HasInsertSignature checks if InsertSignature has been set in StreamAutodetectSignatureTxType
	HasInsertSignature() bool
	// Signature returns string, set in StreamAutodetectSignatureTxType.
	Signature() string
	// SetSignature assigns string provided by user to StreamAutodetectSignatureTxType
	SetSignature(value string) StreamAutodetectSignatureTxType
	// HasSignature checks if Signature has been set in StreamAutodetectSignatureTxType
	HasSignature() bool
	// SignatureOffset returns int32, set in StreamAutodetectSignatureTxType.
	SignatureOffset() int32
	// SetSignatureOffset assigns int32 provided by user to StreamAutodetectSignatureTxType
	SetSignatureOffset(value int32) StreamAutodetectSignatureTxType
	// HasSignatureOffset checks if SignatureOffset has been set in StreamAutodetectSignatureTxType
	HasSignatureOffset() bool
}

func (obj *streamAutodetectSignatureTxType) populateXml(xObj *Argument) error {

	if obj.HasInsertSignature() {
		var value string
		if obj.InsertSignature() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "insertsignature",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSignature() {

		member := Member{
			Name:  "signature",
			Type:  "octets",
			Value: obj.Signature(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSignatureOffset() {

		member := Member{
			Name:  "signatureoffset",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.SignatureOffset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamAutodetectSignatureTxType) populateFromXml(xObj *RetVal) error {

	return nil
}

// Indicates that the Auto instrumentation signature shall be inserted into the   transmitted stream.
// InsertSignature returns a bool
func (obj *streamAutodetectSignatureTxType) InsertSignature() bool {

	return *obj.obj.InsertSignature

}

// Indicates that the Auto instrumentation signature shall be inserted into the   transmitted stream.
// InsertSignature returns a bool
func (obj *streamAutodetectSignatureTxType) HasInsertSignature() bool {
	return obj.obj.InsertSignature != nil
}

// Indicates that the Auto instrumentation signature shall be inserted into the   transmitted stream.
// SetInsertSignature sets the bool value in the StreamAutodetectSignatureTxType object
func (obj *streamAutodetectSignatureTxType) SetInsertSignature(value bool) StreamAutodetectSignatureTxType {

	obj.obj.InsertSignature = &value
	return obj
}

// In the transmitted packet, the signature uniquely identifies the   transmitted packet as one destined for receive port filtering.
// Signature returns a string
func (obj *streamAutodetectSignatureTxType) Signature() string {

	return *obj.obj.Signature

}

// In the transmitted packet, the signature uniquely identifies the   transmitted packet as one destined for receive port filtering.
// Signature returns a string
func (obj *streamAutodetectSignatureTxType) HasSignature() bool {
	return obj.obj.Signature != nil
}

// In the transmitted packet, the signature uniquely identifies the   transmitted packet as one destined for receive port filtering.
// SetSignature sets the string value in the StreamAutodetectSignatureTxType object
func (obj *streamAutodetectSignatureTxType) SetSignature(value string) StreamAutodetectSignatureTxType {

	obj.obj.Signature = &value
	return obj
}

// The offset, within the packet, of the signature.
// SignatureOffset returns a int32
func (obj *streamAutodetectSignatureTxType) SignatureOffset() int32 {

	return *obj.obj.SignatureOffset

}

// The offset, within the packet, of the signature.
// SignatureOffset returns a int32
func (obj *streamAutodetectSignatureTxType) HasSignatureOffset() bool {
	return obj.obj.SignatureOffset != nil
}

// The offset, within the packet, of the signature.
// SetSignatureOffset sets the int32 value in the StreamAutodetectSignatureTxType object
func (obj *streamAutodetectSignatureTxType) SetSignatureOffset(value int32) StreamAutodetectSignatureTxType {

	obj.obj.SignatureOffset = &value
	return obj
}

func (obj *streamAutodetectSignatureTxType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *streamAutodetectSignatureTxType) setDefault() {

}

// ***** IdTypeUdfId *****
type idTypeUdfId struct {
	validation
	obj *otg.IdTypeUdfId
}

func NewIdTypeUdfId() IdTypeUdfId {
	obj := idTypeUdfId{obj: &otg.IdTypeUdfId{}}
	obj.setDefault()
	return &obj
}

func (obj *idTypeUdfId) Msg() *otg.IdTypeUdfId {
	return obj.obj
}

func (obj *idTypeUdfId) SetMsg(msg *otg.IdTypeUdfId) IdTypeUdfId {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *idTypeUdfId) ToProto() (*otg.IdTypeUdfId, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *idTypeUdfId) FromProto(msg *otg.IdTypeUdfId) (IdTypeUdfId, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *idTypeUdfId) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *idTypeUdfId) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *idTypeUdfId) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *idTypeUdfId) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *idTypeUdfId) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *idTypeUdfId) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *idTypeUdfId) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *idTypeUdfId) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *idTypeUdfId) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *idTypeUdfId) Clone() (IdTypeUdfId, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewIdTypeUdfId()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *idTypeUdfId) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// IdTypeUdfId is tBD
type IdTypeUdfId interface {
	Validation
	// Msg marshals IdTypeUdfId to protobuf object *otg.IdTypeUdfId
	// and doesn't set defaults
	Msg() *otg.IdTypeUdfId
	// SetMsg unmarshals IdTypeUdfId from protobuf object *otg.IdTypeUdfId
	// and doesn't set defaults
	SetMsg(*otg.IdTypeUdfId) IdTypeUdfId
	// ToProto marshals IdTypeUdfId to protobuf object *otg.IdTypeUdfId
	ToProto() (*otg.IdTypeUdfId, error)
	// ToPbText marshals IdTypeUdfId to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals IdTypeUdfId to YAML text
	ToYaml() (string, error)
	// ToJson marshals IdTypeUdfId to JSON text
	ToJson() (string, error)
	// FromProto unmarshals IdTypeUdfId from protobuf object *otg.IdTypeUdfId
	FromProto(msg *otg.IdTypeUdfId) (IdTypeUdfId, error)
	// FromPbText unmarshals IdTypeUdfId from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals IdTypeUdfId from YAML text
	FromYaml(value string) error
	// FromJson unmarshals IdTypeUdfId from JSON text
	FromJson(value string) error
	// Validate validates IdTypeUdfId
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (IdTypeUdfId, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Id returns int32, set in IdTypeUdfId.
	Id() int32
	// SetId assigns int32 provided by user to IdTypeUdfId
	SetId(value int32) IdTypeUdfId
	// HasId checks if Id has been set in IdTypeUdfId
	HasId() bool
}

func (obj *idTypeUdfId) populateXml(xObj *Argument) error {

	if obj.HasId() {

		member := Member{
			Name:  "id",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Id()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *idTypeUdfId) populateFromXml(xObj *RetVal) error {

	return nil
}

// The UdfId is only locally unique to a test port within   this test application. The first UDF controlled would have   UdfId 0, and the second UDF would have UdfId 1.
// Id returns a int32
func (obj *idTypeUdfId) Id() int32 {

	return *obj.obj.Id

}

// The UdfId is only locally unique to a test port within   this test application. The first UDF controlled would have   UdfId 0, and the second UDF would have UdfId 1.
// Id returns a int32
func (obj *idTypeUdfId) HasId() bool {
	return obj.obj.Id != nil
}

// The UdfId is only locally unique to a test port within   this test application. The first UDF controlled would have   UdfId 0, and the second UDF would have UdfId 1.
// SetId sets the int32 value in the IdTypeUdfId object
func (obj *idTypeUdfId) SetId(value int32) IdTypeUdfId {

	obj.obj.Id = &value
	return obj
}

func (obj *idTypeUdfId) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *idTypeUdfId) setDefault() {

}

// ***** UdfUdfMVDataType *****
type udfUdfMVDataType struct {
	validation
	obj *otg.UdfUdfMVDataType
}

func NewUdfUdfMVDataType() UdfUdfMVDataType {
	obj := udfUdfMVDataType{obj: &otg.UdfUdfMVDataType{}}
	obj.setDefault()
	return &obj
}

func (obj *udfUdfMVDataType) Msg() *otg.UdfUdfMVDataType {
	return obj.obj
}

func (obj *udfUdfMVDataType) SetMsg(msg *otg.UdfUdfMVDataType) UdfUdfMVDataType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *udfUdfMVDataType) ToProto() (*otg.UdfUdfMVDataType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *udfUdfMVDataType) FromProto(msg *otg.UdfUdfMVDataType) (UdfUdfMVDataType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *udfUdfMVDataType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *udfUdfMVDataType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *udfUdfMVDataType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfUdfMVDataType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *udfUdfMVDataType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfUdfMVDataType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *udfUdfMVDataType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *udfUdfMVDataType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *udfUdfMVDataType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *udfUdfMVDataType) Clone() (UdfUdfMVDataType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewUdfUdfMVDataType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *udfUdfMVDataType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// UdfUdfMVDataType is tBD
type UdfUdfMVDataType interface {
	Validation
	// Msg marshals UdfUdfMVDataType to protobuf object *otg.UdfUdfMVDataType
	// and doesn't set defaults
	Msg() *otg.UdfUdfMVDataType
	// SetMsg unmarshals UdfUdfMVDataType from protobuf object *otg.UdfUdfMVDataType
	// and doesn't set defaults
	SetMsg(*otg.UdfUdfMVDataType) UdfUdfMVDataType
	// ToProto marshals UdfUdfMVDataType to protobuf object *otg.UdfUdfMVDataType
	ToProto() (*otg.UdfUdfMVDataType, error)
	// ToPbText marshals UdfUdfMVDataType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals UdfUdfMVDataType to YAML text
	ToYaml() (string, error)
	// ToJson marshals UdfUdfMVDataType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals UdfUdfMVDataType from protobuf object *otg.UdfUdfMVDataType
	FromProto(msg *otg.UdfUdfMVDataType) (UdfUdfMVDataType, error)
	// FromPbText unmarshals UdfUdfMVDataType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals UdfUdfMVDataType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals UdfUdfMVDataType from JSON text
	FromJson(value string) error
	// Validate validates UdfUdfMVDataType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (UdfUdfMVDataType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Data returns string, set in UdfUdfMVDataType.
	Data() string
	// SetData assigns string provided by user to UdfUdfMVDataType
	SetData(value string) UdfUdfMVDataType
	// HasData checks if Data has been set in UdfUdfMVDataType
	HasData() bool
	// Offset returns int32, set in UdfUdfMVDataType.
	Offset() int32
	// SetOffset assigns int32 provided by user to UdfUdfMVDataType
	SetOffset(value int32) UdfUdfMVDataType
	// HasOffset checks if Offset has been set in UdfUdfMVDataType
	HasOffset() bool
}

func (obj *udfUdfMVDataType) populateXml(xObj *Argument) error {

	if obj.HasData() {

		member := Member{
			Name:  "data",
			Type:  "octets",
			Value: obj.Data(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasOffset() {

		member := Member{
			Name:  "offset",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Offset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *udfUdfMVDataType) populateFromXml(xObj *RetVal) error {

	return nil
}

// MultiValue contains all data for the list
// Data returns a string
func (obj *udfUdfMVDataType) Data() string {

	return *obj.obj.Data

}

// MultiValue contains all data for the list
// Data returns a string
func (obj *udfUdfMVDataType) HasData() bool {
	return obj.obj.Data != nil
}

// MultiValue contains all data for the list
// SetData sets the string value in the UdfUdfMVDataType object
func (obj *udfUdfMVDataType) SetData(value string) UdfUdfMVDataType {

	obj.obj.Data = &value
	return obj
}

// offset indicates from which row-offset the multivalue should be expanded.
// Offset returns a int32
func (obj *udfUdfMVDataType) Offset() int32 {

	return *obj.obj.Offset

}

// offset indicates from which row-offset the multivalue should be expanded.
// Offset returns a int32
func (obj *udfUdfMVDataType) HasOffset() bool {
	return obj.obj.Offset != nil
}

// offset indicates from which row-offset the multivalue should be expanded.
// SetOffset sets the int32 value in the UdfUdfMVDataType object
func (obj *udfUdfMVDataType) SetOffset(value int32) UdfUdfMVDataType {

	obj.obj.Offset = &value
	return obj
}

func (obj *udfUdfMVDataType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *udfUdfMVDataType) setDefault() {

}

// ***** TableUdfColId *****
type tableUdfColId struct {
	validation
	obj *otg.TableUdfColId
}

func NewTableUdfColId() TableUdfColId {
	obj := tableUdfColId{obj: &otg.TableUdfColId{}}
	obj.setDefault()
	return &obj
}

func (obj *tableUdfColId) Msg() *otg.TableUdfColId {
	return obj.obj
}

func (obj *tableUdfColId) SetMsg(msg *otg.TableUdfColId) TableUdfColId {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *tableUdfColId) ToProto() (*otg.TableUdfColId, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *tableUdfColId) FromProto(msg *otg.TableUdfColId) (TableUdfColId, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *tableUdfColId) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *tableUdfColId) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *tableUdfColId) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *tableUdfColId) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *tableUdfColId) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *tableUdfColId) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *tableUdfColId) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *tableUdfColId) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *tableUdfColId) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *tableUdfColId) Clone() (TableUdfColId, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewTableUdfColId()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *tableUdfColId) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// TableUdfColId is tBD
type TableUdfColId interface {
	Validation
	// Msg marshals TableUdfColId to protobuf object *otg.TableUdfColId
	// and doesn't set defaults
	Msg() *otg.TableUdfColId
	// SetMsg unmarshals TableUdfColId from protobuf object *otg.TableUdfColId
	// and doesn't set defaults
	SetMsg(*otg.TableUdfColId) TableUdfColId
	// ToProto marshals TableUdfColId to protobuf object *otg.TableUdfColId
	ToProto() (*otg.TableUdfColId, error)
	// ToPbText marshals TableUdfColId to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals TableUdfColId to YAML text
	ToYaml() (string, error)
	// ToJson marshals TableUdfColId to JSON text
	ToJson() (string, error)
	// FromProto unmarshals TableUdfColId from protobuf object *otg.TableUdfColId
	FromProto(msg *otg.TableUdfColId) (TableUdfColId, error)
	// FromPbText unmarshals TableUdfColId from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals TableUdfColId from YAML text
	FromYaml(value string) error
	// FromJson unmarshals TableUdfColId from JSON text
	FromJson(value string) error
	// Validate validates TableUdfColId
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (TableUdfColId, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Id returns int32, set in TableUdfColId.
	Id() int32
	// SetId assigns int32 provided by user to TableUdfColId
	SetId(value int32) TableUdfColId
	// HasId checks if Id has been set in TableUdfColId
	HasId() bool
}

func (obj *tableUdfColId) populateXml(xObj *Argument) error {

	if obj.HasId() {

		member := Member{
			Name:  "id",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Id()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *tableUdfColId) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Id returns a int32
func (obj *tableUdfColId) Id() int32 {

	return *obj.obj.Id

}

// TBD
// Id returns a int32
func (obj *tableUdfColId) HasId() bool {
	return obj.obj.Id != nil
}

// TBD
// SetId sets the int32 value in the TableUdfColId object
func (obj *tableUdfColId) SetId(value int32) TableUdfColId {

	obj.obj.Id = &value
	return obj
}

func (obj *tableUdfColId) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *tableUdfColId) setDefault() {

}

// ***** PFTypePicoSecondsType *****
type pFTypePicoSecondsType struct {
	validation
	obj *otg.PFTypePicoSecondsType
}

func NewPFTypePicoSecondsType() PFTypePicoSecondsType {
	obj := pFTypePicoSecondsType{obj: &otg.PFTypePicoSecondsType{}}
	obj.setDefault()
	return &obj
}

func (obj *pFTypePicoSecondsType) Msg() *otg.PFTypePicoSecondsType {
	return obj.obj
}

func (obj *pFTypePicoSecondsType) SetMsg(msg *otg.PFTypePicoSecondsType) PFTypePicoSecondsType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *pFTypePicoSecondsType) ToProto() (*otg.PFTypePicoSecondsType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *pFTypePicoSecondsType) FromProto(msg *otg.PFTypePicoSecondsType) (PFTypePicoSecondsType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *pFTypePicoSecondsType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *pFTypePicoSecondsType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *pFTypePicoSecondsType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypePicoSecondsType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *pFTypePicoSecondsType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypePicoSecondsType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *pFTypePicoSecondsType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *pFTypePicoSecondsType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *pFTypePicoSecondsType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *pFTypePicoSecondsType) Clone() (PFTypePicoSecondsType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPFTypePicoSecondsType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *pFTypePicoSecondsType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// PFTypePicoSecondsType is model a duration in picoseconds using a plain integer. This allows signed durations up to 4 months to expressed.
type PFTypePicoSecondsType interface {
	Validation
	// Msg marshals PFTypePicoSecondsType to protobuf object *otg.PFTypePicoSecondsType
	// and doesn't set defaults
	Msg() *otg.PFTypePicoSecondsType
	// SetMsg unmarshals PFTypePicoSecondsType from protobuf object *otg.PFTypePicoSecondsType
	// and doesn't set defaults
	SetMsg(*otg.PFTypePicoSecondsType) PFTypePicoSecondsType
	// ToProto marshals PFTypePicoSecondsType to protobuf object *otg.PFTypePicoSecondsType
	ToProto() (*otg.PFTypePicoSecondsType, error)
	// ToPbText marshals PFTypePicoSecondsType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PFTypePicoSecondsType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PFTypePicoSecondsType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PFTypePicoSecondsType from protobuf object *otg.PFTypePicoSecondsType
	FromProto(msg *otg.PFTypePicoSecondsType) (PFTypePicoSecondsType, error)
	// FromPbText unmarshals PFTypePicoSecondsType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PFTypePicoSecondsType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PFTypePicoSecondsType from JSON text
	FromJson(value string) error
	// Validate validates PFTypePicoSecondsType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PFTypePicoSecondsType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// PicoSeconds returns int64, set in PFTypePicoSecondsType.
	PicoSeconds() int64
	// SetPicoSeconds assigns int64 provided by user to PFTypePicoSecondsType
	SetPicoSeconds(value int64) PFTypePicoSecondsType
	// HasPicoSeconds checks if PicoSeconds has been set in PFTypePicoSecondsType
	HasPicoSeconds() bool
}

func (obj *pFTypePicoSecondsType) populateXml(xObj *Argument) error {

	if obj.HasPicoSeconds() {

		member := Member{
			Name:  "picoseconds",
			Type:  "int64",
			Value: strconv.FormatInt(obj.PicoSeconds(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *pFTypePicoSecondsType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// PicoSeconds returns a int64
func (obj *pFTypePicoSecondsType) PicoSeconds() int64 {

	return *obj.obj.PicoSeconds

}

// TBD
// PicoSeconds returns a int64
func (obj *pFTypePicoSecondsType) HasPicoSeconds() bool {
	return obj.obj.PicoSeconds != nil
}

// TBD
// SetPicoSeconds sets the int64 value in the PFTypePicoSecondsType object
func (obj *pFTypePicoSecondsType) SetPicoSeconds(value int64) PFTypePicoSecondsType {

	obj.obj.PicoSeconds = &value
	return obj
}

func (obj *pFTypePicoSecondsType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *pFTypePicoSecondsType) setDefault() {

}

// ***** CaptureExpressionElementType *****
type captureExpressionElementType struct {
	validation
	obj             *otg.CaptureExpressionElementType
	patternIdHolder IdTypeCapturePatternId
}

func NewCaptureExpressionElementType() CaptureExpressionElementType {
	obj := captureExpressionElementType{obj: &otg.CaptureExpressionElementType{}}
	obj.setDefault()
	return &obj
}

func (obj *captureExpressionElementType) Msg() *otg.CaptureExpressionElementType {
	return obj.obj
}

func (obj *captureExpressionElementType) SetMsg(msg *otg.CaptureExpressionElementType) CaptureExpressionElementType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *captureExpressionElementType) ToProto() (*otg.CaptureExpressionElementType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *captureExpressionElementType) FromProto(msg *otg.CaptureExpressionElementType) (CaptureExpressionElementType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *captureExpressionElementType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *captureExpressionElementType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureExpressionElementType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureExpressionElementType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *captureExpressionElementType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *captureExpressionElementType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *captureExpressionElementType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *captureExpressionElementType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *captureExpressionElementType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *captureExpressionElementType) Clone() (CaptureExpressionElementType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewCaptureExpressionElementType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *captureExpressionElementType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *captureExpressionElementType) setNil() {
	obj.patternIdHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// CaptureExpressionElementType is tBD
type CaptureExpressionElementType interface {
	Validation
	// Msg marshals CaptureExpressionElementType to protobuf object *otg.CaptureExpressionElementType
	// and doesn't set defaults
	Msg() *otg.CaptureExpressionElementType
	// SetMsg unmarshals CaptureExpressionElementType from protobuf object *otg.CaptureExpressionElementType
	// and doesn't set defaults
	SetMsg(*otg.CaptureExpressionElementType) CaptureExpressionElementType
	// ToProto marshals CaptureExpressionElementType to protobuf object *otg.CaptureExpressionElementType
	ToProto() (*otg.CaptureExpressionElementType, error)
	// ToPbText marshals CaptureExpressionElementType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals CaptureExpressionElementType to YAML text
	ToYaml() (string, error)
	// ToJson marshals CaptureExpressionElementType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals CaptureExpressionElementType from protobuf object *otg.CaptureExpressionElementType
	FromProto(msg *otg.CaptureExpressionElementType) (CaptureExpressionElementType, error)
	// FromPbText unmarshals CaptureExpressionElementType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals CaptureExpressionElementType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals CaptureExpressionElementType from JSON text
	FromJson(value string) error
	// Validate validates CaptureExpressionElementType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (CaptureExpressionElementType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ElementKind returns CaptureExpressionElementTypeElementKindEnum, set in CaptureExpressionElementType
	ElementKind() CaptureExpressionElementTypeElementKindEnum
	// SetElementKind assigns CaptureExpressionElementTypeElementKindEnum provided by user to CaptureExpressionElementType
	SetElementKind(value CaptureExpressionElementTypeElementKindEnum) CaptureExpressionElementType
	// HasElementKind checks if ElementKind has been set in CaptureExpressionElementType
	HasElementKind() bool
	// OperatorLogic returns CaptureExpressionElementTypeOperatorLogicEnum, set in CaptureExpressionElementType
	OperatorLogic() CaptureExpressionElementTypeOperatorLogicEnum
	// SetOperatorLogic assigns CaptureExpressionElementTypeOperatorLogicEnum provided by user to CaptureExpressionElementType
	SetOperatorLogic(value CaptureExpressionElementTypeOperatorLogicEnum) CaptureExpressionElementType
	// HasOperatorLogic checks if OperatorLogic has been set in CaptureExpressionElementType
	HasOperatorLogic() bool
	// PatternId returns IdTypeCapturePatternId, set in CaptureExpressionElementType.
	// IdTypeCapturePatternId is tBD
	PatternId() IdTypeCapturePatternId
	// SetPatternId assigns IdTypeCapturePatternId provided by user to CaptureExpressionElementType.
	// IdTypeCapturePatternId is tBD
	SetPatternId(value IdTypeCapturePatternId) CaptureExpressionElementType
	// HasPatternId checks if PatternId has been set in CaptureExpressionElementType
	HasPatternId() bool
	setNil()
}

func (obj *captureExpressionElementType) populateXml(xObj *Argument) error {

	if obj.HasElementKind() {

		member := Member{
			Name:  "elementkind",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Capture+eExpressionElementKind",
			Value: strconv.FormatInt(int64(obj.obj.ElementKind.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasOperatorLogic() {

		member := Member{
			Name:  "operatorlogic",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Capture+eLogic",
			Value: strconv.FormatInt(int64(obj.obj.OperatorLogic.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *captureExpressionElementType) populateFromXml(xObj *RetVal) error {

	return nil
}

type CaptureExpressionElementTypeElementKindEnum string

// Enum of ElementKind on CaptureExpressionElementType
var CaptureExpressionElementTypeElementKind = struct {
	KOPERATOR CaptureExpressionElementTypeElementKindEnum
	KPATTERN  CaptureExpressionElementTypeElementKindEnum
}{
	KOPERATOR: CaptureExpressionElementTypeElementKindEnum("kOperator"),
	KPATTERN:  CaptureExpressionElementTypeElementKindEnum("kPattern"),
}

func (obj *captureExpressionElementType) ElementKind() CaptureExpressionElementTypeElementKindEnum {
	return CaptureExpressionElementTypeElementKindEnum(obj.obj.ElementKind.Enum().String())
}

// The expressionElementKind indicates the type of element stored   in the ExpressionElement.    The element stored can either be an operator or a pattern id.
// ElementKind returns a string
func (obj *captureExpressionElementType) HasElementKind() bool {
	return obj.obj.ElementKind != nil
}

func (obj *captureExpressionElementType) SetElementKind(value CaptureExpressionElementTypeElementKindEnum) CaptureExpressionElementType {
	intValue, ok := otg.CaptureExpressionElementType_ElementKind_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on CaptureExpressionElementTypeElementKindEnum", string(value)))
		return obj
	}
	enumValue := otg.CaptureExpressionElementType_ElementKind_Enum(intValue)
	obj.obj.ElementKind = &enumValue

	return obj
}

type CaptureExpressionElementTypeOperatorLogicEnum string

// Enum of OperatorLogic on CaptureExpressionElementType
var CaptureExpressionElementTypeOperatorLogic = struct {
	KNOTPATTERN  CaptureExpressionElementTypeOperatorLogicEnum
	KANDPATTERN  CaptureExpressionElementTypeOperatorLogicEnum
	KORPATTERN   CaptureExpressionElementTypeOperatorLogicEnum
	KXORPATTERN  CaptureExpressionElementTypeOperatorLogicEnum
	KNANDPATTERN CaptureExpressionElementTypeOperatorLogicEnum
	KNORPATTERN  CaptureExpressionElementTypeOperatorLogicEnum
}{
	KNOTPATTERN:  CaptureExpressionElementTypeOperatorLogicEnum("kNotPattern"),
	KANDPATTERN:  CaptureExpressionElementTypeOperatorLogicEnum("kAndPattern"),
	KORPATTERN:   CaptureExpressionElementTypeOperatorLogicEnum("kOrPattern"),
	KXORPATTERN:  CaptureExpressionElementTypeOperatorLogicEnum("kXorPattern"),
	KNANDPATTERN: CaptureExpressionElementTypeOperatorLogicEnum("kNandPattern"),
	KNORPATTERN:  CaptureExpressionElementTypeOperatorLogicEnum("kNorPattern"),
}

func (obj *captureExpressionElementType) OperatorLogic() CaptureExpressionElementTypeOperatorLogicEnum {
	return CaptureExpressionElementTypeOperatorLogicEnum(obj.obj.OperatorLogic.Enum().String())
}

// TBD
// OperatorLogic returns a string
func (obj *captureExpressionElementType) HasOperatorLogic() bool {
	return obj.obj.OperatorLogic != nil
}

func (obj *captureExpressionElementType) SetOperatorLogic(value CaptureExpressionElementTypeOperatorLogicEnum) CaptureExpressionElementType {
	intValue, ok := otg.CaptureExpressionElementType_OperatorLogic_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on CaptureExpressionElementTypeOperatorLogicEnum", string(value)))
		return obj
	}
	enumValue := otg.CaptureExpressionElementType_OperatorLogic_Enum(intValue)
	obj.obj.OperatorLogic = &enumValue

	return obj
}

// TBD
// PatternId returns a IdTypeCapturePatternId
func (obj *captureExpressionElementType) PatternId() IdTypeCapturePatternId {
	if obj.obj.PatternId == nil {
		obj.obj.PatternId = NewIdTypeCapturePatternId().Msg()
	}
	if obj.patternIdHolder == nil {
		obj.patternIdHolder = &idTypeCapturePatternId{obj: obj.obj.PatternId}
	}
	return obj.patternIdHolder
}

// TBD
// PatternId returns a IdTypeCapturePatternId
func (obj *captureExpressionElementType) HasPatternId() bool {
	return obj.obj.PatternId != nil
}

// TBD
// SetPatternId sets the IdTypeCapturePatternId value in the CaptureExpressionElementType object
func (obj *captureExpressionElementType) SetPatternId(value IdTypeCapturePatternId) CaptureExpressionElementType {

	obj.patternIdHolder = nil
	obj.obj.PatternId = value.Msg()

	return obj
}

func (obj *captureExpressionElementType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PatternId != nil {

		obj.PatternId().validateObj(vObj, set_default)
	}

}

func (obj *captureExpressionElementType) setDefault() {

}

// ***** StreamTsnQbvGateConfigType *****
type streamTsnQbvGateConfigType struct {
	validation
	obj *otg.StreamTsnQbvGateConfigType
}

func NewStreamTsnQbvGateConfigType() StreamTsnQbvGateConfigType {
	obj := streamTsnQbvGateConfigType{obj: &otg.StreamTsnQbvGateConfigType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamTsnQbvGateConfigType) Msg() *otg.StreamTsnQbvGateConfigType {
	return obj.obj
}

func (obj *streamTsnQbvGateConfigType) SetMsg(msg *otg.StreamTsnQbvGateConfigType) StreamTsnQbvGateConfigType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamTsnQbvGateConfigType) ToProto() (*otg.StreamTsnQbvGateConfigType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamTsnQbvGateConfigType) FromProto(msg *otg.StreamTsnQbvGateConfigType) (StreamTsnQbvGateConfigType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamTsnQbvGateConfigType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamTsnQbvGateConfigType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamTsnQbvGateConfigType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamTsnQbvGateConfigType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamTsnQbvGateConfigType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamTsnQbvGateConfigType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamTsnQbvGateConfigType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamTsnQbvGateConfigType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamTsnQbvGateConfigType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamTsnQbvGateConfigType) Clone() (StreamTsnQbvGateConfigType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamTsnQbvGateConfigType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamTsnQbvGateConfigType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// StreamTsnQbvGateConfigType is used to map a stream to a particular IEEE 802.1Qbv Gate.
type StreamTsnQbvGateConfigType interface {
	Validation
	// Msg marshals StreamTsnQbvGateConfigType to protobuf object *otg.StreamTsnQbvGateConfigType
	// and doesn't set defaults
	Msg() *otg.StreamTsnQbvGateConfigType
	// SetMsg unmarshals StreamTsnQbvGateConfigType from protobuf object *otg.StreamTsnQbvGateConfigType
	// and doesn't set defaults
	SetMsg(*otg.StreamTsnQbvGateConfigType) StreamTsnQbvGateConfigType
	// ToProto marshals StreamTsnQbvGateConfigType to protobuf object *otg.StreamTsnQbvGateConfigType
	ToProto() (*otg.StreamTsnQbvGateConfigType, error)
	// ToPbText marshals StreamTsnQbvGateConfigType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamTsnQbvGateConfigType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamTsnQbvGateConfigType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamTsnQbvGateConfigType from protobuf object *otg.StreamTsnQbvGateConfigType
	FromProto(msg *otg.StreamTsnQbvGateConfigType) (StreamTsnQbvGateConfigType, error)
	// FromPbText unmarshals StreamTsnQbvGateConfigType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamTsnQbvGateConfigType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamTsnQbvGateConfigType from JSON text
	FromJson(value string) error
	// Validate validates StreamTsnQbvGateConfigType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamTsnQbvGateConfigType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Enabled returns bool, set in StreamTsnQbvGateConfigType.
	Enabled() bool
	// SetEnabled assigns bool provided by user to StreamTsnQbvGateConfigType
	SetEnabled(value bool) StreamTsnQbvGateConfigType
	// HasEnabled checks if Enabled has been set in StreamTsnQbvGateConfigType
	HasEnabled() bool
	// QbvGate returns StreamTsnQbvGateConfigTypeQbvGateEnum, set in StreamTsnQbvGateConfigType
	QbvGate() StreamTsnQbvGateConfigTypeQbvGateEnum
	// SetQbvGate assigns StreamTsnQbvGateConfigTypeQbvGateEnum provided by user to StreamTsnQbvGateConfigType
	SetQbvGate(value StreamTsnQbvGateConfigTypeQbvGateEnum) StreamTsnQbvGateConfigType
	// HasQbvGate checks if QbvGate has been set in StreamTsnQbvGateConfigType
	HasQbvGate() bool
}

func (obj *streamTsnQbvGateConfigType) populateXml(xObj *Argument) error {

	if obj.HasEnabled() {
		var value string
		if obj.Enabled() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enabled",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasQbvGate() {

		member := Member{
			Name:  "qbvgate",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Stream+eTsnQbvGate",
			Value: strconv.FormatInt(int64(obj.obj.QbvGate.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamTsnQbvGateConfigType) populateFromXml(xObj *RetVal) error {

	return nil
}

// Specifies if the feature is enabled or not.   If the value is true, then this need to be configured.
// Enabled returns a bool
func (obj *streamTsnQbvGateConfigType) Enabled() bool {

	return *obj.obj.Enabled

}

// Specifies if the feature is enabled or not.   If the value is true, then this need to be configured.
// Enabled returns a bool
func (obj *streamTsnQbvGateConfigType) HasEnabled() bool {
	return obj.obj.Enabled != nil
}

// Specifies if the feature is enabled or not.   If the value is true, then this need to be configured.
// SetEnabled sets the bool value in the StreamTsnQbvGateConfigType object
func (obj *streamTsnQbvGateConfigType) SetEnabled(value bool) StreamTsnQbvGateConfigType {

	obj.obj.Enabled = &value
	return obj
}

type StreamTsnQbvGateConfigTypeQbvGateEnum string

// Enum of QbvGate on StreamTsnQbvGateConfigType
var StreamTsnQbvGateConfigTypeQbvGate = struct {
	KTSNQBVGATE0 StreamTsnQbvGateConfigTypeQbvGateEnum
	KTSNQBVGATE1 StreamTsnQbvGateConfigTypeQbvGateEnum
	KTSNQBVGATE2 StreamTsnQbvGateConfigTypeQbvGateEnum
	KTSNQBVGATE3 StreamTsnQbvGateConfigTypeQbvGateEnum
	KTSNQBVGATE4 StreamTsnQbvGateConfigTypeQbvGateEnum
	KTSNQBVGATE5 StreamTsnQbvGateConfigTypeQbvGateEnum
	KTSNQBVGATE6 StreamTsnQbvGateConfigTypeQbvGateEnum
	KTSNQBVGATE7 StreamTsnQbvGateConfigTypeQbvGateEnum
}{
	KTSNQBVGATE0: StreamTsnQbvGateConfigTypeQbvGateEnum("kTsnQbvGate0"),
	KTSNQBVGATE1: StreamTsnQbvGateConfigTypeQbvGateEnum("kTsnQbvGate1"),
	KTSNQBVGATE2: StreamTsnQbvGateConfigTypeQbvGateEnum("kTsnQbvGate2"),
	KTSNQBVGATE3: StreamTsnQbvGateConfigTypeQbvGateEnum("kTsnQbvGate3"),
	KTSNQBVGATE4: StreamTsnQbvGateConfigTypeQbvGateEnum("kTsnQbvGate4"),
	KTSNQBVGATE5: StreamTsnQbvGateConfigTypeQbvGateEnum("kTsnQbvGate5"),
	KTSNQBVGATE6: StreamTsnQbvGateConfigTypeQbvGateEnum("kTsnQbvGate6"),
	KTSNQBVGATE7: StreamTsnQbvGateConfigTypeQbvGateEnum("kTsnQbvGate7"),
}

func (obj *streamTsnQbvGateConfigType) QbvGate() StreamTsnQbvGateConfigTypeQbvGateEnum {
	return StreamTsnQbvGateConfigTypeQbvGateEnum(obj.obj.QbvGate.Enum().String())
}

// Specifies which 802.1Qbv Gate the stream is mapped to.
// QbvGate returns a string
func (obj *streamTsnQbvGateConfigType) HasQbvGate() bool {
	return obj.obj.QbvGate != nil
}

func (obj *streamTsnQbvGateConfigType) SetQbvGate(value StreamTsnQbvGateConfigTypeQbvGateEnum) StreamTsnQbvGateConfigType {
	intValue, ok := otg.StreamTsnQbvGateConfigType_QbvGate_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on StreamTsnQbvGateConfigTypeQbvGateEnum", string(value)))
		return obj
	}
	enumValue := otg.StreamTsnQbvGateConfigType_QbvGate_Enum(intValue)
	obj.obj.QbvGate = &enumValue

	return obj
}

func (obj *streamTsnQbvGateConfigType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *streamTsnQbvGateConfigType) setDefault() {

}

// ***** StreamTxDelayType *****
type streamTxDelayType struct {
	validation
	obj *otg.StreamTxDelayType
}

func NewStreamTxDelayType() StreamTxDelayType {
	obj := streamTxDelayType{obj: &otg.StreamTxDelayType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamTxDelayType) Msg() *otg.StreamTxDelayType {
	return obj.obj
}

func (obj *streamTxDelayType) SetMsg(msg *otg.StreamTxDelayType) StreamTxDelayType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamTxDelayType) ToProto() (*otg.StreamTxDelayType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamTxDelayType) FromProto(msg *otg.StreamTxDelayType) (StreamTxDelayType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamTxDelayType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamTxDelayType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamTxDelayType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamTxDelayType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamTxDelayType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamTxDelayType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamTxDelayType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamTxDelayType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamTxDelayType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamTxDelayType) Clone() (StreamTxDelayType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamTxDelayType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamTxDelayType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// StreamTxDelayType is model a packet transmission delay.
type StreamTxDelayType interface {
	Validation
	// Msg marshals StreamTxDelayType to protobuf object *otg.StreamTxDelayType
	// and doesn't set defaults
	Msg() *otg.StreamTxDelayType
	// SetMsg unmarshals StreamTxDelayType from protobuf object *otg.StreamTxDelayType
	// and doesn't set defaults
	SetMsg(*otg.StreamTxDelayType) StreamTxDelayType
	// ToProto marshals StreamTxDelayType to protobuf object *otg.StreamTxDelayType
	ToProto() (*otg.StreamTxDelayType, error)
	// ToPbText marshals StreamTxDelayType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamTxDelayType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamTxDelayType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamTxDelayType from protobuf object *otg.StreamTxDelayType
	FromProto(msg *otg.StreamTxDelayType) (StreamTxDelayType, error)
	// FromPbText unmarshals StreamTxDelayType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamTxDelayType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamTxDelayType from JSON text
	FromJson(value string) error
	// Validate validates StreamTxDelayType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamTxDelayType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Duration returns int64, set in StreamTxDelayType.
	Duration() int64
	// SetDuration assigns int64 provided by user to StreamTxDelayType
	SetDuration(value int64) StreamTxDelayType
	// HasDuration checks if Duration has been set in StreamTxDelayType
	HasDuration() bool
	// PreciseDuration returns float64, set in StreamTxDelayType.
	PreciseDuration() float64
	// SetPreciseDuration assigns float64 provided by user to StreamTxDelayType
	SetPreciseDuration(value float64) StreamTxDelayType
	// HasPreciseDuration checks if PreciseDuration has been set in StreamTxDelayType
	HasPreciseDuration() bool
	// Units returns StreamTxDelayTypeUnitsEnum, set in StreamTxDelayType
	Units() StreamTxDelayTypeUnitsEnum
	// SetUnits assigns StreamTxDelayTypeUnitsEnum provided by user to StreamTxDelayType
	SetUnits(value StreamTxDelayTypeUnitsEnum) StreamTxDelayType
	// HasUnits checks if Units has been set in StreamTxDelayType
	HasUnits() bool
}

func (obj *streamTxDelayType) populateXml(xObj *Argument) error {

	if obj.HasDuration() {

		member := Member{
			Name:  "duration",
			Type:  "int64",
			Value: strconv.FormatInt(obj.Duration(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasPreciseDuration() {

		member := Member{
			Name: "preciseduration",
			Type: "double",
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasUnits() {

		member := Member{
			Name:  "units",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Stream+eTxDelay",
			Value: strconv.FormatInt(int64(obj.obj.Units.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamTxDelayType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Duration returns a int64
func (obj *streamTxDelayType) Duration() int64 {

	return *obj.obj.Duration

}

// TBD
// Duration returns a int64
func (obj *streamTxDelayType) HasDuration() bool {
	return obj.obj.Duration != nil
}

// TBD
// SetDuration sets the int64 value in the StreamTxDelayType object
func (obj *streamTxDelayType) SetDuration(value int64) StreamTxDelayType {

	obj.obj.Duration = &value
	return obj
}

// TBD
// PreciseDuration returns a float64
func (obj *streamTxDelayType) PreciseDuration() float64 {

	return *obj.obj.PreciseDuration

}

// TBD
// PreciseDuration returns a float64
func (obj *streamTxDelayType) HasPreciseDuration() bool {
	return obj.obj.PreciseDuration != nil
}

// TBD
// SetPreciseDuration sets the float64 value in the StreamTxDelayType object
func (obj *streamTxDelayType) SetPreciseDuration(value float64) StreamTxDelayType {

	obj.obj.PreciseDuration = &value
	return obj
}

type StreamTxDelayTypeUnitsEnum string

// Enum of Units on StreamTxDelayType
var StreamTxDelayTypeUnits = struct {
	KNANOSECONDS StreamTxDelayTypeUnitsEnum
	KBYTES       StreamTxDelayTypeUnitsEnum
	KTICKS       StreamTxDelayTypeUnitsEnum
}{
	KNANOSECONDS: StreamTxDelayTypeUnitsEnum("kNanoSeconds"),
	KBYTES:       StreamTxDelayTypeUnitsEnum("kBytes"),
	KTICKS:       StreamTxDelayTypeUnitsEnum("kTicks"),
}

func (obj *streamTxDelayType) Units() StreamTxDelayTypeUnitsEnum {
	return StreamTxDelayTypeUnitsEnum(obj.obj.Units.Enum().String())
}

// TBD
// Units returns a string
func (obj *streamTxDelayType) HasUnits() bool {
	return obj.obj.Units != nil
}

func (obj *streamTxDelayType) SetUnits(value StreamTxDelayTypeUnitsEnum) StreamTxDelayType {
	intValue, ok := otg.StreamTxDelayType_Units_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on StreamTxDelayTypeUnitsEnum", string(value)))
		return obj
	}
	enumValue := otg.StreamTxDelayType_Units_Enum(intValue)
	obj.obj.Units = &enumValue

	return obj
}

func (obj *streamTxDelayType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *streamTxDelayType) setDefault() {

}

// ***** PFTypeGapTimeType *****
type pFTypeGapTimeType struct {
	validation
	obj *otg.PFTypeGapTimeType
}

func NewPFTypeGapTimeType() PFTypeGapTimeType {
	obj := pFTypeGapTimeType{obj: &otg.PFTypeGapTimeType{}}
	obj.setDefault()
	return &obj
}

func (obj *pFTypeGapTimeType) Msg() *otg.PFTypeGapTimeType {
	return obj.obj
}

func (obj *pFTypeGapTimeType) SetMsg(msg *otg.PFTypeGapTimeType) PFTypeGapTimeType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *pFTypeGapTimeType) ToProto() (*otg.PFTypeGapTimeType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *pFTypeGapTimeType) FromProto(msg *otg.PFTypeGapTimeType) (PFTypeGapTimeType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *pFTypeGapTimeType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *pFTypeGapTimeType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *pFTypeGapTimeType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypeGapTimeType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *pFTypeGapTimeType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypeGapTimeType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *pFTypeGapTimeType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *pFTypeGapTimeType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *pFTypeGapTimeType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *pFTypeGapTimeType) Clone() (PFTypeGapTimeType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPFTypeGapTimeType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *pFTypeGapTimeType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// PFTypeGapTimeType is model interpacket gap and allow a diversity of units of measurement.
type PFTypeGapTimeType interface {
	Validation
	// Msg marshals PFTypeGapTimeType to protobuf object *otg.PFTypeGapTimeType
	// and doesn't set defaults
	Msg() *otg.PFTypeGapTimeType
	// SetMsg unmarshals PFTypeGapTimeType from protobuf object *otg.PFTypeGapTimeType
	// and doesn't set defaults
	SetMsg(*otg.PFTypeGapTimeType) PFTypeGapTimeType
	// ToProto marshals PFTypeGapTimeType to protobuf object *otg.PFTypeGapTimeType
	ToProto() (*otg.PFTypeGapTimeType, error)
	// ToPbText marshals PFTypeGapTimeType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PFTypeGapTimeType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PFTypeGapTimeType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PFTypeGapTimeType from protobuf object *otg.PFTypeGapTimeType
	FromProto(msg *otg.PFTypeGapTimeType) (PFTypeGapTimeType, error)
	// FromPbText unmarshals PFTypeGapTimeType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PFTypeGapTimeType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PFTypeGapTimeType from JSON text
	FromJson(value string) error
	// Validate validates PFTypeGapTimeType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PFTypeGapTimeType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Duration returns int64, set in PFTypeGapTimeType.
	Duration() int64
	// SetDuration assigns int64 provided by user to PFTypeGapTimeType
	SetDuration(value int64) PFTypeGapTimeType
	// HasDuration checks if Duration has been set in PFTypeGapTimeType
	HasDuration() bool
	// Units returns PFTypeGapTimeTypeUnitsEnum, set in PFTypeGapTimeType
	Units() PFTypeGapTimeTypeUnitsEnum
	// SetUnits assigns PFTypeGapTimeTypeUnitsEnum provided by user to PFTypeGapTimeType
	SetUnits(value PFTypeGapTimeTypeUnitsEnum) PFTypeGapTimeType
	// HasUnits checks if Units has been set in PFTypeGapTimeType
	HasUnits() bool
}

func (obj *pFTypeGapTimeType) populateXml(xObj *Argument) error {

	if obj.HasDuration() {

		member := Member{
			Name:  "duration",
			Type:  "int64",
			Value: strconv.FormatInt(obj.Duration(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasUnits() {

		member := Member{
			Name:  "units",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.PFType+eGapUnit",
			Value: strconv.FormatInt(int64(obj.obj.Units.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *pFTypeGapTimeType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Duration returns a int64
func (obj *pFTypeGapTimeType) Duration() int64 {

	return *obj.obj.Duration

}

// TBD
// Duration returns a int64
func (obj *pFTypeGapTimeType) HasDuration() bool {
	return obj.obj.Duration != nil
}

// TBD
// SetDuration sets the int64 value in the PFTypeGapTimeType object
func (obj *pFTypeGapTimeType) SetDuration(value int64) PFTypeGapTimeType {

	obj.obj.Duration = &value
	return obj
}

type PFTypeGapTimeTypeUnitsEnum string

// Enum of Units on PFTypeGapTimeType
var PFTypeGapTimeTypeUnits = struct {
	KGAPNANOSECONDS PFTypeGapTimeTypeUnitsEnum
	KGAPCLOCKTICKS  PFTypeGapTimeTypeUnitsEnum
	KGAPBYTES       PFTypeGapTimeTypeUnitsEnum
}{
	KGAPNANOSECONDS: PFTypeGapTimeTypeUnitsEnum("kGapNanoSeconds"),
	KGAPCLOCKTICKS:  PFTypeGapTimeTypeUnitsEnum("kGapClockTicks"),
	KGAPBYTES:       PFTypeGapTimeTypeUnitsEnum("kGapBytes"),
}

func (obj *pFTypeGapTimeType) Units() PFTypeGapTimeTypeUnitsEnum {
	return PFTypeGapTimeTypeUnitsEnum(obj.obj.Units.Enum().String())
}

// TBD
// Units returns a string
func (obj *pFTypeGapTimeType) HasUnits() bool {
	return obj.obj.Units != nil
}

func (obj *pFTypeGapTimeType) SetUnits(value PFTypeGapTimeTypeUnitsEnum) PFTypeGapTimeType {
	intValue, ok := otg.PFTypeGapTimeType_Units_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PFTypeGapTimeTypeUnitsEnum", string(value)))
		return obj
	}
	enumValue := otg.PFTypeGapTimeType_Units_Enum(intValue)
	obj.obj.Units = &enumValue

	return obj
}

func (obj *pFTypeGapTimeType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *pFTypeGapTimeType) setDefault() {

}

// ***** PFTypeGapPrecisionTimeType *****
type pFTypeGapPrecisionTimeType struct {
	validation
	obj *otg.PFTypeGapPrecisionTimeType
}

func NewPFTypeGapPrecisionTimeType() PFTypeGapPrecisionTimeType {
	obj := pFTypeGapPrecisionTimeType{obj: &otg.PFTypeGapPrecisionTimeType{}}
	obj.setDefault()
	return &obj
}

func (obj *pFTypeGapPrecisionTimeType) Msg() *otg.PFTypeGapPrecisionTimeType {
	return obj.obj
}

func (obj *pFTypeGapPrecisionTimeType) SetMsg(msg *otg.PFTypeGapPrecisionTimeType) PFTypeGapPrecisionTimeType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *pFTypeGapPrecisionTimeType) ToProto() (*otg.PFTypeGapPrecisionTimeType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *pFTypeGapPrecisionTimeType) FromProto(msg *otg.PFTypeGapPrecisionTimeType) (PFTypeGapPrecisionTimeType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *pFTypeGapPrecisionTimeType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *pFTypeGapPrecisionTimeType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *pFTypeGapPrecisionTimeType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypeGapPrecisionTimeType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *pFTypeGapPrecisionTimeType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypeGapPrecisionTimeType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *pFTypeGapPrecisionTimeType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *pFTypeGapPrecisionTimeType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *pFTypeGapPrecisionTimeType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *pFTypeGapPrecisionTimeType) Clone() (PFTypeGapPrecisionTimeType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPFTypeGapPrecisionTimeType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *pFTypeGapPrecisionTimeType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// PFTypeGapPrecisionTimeType is model interpacket gap with precision and allow a diversity of units of measurement.
type PFTypeGapPrecisionTimeType interface {
	Validation
	// Msg marshals PFTypeGapPrecisionTimeType to protobuf object *otg.PFTypeGapPrecisionTimeType
	// and doesn't set defaults
	Msg() *otg.PFTypeGapPrecisionTimeType
	// SetMsg unmarshals PFTypeGapPrecisionTimeType from protobuf object *otg.PFTypeGapPrecisionTimeType
	// and doesn't set defaults
	SetMsg(*otg.PFTypeGapPrecisionTimeType) PFTypeGapPrecisionTimeType
	// ToProto marshals PFTypeGapPrecisionTimeType to protobuf object *otg.PFTypeGapPrecisionTimeType
	ToProto() (*otg.PFTypeGapPrecisionTimeType, error)
	// ToPbText marshals PFTypeGapPrecisionTimeType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PFTypeGapPrecisionTimeType to YAML text
	ToYaml() (string, error)
	// ToJson marshals PFTypeGapPrecisionTimeType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PFTypeGapPrecisionTimeType from protobuf object *otg.PFTypeGapPrecisionTimeType
	FromProto(msg *otg.PFTypeGapPrecisionTimeType) (PFTypeGapPrecisionTimeType, error)
	// FromPbText unmarshals PFTypeGapPrecisionTimeType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PFTypeGapPrecisionTimeType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PFTypeGapPrecisionTimeType from JSON text
	FromJson(value string) error
	// Validate validates PFTypeGapPrecisionTimeType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PFTypeGapPrecisionTimeType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Duration returns float64, set in PFTypeGapPrecisionTimeType.
	Duration() float64
	// SetDuration assigns float64 provided by user to PFTypeGapPrecisionTimeType
	SetDuration(value float64) PFTypeGapPrecisionTimeType
	// HasDuration checks if Duration has been set in PFTypeGapPrecisionTimeType
	HasDuration() bool
	// Units returns PFTypeGapPrecisionTimeTypeUnitsEnum, set in PFTypeGapPrecisionTimeType
	Units() PFTypeGapPrecisionTimeTypeUnitsEnum
	// SetUnits assigns PFTypeGapPrecisionTimeTypeUnitsEnum provided by user to PFTypeGapPrecisionTimeType
	SetUnits(value PFTypeGapPrecisionTimeTypeUnitsEnum) PFTypeGapPrecisionTimeType
	// HasUnits checks if Units has been set in PFTypeGapPrecisionTimeType
	HasUnits() bool
}

func (obj *pFTypeGapPrecisionTimeType) populateXml(xObj *Argument) error {

	if obj.HasDuration() {

		member := Member{
			Name: "duration",
			Type: "double",
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasUnits() {

		member := Member{
			Name:  "units",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.PFType+eGapUnit",
			Value: strconv.FormatInt(int64(obj.obj.Units.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *pFTypeGapPrecisionTimeType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Duration returns a float64
func (obj *pFTypeGapPrecisionTimeType) Duration() float64 {

	return *obj.obj.Duration

}

// TBD
// Duration returns a float64
func (obj *pFTypeGapPrecisionTimeType) HasDuration() bool {
	return obj.obj.Duration != nil
}

// TBD
// SetDuration sets the float64 value in the PFTypeGapPrecisionTimeType object
func (obj *pFTypeGapPrecisionTimeType) SetDuration(value float64) PFTypeGapPrecisionTimeType {

	obj.obj.Duration = &value
	return obj
}

type PFTypeGapPrecisionTimeTypeUnitsEnum string

// Enum of Units on PFTypeGapPrecisionTimeType
var PFTypeGapPrecisionTimeTypeUnits = struct {
	KGAPNANOSECONDS PFTypeGapPrecisionTimeTypeUnitsEnum
	KGAPCLOCKTICKS  PFTypeGapPrecisionTimeTypeUnitsEnum
	KGAPBYTES       PFTypeGapPrecisionTimeTypeUnitsEnum
}{
	KGAPNANOSECONDS: PFTypeGapPrecisionTimeTypeUnitsEnum("kGapNanoSeconds"),
	KGAPCLOCKTICKS:  PFTypeGapPrecisionTimeTypeUnitsEnum("kGapClockTicks"),
	KGAPBYTES:       PFTypeGapPrecisionTimeTypeUnitsEnum("kGapBytes"),
}

func (obj *pFTypeGapPrecisionTimeType) Units() PFTypeGapPrecisionTimeTypeUnitsEnum {
	return PFTypeGapPrecisionTimeTypeUnitsEnum(obj.obj.Units.Enum().String())
}

// TBD
// Units returns a string
func (obj *pFTypeGapPrecisionTimeType) HasUnits() bool {
	return obj.obj.Units != nil
}

func (obj *pFTypeGapPrecisionTimeType) SetUnits(value PFTypeGapPrecisionTimeTypeUnitsEnum) PFTypeGapPrecisionTimeType {
	intValue, ok := otg.PFTypeGapPrecisionTimeType_Units_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on PFTypeGapPrecisionTimeTypeUnitsEnum", string(value)))
		return obj
	}
	enumValue := otg.PFTypeGapPrecisionTimeType_Units_Enum(intValue)
	obj.obj.Units = &enumValue

	return obj
}

func (obj *pFTypeGapPrecisionTimeType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *pFTypeGapPrecisionTimeType) setDefault() {

}

// ***** StreamFramePreemptionType *****
type streamFramePreemptionType struct {
	validation
	obj *otg.StreamFramePreemptionType
}

func NewStreamFramePreemptionType() StreamFramePreemptionType {
	obj := streamFramePreemptionType{obj: &otg.StreamFramePreemptionType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamFramePreemptionType) Msg() *otg.StreamFramePreemptionType {
	return obj.obj
}

func (obj *streamFramePreemptionType) SetMsg(msg *otg.StreamFramePreemptionType) StreamFramePreemptionType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamFramePreemptionType) ToProto() (*otg.StreamFramePreemptionType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamFramePreemptionType) FromProto(msg *otg.StreamFramePreemptionType) (StreamFramePreemptionType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamFramePreemptionType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamFramePreemptionType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamFramePreemptionType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamFramePreemptionType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamFramePreemptionType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamFramePreemptionType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamFramePreemptionType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamFramePreemptionType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamFramePreemptionType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamFramePreemptionType) Clone() (StreamFramePreemptionType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamFramePreemptionType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamFramePreemptionType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// StreamFramePreemptionType is models parameters to support Tx Frame Preemption
type StreamFramePreemptionType interface {
	Validation
	// Msg marshals StreamFramePreemptionType to protobuf object *otg.StreamFramePreemptionType
	// and doesn't set defaults
	Msg() *otg.StreamFramePreemptionType
	// SetMsg unmarshals StreamFramePreemptionType from protobuf object *otg.StreamFramePreemptionType
	// and doesn't set defaults
	SetMsg(*otg.StreamFramePreemptionType) StreamFramePreemptionType
	// ToProto marshals StreamFramePreemptionType to protobuf object *otg.StreamFramePreemptionType
	ToProto() (*otg.StreamFramePreemptionType, error)
	// ToPbText marshals StreamFramePreemptionType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamFramePreemptionType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamFramePreemptionType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamFramePreemptionType from protobuf object *otg.StreamFramePreemptionType
	FromProto(msg *otg.StreamFramePreemptionType) (StreamFramePreemptionType, error)
	// FromPbText unmarshals StreamFramePreemptionType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamFramePreemptionType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamFramePreemptionType from JSON text
	FromJson(value string) error
	// Validate validates StreamFramePreemptionType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamFramePreemptionType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// SmdType returns StreamFramePreemptionTypeSmdTypeEnum, set in StreamFramePreemptionType
	SmdType() StreamFramePreemptionTypeSmdTypeEnum
	// SetSmdType assigns StreamFramePreemptionTypeSmdTypeEnum provided by user to StreamFramePreemptionType
	SetSmdType(value StreamFramePreemptionTypeSmdTypeEnum) StreamFramePreemptionType
	// HasSmdType checks if SmdType has been set in StreamFramePreemptionType
	HasSmdType() bool
	// FragCount returns StreamFramePreemptionTypeFragCountEnum, set in StreamFramePreemptionType
	FragCount() StreamFramePreemptionTypeFragCountEnum
	// SetFragCount assigns StreamFramePreemptionTypeFragCountEnum provided by user to StreamFramePreemptionType
	SetFragCount(value StreamFramePreemptionTypeFragCountEnum) StreamFramePreemptionType
	// HasFragCount checks if FragCount has been set in StreamFramePreemptionType
	HasFragCount() bool
	// CrcType returns StreamFramePreemptionTypeCrcTypeEnum, set in StreamFramePreemptionType
	CrcType() StreamFramePreemptionTypeCrcTypeEnum
	// SetCrcType assigns StreamFramePreemptionTypeCrcTypeEnum provided by user to StreamFramePreemptionType
	SetCrcType(value StreamFramePreemptionTypeCrcTypeEnum) StreamFramePreemptionType
	// HasCrcType checks if CrcType has been set in StreamFramePreemptionType
	HasCrcType() bool
}

func (obj *streamFramePreemptionType) populateXml(xObj *Argument) error {

	if obj.HasSmdType() {

		member := Member{
			Name:  "smdtype",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Stream+eSMDType",
			Value: strconv.FormatInt(int64(obj.obj.SmdType.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasFragCount() {

		member := Member{
			Name:  "fragcount",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Stream+eFragCount",
			Value: strconv.FormatInt(int64(obj.obj.FragCount.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasCrcType() {

		member := Member{
			Name:  "crctype",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Stream+eCRCType",
			Value: strconv.FormatInt(int64(obj.obj.CrcType.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamFramePreemptionType) populateFromXml(xObj *RetVal) error {

	return nil
}

type StreamFramePreemptionTypeSmdTypeEnum string

// Enum of SmdType on StreamFramePreemptionType
var StreamFramePreemptionTypeSmdType = struct {
	KEXPRESS  StreamFramePreemptionTypeSmdTypeEnum
	KAUTOSMD  StreamFramePreemptionTypeSmdTypeEnum
	KAUTOSMDS StreamFramePreemptionTypeSmdTypeEnum
	KAUTOSMDC StreamFramePreemptionTypeSmdTypeEnum
	KSMDS0    StreamFramePreemptionTypeSmdTypeEnum
	KSMDS1    StreamFramePreemptionTypeSmdTypeEnum
	KSMDS2    StreamFramePreemptionTypeSmdTypeEnum
	KSMDS3    StreamFramePreemptionTypeSmdTypeEnum
	KSMDC0    StreamFramePreemptionTypeSmdTypeEnum
	KSMDC1    StreamFramePreemptionTypeSmdTypeEnum
	KSMDC2    StreamFramePreemptionTypeSmdTypeEnum
	KSMDC3    StreamFramePreemptionTypeSmdTypeEnum
	KVERIFY   StreamFramePreemptionTypeSmdTypeEnum
	KRESPOND  StreamFramePreemptionTypeSmdTypeEnum
	KINVALID  StreamFramePreemptionTypeSmdTypeEnum
}{
	KEXPRESS:  StreamFramePreemptionTypeSmdTypeEnum("kExpress"),
	KAUTOSMD:  StreamFramePreemptionTypeSmdTypeEnum("kAutoSMD"),
	KAUTOSMDS: StreamFramePreemptionTypeSmdTypeEnum("kAutoSMDS"),
	KAUTOSMDC: StreamFramePreemptionTypeSmdTypeEnum("kAutoSMDC"),
	KSMDS0:    StreamFramePreemptionTypeSmdTypeEnum("kSMDS0"),
	KSMDS1:    StreamFramePreemptionTypeSmdTypeEnum("kSMDS1"),
	KSMDS2:    StreamFramePreemptionTypeSmdTypeEnum("kSMDS2"),
	KSMDS3:    StreamFramePreemptionTypeSmdTypeEnum("kSMDS3"),
	KSMDC0:    StreamFramePreemptionTypeSmdTypeEnum("kSMDC0"),
	KSMDC1:    StreamFramePreemptionTypeSmdTypeEnum("kSMDC1"),
	KSMDC2:    StreamFramePreemptionTypeSmdTypeEnum("kSMDC2"),
	KSMDC3:    StreamFramePreemptionTypeSmdTypeEnum("kSMDC3"),
	KVERIFY:   StreamFramePreemptionTypeSmdTypeEnum("kVerify"),
	KRESPOND:  StreamFramePreemptionTypeSmdTypeEnum("kRespond"),
	KINVALID:  StreamFramePreemptionTypeSmdTypeEnum("kInvalid"),
}

func (obj *streamFramePreemptionType) SmdType() StreamFramePreemptionTypeSmdTypeEnum {
	return StreamFramePreemptionTypeSmdTypeEnum(obj.obj.SmdType.Enum().String())
}

// TBD
// SmdType returns a string
func (obj *streamFramePreemptionType) HasSmdType() bool {
	return obj.obj.SmdType != nil
}

func (obj *streamFramePreemptionType) SetSmdType(value StreamFramePreemptionTypeSmdTypeEnum) StreamFramePreemptionType {
	intValue, ok := otg.StreamFramePreemptionType_SmdType_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on StreamFramePreemptionTypeSmdTypeEnum", string(value)))
		return obj
	}
	enumValue := otg.StreamFramePreemptionType_SmdType_Enum(intValue)
	obj.obj.SmdType = &enumValue

	return obj
}

type StreamFramePreemptionTypeFragCountEnum string

// Enum of FragCount on StreamFramePreemptionType
var StreamFramePreemptionTypeFragCount = struct {
	KFRAGCOUNT0    StreamFramePreemptionTypeFragCountEnum
	KFRAGCOUNT1    StreamFramePreemptionTypeFragCountEnum
	KFRAGCOUNT2    StreamFramePreemptionTypeFragCountEnum
	KFRAGCOUNT3    StreamFramePreemptionTypeFragCountEnum
	KFRAGCOUNTAUTO StreamFramePreemptionTypeFragCountEnum
}{
	KFRAGCOUNT0:    StreamFramePreemptionTypeFragCountEnum("kFragCount0"),
	KFRAGCOUNT1:    StreamFramePreemptionTypeFragCountEnum("kFragCount1"),
	KFRAGCOUNT2:    StreamFramePreemptionTypeFragCountEnum("kFragCount2"),
	KFRAGCOUNT3:    StreamFramePreemptionTypeFragCountEnum("kFragCount3"),
	KFRAGCOUNTAUTO: StreamFramePreemptionTypeFragCountEnum("kFragCountAuto"),
}

func (obj *streamFramePreemptionType) FragCount() StreamFramePreemptionTypeFragCountEnum {
	return StreamFramePreemptionTypeFragCountEnum(obj.obj.FragCount.Enum().String())
}

// TBD
// FragCount returns a string
func (obj *streamFramePreemptionType) HasFragCount() bool {
	return obj.obj.FragCount != nil
}

func (obj *streamFramePreemptionType) SetFragCount(value StreamFramePreemptionTypeFragCountEnum) StreamFramePreemptionType {
	intValue, ok := otg.StreamFramePreemptionType_FragCount_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on StreamFramePreemptionTypeFragCountEnum", string(value)))
		return obj
	}
	enumValue := otg.StreamFramePreemptionType_FragCount_Enum(intValue)
	obj.obj.FragCount = &enumValue

	return obj
}

type StreamFramePreemptionTypeCrcTypeEnum string

// Enum of CrcType on StreamFramePreemptionType
var StreamFramePreemptionTypeCrcType = struct {
	KMCRC StreamFramePreemptionTypeCrcTypeEnum
	KFCS  StreamFramePreemptionTypeCrcTypeEnum
}{
	KMCRC: StreamFramePreemptionTypeCrcTypeEnum("kmCRC"),
	KFCS:  StreamFramePreemptionTypeCrcTypeEnum("kFCS"),
}

func (obj *streamFramePreemptionType) CrcType() StreamFramePreemptionTypeCrcTypeEnum {
	return StreamFramePreemptionTypeCrcTypeEnum(obj.obj.CrcType.Enum().String())
}

// TBD
// CrcType returns a string
func (obj *streamFramePreemptionType) HasCrcType() bool {
	return obj.obj.CrcType != nil
}

func (obj *streamFramePreemptionType) SetCrcType(value StreamFramePreemptionTypeCrcTypeEnum) StreamFramePreemptionType {
	intValue, ok := otg.StreamFramePreemptionType_CrcType_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on StreamFramePreemptionTypeCrcTypeEnum", string(value)))
		return obj
	}
	enumValue := otg.StreamFramePreemptionType_CrcType_Enum(intValue)
	obj.obj.CrcType = &enumValue

	return obj
}

func (obj *streamFramePreemptionType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *streamFramePreemptionType) setDefault() {

}

// ***** PFTypeFixedPoint16 *****
type pFTypeFixedPoint16 struct {
	validation
	obj *otg.PFTypeFixedPoint16
}

func NewPFTypeFixedPoint16() PFTypeFixedPoint16 {
	obj := pFTypeFixedPoint16{obj: &otg.PFTypeFixedPoint16{}}
	obj.setDefault()
	return &obj
}

func (obj *pFTypeFixedPoint16) Msg() *otg.PFTypeFixedPoint16 {
	return obj.obj
}

func (obj *pFTypeFixedPoint16) SetMsg(msg *otg.PFTypeFixedPoint16) PFTypeFixedPoint16 {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *pFTypeFixedPoint16) ToProto() (*otg.PFTypeFixedPoint16, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *pFTypeFixedPoint16) FromProto(msg *otg.PFTypeFixedPoint16) (PFTypeFixedPoint16, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *pFTypeFixedPoint16) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *pFTypeFixedPoint16) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *pFTypeFixedPoint16) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypeFixedPoint16) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *pFTypeFixedPoint16) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *pFTypeFixedPoint16) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *pFTypeFixedPoint16) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *pFTypeFixedPoint16) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *pFTypeFixedPoint16) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *pFTypeFixedPoint16) Clone() (PFTypeFixedPoint16, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewPFTypeFixedPoint16()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *pFTypeFixedPoint16) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// PFTypeFixedPoint16 is this arithmetic type represents an unsigned fixed point number with 16 bits following the binary point.
type PFTypeFixedPoint16 interface {
	Validation
	// Msg marshals PFTypeFixedPoint16 to protobuf object *otg.PFTypeFixedPoint16
	// and doesn't set defaults
	Msg() *otg.PFTypeFixedPoint16
	// SetMsg unmarshals PFTypeFixedPoint16 from protobuf object *otg.PFTypeFixedPoint16
	// and doesn't set defaults
	SetMsg(*otg.PFTypeFixedPoint16) PFTypeFixedPoint16
	// ToProto marshals PFTypeFixedPoint16 to protobuf object *otg.PFTypeFixedPoint16
	ToProto() (*otg.PFTypeFixedPoint16, error)
	// ToPbText marshals PFTypeFixedPoint16 to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals PFTypeFixedPoint16 to YAML text
	ToYaml() (string, error)
	// ToJson marshals PFTypeFixedPoint16 to JSON text
	ToJson() (string, error)
	// FromProto unmarshals PFTypeFixedPoint16 from protobuf object *otg.PFTypeFixedPoint16
	FromProto(msg *otg.PFTypeFixedPoint16) (PFTypeFixedPoint16, error)
	// FromPbText unmarshals PFTypeFixedPoint16 from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals PFTypeFixedPoint16 from YAML text
	FromYaml(value string) error
	// FromJson unmarshals PFTypeFixedPoint16 from JSON text
	FromJson(value string) error
	// Validate validates PFTypeFixedPoint16
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (PFTypeFixedPoint16, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Value returns int64, set in PFTypeFixedPoint16.
	Value() int64
	// SetValue assigns int64 provided by user to PFTypeFixedPoint16
	SetValue(value int64) PFTypeFixedPoint16
	// HasValue checks if Value has been set in PFTypeFixedPoint16
	HasValue() bool
}

func (obj *pFTypeFixedPoint16) populateXml(xObj *Argument) error {

	if obj.HasValue() {

		member := Member{
			Name:  "value",
			Type:  "int64",
			Value: strconv.FormatInt(obj.Value(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *pFTypeFixedPoint16) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Value returns a int64
func (obj *pFTypeFixedPoint16) Value() int64 {

	return *obj.obj.Value

}

// TBD
// Value returns a int64
func (obj *pFTypeFixedPoint16) HasValue() bool {
	return obj.obj.Value != nil
}

// TBD
// SetValue sets the int64 value in the PFTypeFixedPoint16 object
func (obj *pFTypeFixedPoint16) SetValue(value int64) PFTypeFixedPoint16 {

	obj.obj.Value = &value
	return obj
}

func (obj *pFTypeFixedPoint16) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *pFTypeFixedPoint16) setDefault() {

}

// ***** StreamRandomSizeControlType *****
type streamRandomSizeControlType struct {
	validation
	obj                             *otg.StreamRandomSizeControlType
	randomQuadGaussianControlHolder StreamRandomQuadGaussianControlType
	randomWeightedPairControlHolder StreamRandomWeightedPairControlType
}

func NewStreamRandomSizeControlType() StreamRandomSizeControlType {
	obj := streamRandomSizeControlType{obj: &otg.StreamRandomSizeControlType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamRandomSizeControlType) Msg() *otg.StreamRandomSizeControlType {
	return obj.obj
}

func (obj *streamRandomSizeControlType) SetMsg(msg *otg.StreamRandomSizeControlType) StreamRandomSizeControlType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamRandomSizeControlType) ToProto() (*otg.StreamRandomSizeControlType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamRandomSizeControlType) FromProto(msg *otg.StreamRandomSizeControlType) (StreamRandomSizeControlType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamRandomSizeControlType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamRandomSizeControlType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamRandomSizeControlType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamRandomSizeControlType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamRandomSizeControlType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamRandomSizeControlType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamRandomSizeControlType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamRandomSizeControlType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamRandomSizeControlType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamRandomSizeControlType) Clone() (StreamRandomSizeControlType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamRandomSizeControlType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamRandomSizeControlType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamRandomSizeControlType) setNil() {
	obj.randomQuadGaussianControlHolder = nil
	obj.randomWeightedPairControlHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamRandomSizeControlType is tBD
type StreamRandomSizeControlType interface {
	Validation
	// Msg marshals StreamRandomSizeControlType to protobuf object *otg.StreamRandomSizeControlType
	// and doesn't set defaults
	Msg() *otg.StreamRandomSizeControlType
	// SetMsg unmarshals StreamRandomSizeControlType from protobuf object *otg.StreamRandomSizeControlType
	// and doesn't set defaults
	SetMsg(*otg.StreamRandomSizeControlType) StreamRandomSizeControlType
	// ToProto marshals StreamRandomSizeControlType to protobuf object *otg.StreamRandomSizeControlType
	ToProto() (*otg.StreamRandomSizeControlType, error)
	// ToPbText marshals StreamRandomSizeControlType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamRandomSizeControlType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamRandomSizeControlType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamRandomSizeControlType from protobuf object *otg.StreamRandomSizeControlType
	FromProto(msg *otg.StreamRandomSizeControlType) (StreamRandomSizeControlType, error)
	// FromPbText unmarshals StreamRandomSizeControlType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamRandomSizeControlType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamRandomSizeControlType from JSON text
	FromJson(value string) error
	// Validate validates StreamRandomSizeControlType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamRandomSizeControlType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// RandomSizeType returns StreamRandomSizeControlTypeRandomSizeTypeEnum, set in StreamRandomSizeControlType
	RandomSizeType() StreamRandomSizeControlTypeRandomSizeTypeEnum
	// SetRandomSizeType assigns StreamRandomSizeControlTypeRandomSizeTypeEnum provided by user to StreamRandomSizeControlType
	SetRandomSizeType(value StreamRandomSizeControlTypeRandomSizeTypeEnum) StreamRandomSizeControlType
	// HasRandomSizeType checks if RandomSizeType has been set in StreamRandomSizeControlType
	HasRandomSizeType() bool
	// RandomQuadGaussianControl returns StreamRandomQuadGaussianControlType, set in StreamRandomSizeControlType.
	// StreamRandomQuadGaussianControlType is tBD
	RandomQuadGaussianControl() StreamRandomQuadGaussianControlType
	// SetRandomQuadGaussianControl assigns StreamRandomQuadGaussianControlType provided by user to StreamRandomSizeControlType.
	// StreamRandomQuadGaussianControlType is tBD
	SetRandomQuadGaussianControl(value StreamRandomQuadGaussianControlType) StreamRandomSizeControlType
	// HasRandomQuadGaussianControl checks if RandomQuadGaussianControl has been set in StreamRandomSizeControlType
	HasRandomQuadGaussianControl() bool
	// RandomWeightedPairControl returns StreamRandomWeightedPairControlType, set in StreamRandomSizeControlType.
	// StreamRandomWeightedPairControlType is tBD
	RandomWeightedPairControl() StreamRandomWeightedPairControlType
	// SetRandomWeightedPairControl assigns StreamRandomWeightedPairControlType provided by user to StreamRandomSizeControlType.
	// StreamRandomWeightedPairControlType is tBD
	SetRandomWeightedPairControl(value StreamRandomWeightedPairControlType) StreamRandomSizeControlType
	// HasRandomWeightedPairControl checks if RandomWeightedPairControl has been set in StreamRandomSizeControlType
	HasRandomWeightedPairControl() bool
	setNil()
}

func (obj *streamRandomSizeControlType) populateXml(xObj *Argument) error {

	if obj.HasRandomSizeType() {

		member := Member{
			Name:  "randomsizetype",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Stream+eRandomSizeType",
			Value: strconv.FormatInt(int64(obj.obj.RandomSizeType.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamRandomSizeControlType) populateFromXml(xObj *RetVal) error {

	return nil
}

type StreamRandomSizeControlTypeRandomSizeTypeEnum string

// Enum of RandomSizeType on StreamRandomSizeControlType
var StreamRandomSizeControlTypeRandomSizeType = struct {
	KRANDOMSIZEOFF          StreamRandomSizeControlTypeRandomSizeTypeEnum
	KRANDOMSIZEUNIFORM      StreamRandomSizeControlTypeRandomSizeTypeEnum
	KRANDOMSIZEWEIGHTEDPAIR StreamRandomSizeControlTypeRandomSizeTypeEnum
	KRANDOMSIZEQUADGUASSIAN StreamRandomSizeControlTypeRandomSizeTypeEnum
	KRANDOMSIZECISCO        StreamRandomSizeControlTypeRandomSizeTypeEnum
	KRANDOMSIZEIMIX         StreamRandomSizeControlTypeRandomSizeTypeEnum
	KRANDOMSIZETOLLY        StreamRandomSizeControlTypeRandomSizeTypeEnum
	KRANDOMSIZERPRTRIMODAL  StreamRandomSizeControlTypeRandomSizeTypeEnum
	KRANDOMSIZERPRQUADMODAL StreamRandomSizeControlTypeRandomSizeTypeEnum
}{
	KRANDOMSIZEOFF:          StreamRandomSizeControlTypeRandomSizeTypeEnum("kRandomSizeOff"),
	KRANDOMSIZEUNIFORM:      StreamRandomSizeControlTypeRandomSizeTypeEnum("kRandomSizeUniform"),
	KRANDOMSIZEWEIGHTEDPAIR: StreamRandomSizeControlTypeRandomSizeTypeEnum("kRandomSizeWeightedPair"),
	KRANDOMSIZEQUADGUASSIAN: StreamRandomSizeControlTypeRandomSizeTypeEnum("kRandomSizeQuadGuassian"),
	KRANDOMSIZECISCO:        StreamRandomSizeControlTypeRandomSizeTypeEnum("kRandomSizeCisco"),
	KRANDOMSIZEIMIX:         StreamRandomSizeControlTypeRandomSizeTypeEnum("kRandomSizeImix"),
	KRANDOMSIZETOLLY:        StreamRandomSizeControlTypeRandomSizeTypeEnum("kRandomSizeTolly"),
	KRANDOMSIZERPRTRIMODAL:  StreamRandomSizeControlTypeRandomSizeTypeEnum("kRandomSizeRprTriModal"),
	KRANDOMSIZERPRQUADMODAL: StreamRandomSizeControlTypeRandomSizeTypeEnum("kRandomSizeRprQuadModal"),
}

func (obj *streamRandomSizeControlType) RandomSizeType() StreamRandomSizeControlTypeRandomSizeTypeEnum {
	return StreamRandomSizeControlTypeRandomSizeTypeEnum(obj.obj.RandomSizeType.Enum().String())
}

// TBD
// RandomSizeType returns a string
func (obj *streamRandomSizeControlType) HasRandomSizeType() bool {
	return obj.obj.RandomSizeType != nil
}

func (obj *streamRandomSizeControlType) SetRandomSizeType(value StreamRandomSizeControlTypeRandomSizeTypeEnum) StreamRandomSizeControlType {
	intValue, ok := otg.StreamRandomSizeControlType_RandomSizeType_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on StreamRandomSizeControlTypeRandomSizeTypeEnum", string(value)))
		return obj
	}
	enumValue := otg.StreamRandomSizeControlType_RandomSizeType_Enum(intValue)
	obj.obj.RandomSizeType = &enumValue

	return obj
}

// TBD
// RandomQuadGaussianControl returns a StreamRandomQuadGaussianControlType
func (obj *streamRandomSizeControlType) RandomQuadGaussianControl() StreamRandomQuadGaussianControlType {
	if obj.obj.RandomQuadGaussianControl == nil {
		obj.obj.RandomQuadGaussianControl = NewStreamRandomQuadGaussianControlType().Msg()
	}
	if obj.randomQuadGaussianControlHolder == nil {
		obj.randomQuadGaussianControlHolder = &streamRandomQuadGaussianControlType{obj: obj.obj.RandomQuadGaussianControl}
	}
	return obj.randomQuadGaussianControlHolder
}

// TBD
// RandomQuadGaussianControl returns a StreamRandomQuadGaussianControlType
func (obj *streamRandomSizeControlType) HasRandomQuadGaussianControl() bool {
	return obj.obj.RandomQuadGaussianControl != nil
}

// TBD
// SetRandomQuadGaussianControl sets the StreamRandomQuadGaussianControlType value in the StreamRandomSizeControlType object
func (obj *streamRandomSizeControlType) SetRandomQuadGaussianControl(value StreamRandomQuadGaussianControlType) StreamRandomSizeControlType {

	obj.randomQuadGaussianControlHolder = nil
	obj.obj.RandomQuadGaussianControl = value.Msg()

	return obj
}

// TBD
// RandomWeightedPairControl returns a StreamRandomWeightedPairControlType
func (obj *streamRandomSizeControlType) RandomWeightedPairControl() StreamRandomWeightedPairControlType {
	if obj.obj.RandomWeightedPairControl == nil {
		obj.obj.RandomWeightedPairControl = NewStreamRandomWeightedPairControlType().Msg()
	}
	if obj.randomWeightedPairControlHolder == nil {
		obj.randomWeightedPairControlHolder = &streamRandomWeightedPairControlType{obj: obj.obj.RandomWeightedPairControl}
	}
	return obj.randomWeightedPairControlHolder
}

// TBD
// RandomWeightedPairControl returns a StreamRandomWeightedPairControlType
func (obj *streamRandomSizeControlType) HasRandomWeightedPairControl() bool {
	return obj.obj.RandomWeightedPairControl != nil
}

// TBD
// SetRandomWeightedPairControl sets the StreamRandomWeightedPairControlType value in the StreamRandomSizeControlType object
func (obj *streamRandomSizeControlType) SetRandomWeightedPairControl(value StreamRandomWeightedPairControlType) StreamRandomSizeControlType {

	obj.randomWeightedPairControlHolder = nil
	obj.obj.RandomWeightedPairControl = value.Msg()

	return obj
}

func (obj *streamRandomSizeControlType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.RandomQuadGaussianControl != nil {

		obj.RandomQuadGaussianControl().validateObj(vObj, set_default)
	}

	if obj.obj.RandomWeightedPairControl != nil {

		obj.RandomWeightedPairControl().validateObj(vObj, set_default)
	}

}

func (obj *streamRandomSizeControlType) setDefault() {

}

// ***** StreamBackgroundOverlayList *****
type streamBackgroundOverlayList struct {
	validation
	obj                         *otg.StreamBackgroundOverlayList
	backgroundOverlayListHolder StreamBackgroundOverlayListStreamBackgroundOverlayTypeIter
}

func NewStreamBackgroundOverlayList() StreamBackgroundOverlayList {
	obj := streamBackgroundOverlayList{obj: &otg.StreamBackgroundOverlayList{}}
	obj.setDefault()
	return &obj
}

func (obj *streamBackgroundOverlayList) Msg() *otg.StreamBackgroundOverlayList {
	return obj.obj
}

func (obj *streamBackgroundOverlayList) SetMsg(msg *otg.StreamBackgroundOverlayList) StreamBackgroundOverlayList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamBackgroundOverlayList) ToProto() (*otg.StreamBackgroundOverlayList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamBackgroundOverlayList) FromProto(msg *otg.StreamBackgroundOverlayList) (StreamBackgroundOverlayList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamBackgroundOverlayList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamBackgroundOverlayList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamBackgroundOverlayList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamBackgroundOverlayList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamBackgroundOverlayList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamBackgroundOverlayList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamBackgroundOverlayList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamBackgroundOverlayList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamBackgroundOverlayList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamBackgroundOverlayList) Clone() (StreamBackgroundOverlayList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamBackgroundOverlayList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamBackgroundOverlayList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamBackgroundOverlayList) setNil() {
	obj.backgroundOverlayListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamBackgroundOverlayList is tBD
type StreamBackgroundOverlayList interface {
	Validation
	// Msg marshals StreamBackgroundOverlayList to protobuf object *otg.StreamBackgroundOverlayList
	// and doesn't set defaults
	Msg() *otg.StreamBackgroundOverlayList
	// SetMsg unmarshals StreamBackgroundOverlayList from protobuf object *otg.StreamBackgroundOverlayList
	// and doesn't set defaults
	SetMsg(*otg.StreamBackgroundOverlayList) StreamBackgroundOverlayList
	// ToProto marshals StreamBackgroundOverlayList to protobuf object *otg.StreamBackgroundOverlayList
	ToProto() (*otg.StreamBackgroundOverlayList, error)
	// ToPbText marshals StreamBackgroundOverlayList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamBackgroundOverlayList to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamBackgroundOverlayList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamBackgroundOverlayList from protobuf object *otg.StreamBackgroundOverlayList
	FromProto(msg *otg.StreamBackgroundOverlayList) (StreamBackgroundOverlayList, error)
	// FromPbText unmarshals StreamBackgroundOverlayList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamBackgroundOverlayList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamBackgroundOverlayList from JSON text
	FromJson(value string) error
	// Validate validates StreamBackgroundOverlayList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamBackgroundOverlayList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// BackgroundOverlayList returns StreamBackgroundOverlayListStreamBackgroundOverlayTypeIterIter, set in StreamBackgroundOverlayList
	BackgroundOverlayList() StreamBackgroundOverlayListStreamBackgroundOverlayTypeIter
	setNil()
}

func (obj *streamBackgroundOverlayList) populateXml(xObj *Argument) error {

	if len(obj.BackgroundOverlayList().Items()) != 0 {
		for _, item := range obj.BackgroundOverlayList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *streamBackgroundOverlayList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// BackgroundOverlayList returns a []StreamBackgroundOverlayType
func (obj *streamBackgroundOverlayList) BackgroundOverlayList() StreamBackgroundOverlayListStreamBackgroundOverlayTypeIter {
	if len(obj.obj.BackgroundOverlayList) == 0 {
		obj.obj.BackgroundOverlayList = []*otg.StreamBackgroundOverlayType{}
	}
	if obj.backgroundOverlayListHolder == nil {
		obj.backgroundOverlayListHolder = newStreamBackgroundOverlayListStreamBackgroundOverlayTypeIter(&obj.obj.BackgroundOverlayList).setMsg(obj)
	}
	return obj.backgroundOverlayListHolder
}

type streamBackgroundOverlayListStreamBackgroundOverlayTypeIter struct {
	obj                              *streamBackgroundOverlayList
	streamBackgroundOverlayTypeSlice []StreamBackgroundOverlayType
	fieldPtr                         *[]*otg.StreamBackgroundOverlayType
}

func newStreamBackgroundOverlayListStreamBackgroundOverlayTypeIter(ptr *[]*otg.StreamBackgroundOverlayType) StreamBackgroundOverlayListStreamBackgroundOverlayTypeIter {
	return &streamBackgroundOverlayListStreamBackgroundOverlayTypeIter{fieldPtr: ptr}
}

type StreamBackgroundOverlayListStreamBackgroundOverlayTypeIter interface {
	setMsg(*streamBackgroundOverlayList) StreamBackgroundOverlayListStreamBackgroundOverlayTypeIter
	Items() []StreamBackgroundOverlayType
	Add() StreamBackgroundOverlayType
	Append(items ...StreamBackgroundOverlayType) StreamBackgroundOverlayListStreamBackgroundOverlayTypeIter
	Set(index int, newObj StreamBackgroundOverlayType) StreamBackgroundOverlayListStreamBackgroundOverlayTypeIter
	Clear() StreamBackgroundOverlayListStreamBackgroundOverlayTypeIter
	clearHolderSlice() StreamBackgroundOverlayListStreamBackgroundOverlayTypeIter
	appendHolderSlice(item StreamBackgroundOverlayType) StreamBackgroundOverlayListStreamBackgroundOverlayTypeIter
}

func (obj *streamBackgroundOverlayListStreamBackgroundOverlayTypeIter) setMsg(msg *streamBackgroundOverlayList) StreamBackgroundOverlayListStreamBackgroundOverlayTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&streamBackgroundOverlayType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *streamBackgroundOverlayListStreamBackgroundOverlayTypeIter) Items() []StreamBackgroundOverlayType {
	return obj.streamBackgroundOverlayTypeSlice
}

func (obj *streamBackgroundOverlayListStreamBackgroundOverlayTypeIter) Add() StreamBackgroundOverlayType {
	newObj := &otg.StreamBackgroundOverlayType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &streamBackgroundOverlayType{obj: newObj}
	newLibObj.setDefault()
	obj.streamBackgroundOverlayTypeSlice = append(obj.streamBackgroundOverlayTypeSlice, newLibObj)
	return newLibObj
}

func (obj *streamBackgroundOverlayListStreamBackgroundOverlayTypeIter) Append(items ...StreamBackgroundOverlayType) StreamBackgroundOverlayListStreamBackgroundOverlayTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.streamBackgroundOverlayTypeSlice = append(obj.streamBackgroundOverlayTypeSlice, item)
	}
	return obj
}

func (obj *streamBackgroundOverlayListStreamBackgroundOverlayTypeIter) Set(index int, newObj StreamBackgroundOverlayType) StreamBackgroundOverlayListStreamBackgroundOverlayTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.streamBackgroundOverlayTypeSlice[index] = newObj
	return obj
}
func (obj *streamBackgroundOverlayListStreamBackgroundOverlayTypeIter) Clear() StreamBackgroundOverlayListStreamBackgroundOverlayTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.StreamBackgroundOverlayType{}
		obj.streamBackgroundOverlayTypeSlice = []StreamBackgroundOverlayType{}
	}
	return obj
}
func (obj *streamBackgroundOverlayListStreamBackgroundOverlayTypeIter) clearHolderSlice() StreamBackgroundOverlayListStreamBackgroundOverlayTypeIter {
	if len(obj.streamBackgroundOverlayTypeSlice) > 0 {
		obj.streamBackgroundOverlayTypeSlice = []StreamBackgroundOverlayType{}
	}
	return obj
}
func (obj *streamBackgroundOverlayListStreamBackgroundOverlayTypeIter) appendHolderSlice(item StreamBackgroundOverlayType) StreamBackgroundOverlayListStreamBackgroundOverlayTypeIter {
	obj.streamBackgroundOverlayTypeSlice = append(obj.streamBackgroundOverlayTypeSlice, item)
	return obj
}

func (obj *streamBackgroundOverlayList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.BackgroundOverlayList) != 0 {

		if set_default {
			obj.BackgroundOverlayList().clearHolderSlice()
			for _, item := range obj.obj.BackgroundOverlayList {
				obj.BackgroundOverlayList().appendHolderSlice(&streamBackgroundOverlayType{obj: item})
			}
		}
		for _, item := range obj.BackgroundOverlayList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *streamBackgroundOverlayList) setDefault() {

}

// ***** StreamSpecialProtocolInfoType *****
type streamSpecialProtocolInfoType struct {
	validation
	obj *otg.StreamSpecialProtocolInfoType
}

func NewStreamSpecialProtocolInfoType() StreamSpecialProtocolInfoType {
	obj := streamSpecialProtocolInfoType{obj: &otg.StreamSpecialProtocolInfoType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamSpecialProtocolInfoType) Msg() *otg.StreamSpecialProtocolInfoType {
	return obj.obj
}

func (obj *streamSpecialProtocolInfoType) SetMsg(msg *otg.StreamSpecialProtocolInfoType) StreamSpecialProtocolInfoType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamSpecialProtocolInfoType) ToProto() (*otg.StreamSpecialProtocolInfoType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamSpecialProtocolInfoType) FromProto(msg *otg.StreamSpecialProtocolInfoType) (StreamSpecialProtocolInfoType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamSpecialProtocolInfoType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamSpecialProtocolInfoType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamSpecialProtocolInfoType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamSpecialProtocolInfoType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamSpecialProtocolInfoType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamSpecialProtocolInfoType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamSpecialProtocolInfoType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamSpecialProtocolInfoType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamSpecialProtocolInfoType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamSpecialProtocolInfoType) Clone() (StreamSpecialProtocolInfoType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamSpecialProtocolInfoType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamSpecialProtocolInfoType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// StreamSpecialProtocolInfoType is tBD
type StreamSpecialProtocolInfoType interface {
	Validation
	// Msg marshals StreamSpecialProtocolInfoType to protobuf object *otg.StreamSpecialProtocolInfoType
	// and doesn't set defaults
	Msg() *otg.StreamSpecialProtocolInfoType
	// SetMsg unmarshals StreamSpecialProtocolInfoType from protobuf object *otg.StreamSpecialProtocolInfoType
	// and doesn't set defaults
	SetMsg(*otg.StreamSpecialProtocolInfoType) StreamSpecialProtocolInfoType
	// ToProto marshals StreamSpecialProtocolInfoType to protobuf object *otg.StreamSpecialProtocolInfoType
	ToProto() (*otg.StreamSpecialProtocolInfoType, error)
	// ToPbText marshals StreamSpecialProtocolInfoType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamSpecialProtocolInfoType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamSpecialProtocolInfoType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamSpecialProtocolInfoType from protobuf object *otg.StreamSpecialProtocolInfoType
	FromProto(msg *otg.StreamSpecialProtocolInfoType) (StreamSpecialProtocolInfoType, error)
	// FromPbText unmarshals StreamSpecialProtocolInfoType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamSpecialProtocolInfoType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamSpecialProtocolInfoType from JSON text
	FromJson(value string) error
	// Validate validates StreamSpecialProtocolInfoType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamSpecialProtocolInfoType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// EnableIsl returns bool, set in StreamSpecialProtocolInfoType.
	EnableIsl() bool
	// SetEnableIsl assigns bool provided by user to StreamSpecialProtocolInfoType
	SetEnableIsl(value bool) StreamSpecialProtocolInfoType
	// HasEnableIsl checks if EnableIsl has been set in StreamSpecialProtocolInfoType
	HasEnableIsl() bool
	// EnableDataMangling returns bool, set in StreamSpecialProtocolInfoType.
	EnableDataMangling() bool
	// SetEnableDataMangling assigns bool provided by user to StreamSpecialProtocolInfoType
	SetEnableDataMangling(value bool) StreamSpecialProtocolInfoType
	// HasEnableDataMangling checks if EnableDataMangling has been set in StreamSpecialProtocolInfoType
	HasEnableDataMangling() bool
	// EnableFcoe returns bool, set in StreamSpecialProtocolInfoType.
	EnableFcoe() bool
	// SetEnableFcoe assigns bool provided by user to StreamSpecialProtocolInfoType
	SetEnableFcoe(value bool) StreamSpecialProtocolInfoType
	// HasEnableFcoe checks if EnableFcoe has been set in StreamSpecialProtocolInfoType
	HasEnableFcoe() bool
	// ForceValidFCoESize returns bool, set in StreamSpecialProtocolInfoType.
	ForceValidFCoESize() bool
	// SetForceValidFCoESize assigns bool provided by user to StreamSpecialProtocolInfoType
	SetForceValidFCoESize(value bool) StreamSpecialProtocolInfoType
	// HasForceValidFCoESize checks if ForceValidFCoESize has been set in StreamSpecialProtocolInfoType
	HasForceValidFCoESize() bool
	// EnableVntag returns bool, set in StreamSpecialProtocolInfoType.
	EnableVntag() bool
	// SetEnableVntag assigns bool provided by user to StreamSpecialProtocolInfoType
	SetEnableVntag(value bool) StreamSpecialProtocolInfoType
	// HasEnableVntag checks if EnableVntag has been set in StreamSpecialProtocolInfoType
	HasEnableVntag() bool
	// FcoeEof returns int32, set in StreamSpecialProtocolInfoType.
	FcoeEof() int32
	// SetFcoeEof assigns int32 provided by user to StreamSpecialProtocolInfoType
	SetFcoeEof(value int32) StreamSpecialProtocolInfoType
	// HasFcoeEof checks if FcoeEof has been set in StreamSpecialProtocolInfoType
	HasFcoeEof() bool
	// FcoeReserved1 returns int32, set in StreamSpecialProtocolInfoType.
	FcoeReserved1() int32
	// SetFcoeReserved1 assigns int32 provided by user to StreamSpecialProtocolInfoType
	SetFcoeReserved1(value int32) StreamSpecialProtocolInfoType
	// HasFcoeReserved1 checks if FcoeReserved1 has been set in StreamSpecialProtocolInfoType
	HasFcoeReserved1() bool
	// FcoeReserved2 returns int32, set in StreamSpecialProtocolInfoType.
	FcoeReserved2() int32
	// SetFcoeReserved2 assigns int32 provided by user to StreamSpecialProtocolInfoType
	SetFcoeReserved2(value int32) StreamSpecialProtocolInfoType
	// HasFcoeReserved2 checks if FcoeReserved2 has been set in StreamSpecialProtocolInfoType
	HasFcoeReserved2() bool
	// FcoeReserved3 returns int32, set in StreamSpecialProtocolInfoType.
	FcoeReserved3() int32
	// SetFcoeReserved3 assigns int32 provided by user to StreamSpecialProtocolInfoType
	SetFcoeReserved3(value int32) StreamSpecialProtocolInfoType
	// HasFcoeReserved3 checks if FcoeReserved3 has been set in StreamSpecialProtocolInfoType
	HasFcoeReserved3() bool
}

func (obj *streamSpecialProtocolInfoType) populateXml(xObj *Argument) error {

	if obj.HasEnableIsl() {
		var value string
		if obj.EnableIsl() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enableisl",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableDataMangling() {
		var value string
		if obj.EnableDataMangling() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enabledatamangling",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableFcoe() {
		var value string
		if obj.EnableFcoe() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablefcoe",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasForceValidFCoESize() {
		var value string
		if obj.ForceValidFCoESize() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "forcevalidfcoesize",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableVntag() {
		var value string
		if obj.EnableVntag() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablevntag",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasFcoeEof() {

		member := Member{
			Name:  "fcoeeof",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.FcoeEof()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasFcoeReserved1() {

		member := Member{
			Name:  "fcoereserved1",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.FcoeReserved1()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasFcoeReserved2() {

		member := Member{
			Name:  "fcoereserved2",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.FcoeReserved2()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasFcoeReserved3() {

		member := Member{
			Name:  "fcoereserved3",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.FcoeReserved3()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamSpecialProtocolInfoType) populateFromXml(xObj *RetVal) error {

	return nil
}

// Indicates that ISL header is present in the stack.
// EnableIsl returns a bool
func (obj *streamSpecialProtocolInfoType) EnableIsl() bool {

	return *obj.obj.EnableIsl

}

// Indicates that ISL header is present in the stack.
// EnableIsl returns a bool
func (obj *streamSpecialProtocolInfoType) HasEnableIsl() bool {
	return obj.obj.EnableIsl != nil
}

// Indicates that ISL header is present in the stack.
// SetEnableIsl sets the bool value in the StreamSpecialProtocolInfoType object
func (obj *streamSpecialProtocolInfoType) SetEnableIsl(value bool) StreamSpecialProtocolInfoType {

	obj.obj.EnableIsl = &value
	return obj
}

// Data mangling is enabled for the frame.
// EnableDataMangling returns a bool
func (obj *streamSpecialProtocolInfoType) EnableDataMangling() bool {

	return *obj.obj.EnableDataMangling

}

// Data mangling is enabled for the frame.
// EnableDataMangling returns a bool
func (obj *streamSpecialProtocolInfoType) HasEnableDataMangling() bool {
	return obj.obj.EnableDataMangling != nil
}

// Data mangling is enabled for the frame.
// SetEnableDataMangling sets the bool value in the StreamSpecialProtocolInfoType object
func (obj *streamSpecialProtocolInfoType) SetEnableDataMangling(value bool) StreamSpecialProtocolInfoType {

	obj.obj.EnableDataMangling = &value
	return obj
}

// Indicates that FCOE header is present in the stack.
// EnableFcoe returns a bool
func (obj *streamSpecialProtocolInfoType) EnableFcoe() bool {

	return *obj.obj.EnableFcoe

}

// Indicates that FCOE header is present in the stack.
// EnableFcoe returns a bool
func (obj *streamSpecialProtocolInfoType) HasEnableFcoe() bool {
	return obj.obj.EnableFcoe != nil
}

// Indicates that FCOE header is present in the stack.
// SetEnableFcoe sets the bool value in the StreamSpecialProtocolInfoType object
func (obj *streamSpecialProtocolInfoType) SetEnableFcoe(value bool) StreamSpecialProtocolInfoType {

	obj.obj.EnableFcoe = &value
	return obj
}

// If true, the frame size of all packets of the stream will be forced   by hw to be a multiple of 4, if FCoE header is present.
// ForceValidFCoESize returns a bool
func (obj *streamSpecialProtocolInfoType) ForceValidFCoESize() bool {

	return *obj.obj.ForceValidFCoESize

}

// If true, the frame size of all packets of the stream will be forced   by hw to be a multiple of 4, if FCoE header is present.
// ForceValidFCoESize returns a bool
func (obj *streamSpecialProtocolInfoType) HasForceValidFCoESize() bool {
	return obj.obj.ForceValidFCoESize != nil
}

// If true, the frame size of all packets of the stream will be forced   by hw to be a multiple of 4, if FCoE header is present.
// SetForceValidFCoESize sets the bool value in the StreamSpecialProtocolInfoType object
func (obj *streamSpecialProtocolInfoType) SetForceValidFCoESize(value bool) StreamSpecialProtocolInfoType {

	obj.obj.ForceValidFCoESize = &value
	return obj
}

// Indicates that Vntag protocol is present in the stack.
// EnableVntag returns a bool
func (obj *streamSpecialProtocolInfoType) EnableVntag() bool {

	return *obj.obj.EnableVntag

}

// Indicates that Vntag protocol is present in the stack.
// EnableVntag returns a bool
func (obj *streamSpecialProtocolInfoType) HasEnableVntag() bool {
	return obj.obj.EnableVntag != nil
}

// Indicates that Vntag protocol is present in the stack.
// SetEnableVntag sets the bool value in the StreamSpecialProtocolInfoType object
func (obj *streamSpecialProtocolInfoType) SetEnableVntag(value bool) StreamSpecialProtocolInfoType {

	obj.obj.EnableVntag = &value
	return obj
}

// User-configurable value from the FCOE trailer.
// FcoeEof returns a int32
func (obj *streamSpecialProtocolInfoType) FcoeEof() int32 {

	return *obj.obj.FcoeEof

}

// User-configurable value from the FCOE trailer.
// FcoeEof returns a int32
func (obj *streamSpecialProtocolInfoType) HasFcoeEof() bool {
	return obj.obj.FcoeEof != nil
}

// User-configurable value from the FCOE trailer.
// SetFcoeEof sets the int32 value in the StreamSpecialProtocolInfoType object
func (obj *streamSpecialProtocolInfoType) SetFcoeEof(value int32) StreamSpecialProtocolInfoType {

	obj.obj.FcoeEof = &value
	return obj
}

// User-configurable value from the FCOE trailer.
// FcoeReserved1 returns a int32
func (obj *streamSpecialProtocolInfoType) FcoeReserved1() int32 {

	return *obj.obj.FcoeReserved1

}

// User-configurable value from the FCOE trailer.
// FcoeReserved1 returns a int32
func (obj *streamSpecialProtocolInfoType) HasFcoeReserved1() bool {
	return obj.obj.FcoeReserved1 != nil
}

// User-configurable value from the FCOE trailer.
// SetFcoeReserved1 sets the int32 value in the StreamSpecialProtocolInfoType object
func (obj *streamSpecialProtocolInfoType) SetFcoeReserved1(value int32) StreamSpecialProtocolInfoType {

	obj.obj.FcoeReserved1 = &value
	return obj
}

// User-configurable value from the FCOE trailer.
// FcoeReserved2 returns a int32
func (obj *streamSpecialProtocolInfoType) FcoeReserved2() int32 {

	return *obj.obj.FcoeReserved2

}

// User-configurable value from the FCOE trailer.
// FcoeReserved2 returns a int32
func (obj *streamSpecialProtocolInfoType) HasFcoeReserved2() bool {
	return obj.obj.FcoeReserved2 != nil
}

// User-configurable value from the FCOE trailer.
// SetFcoeReserved2 sets the int32 value in the StreamSpecialProtocolInfoType object
func (obj *streamSpecialProtocolInfoType) SetFcoeReserved2(value int32) StreamSpecialProtocolInfoType {

	obj.obj.FcoeReserved2 = &value
	return obj
}

// User-configurable value from the FCOE trailer.
// FcoeReserved3 returns a int32
func (obj *streamSpecialProtocolInfoType) FcoeReserved3() int32 {

	return *obj.obj.FcoeReserved3

}

// User-configurable value from the FCOE trailer.
// FcoeReserved3 returns a int32
func (obj *streamSpecialProtocolInfoType) HasFcoeReserved3() bool {
	return obj.obj.FcoeReserved3 != nil
}

// User-configurable value from the FCOE trailer.
// SetFcoeReserved3 sets the int32 value in the StreamSpecialProtocolInfoType object
func (obj *streamSpecialProtocolInfoType) SetFcoeReserved3(value int32) StreamSpecialProtocolInfoType {

	obj.obj.FcoeReserved3 = &value
	return obj
}

func (obj *streamSpecialProtocolInfoType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *streamSpecialProtocolInfoType) setDefault() {

}

// ***** StreamProtocolHeaderInfoList *****
type streamProtocolHeaderInfoList struct {
	validation
	obj                          *otg.StreamProtocolHeaderInfoList
	protocolHeaderInfoListHolder StreamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter
}

func NewStreamProtocolHeaderInfoList() StreamProtocolHeaderInfoList {
	obj := streamProtocolHeaderInfoList{obj: &otg.StreamProtocolHeaderInfoList{}}
	obj.setDefault()
	return &obj
}

func (obj *streamProtocolHeaderInfoList) Msg() *otg.StreamProtocolHeaderInfoList {
	return obj.obj
}

func (obj *streamProtocolHeaderInfoList) SetMsg(msg *otg.StreamProtocolHeaderInfoList) StreamProtocolHeaderInfoList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamProtocolHeaderInfoList) ToProto() (*otg.StreamProtocolHeaderInfoList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamProtocolHeaderInfoList) FromProto(msg *otg.StreamProtocolHeaderInfoList) (StreamProtocolHeaderInfoList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamProtocolHeaderInfoList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamProtocolHeaderInfoList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamProtocolHeaderInfoList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamProtocolHeaderInfoList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamProtocolHeaderInfoList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamProtocolHeaderInfoList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamProtocolHeaderInfoList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamProtocolHeaderInfoList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamProtocolHeaderInfoList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamProtocolHeaderInfoList) Clone() (StreamProtocolHeaderInfoList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamProtocolHeaderInfoList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamProtocolHeaderInfoList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamProtocolHeaderInfoList) setNil() {
	obj.protocolHeaderInfoListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamProtocolHeaderInfoList is tBD
type StreamProtocolHeaderInfoList interface {
	Validation
	// Msg marshals StreamProtocolHeaderInfoList to protobuf object *otg.StreamProtocolHeaderInfoList
	// and doesn't set defaults
	Msg() *otg.StreamProtocolHeaderInfoList
	// SetMsg unmarshals StreamProtocolHeaderInfoList from protobuf object *otg.StreamProtocolHeaderInfoList
	// and doesn't set defaults
	SetMsg(*otg.StreamProtocolHeaderInfoList) StreamProtocolHeaderInfoList
	// ToProto marshals StreamProtocolHeaderInfoList to protobuf object *otg.StreamProtocolHeaderInfoList
	ToProto() (*otg.StreamProtocolHeaderInfoList, error)
	// ToPbText marshals StreamProtocolHeaderInfoList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamProtocolHeaderInfoList to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamProtocolHeaderInfoList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamProtocolHeaderInfoList from protobuf object *otg.StreamProtocolHeaderInfoList
	FromProto(msg *otg.StreamProtocolHeaderInfoList) (StreamProtocolHeaderInfoList, error)
	// FromPbText unmarshals StreamProtocolHeaderInfoList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamProtocolHeaderInfoList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamProtocolHeaderInfoList from JSON text
	FromJson(value string) error
	// Validate validates StreamProtocolHeaderInfoList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamProtocolHeaderInfoList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ProtocolHeaderInfoList returns StreamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIterIter, set in StreamProtocolHeaderInfoList
	ProtocolHeaderInfoList() StreamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter
	setNil()
}

func (obj *streamProtocolHeaderInfoList) populateXml(xObj *Argument) error {

	if len(obj.ProtocolHeaderInfoList().Items()) != 0 {
		for _, item := range obj.ProtocolHeaderInfoList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *streamProtocolHeaderInfoList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// ProtocolHeaderInfoList returns a []StreamProtocolHeaderInfoType
func (obj *streamProtocolHeaderInfoList) ProtocolHeaderInfoList() StreamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter {
	if len(obj.obj.ProtocolHeaderInfoList) == 0 {
		obj.obj.ProtocolHeaderInfoList = []*otg.StreamProtocolHeaderInfoType{}
	}
	if obj.protocolHeaderInfoListHolder == nil {
		obj.protocolHeaderInfoListHolder = newStreamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter(&obj.obj.ProtocolHeaderInfoList).setMsg(obj)
	}
	return obj.protocolHeaderInfoListHolder
}

type streamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter struct {
	obj                               *streamProtocolHeaderInfoList
	streamProtocolHeaderInfoTypeSlice []StreamProtocolHeaderInfoType
	fieldPtr                          *[]*otg.StreamProtocolHeaderInfoType
}

func newStreamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter(ptr *[]*otg.StreamProtocolHeaderInfoType) StreamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter {
	return &streamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter{fieldPtr: ptr}
}

type StreamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter interface {
	setMsg(*streamProtocolHeaderInfoList) StreamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter
	Items() []StreamProtocolHeaderInfoType
	Add() StreamProtocolHeaderInfoType
	Append(items ...StreamProtocolHeaderInfoType) StreamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter
	Set(index int, newObj StreamProtocolHeaderInfoType) StreamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter
	Clear() StreamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter
	clearHolderSlice() StreamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter
	appendHolderSlice(item StreamProtocolHeaderInfoType) StreamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter
}

func (obj *streamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter) setMsg(msg *streamProtocolHeaderInfoList) StreamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&streamProtocolHeaderInfoType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *streamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter) Items() []StreamProtocolHeaderInfoType {
	return obj.streamProtocolHeaderInfoTypeSlice
}

func (obj *streamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter) Add() StreamProtocolHeaderInfoType {
	newObj := &otg.StreamProtocolHeaderInfoType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &streamProtocolHeaderInfoType{obj: newObj}
	newLibObj.setDefault()
	obj.streamProtocolHeaderInfoTypeSlice = append(obj.streamProtocolHeaderInfoTypeSlice, newLibObj)
	return newLibObj
}

func (obj *streamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter) Append(items ...StreamProtocolHeaderInfoType) StreamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.streamProtocolHeaderInfoTypeSlice = append(obj.streamProtocolHeaderInfoTypeSlice, item)
	}
	return obj
}

func (obj *streamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter) Set(index int, newObj StreamProtocolHeaderInfoType) StreamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.streamProtocolHeaderInfoTypeSlice[index] = newObj
	return obj
}
func (obj *streamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter) Clear() StreamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.StreamProtocolHeaderInfoType{}
		obj.streamProtocolHeaderInfoTypeSlice = []StreamProtocolHeaderInfoType{}
	}
	return obj
}
func (obj *streamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter) clearHolderSlice() StreamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter {
	if len(obj.streamProtocolHeaderInfoTypeSlice) > 0 {
		obj.streamProtocolHeaderInfoTypeSlice = []StreamProtocolHeaderInfoType{}
	}
	return obj
}
func (obj *streamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter) appendHolderSlice(item StreamProtocolHeaderInfoType) StreamProtocolHeaderInfoListStreamProtocolHeaderInfoTypeIter {
	obj.streamProtocolHeaderInfoTypeSlice = append(obj.streamProtocolHeaderInfoTypeSlice, item)
	return obj
}

func (obj *streamProtocolHeaderInfoList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.ProtocolHeaderInfoList) != 0 {

		if set_default {
			obj.ProtocolHeaderInfoList().clearHolderSlice()
			for _, item := range obj.obj.ProtocolHeaderInfoList {
				obj.ProtocolHeaderInfoList().appendHolderSlice(&streamProtocolHeaderInfoType{obj: item})
			}
		}
		for _, item := range obj.ProtocolHeaderInfoList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *streamProtocolHeaderInfoList) setDefault() {

}

// ***** UdfUdfList *****
type udfUdfList struct {
	validation
	obj           *otg.UdfUdfList
	udfListHolder UdfUdfListUdfUdfTypeIter
}

func NewUdfUdfList() UdfUdfList {
	obj := udfUdfList{obj: &otg.UdfUdfList{}}
	obj.setDefault()
	return &obj
}

func (obj *udfUdfList) Msg() *otg.UdfUdfList {
	return obj.obj
}

func (obj *udfUdfList) SetMsg(msg *otg.UdfUdfList) UdfUdfList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *udfUdfList) ToProto() (*otg.UdfUdfList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *udfUdfList) FromProto(msg *otg.UdfUdfList) (UdfUdfList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *udfUdfList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *udfUdfList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *udfUdfList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfUdfList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *udfUdfList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfUdfList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *udfUdfList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *udfUdfList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *udfUdfList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *udfUdfList) Clone() (UdfUdfList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewUdfUdfList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *udfUdfList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *udfUdfList) setNil() {
	obj.udfListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// UdfUdfList is tBD
type UdfUdfList interface {
	Validation
	// Msg marshals UdfUdfList to protobuf object *otg.UdfUdfList
	// and doesn't set defaults
	Msg() *otg.UdfUdfList
	// SetMsg unmarshals UdfUdfList from protobuf object *otg.UdfUdfList
	// and doesn't set defaults
	SetMsg(*otg.UdfUdfList) UdfUdfList
	// ToProto marshals UdfUdfList to protobuf object *otg.UdfUdfList
	ToProto() (*otg.UdfUdfList, error)
	// ToPbText marshals UdfUdfList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals UdfUdfList to YAML text
	ToYaml() (string, error)
	// ToJson marshals UdfUdfList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals UdfUdfList from protobuf object *otg.UdfUdfList
	FromProto(msg *otg.UdfUdfList) (UdfUdfList, error)
	// FromPbText unmarshals UdfUdfList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals UdfUdfList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals UdfUdfList from JSON text
	FromJson(value string) error
	// Validate validates UdfUdfList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (UdfUdfList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// UdfList returns UdfUdfListUdfUdfTypeIterIter, set in UdfUdfList
	UdfList() UdfUdfListUdfUdfTypeIter
	setNil()
}

func (obj *udfUdfList) populateXml(xObj *Argument) error {

	if len(obj.UdfList().Items()) != 0 {
		for _, item := range obj.UdfList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *udfUdfList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// UdfList returns a []UdfUdfType
func (obj *udfUdfList) UdfList() UdfUdfListUdfUdfTypeIter {
	if len(obj.obj.UdfList) == 0 {
		obj.obj.UdfList = []*otg.UdfUdfType{}
	}
	if obj.udfListHolder == nil {
		obj.udfListHolder = newUdfUdfListUdfUdfTypeIter(&obj.obj.UdfList).setMsg(obj)
	}
	return obj.udfListHolder
}

type udfUdfListUdfUdfTypeIter struct {
	obj             *udfUdfList
	udfUdfTypeSlice []UdfUdfType
	fieldPtr        *[]*otg.UdfUdfType
}

func newUdfUdfListUdfUdfTypeIter(ptr *[]*otg.UdfUdfType) UdfUdfListUdfUdfTypeIter {
	return &udfUdfListUdfUdfTypeIter{fieldPtr: ptr}
}

type UdfUdfListUdfUdfTypeIter interface {
	setMsg(*udfUdfList) UdfUdfListUdfUdfTypeIter
	Items() []UdfUdfType
	Add() UdfUdfType
	Append(items ...UdfUdfType) UdfUdfListUdfUdfTypeIter
	Set(index int, newObj UdfUdfType) UdfUdfListUdfUdfTypeIter
	Clear() UdfUdfListUdfUdfTypeIter
	clearHolderSlice() UdfUdfListUdfUdfTypeIter
	appendHolderSlice(item UdfUdfType) UdfUdfListUdfUdfTypeIter
}

func (obj *udfUdfListUdfUdfTypeIter) setMsg(msg *udfUdfList) UdfUdfListUdfUdfTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&udfUdfType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *udfUdfListUdfUdfTypeIter) Items() []UdfUdfType {
	return obj.udfUdfTypeSlice
}

func (obj *udfUdfListUdfUdfTypeIter) Add() UdfUdfType {
	newObj := &otg.UdfUdfType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &udfUdfType{obj: newObj}
	newLibObj.setDefault()
	obj.udfUdfTypeSlice = append(obj.udfUdfTypeSlice, newLibObj)
	return newLibObj
}

func (obj *udfUdfListUdfUdfTypeIter) Append(items ...UdfUdfType) UdfUdfListUdfUdfTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.udfUdfTypeSlice = append(obj.udfUdfTypeSlice, item)
	}
	return obj
}

func (obj *udfUdfListUdfUdfTypeIter) Set(index int, newObj UdfUdfType) UdfUdfListUdfUdfTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.udfUdfTypeSlice[index] = newObj
	return obj
}
func (obj *udfUdfListUdfUdfTypeIter) Clear() UdfUdfListUdfUdfTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.UdfUdfType{}
		obj.udfUdfTypeSlice = []UdfUdfType{}
	}
	return obj
}
func (obj *udfUdfListUdfUdfTypeIter) clearHolderSlice() UdfUdfListUdfUdfTypeIter {
	if len(obj.udfUdfTypeSlice) > 0 {
		obj.udfUdfTypeSlice = []UdfUdfType{}
	}
	return obj
}
func (obj *udfUdfListUdfUdfTypeIter) appendHolderSlice(item UdfUdfType) UdfUdfListUdfUdfTypeIter {
	obj.udfUdfTypeSlice = append(obj.udfUdfTypeSlice, item)
	return obj
}

func (obj *udfUdfList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.UdfList) != 0 {

		if set_default {
			obj.UdfList().clearHolderSlice()
			for _, item := range obj.obj.UdfList {
				obj.UdfList().appendHolderSlice(&udfUdfType{obj: item})
			}
		}
		for _, item := range obj.UdfList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *udfUdfList) setDefault() {

}

// ***** TableUdfColumnSettingList *****
type tableUdfColumnSettingList struct {
	validation
	obj                     *otg.TableUdfColumnSettingList
	columnSettingListHolder TableUdfColumnSettingListTableUdfColumnSettingTypeIter
}

func NewTableUdfColumnSettingList() TableUdfColumnSettingList {
	obj := tableUdfColumnSettingList{obj: &otg.TableUdfColumnSettingList{}}
	obj.setDefault()
	return &obj
}

func (obj *tableUdfColumnSettingList) Msg() *otg.TableUdfColumnSettingList {
	return obj.obj
}

func (obj *tableUdfColumnSettingList) SetMsg(msg *otg.TableUdfColumnSettingList) TableUdfColumnSettingList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *tableUdfColumnSettingList) ToProto() (*otg.TableUdfColumnSettingList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *tableUdfColumnSettingList) FromProto(msg *otg.TableUdfColumnSettingList) (TableUdfColumnSettingList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *tableUdfColumnSettingList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *tableUdfColumnSettingList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *tableUdfColumnSettingList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *tableUdfColumnSettingList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *tableUdfColumnSettingList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *tableUdfColumnSettingList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *tableUdfColumnSettingList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *tableUdfColumnSettingList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *tableUdfColumnSettingList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *tableUdfColumnSettingList) Clone() (TableUdfColumnSettingList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewTableUdfColumnSettingList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *tableUdfColumnSettingList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *tableUdfColumnSettingList) setNil() {
	obj.columnSettingListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// TableUdfColumnSettingList is tBD
type TableUdfColumnSettingList interface {
	Validation
	// Msg marshals TableUdfColumnSettingList to protobuf object *otg.TableUdfColumnSettingList
	// and doesn't set defaults
	Msg() *otg.TableUdfColumnSettingList
	// SetMsg unmarshals TableUdfColumnSettingList from protobuf object *otg.TableUdfColumnSettingList
	// and doesn't set defaults
	SetMsg(*otg.TableUdfColumnSettingList) TableUdfColumnSettingList
	// ToProto marshals TableUdfColumnSettingList to protobuf object *otg.TableUdfColumnSettingList
	ToProto() (*otg.TableUdfColumnSettingList, error)
	// ToPbText marshals TableUdfColumnSettingList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals TableUdfColumnSettingList to YAML text
	ToYaml() (string, error)
	// ToJson marshals TableUdfColumnSettingList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals TableUdfColumnSettingList from protobuf object *otg.TableUdfColumnSettingList
	FromProto(msg *otg.TableUdfColumnSettingList) (TableUdfColumnSettingList, error)
	// FromPbText unmarshals TableUdfColumnSettingList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals TableUdfColumnSettingList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals TableUdfColumnSettingList from JSON text
	FromJson(value string) error
	// Validate validates TableUdfColumnSettingList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (TableUdfColumnSettingList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ColumnSettingList returns TableUdfColumnSettingListTableUdfColumnSettingTypeIterIter, set in TableUdfColumnSettingList
	ColumnSettingList() TableUdfColumnSettingListTableUdfColumnSettingTypeIter
	setNil()
}

func (obj *tableUdfColumnSettingList) populateXml(xObj *Argument) error {

	if len(obj.ColumnSettingList().Items()) != 0 {
		for _, item := range obj.ColumnSettingList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *tableUdfColumnSettingList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// ColumnSettingList returns a []TableUdfColumnSettingType
func (obj *tableUdfColumnSettingList) ColumnSettingList() TableUdfColumnSettingListTableUdfColumnSettingTypeIter {
	if len(obj.obj.ColumnSettingList) == 0 {
		obj.obj.ColumnSettingList = []*otg.TableUdfColumnSettingType{}
	}
	if obj.columnSettingListHolder == nil {
		obj.columnSettingListHolder = newTableUdfColumnSettingListTableUdfColumnSettingTypeIter(&obj.obj.ColumnSettingList).setMsg(obj)
	}
	return obj.columnSettingListHolder
}

type tableUdfColumnSettingListTableUdfColumnSettingTypeIter struct {
	obj                            *tableUdfColumnSettingList
	tableUdfColumnSettingTypeSlice []TableUdfColumnSettingType
	fieldPtr                       *[]*otg.TableUdfColumnSettingType
}

func newTableUdfColumnSettingListTableUdfColumnSettingTypeIter(ptr *[]*otg.TableUdfColumnSettingType) TableUdfColumnSettingListTableUdfColumnSettingTypeIter {
	return &tableUdfColumnSettingListTableUdfColumnSettingTypeIter{fieldPtr: ptr}
}

type TableUdfColumnSettingListTableUdfColumnSettingTypeIter interface {
	setMsg(*tableUdfColumnSettingList) TableUdfColumnSettingListTableUdfColumnSettingTypeIter
	Items() []TableUdfColumnSettingType
	Add() TableUdfColumnSettingType
	Append(items ...TableUdfColumnSettingType) TableUdfColumnSettingListTableUdfColumnSettingTypeIter
	Set(index int, newObj TableUdfColumnSettingType) TableUdfColumnSettingListTableUdfColumnSettingTypeIter
	Clear() TableUdfColumnSettingListTableUdfColumnSettingTypeIter
	clearHolderSlice() TableUdfColumnSettingListTableUdfColumnSettingTypeIter
	appendHolderSlice(item TableUdfColumnSettingType) TableUdfColumnSettingListTableUdfColumnSettingTypeIter
}

func (obj *tableUdfColumnSettingListTableUdfColumnSettingTypeIter) setMsg(msg *tableUdfColumnSettingList) TableUdfColumnSettingListTableUdfColumnSettingTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&tableUdfColumnSettingType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *tableUdfColumnSettingListTableUdfColumnSettingTypeIter) Items() []TableUdfColumnSettingType {
	return obj.tableUdfColumnSettingTypeSlice
}

func (obj *tableUdfColumnSettingListTableUdfColumnSettingTypeIter) Add() TableUdfColumnSettingType {
	newObj := &otg.TableUdfColumnSettingType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &tableUdfColumnSettingType{obj: newObj}
	newLibObj.setDefault()
	obj.tableUdfColumnSettingTypeSlice = append(obj.tableUdfColumnSettingTypeSlice, newLibObj)
	return newLibObj
}

func (obj *tableUdfColumnSettingListTableUdfColumnSettingTypeIter) Append(items ...TableUdfColumnSettingType) TableUdfColumnSettingListTableUdfColumnSettingTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.tableUdfColumnSettingTypeSlice = append(obj.tableUdfColumnSettingTypeSlice, item)
	}
	return obj
}

func (obj *tableUdfColumnSettingListTableUdfColumnSettingTypeIter) Set(index int, newObj TableUdfColumnSettingType) TableUdfColumnSettingListTableUdfColumnSettingTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.tableUdfColumnSettingTypeSlice[index] = newObj
	return obj
}
func (obj *tableUdfColumnSettingListTableUdfColumnSettingTypeIter) Clear() TableUdfColumnSettingListTableUdfColumnSettingTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.TableUdfColumnSettingType{}
		obj.tableUdfColumnSettingTypeSlice = []TableUdfColumnSettingType{}
	}
	return obj
}
func (obj *tableUdfColumnSettingListTableUdfColumnSettingTypeIter) clearHolderSlice() TableUdfColumnSettingListTableUdfColumnSettingTypeIter {
	if len(obj.tableUdfColumnSettingTypeSlice) > 0 {
		obj.tableUdfColumnSettingTypeSlice = []TableUdfColumnSettingType{}
	}
	return obj
}
func (obj *tableUdfColumnSettingListTableUdfColumnSettingTypeIter) appendHolderSlice(item TableUdfColumnSettingType) TableUdfColumnSettingListTableUdfColumnSettingTypeIter {
	obj.tableUdfColumnSettingTypeSlice = append(obj.tableUdfColumnSettingTypeSlice, item)
	return obj
}

func (obj *tableUdfColumnSettingList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.ColumnSettingList) != 0 {

		if set_default {
			obj.ColumnSettingList().clearHolderSlice()
			for _, item := range obj.obj.ColumnSettingList {
				obj.ColumnSettingList().appendHolderSlice(&tableUdfColumnSettingType{obj: item})
			}
		}
		for _, item := range obj.ColumnSettingList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *tableUdfColumnSettingList) setDefault() {

}

// ***** IdTypeStreamGroupId *****
type idTypeStreamGroupId struct {
	validation
	obj *otg.IdTypeStreamGroupId
}

func NewIdTypeStreamGroupId() IdTypeStreamGroupId {
	obj := idTypeStreamGroupId{obj: &otg.IdTypeStreamGroupId{}}
	obj.setDefault()
	return &obj
}

func (obj *idTypeStreamGroupId) Msg() *otg.IdTypeStreamGroupId {
	return obj.obj
}

func (obj *idTypeStreamGroupId) SetMsg(msg *otg.IdTypeStreamGroupId) IdTypeStreamGroupId {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *idTypeStreamGroupId) ToProto() (*otg.IdTypeStreamGroupId, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *idTypeStreamGroupId) FromProto(msg *otg.IdTypeStreamGroupId) (IdTypeStreamGroupId, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *idTypeStreamGroupId) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *idTypeStreamGroupId) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *idTypeStreamGroupId) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *idTypeStreamGroupId) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *idTypeStreamGroupId) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *idTypeStreamGroupId) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *idTypeStreamGroupId) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *idTypeStreamGroupId) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *idTypeStreamGroupId) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *idTypeStreamGroupId) Clone() (IdTypeStreamGroupId, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewIdTypeStreamGroupId()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *idTypeStreamGroupId) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// IdTypeStreamGroupId is tBD
type IdTypeStreamGroupId interface {
	Validation
	// Msg marshals IdTypeStreamGroupId to protobuf object *otg.IdTypeStreamGroupId
	// and doesn't set defaults
	Msg() *otg.IdTypeStreamGroupId
	// SetMsg unmarshals IdTypeStreamGroupId from protobuf object *otg.IdTypeStreamGroupId
	// and doesn't set defaults
	SetMsg(*otg.IdTypeStreamGroupId) IdTypeStreamGroupId
	// ToProto marshals IdTypeStreamGroupId to protobuf object *otg.IdTypeStreamGroupId
	ToProto() (*otg.IdTypeStreamGroupId, error)
	// ToPbText marshals IdTypeStreamGroupId to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals IdTypeStreamGroupId to YAML text
	ToYaml() (string, error)
	// ToJson marshals IdTypeStreamGroupId to JSON text
	ToJson() (string, error)
	// FromProto unmarshals IdTypeStreamGroupId from protobuf object *otg.IdTypeStreamGroupId
	FromProto(msg *otg.IdTypeStreamGroupId) (IdTypeStreamGroupId, error)
	// FromPbText unmarshals IdTypeStreamGroupId from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals IdTypeStreamGroupId from YAML text
	FromYaml(value string) error
	// FromJson unmarshals IdTypeStreamGroupId from JSON text
	FromJson(value string) error
	// Validate validates IdTypeStreamGroupId
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (IdTypeStreamGroupId, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Id returns int32, set in IdTypeStreamGroupId.
	Id() int32
	// SetId assigns int32 provided by user to IdTypeStreamGroupId
	SetId(value int32) IdTypeStreamGroupId
	// HasId checks if Id has been set in IdTypeStreamGroupId
	HasId() bool
}

func (obj *idTypeStreamGroupId) populateXml(xObj *Argument) error {

	if obj.HasId() {

		member := Member{
			Name:  "id",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Id()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *idTypeStreamGroupId) populateFromXml(xObj *RetVal) error {

	return nil
}

// The SreamGroupId is only locally unique to a test port within   this test application and is used to aggregate streams into   groups that will share memory resources.
// Id returns a int32
func (obj *idTypeStreamGroupId) Id() int32 {

	return *obj.obj.Id

}

// The SreamGroupId is only locally unique to a test port within   this test application and is used to aggregate streams into   groups that will share memory resources.
// Id returns a int32
func (obj *idTypeStreamGroupId) HasId() bool {
	return obj.obj.Id != nil
}

// The SreamGroupId is only locally unique to a test port within   this test application and is used to aggregate streams into   groups that will share memory resources.
// SetId sets the int32 value in the IdTypeStreamGroupId object
func (obj *idTypeStreamGroupId) SetId(value int32) IdTypeStreamGroupId {

	obj.obj.Id = &value
	return obj
}

func (obj *idTypeStreamGroupId) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *idTypeStreamGroupId) setDefault() {

}

// ***** StreamRandomQuadGaussianControlType *****
type streamRandomQuadGaussianControlType struct {
	validation
	obj                *otg.StreamRandomQuadGaussianControlType
	quadgaussianHolder StreamQuadGaussianDataList
}

func NewStreamRandomQuadGaussianControlType() StreamRandomQuadGaussianControlType {
	obj := streamRandomQuadGaussianControlType{obj: &otg.StreamRandomQuadGaussianControlType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamRandomQuadGaussianControlType) Msg() *otg.StreamRandomQuadGaussianControlType {
	return obj.obj
}

func (obj *streamRandomQuadGaussianControlType) SetMsg(msg *otg.StreamRandomQuadGaussianControlType) StreamRandomQuadGaussianControlType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamRandomQuadGaussianControlType) ToProto() (*otg.StreamRandomQuadGaussianControlType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamRandomQuadGaussianControlType) FromProto(msg *otg.StreamRandomQuadGaussianControlType) (StreamRandomQuadGaussianControlType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamRandomQuadGaussianControlType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamRandomQuadGaussianControlType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamRandomQuadGaussianControlType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamRandomQuadGaussianControlType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamRandomQuadGaussianControlType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamRandomQuadGaussianControlType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamRandomQuadGaussianControlType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamRandomQuadGaussianControlType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamRandomQuadGaussianControlType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamRandomQuadGaussianControlType) Clone() (StreamRandomQuadGaussianControlType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamRandomQuadGaussianControlType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamRandomQuadGaussianControlType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamRandomQuadGaussianControlType) setNil() {
	obj.quadgaussianHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamRandomQuadGaussianControlType is tBD
type StreamRandomQuadGaussianControlType interface {
	Validation
	// Msg marshals StreamRandomQuadGaussianControlType to protobuf object *otg.StreamRandomQuadGaussianControlType
	// and doesn't set defaults
	Msg() *otg.StreamRandomQuadGaussianControlType
	// SetMsg unmarshals StreamRandomQuadGaussianControlType from protobuf object *otg.StreamRandomQuadGaussianControlType
	// and doesn't set defaults
	SetMsg(*otg.StreamRandomQuadGaussianControlType) StreamRandomQuadGaussianControlType
	// ToProto marshals StreamRandomQuadGaussianControlType to protobuf object *otg.StreamRandomQuadGaussianControlType
	ToProto() (*otg.StreamRandomQuadGaussianControlType, error)
	// ToPbText marshals StreamRandomQuadGaussianControlType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamRandomQuadGaussianControlType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamRandomQuadGaussianControlType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamRandomQuadGaussianControlType from protobuf object *otg.StreamRandomQuadGaussianControlType
	FromProto(msg *otg.StreamRandomQuadGaussianControlType) (StreamRandomQuadGaussianControlType, error)
	// FromPbText unmarshals StreamRandomQuadGaussianControlType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamRandomQuadGaussianControlType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamRandomQuadGaussianControlType from JSON text
	FromJson(value string) error
	// Validate validates StreamRandomQuadGaussianControlType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamRandomQuadGaussianControlType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Quadgaussian returns StreamQuadGaussianDataList, set in StreamRandomQuadGaussianControlType.
	// StreamQuadGaussianDataList is tBD
	Quadgaussian() StreamQuadGaussianDataList
	// SetQuadgaussian assigns StreamQuadGaussianDataList provided by user to StreamRandomQuadGaussianControlType.
	// StreamQuadGaussianDataList is tBD
	SetQuadgaussian(value StreamQuadGaussianDataList) StreamRandomQuadGaussianControlType
	// HasQuadgaussian checks if Quadgaussian has been set in StreamRandomQuadGaussianControlType
	HasQuadgaussian() bool
	setNil()
}

func (obj *streamRandomQuadGaussianControlType) populateXml(xObj *Argument) error {

	return nil
}

func (obj *streamRandomQuadGaussianControlType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Quadgaussian returns a StreamQuadGaussianDataList
func (obj *streamRandomQuadGaussianControlType) Quadgaussian() StreamQuadGaussianDataList {
	if obj.obj.Quadgaussian == nil {
		obj.obj.Quadgaussian = NewStreamQuadGaussianDataList().Msg()
	}
	if obj.quadgaussianHolder == nil {
		obj.quadgaussianHolder = &streamQuadGaussianDataList{obj: obj.obj.Quadgaussian}
	}
	return obj.quadgaussianHolder
}

// TBD
// Quadgaussian returns a StreamQuadGaussianDataList
func (obj *streamRandomQuadGaussianControlType) HasQuadgaussian() bool {
	return obj.obj.Quadgaussian != nil
}

// TBD
// SetQuadgaussian sets the StreamQuadGaussianDataList value in the StreamRandomQuadGaussianControlType object
func (obj *streamRandomQuadGaussianControlType) SetQuadgaussian(value StreamQuadGaussianDataList) StreamRandomQuadGaussianControlType {

	obj.quadgaussianHolder = nil
	obj.obj.Quadgaussian = value.Msg()

	return obj
}

func (obj *streamRandomQuadGaussianControlType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Quadgaussian != nil {

		obj.Quadgaussian().validateObj(vObj, set_default)
	}

}

func (obj *streamRandomQuadGaussianControlType) setDefault() {

}

// ***** StreamRandomWeightedPairControlType *****
type streamRandomWeightedPairControlType struct {
	validation
	obj                *otg.StreamRandomWeightedPairControlType
	weightedpairHolder StreamWeightedPairDataList
}

func NewStreamRandomWeightedPairControlType() StreamRandomWeightedPairControlType {
	obj := streamRandomWeightedPairControlType{obj: &otg.StreamRandomWeightedPairControlType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamRandomWeightedPairControlType) Msg() *otg.StreamRandomWeightedPairControlType {
	return obj.obj
}

func (obj *streamRandomWeightedPairControlType) SetMsg(msg *otg.StreamRandomWeightedPairControlType) StreamRandomWeightedPairControlType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamRandomWeightedPairControlType) ToProto() (*otg.StreamRandomWeightedPairControlType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamRandomWeightedPairControlType) FromProto(msg *otg.StreamRandomWeightedPairControlType) (StreamRandomWeightedPairControlType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamRandomWeightedPairControlType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamRandomWeightedPairControlType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamRandomWeightedPairControlType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamRandomWeightedPairControlType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamRandomWeightedPairControlType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamRandomWeightedPairControlType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamRandomWeightedPairControlType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamRandomWeightedPairControlType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamRandomWeightedPairControlType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamRandomWeightedPairControlType) Clone() (StreamRandomWeightedPairControlType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamRandomWeightedPairControlType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamRandomWeightedPairControlType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamRandomWeightedPairControlType) setNil() {
	obj.weightedpairHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamRandomWeightedPairControlType is tBD
type StreamRandomWeightedPairControlType interface {
	Validation
	// Msg marshals StreamRandomWeightedPairControlType to protobuf object *otg.StreamRandomWeightedPairControlType
	// and doesn't set defaults
	Msg() *otg.StreamRandomWeightedPairControlType
	// SetMsg unmarshals StreamRandomWeightedPairControlType from protobuf object *otg.StreamRandomWeightedPairControlType
	// and doesn't set defaults
	SetMsg(*otg.StreamRandomWeightedPairControlType) StreamRandomWeightedPairControlType
	// ToProto marshals StreamRandomWeightedPairControlType to protobuf object *otg.StreamRandomWeightedPairControlType
	ToProto() (*otg.StreamRandomWeightedPairControlType, error)
	// ToPbText marshals StreamRandomWeightedPairControlType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamRandomWeightedPairControlType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamRandomWeightedPairControlType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamRandomWeightedPairControlType from protobuf object *otg.StreamRandomWeightedPairControlType
	FromProto(msg *otg.StreamRandomWeightedPairControlType) (StreamRandomWeightedPairControlType, error)
	// FromPbText unmarshals StreamRandomWeightedPairControlType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamRandomWeightedPairControlType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamRandomWeightedPairControlType from JSON text
	FromJson(value string) error
	// Validate validates StreamRandomWeightedPairControlType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamRandomWeightedPairControlType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Weightedpair returns StreamWeightedPairDataList, set in StreamRandomWeightedPairControlType.
	// StreamWeightedPairDataList is tBD
	Weightedpair() StreamWeightedPairDataList
	// SetWeightedpair assigns StreamWeightedPairDataList provided by user to StreamRandomWeightedPairControlType.
	// StreamWeightedPairDataList is tBD
	SetWeightedpair(value StreamWeightedPairDataList) StreamRandomWeightedPairControlType
	// HasWeightedpair checks if Weightedpair has been set in StreamRandomWeightedPairControlType
	HasWeightedpair() bool
	// SourceStreamId returns int32, set in StreamRandomWeightedPairControlType.
	SourceStreamId() int32
	// SetSourceStreamId assigns int32 provided by user to StreamRandomWeightedPairControlType
	SetSourceStreamId(value int32) StreamRandomWeightedPairControlType
	// HasSourceStreamId checks if SourceStreamId has been set in StreamRandomWeightedPairControlType
	HasSourceStreamId() bool
	setNil()
}

func (obj *streamRandomWeightedPairControlType) populateXml(xObj *Argument) error {

	if obj.HasSourceStreamId() {

		member := Member{
			Name:  "sourcestreamid",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.SourceStreamId()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamRandomWeightedPairControlType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Weightedpair returns a StreamWeightedPairDataList
func (obj *streamRandomWeightedPairControlType) Weightedpair() StreamWeightedPairDataList {
	if obj.obj.Weightedpair == nil {
		obj.obj.Weightedpair = NewStreamWeightedPairDataList().Msg()
	}
	if obj.weightedpairHolder == nil {
		obj.weightedpairHolder = &streamWeightedPairDataList{obj: obj.obj.Weightedpair}
	}
	return obj.weightedpairHolder
}

// TBD
// Weightedpair returns a StreamWeightedPairDataList
func (obj *streamRandomWeightedPairControlType) HasWeightedpair() bool {
	return obj.obj.Weightedpair != nil
}

// TBD
// SetWeightedpair sets the StreamWeightedPairDataList value in the StreamRandomWeightedPairControlType object
func (obj *streamRandomWeightedPairControlType) SetWeightedpair(value StreamWeightedPairDataList) StreamRandomWeightedPairControlType {

	obj.weightedpairHolder = nil
	obj.obj.Weightedpair = value.Msg()

	return obj
}

// TBD
// SourceStreamId returns a int32
func (obj *streamRandomWeightedPairControlType) SourceStreamId() int32 {

	return *obj.obj.SourceStreamId

}

// TBD
// SourceStreamId returns a int32
func (obj *streamRandomWeightedPairControlType) HasSourceStreamId() bool {
	return obj.obj.SourceStreamId != nil
}

// TBD
// SetSourceStreamId sets the int32 value in the StreamRandomWeightedPairControlType object
func (obj *streamRandomWeightedPairControlType) SetSourceStreamId(value int32) StreamRandomWeightedPairControlType {

	obj.obj.SourceStreamId = &value
	return obj
}

func (obj *streamRandomWeightedPairControlType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Weightedpair != nil {

		obj.Weightedpair().validateObj(vObj, set_default)
	}

}

func (obj *streamRandomWeightedPairControlType) setDefault() {

}

// ***** StreamBackgroundOverlayType *****
type streamBackgroundOverlayType struct {
	validation
	obj *otg.StreamBackgroundOverlayType
}

func NewStreamBackgroundOverlayType() StreamBackgroundOverlayType {
	obj := streamBackgroundOverlayType{obj: &otg.StreamBackgroundOverlayType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamBackgroundOverlayType) Msg() *otg.StreamBackgroundOverlayType {
	return obj.obj
}

func (obj *streamBackgroundOverlayType) SetMsg(msg *otg.StreamBackgroundOverlayType) StreamBackgroundOverlayType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamBackgroundOverlayType) ToProto() (*otg.StreamBackgroundOverlayType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamBackgroundOverlayType) FromProto(msg *otg.StreamBackgroundOverlayType) (StreamBackgroundOverlayType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamBackgroundOverlayType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamBackgroundOverlayType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamBackgroundOverlayType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamBackgroundOverlayType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamBackgroundOverlayType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamBackgroundOverlayType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamBackgroundOverlayType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamBackgroundOverlayType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamBackgroundOverlayType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamBackgroundOverlayType) Clone() (StreamBackgroundOverlayType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamBackgroundOverlayType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamBackgroundOverlayType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// StreamBackgroundOverlayType is tBD
type StreamBackgroundOverlayType interface {
	Validation
	// Msg marshals StreamBackgroundOverlayType to protobuf object *otg.StreamBackgroundOverlayType
	// and doesn't set defaults
	Msg() *otg.StreamBackgroundOverlayType
	// SetMsg unmarshals StreamBackgroundOverlayType from protobuf object *otg.StreamBackgroundOverlayType
	// and doesn't set defaults
	SetMsg(*otg.StreamBackgroundOverlayType) StreamBackgroundOverlayType
	// ToProto marshals StreamBackgroundOverlayType to protobuf object *otg.StreamBackgroundOverlayType
	ToProto() (*otg.StreamBackgroundOverlayType, error)
	// ToPbText marshals StreamBackgroundOverlayType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamBackgroundOverlayType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamBackgroundOverlayType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamBackgroundOverlayType from protobuf object *otg.StreamBackgroundOverlayType
	FromProto(msg *otg.StreamBackgroundOverlayType) (StreamBackgroundOverlayType, error)
	// FromPbText unmarshals StreamBackgroundOverlayType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamBackgroundOverlayType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamBackgroundOverlayType from JSON text
	FromJson(value string) error
	// Validate validates StreamBackgroundOverlayType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamBackgroundOverlayType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Offset returns int32, set in StreamBackgroundOverlayType.
	Offset() int32
	// SetOffset assigns int32 provided by user to StreamBackgroundOverlayType
	SetOffset(value int32) StreamBackgroundOverlayType
	// HasOffset checks if Offset has been set in StreamBackgroundOverlayType
	HasOffset() bool
	// OverlayData returns string, set in StreamBackgroundOverlayType.
	OverlayData() string
	// SetOverlayData assigns string provided by user to StreamBackgroundOverlayType
	SetOverlayData(value string) StreamBackgroundOverlayType
	// HasOverlayData checks if OverlayData has been set in StreamBackgroundOverlayType
	HasOverlayData() bool
}

func (obj *streamBackgroundOverlayType) populateXml(xObj *Argument) error {

	if obj.HasOffset() {

		member := Member{
			Name:  "offset",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Offset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasOverlayData() {

		member := Member{
			Name:  "overlaydata",
			Type:  "octets",
			Value: obj.OverlayData(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamBackgroundOverlayType) populateFromXml(xObj *RetVal) error {

	return nil
}

// The offset, within the packet, where the overlay will take place.
// Offset returns a int32
func (obj *streamBackgroundOverlayType) Offset() int32 {

	return *obj.obj.Offset

}

// The offset, within the packet, where the overlay will take place.
// Offset returns a int32
func (obj *streamBackgroundOverlayType) HasOffset() bool {
	return obj.obj.Offset != nil
}

// The offset, within the packet, where the overlay will take place.
// SetOffset sets the int32 value in the StreamBackgroundOverlayType object
func (obj *streamBackgroundOverlayType) SetOffset(value int32) StreamBackgroundOverlayType {

	obj.obj.Offset = &value
	return obj
}

// The data to be overlayed into the background.
// OverlayData returns a string
func (obj *streamBackgroundOverlayType) OverlayData() string {

	return *obj.obj.OverlayData

}

// The data to be overlayed into the background.
// OverlayData returns a string
func (obj *streamBackgroundOverlayType) HasOverlayData() bool {
	return obj.obj.OverlayData != nil
}

// The data to be overlayed into the background.
// SetOverlayData sets the string value in the StreamBackgroundOverlayType object
func (obj *streamBackgroundOverlayType) SetOverlayData(value string) StreamBackgroundOverlayType {

	obj.obj.OverlayData = &value
	return obj
}

func (obj *streamBackgroundOverlayType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *streamBackgroundOverlayType) setDefault() {

}

// ***** StreamProtocolHeaderInfoType *****
type streamProtocolHeaderInfoType struct {
	validation
	obj                    *otg.StreamProtocolHeaderInfoType
	checksumDataHolder     StreamChecksumDataType
	lengthInsertion1Holder StreamLengthInsertionType
}

func NewStreamProtocolHeaderInfoType() StreamProtocolHeaderInfoType {
	obj := streamProtocolHeaderInfoType{obj: &otg.StreamProtocolHeaderInfoType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamProtocolHeaderInfoType) Msg() *otg.StreamProtocolHeaderInfoType {
	return obj.obj
}

func (obj *streamProtocolHeaderInfoType) SetMsg(msg *otg.StreamProtocolHeaderInfoType) StreamProtocolHeaderInfoType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamProtocolHeaderInfoType) ToProto() (*otg.StreamProtocolHeaderInfoType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamProtocolHeaderInfoType) FromProto(msg *otg.StreamProtocolHeaderInfoType) (StreamProtocolHeaderInfoType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamProtocolHeaderInfoType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamProtocolHeaderInfoType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamProtocolHeaderInfoType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamProtocolHeaderInfoType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamProtocolHeaderInfoType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamProtocolHeaderInfoType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamProtocolHeaderInfoType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamProtocolHeaderInfoType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamProtocolHeaderInfoType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamProtocolHeaderInfoType) Clone() (StreamProtocolHeaderInfoType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamProtocolHeaderInfoType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamProtocolHeaderInfoType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamProtocolHeaderInfoType) setNil() {
	obj.checksumDataHolder = nil
	obj.lengthInsertion1Holder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamProtocolHeaderInfoType is tBD
type StreamProtocolHeaderInfoType interface {
	Validation
	// Msg marshals StreamProtocolHeaderInfoType to protobuf object *otg.StreamProtocolHeaderInfoType
	// and doesn't set defaults
	Msg() *otg.StreamProtocolHeaderInfoType
	// SetMsg unmarshals StreamProtocolHeaderInfoType from protobuf object *otg.StreamProtocolHeaderInfoType
	// and doesn't set defaults
	SetMsg(*otg.StreamProtocolHeaderInfoType) StreamProtocolHeaderInfoType
	// ToProto marshals StreamProtocolHeaderInfoType to protobuf object *otg.StreamProtocolHeaderInfoType
	ToProto() (*otg.StreamProtocolHeaderInfoType, error)
	// ToPbText marshals StreamProtocolHeaderInfoType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamProtocolHeaderInfoType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamProtocolHeaderInfoType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamProtocolHeaderInfoType from protobuf object *otg.StreamProtocolHeaderInfoType
	FromProto(msg *otg.StreamProtocolHeaderInfoType) (StreamProtocolHeaderInfoType, error)
	// FromPbText unmarshals StreamProtocolHeaderInfoType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamProtocolHeaderInfoType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamProtocolHeaderInfoType from JSON text
	FromJson(value string) error
	// Validate validates StreamProtocolHeaderInfoType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamProtocolHeaderInfoType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Name returns string, set in StreamProtocolHeaderInfoType.
	Name() string
	// SetName assigns string provided by user to StreamProtocolHeaderInfoType
	SetName(value string) StreamProtocolHeaderInfoType
	// HasName checks if Name has been set in StreamProtocolHeaderInfoType
	HasName() bool
	// Description returns string, set in StreamProtocolHeaderInfoType.
	Description() string
	// SetDescription assigns string provided by user to StreamProtocolHeaderInfoType
	SetDescription(value string) StreamProtocolHeaderInfoType
	// HasDescription checks if Description has been set in StreamProtocolHeaderInfoType
	HasDescription() bool
	// Start returns int32, set in StreamProtocolHeaderInfoType.
	Start() int32
	// SetStart assigns int32 provided by user to StreamProtocolHeaderInfoType
	SetStart(value int32) StreamProtocolHeaderInfoType
	// HasStart checks if Start has been set in StreamProtocolHeaderInfoType
	HasStart() bool
	// Length returns int32, set in StreamProtocolHeaderInfoType.
	Length() int32
	// SetLength assigns int32 provided by user to StreamProtocolHeaderInfoType
	SetLength(value int32) StreamProtocolHeaderInfoType
	// HasLength checks if Length has been set in StreamProtocolHeaderInfoType
	HasLength() bool
	// HasChecksum returns bool, set in StreamProtocolHeaderInfoType.
	HasChecksum() bool
	// SetHasChecksum assigns bool provided by user to StreamProtocolHeaderInfoType
	SetHasChecksum(value bool) StreamProtocolHeaderInfoType
	// HasHasChecksum checks if HasChecksum has been set in StreamProtocolHeaderInfoType
	HasHasChecksum() bool
	// HasLengthInsertion returns bool, set in StreamProtocolHeaderInfoType.
	HasLengthInsertion() bool
	// SetHasLengthInsertion assigns bool provided by user to StreamProtocolHeaderInfoType
	SetHasLengthInsertion(value bool) StreamProtocolHeaderInfoType
	// HasHasLengthInsertion checks if HasLengthInsertion has been set in StreamProtocolHeaderInfoType
	HasHasLengthInsertion() bool
	// ChecksumData returns StreamChecksumDataType, set in StreamProtocolHeaderInfoType.
	// StreamChecksumDataType is tBD
	ChecksumData() StreamChecksumDataType
	// SetChecksumData assigns StreamChecksumDataType provided by user to StreamProtocolHeaderInfoType.
	// StreamChecksumDataType is tBD
	SetChecksumData(value StreamChecksumDataType) StreamProtocolHeaderInfoType
	// HasChecksumData checks if ChecksumData has been set in StreamProtocolHeaderInfoType
	HasChecksumData() bool
	// LengthInsertion1 returns StreamLengthInsertionType, set in StreamProtocolHeaderInfoType.
	// StreamLengthInsertionType is tBD
	LengthInsertion1() StreamLengthInsertionType
	// SetLengthInsertion1 assigns StreamLengthInsertionType provided by user to StreamProtocolHeaderInfoType.
	// StreamLengthInsertionType is tBD
	SetLengthInsertion1(value StreamLengthInsertionType) StreamProtocolHeaderInfoType
	// HasLengthInsertion1 checks if LengthInsertion1 has been set in StreamProtocolHeaderInfoType
	HasLengthInsertion1() bool
	// HasIpType returns bool, set in StreamProtocolHeaderInfoType.
	HasIpType() bool
	// SetHasIpType assigns bool provided by user to StreamProtocolHeaderInfoType
	SetHasIpType(value bool) StreamProtocolHeaderInfoType
	// HasHasIpType checks if HasIpType has been set in StreamProtocolHeaderInfoType
	HasHasIpType() bool
	// IpType1 returns int32, set in StreamProtocolHeaderInfoType.
	IpType1() int32
	// SetIpType1 assigns int32 provided by user to StreamProtocolHeaderInfoType
	SetIpType1(value int32) StreamProtocolHeaderInfoType
	// HasIpType1 checks if IpType1 has been set in StreamProtocolHeaderInfoType
	HasIpType1() bool
	setNil()
}

func (obj *streamProtocolHeaderInfoType) populateXml(xObj *Argument) error {

	if obj.HasName() {

		member := Member{
			Name:  "name",
			Type:  "string",
			Value: obj.Name(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasDescription() {

		member := Member{
			Name:  "description",
			Type:  "string",
			Value: obj.Description(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasStart() {

		member := Member{
			Name:  "start",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Start()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasLength() {

		member := Member{
			Name:  "length",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Length()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasHasChecksum() {
		var value string
		if obj.HasChecksum() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "haschecksum",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasHasLengthInsertion() {
		var value string
		if obj.HasLengthInsertion() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "haslengthinsertion",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasHasIpType() {
		var value string
		if obj.HasIpType() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "hasiptype",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIpType1() {

		member := Member{
			Name:  "iptype1",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.IpType1()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamProtocolHeaderInfoType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// Name returns a string
func (obj *streamProtocolHeaderInfoType) Name() string {

	return *obj.obj.Name

}

// TBD
// Name returns a string
func (obj *streamProtocolHeaderInfoType) HasName() bool {
	return obj.obj.Name != nil
}

// TBD
// SetName sets the string value in the StreamProtocolHeaderInfoType object
func (obj *streamProtocolHeaderInfoType) SetName(value string) StreamProtocolHeaderInfoType {

	obj.obj.Name = &value
	return obj
}

// TBD
// Description returns a string
func (obj *streamProtocolHeaderInfoType) Description() string {

	return *obj.obj.Description

}

// TBD
// Description returns a string
func (obj *streamProtocolHeaderInfoType) HasDescription() bool {
	return obj.obj.Description != nil
}

// TBD
// SetDescription sets the string value in the StreamProtocolHeaderInfoType object
func (obj *streamProtocolHeaderInfoType) SetDescription(value string) StreamProtocolHeaderInfoType {

	obj.obj.Description = &value
	return obj
}

// TBD
// Start returns a int32
func (obj *streamProtocolHeaderInfoType) Start() int32 {

	return *obj.obj.Start

}

// TBD
// Start returns a int32
func (obj *streamProtocolHeaderInfoType) HasStart() bool {
	return obj.obj.Start != nil
}

// TBD
// SetStart sets the int32 value in the StreamProtocolHeaderInfoType object
func (obj *streamProtocolHeaderInfoType) SetStart(value int32) StreamProtocolHeaderInfoType {

	obj.obj.Start = &value
	return obj
}

// TBD
// Length returns a int32
func (obj *streamProtocolHeaderInfoType) Length() int32 {

	return *obj.obj.Length

}

// TBD
// Length returns a int32
func (obj *streamProtocolHeaderInfoType) HasLength() bool {
	return obj.obj.Length != nil
}

// TBD
// SetLength sets the int32 value in the StreamProtocolHeaderInfoType object
func (obj *streamProtocolHeaderInfoType) SetLength(value int32) StreamProtocolHeaderInfoType {

	obj.obj.Length = &value
	return obj
}

// TBD
// HasChecksum returns a bool
func (obj *streamProtocolHeaderInfoType) HasChecksum() bool {

	return *obj.obj.HasChecksum

}

// TBD
// HasChecksum returns a bool
func (obj *streamProtocolHeaderInfoType) HasHasChecksum() bool {
	return obj.obj.HasChecksum != nil
}

// TBD
// SetHasChecksum sets the bool value in the StreamProtocolHeaderInfoType object
func (obj *streamProtocolHeaderInfoType) SetHasChecksum(value bool) StreamProtocolHeaderInfoType {

	obj.obj.HasChecksum = &value
	return obj
}

// TBD
// HasLengthInsertion returns a bool
func (obj *streamProtocolHeaderInfoType) HasLengthInsertion() bool {

	return *obj.obj.HasLengthInsertion

}

// TBD
// HasLengthInsertion returns a bool
func (obj *streamProtocolHeaderInfoType) HasHasLengthInsertion() bool {
	return obj.obj.HasLengthInsertion != nil
}

// TBD
// SetHasLengthInsertion sets the bool value in the StreamProtocolHeaderInfoType object
func (obj *streamProtocolHeaderInfoType) SetHasLengthInsertion(value bool) StreamProtocolHeaderInfoType {

	obj.obj.HasLengthInsertion = &value
	return obj
}

// TBD
// ChecksumData returns a StreamChecksumDataType
func (obj *streamProtocolHeaderInfoType) ChecksumData() StreamChecksumDataType {
	if obj.obj.ChecksumData == nil {
		obj.obj.ChecksumData = NewStreamChecksumDataType().Msg()
	}
	if obj.checksumDataHolder == nil {
		obj.checksumDataHolder = &streamChecksumDataType{obj: obj.obj.ChecksumData}
	}
	return obj.checksumDataHolder
}

// TBD
// ChecksumData returns a StreamChecksumDataType
func (obj *streamProtocolHeaderInfoType) HasChecksumData() bool {
	return obj.obj.ChecksumData != nil
}

// TBD
// SetChecksumData sets the StreamChecksumDataType value in the StreamProtocolHeaderInfoType object
func (obj *streamProtocolHeaderInfoType) SetChecksumData(value StreamChecksumDataType) StreamProtocolHeaderInfoType {

	obj.checksumDataHolder = nil
	obj.obj.ChecksumData = value.Msg()

	return obj
}

// TBD
// LengthInsertion1 returns a StreamLengthInsertionType
func (obj *streamProtocolHeaderInfoType) LengthInsertion1() StreamLengthInsertionType {
	if obj.obj.LengthInsertion1 == nil {
		obj.obj.LengthInsertion1 = NewStreamLengthInsertionType().Msg()
	}
	if obj.lengthInsertion1Holder == nil {
		obj.lengthInsertion1Holder = &streamLengthInsertionType{obj: obj.obj.LengthInsertion1}
	}
	return obj.lengthInsertion1Holder
}

// TBD
// LengthInsertion1 returns a StreamLengthInsertionType
func (obj *streamProtocolHeaderInfoType) HasLengthInsertion1() bool {
	return obj.obj.LengthInsertion1 != nil
}

// TBD
// SetLengthInsertion1 sets the StreamLengthInsertionType value in the StreamProtocolHeaderInfoType object
func (obj *streamProtocolHeaderInfoType) SetLengthInsertion1(value StreamLengthInsertionType) StreamProtocolHeaderInfoType {

	obj.lengthInsertion1Holder = nil
	obj.obj.LengthInsertion1 = value.Msg()

	return obj
}

// TBD
// HasIpType returns a bool
func (obj *streamProtocolHeaderInfoType) HasIpType() bool {

	return *obj.obj.HasIpType

}

// TBD
// HasIpType returns a bool
func (obj *streamProtocolHeaderInfoType) HasHasIpType() bool {
	return obj.obj.HasIpType != nil
}

// TBD
// SetHasIpType sets the bool value in the StreamProtocolHeaderInfoType object
func (obj *streamProtocolHeaderInfoType) SetHasIpType(value bool) StreamProtocolHeaderInfoType {

	obj.obj.HasIpType = &value
	return obj
}

// TBD
// IpType1 returns a int32
func (obj *streamProtocolHeaderInfoType) IpType1() int32 {

	return *obj.obj.IpType1

}

// TBD
// IpType1 returns a int32
func (obj *streamProtocolHeaderInfoType) HasIpType1() bool {
	return obj.obj.IpType1 != nil
}

// TBD
// SetIpType1 sets the int32 value in the StreamProtocolHeaderInfoType object
func (obj *streamProtocolHeaderInfoType) SetIpType1(value int32) StreamProtocolHeaderInfoType {

	obj.obj.IpType1 = &value
	return obj
}

func (obj *streamProtocolHeaderInfoType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ChecksumData != nil {

		obj.ChecksumData().validateObj(vObj, set_default)
	}

	if obj.obj.LengthInsertion1 != nil {

		obj.LengthInsertion1().validateObj(vObj, set_default)
	}

}

func (obj *streamProtocolHeaderInfoType) setDefault() {

}

// ***** UdfUdfType *****
type udfUdfType struct {
	validation
	obj                              *otg.UdfUdfType
	udfIdHolder                      IdTypeUdfId
	chainFromHolder                  IdTypeUdfId
	counterSettingHolder             UdfCounterSettingType
	iPv4SettingHolder                UdfIPv4SettingType
	nestedCounterSettingHolder       UdfNestedCounterSettingType
	valueListSettingHolder           UdfUdfValueListSettingType
	randomSettingHolder              UdfRandomSettingType
	killBitSettingHolder             UdfKillBitSettingType
	skipValueSettingHolder           UdfSkipValueSettingType
	skipSynchronizationSettingHolder UdfSkipSynchronizationSettingType
}

func NewUdfUdfType() UdfUdfType {
	obj := udfUdfType{obj: &otg.UdfUdfType{}}
	obj.setDefault()
	return &obj
}

func (obj *udfUdfType) Msg() *otg.UdfUdfType {
	return obj.obj
}

func (obj *udfUdfType) SetMsg(msg *otg.UdfUdfType) UdfUdfType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *udfUdfType) ToProto() (*otg.UdfUdfType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *udfUdfType) FromProto(msg *otg.UdfUdfType) (UdfUdfType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *udfUdfType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *udfUdfType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *udfUdfType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfUdfType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *udfUdfType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfUdfType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *udfUdfType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *udfUdfType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *udfUdfType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *udfUdfType) Clone() (UdfUdfType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewUdfUdfType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *udfUdfType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *udfUdfType) setNil() {
	obj.udfIdHolder = nil
	obj.chainFromHolder = nil
	obj.counterSettingHolder = nil
	obj.iPv4SettingHolder = nil
	obj.nestedCounterSettingHolder = nil
	obj.valueListSettingHolder = nil
	obj.randomSettingHolder = nil
	obj.killBitSettingHolder = nil
	obj.skipValueSettingHolder = nil
	obj.skipSynchronizationSettingHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// UdfUdfType is tBD
type UdfUdfType interface {
	Validation
	// Msg marshals UdfUdfType to protobuf object *otg.UdfUdfType
	// and doesn't set defaults
	Msg() *otg.UdfUdfType
	// SetMsg unmarshals UdfUdfType from protobuf object *otg.UdfUdfType
	// and doesn't set defaults
	SetMsg(*otg.UdfUdfType) UdfUdfType
	// ToProto marshals UdfUdfType to protobuf object *otg.UdfUdfType
	ToProto() (*otg.UdfUdfType, error)
	// ToPbText marshals UdfUdfType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals UdfUdfType to YAML text
	ToYaml() (string, error)
	// ToJson marshals UdfUdfType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals UdfUdfType from protobuf object *otg.UdfUdfType
	FromProto(msg *otg.UdfUdfType) (UdfUdfType, error)
	// FromPbText unmarshals UdfUdfType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals UdfUdfType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals UdfUdfType from JSON text
	FromJson(value string) error
	// Validate validates UdfUdfType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (UdfUdfType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// UdfId returns IdTypeUdfId, set in UdfUdfType.
	// IdTypeUdfId is tBD
	UdfId() IdTypeUdfId
	// SetUdfId assigns IdTypeUdfId provided by user to UdfUdfType.
	// IdTypeUdfId is tBD
	SetUdfId(value IdTypeUdfId) UdfUdfType
	// HasUdfId checks if UdfId has been set in UdfUdfType
	HasUdfId() bool
	// Enable returns bool, set in UdfUdfType.
	Enable() bool
	// SetEnable assigns bool provided by user to UdfUdfType
	SetEnable(value bool) UdfUdfType
	// HasEnable checks if Enable has been set in UdfUdfType
	HasEnable() bool
	// ChainFrom returns IdTypeUdfId, set in UdfUdfType.
	// IdTypeUdfId is tBD
	ChainFrom() IdTypeUdfId
	// SetChainFrom assigns IdTypeUdfId provided by user to UdfUdfType.
	// IdTypeUdfId is tBD
	SetChainFrom(value IdTypeUdfId) UdfUdfType
	// HasChainFrom checks if ChainFrom has been set in UdfUdfType
	HasChainFrom() bool
	// BitOffset returns int32, set in UdfUdfType.
	BitOffset() int32
	// SetBitOffset assigns int32 provided by user to UdfUdfType
	SetBitOffset(value int32) UdfUdfType
	// HasBitOffset checks if BitOffset has been set in UdfUdfType
	HasBitOffset() bool
	// UdfSize returns int32, set in UdfUdfType.
	UdfSize() int32
	// SetUdfSize assigns int32 provided by user to UdfUdfType
	SetUdfSize(value int32) UdfUdfType
	// HasUdfSize checks if UdfSize has been set in UdfUdfType
	HasUdfSize() bool
	// CascadeType returns UdfUdfTypeCascadeTypeEnum, set in UdfUdfType
	CascadeType() UdfUdfTypeCascadeTypeEnum
	// SetCascadeType assigns UdfUdfTypeCascadeTypeEnum provided by user to UdfUdfType
	SetCascadeType(value UdfUdfTypeCascadeTypeEnum) UdfUdfType
	// HasCascadeType checks if CascadeType has been set in UdfUdfType
	HasCascadeType() bool
	// CounterMode returns UdfUdfTypeCounterModeEnum, set in UdfUdfType
	CounterMode() UdfUdfTypeCounterModeEnum
	// SetCounterMode assigns UdfUdfTypeCounterModeEnum provided by user to UdfUdfType
	SetCounterMode(value UdfUdfTypeCounterModeEnum) UdfUdfType
	// HasCounterMode checks if CounterMode has been set in UdfUdfType
	HasCounterMode() bool
	// CounterSetting returns UdfCounterSettingType, set in UdfUdfType.
	// UdfCounterSettingType is tBD
	CounterSetting() UdfCounterSettingType
	// SetCounterSetting assigns UdfCounterSettingType provided by user to UdfUdfType.
	// UdfCounterSettingType is tBD
	SetCounterSetting(value UdfCounterSettingType) UdfUdfType
	// HasCounterSetting checks if CounterSetting has been set in UdfUdfType
	HasCounterSetting() bool
	// IPv4Setting returns UdfIPv4SettingType, set in UdfUdfType.
	// UdfIPv4SettingType is tBD
	IPv4Setting() UdfIPv4SettingType
	// SetIPv4Setting assigns UdfIPv4SettingType provided by user to UdfUdfType.
	// UdfIPv4SettingType is tBD
	SetIPv4Setting(value UdfIPv4SettingType) UdfUdfType
	// HasIPv4Setting checks if IPv4Setting has been set in UdfUdfType
	HasIPv4Setting() bool
	// NestedCounterSetting returns UdfNestedCounterSettingType, set in UdfUdfType.
	// UdfNestedCounterSettingType is tBD
	NestedCounterSetting() UdfNestedCounterSettingType
	// SetNestedCounterSetting assigns UdfNestedCounterSettingType provided by user to UdfUdfType.
	// UdfNestedCounterSettingType is tBD
	SetNestedCounterSetting(value UdfNestedCounterSettingType) UdfUdfType
	// HasNestedCounterSetting checks if NestedCounterSetting has been set in UdfUdfType
	HasNestedCounterSetting() bool
	// ValueListSetting returns UdfUdfValueListSettingType, set in UdfUdfType.
	// UdfUdfValueListSettingType is tBD
	ValueListSetting() UdfUdfValueListSettingType
	// SetValueListSetting assigns UdfUdfValueListSettingType provided by user to UdfUdfType.
	// UdfUdfValueListSettingType is tBD
	SetValueListSetting(value UdfUdfValueListSettingType) UdfUdfType
	// HasValueListSetting checks if ValueListSetting has been set in UdfUdfType
	HasValueListSetting() bool
	// RandomSetting returns UdfRandomSettingType, set in UdfUdfType.
	// UdfRandomSettingType is tBD
	RandomSetting() UdfRandomSettingType
	// SetRandomSetting assigns UdfRandomSettingType provided by user to UdfUdfType.
	// UdfRandomSettingType is tBD
	SetRandomSetting(value UdfRandomSettingType) UdfUdfType
	// HasRandomSetting checks if RandomSetting has been set in UdfUdfType
	HasRandomSetting() bool
	// KillBitSetting returns UdfKillBitSettingType, set in UdfUdfType.
	// UdfKillBitSettingType is tBD
	KillBitSetting() UdfKillBitSettingType
	// SetKillBitSetting assigns UdfKillBitSettingType provided by user to UdfUdfType.
	// UdfKillBitSettingType is tBD
	SetKillBitSetting(value UdfKillBitSettingType) UdfUdfType
	// HasKillBitSetting checks if KillBitSetting has been set in UdfUdfType
	HasKillBitSetting() bool
	// EnableIndexMode returns bool, set in UdfUdfType.
	EnableIndexMode() bool
	// SetEnableIndexMode assigns bool provided by user to UdfUdfType
	SetEnableIndexMode(value bool) UdfUdfType
	// HasEnableIndexMode checks if EnableIndexMode has been set in UdfUdfType
	HasEnableIndexMode() bool
	// SkipValueSetting returns UdfSkipValueSettingType, set in UdfUdfType.
	// UdfSkipValueSettingType is tBD
	SkipValueSetting() UdfSkipValueSettingType
	// SetSkipValueSetting assigns UdfSkipValueSettingType provided by user to UdfUdfType.
	// UdfSkipValueSettingType is tBD
	SetSkipValueSetting(value UdfSkipValueSettingType) UdfUdfType
	// HasSkipValueSetting checks if SkipValueSetting has been set in UdfUdfType
	HasSkipValueSetting() bool
	// SkipSynchronizationSetting returns UdfSkipSynchronizationSettingType, set in UdfUdfType.
	// UdfSkipSynchronizationSettingType is tBD
	SkipSynchronizationSetting() UdfSkipSynchronizationSettingType
	// SetSkipSynchronizationSetting assigns UdfSkipSynchronizationSettingType provided by user to UdfUdfType.
	// UdfSkipSynchronizationSettingType is tBD
	SetSkipSynchronizationSetting(value UdfSkipSynchronizationSettingType) UdfUdfType
	// HasSkipSynchronizationSetting checks if SkipSynchronizationSetting has been set in UdfUdfType
	HasSkipSynchronizationSetting() bool
	setNil()
}

func (obj *udfUdfType) populateXml(xObj *Argument) error {

	if obj.HasEnable() {
		var value string
		if obj.Enable() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enable",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasBitOffset() {

		member := Member{
			Name:  "bitoffset",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.BitOffset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasUdfSize() {

		member := Member{
			Name:  "udfsize",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.UdfSize()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasCascadeType() {

		member := Member{
			Name:  "cascadetype",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Udf+eCascadeType",
			Value: strconv.FormatInt(int64(obj.obj.CascadeType.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasCounterMode() {

		member := Member{
			Name:  "countermode",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Udf+eCounterMode",
			Value: strconv.FormatInt(int64(obj.obj.CounterMode.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableIndexMode() {
		var value string
		if obj.EnableIndexMode() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enableindexmode",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *udfUdfType) populateFromXml(xObj *RetVal) error {

	return nil
}

// The identifier of the UDF to which the following configuration   pertains.
// UdfId returns a IdTypeUdfId
func (obj *udfUdfType) UdfId() IdTypeUdfId {
	if obj.obj.UdfId == nil {
		obj.obj.UdfId = NewIdTypeUdfId().Msg()
	}
	if obj.udfIdHolder == nil {
		obj.udfIdHolder = &idTypeUdfId{obj: obj.obj.UdfId}
	}
	return obj.udfIdHolder
}

// The identifier of the UDF to which the following configuration   pertains.
// UdfId returns a IdTypeUdfId
func (obj *udfUdfType) HasUdfId() bool {
	return obj.obj.UdfId != nil
}

// The identifier of the UDF to which the following configuration   pertains.
// SetUdfId sets the IdTypeUdfId value in the UdfUdfType object
func (obj *udfUdfType) SetUdfId(value IdTypeUdfId) UdfUdfType {

	obj.udfIdHolder = nil
	obj.obj.UdfId = value.Msg()

	return obj
}

// If this option is set to true, then this UDF counter is inserted   into the frame.
// Enable returns a bool
func (obj *udfUdfType) Enable() bool {

	return *obj.obj.Enable

}

// If this option is set to true, then this UDF counter is inserted   into the frame.
// Enable returns a bool
func (obj *udfUdfType) HasEnable() bool {
	return obj.obj.Enable != nil
}

// If this option is set to true, then this UDF counter is inserted   into the frame.
// SetEnable sets the bool value in the UdfUdfType object
func (obj *udfUdfType) SetEnable(value bool) UdfUdfType {

	obj.obj.Enable = &value
	return obj
}

// Select what UDF the current UDF should chain from. When this   is set to something other than -1 (invalid ID) or mUdfId,   the UDF stays in its initial value until the UDF it is   chained from reaches its terminating value.
// ChainFrom returns a IdTypeUdfId
func (obj *udfUdfType) ChainFrom() IdTypeUdfId {
	if obj.obj.ChainFrom == nil {
		obj.obj.ChainFrom = NewIdTypeUdfId().Msg()
	}
	if obj.chainFromHolder == nil {
		obj.chainFromHolder = &idTypeUdfId{obj: obj.obj.ChainFrom}
	}
	return obj.chainFromHolder
}

// Select what UDF the current UDF should chain from. When this   is set to something other than -1 (invalid ID) or mUdfId,   the UDF stays in its initial value until the UDF it is   chained from reaches its terminating value.
// ChainFrom returns a IdTypeUdfId
func (obj *udfUdfType) HasChainFrom() bool {
	return obj.obj.ChainFrom != nil
}

// Select what UDF the current UDF should chain from. When this   is set to something other than -1 (invalid ID) or mUdfId,   the UDF stays in its initial value until the UDF it is   chained from reaches its terminating value.
// SetChainFrom sets the IdTypeUdfId value in the UdfUdfType object
func (obj *udfUdfType) SetChainFrom(value IdTypeUdfId) UdfUdfType {

	obj.chainFromHolder = nil
	obj.obj.ChainFrom = value.Msg()

	return obj
}

// Sets the offset into the frame in bits of the position of   the UDF. Note that DA and SA use the fixed offsets at 0 and 48,   respectively. This option applies to all values of mCounterMode.
// BitOffset returns a int32
func (obj *udfUdfType) BitOffset() int32 {

	return *obj.obj.BitOffset

}

// Sets the offset into the frame in bits of the position of   the UDF. Note that DA and SA use the fixed offsets at 0 and 48,   respectively. This option applies to all values of mCounterMode.
// BitOffset returns a int32
func (obj *udfUdfType) HasBitOffset() bool {
	return obj.obj.BitOffset != nil
}

// Sets the offset into the frame in bits of the position of   the UDF. Note that DA and SA use the fixed offsets at 0 and 48,   respectively. This option applies to all values of mCounterMode.
// SetBitOffset sets the int32 value in the UdfUdfType object
func (obj *udfUdfType) SetBitOffset(value int32) UdfUdfType {

	obj.obj.BitOffset = &value
	return obj
}

// Sets the UDF field size (in bits). This must be a value from 1-32   and is only supported on certain cards in certain modes.
// UdfSize returns a int32
func (obj *udfUdfType) UdfSize() int32 {

	return *obj.obj.UdfSize

}

// Sets the UDF field size (in bits). This must be a value from 1-32   and is only supported on certain cards in certain modes.
// UdfSize returns a int32
func (obj *udfUdfType) HasUdfSize() bool {
	return obj.obj.UdfSize != nil
}

// Sets the UDF field size (in bits). This must be a value from 1-32   and is only supported on certain cards in certain modes.
// SetUdfSize sets the int32 value in the UdfUdfType object
func (obj *udfUdfType) SetUdfSize(value int32) UdfUdfType {

	obj.obj.UdfSize = &value
	return obj
}

type UdfUdfTypeCascadeTypeEnum string

// Enum of CascadeType on UdfUdfType
var UdfUdfTypeCascadeType = struct {
	KUDFCASCADENONE         UdfUdfTypeCascadeTypeEnum
	KUDFCASCADEFROMPREVIOUS UdfUdfTypeCascadeTypeEnum
	KUDFCASCADEFROMSELF     UdfUdfTypeCascadeTypeEnum
}{
	KUDFCASCADENONE:         UdfUdfTypeCascadeTypeEnum("kUdfCascadeNone"),
	KUDFCASCADEFROMPREVIOUS: UdfUdfTypeCascadeTypeEnum("kUdfCascadeFromPrevious"),
	KUDFCASCADEFROMSELF:     UdfUdfTypeCascadeTypeEnum("kUdfCascadeFromSelf"),
}

func (obj *udfUdfType) CascadeType() UdfUdfTypeCascadeTypeEnum {
	return UdfUdfTypeCascadeTypeEnum(obj.obj.CascadeType.Enum().String())
}

// Indicates the source of the initial value for the counter. The   initial value for the first enabled stream always comes from   mInitval.
// CascadeType returns a string
func (obj *udfUdfType) HasCascadeType() bool {
	return obj.obj.CascadeType != nil
}

func (obj *udfUdfType) SetCascadeType(value UdfUdfTypeCascadeTypeEnum) UdfUdfType {
	intValue, ok := otg.UdfUdfType_CascadeType_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on UdfUdfTypeCascadeTypeEnum", string(value)))
		return obj
	}
	enumValue := otg.UdfUdfType_CascadeType_Enum(intValue)
	obj.obj.CascadeType = &enumValue

	return obj
}

type UdfUdfTypeCounterModeEnum string

// Enum of CounterMode on UdfUdfType
var UdfUdfTypeCounterMode = struct {
	KUDFCOUNTERMODE       UdfUdfTypeCounterModeEnum
	KUDFRANDOMMODE        UdfUdfTypeCounterModeEnum
	KUDFVALUELISTMODE     UdfUdfTypeCounterModeEnum
	KUDFNESTEDCOUNTERMODE UdfUdfTypeCounterModeEnum
	KUDFKILLBITMODE       UdfUdfTypeCounterModeEnum
	KUDFIPV4MODE          UdfUdfTypeCounterModeEnum
	KUDFRANGELISTMODE     UdfUdfTypeCounterModeEnum
}{
	KUDFCOUNTERMODE:       UdfUdfTypeCounterModeEnum("kUdfCounterMode"),
	KUDFRANDOMMODE:        UdfUdfTypeCounterModeEnum("kUdfRandomMode"),
	KUDFVALUELISTMODE:     UdfUdfTypeCounterModeEnum("kUdfValueListMode"),
	KUDFNESTEDCOUNTERMODE: UdfUdfTypeCounterModeEnum("kUdfNestedCounterMode"),
	KUDFKILLBITMODE:       UdfUdfTypeCounterModeEnum("kUdfKillBitMode"),
	KUDFIPV4MODE:          UdfUdfTypeCounterModeEnum("kUdfIPv4Mode"),
	KUDFRANGELISTMODE:     UdfUdfTypeCounterModeEnum("kUdfRangeListMode"),
}

func (obj *udfUdfType) CounterMode() UdfUdfTypeCounterModeEnum {
	return UdfUdfTypeCounterModeEnum(obj.obj.CounterMode.Enum().String())
}

// The mode of operation of the counter. Not all modes are supported   by all port types and not all modes are supported by all UDFs   on a port. A stream set fails if any enabled UDF does not support a   mCounterMode. The availability of a particular mode on a particular   UDF can be checked with the port isValidFeature command
// CounterMode returns a string
func (obj *udfUdfType) HasCounterMode() bool {
	return obj.obj.CounterMode != nil
}

func (obj *udfUdfType) SetCounterMode(value UdfUdfTypeCounterModeEnum) UdfUdfType {
	intValue, ok := otg.UdfUdfType_CounterMode_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on UdfUdfTypeCounterModeEnum", string(value)))
		return obj
	}
	enumValue := otg.UdfUdfType_CounterMode_Enum(intValue)
	obj.obj.CounterMode = &enumValue

	return obj
}

// TBD
// CounterSetting returns a UdfCounterSettingType
func (obj *udfUdfType) CounterSetting() UdfCounterSettingType {
	if obj.obj.CounterSetting == nil {
		obj.obj.CounterSetting = NewUdfCounterSettingType().Msg()
	}
	if obj.counterSettingHolder == nil {
		obj.counterSettingHolder = &udfCounterSettingType{obj: obj.obj.CounterSetting}
	}
	return obj.counterSettingHolder
}

// TBD
// CounterSetting returns a UdfCounterSettingType
func (obj *udfUdfType) HasCounterSetting() bool {
	return obj.obj.CounterSetting != nil
}

// TBD
// SetCounterSetting sets the UdfCounterSettingType value in the UdfUdfType object
func (obj *udfUdfType) SetCounterSetting(value UdfCounterSettingType) UdfUdfType {

	obj.counterSettingHolder = nil
	obj.obj.CounterSetting = value.Msg()

	return obj
}

// TBD
// IPv4Setting returns a UdfIPv4SettingType
func (obj *udfUdfType) IPv4Setting() UdfIPv4SettingType {
	if obj.obj.IPv4Setting == nil {
		obj.obj.IPv4Setting = NewUdfIPv4SettingType().Msg()
	}
	if obj.iPv4SettingHolder == nil {
		obj.iPv4SettingHolder = &udfIPv4SettingType{obj: obj.obj.IPv4Setting}
	}
	return obj.iPv4SettingHolder
}

// TBD
// IPv4Setting returns a UdfIPv4SettingType
func (obj *udfUdfType) HasIPv4Setting() bool {
	return obj.obj.IPv4Setting != nil
}

// TBD
// SetIPv4Setting sets the UdfIPv4SettingType value in the UdfUdfType object
func (obj *udfUdfType) SetIPv4Setting(value UdfIPv4SettingType) UdfUdfType {

	obj.iPv4SettingHolder = nil
	obj.obj.IPv4Setting = value.Msg()

	return obj
}

// TBD
// NestedCounterSetting returns a UdfNestedCounterSettingType
func (obj *udfUdfType) NestedCounterSetting() UdfNestedCounterSettingType {
	if obj.obj.NestedCounterSetting == nil {
		obj.obj.NestedCounterSetting = NewUdfNestedCounterSettingType().Msg()
	}
	if obj.nestedCounterSettingHolder == nil {
		obj.nestedCounterSettingHolder = &udfNestedCounterSettingType{obj: obj.obj.NestedCounterSetting}
	}
	return obj.nestedCounterSettingHolder
}

// TBD
// NestedCounterSetting returns a UdfNestedCounterSettingType
func (obj *udfUdfType) HasNestedCounterSetting() bool {
	return obj.obj.NestedCounterSetting != nil
}

// TBD
// SetNestedCounterSetting sets the UdfNestedCounterSettingType value in the UdfUdfType object
func (obj *udfUdfType) SetNestedCounterSetting(value UdfNestedCounterSettingType) UdfUdfType {

	obj.nestedCounterSettingHolder = nil
	obj.obj.NestedCounterSetting = value.Msg()

	return obj
}

// TBD
// ValueListSetting returns a UdfUdfValueListSettingType
func (obj *udfUdfType) ValueListSetting() UdfUdfValueListSettingType {
	if obj.obj.ValueListSetting == nil {
		obj.obj.ValueListSetting = NewUdfUdfValueListSettingType().Msg()
	}
	if obj.valueListSettingHolder == nil {
		obj.valueListSettingHolder = &udfUdfValueListSettingType{obj: obj.obj.ValueListSetting}
	}
	return obj.valueListSettingHolder
}

// TBD
// ValueListSetting returns a UdfUdfValueListSettingType
func (obj *udfUdfType) HasValueListSetting() bool {
	return obj.obj.ValueListSetting != nil
}

// TBD
// SetValueListSetting sets the UdfUdfValueListSettingType value in the UdfUdfType object
func (obj *udfUdfType) SetValueListSetting(value UdfUdfValueListSettingType) UdfUdfType {

	obj.valueListSettingHolder = nil
	obj.obj.ValueListSetting = value.Msg()

	return obj
}

// TBD
// RandomSetting returns a UdfRandomSettingType
func (obj *udfUdfType) RandomSetting() UdfRandomSettingType {
	if obj.obj.RandomSetting == nil {
		obj.obj.RandomSetting = NewUdfRandomSettingType().Msg()
	}
	if obj.randomSettingHolder == nil {
		obj.randomSettingHolder = &udfRandomSettingType{obj: obj.obj.RandomSetting}
	}
	return obj.randomSettingHolder
}

// TBD
// RandomSetting returns a UdfRandomSettingType
func (obj *udfUdfType) HasRandomSetting() bool {
	return obj.obj.RandomSetting != nil
}

// TBD
// SetRandomSetting sets the UdfRandomSettingType value in the UdfUdfType object
func (obj *udfUdfType) SetRandomSetting(value UdfRandomSettingType) UdfUdfType {

	obj.randomSettingHolder = nil
	obj.obj.RandomSetting = value.Msg()

	return obj
}

// TBD
// KillBitSetting returns a UdfKillBitSettingType
func (obj *udfUdfType) KillBitSetting() UdfKillBitSettingType {
	if obj.obj.KillBitSetting == nil {
		obj.obj.KillBitSetting = NewUdfKillBitSettingType().Msg()
	}
	if obj.killBitSettingHolder == nil {
		obj.killBitSettingHolder = &udfKillBitSettingType{obj: obj.obj.KillBitSetting}
	}
	return obj.killBitSettingHolder
}

// TBD
// KillBitSetting returns a UdfKillBitSettingType
func (obj *udfUdfType) HasKillBitSetting() bool {
	return obj.obj.KillBitSetting != nil
}

// TBD
// SetKillBitSetting sets the UdfKillBitSettingType value in the UdfUdfType object
func (obj *udfUdfType) SetKillBitSetting(value UdfKillBitSettingType) UdfUdfType {

	obj.killBitSettingHolder = nil
	obj.obj.KillBitSetting = value.Msg()

	return obj
}

// If this option is set to true, the index mode is enabled.
// EnableIndexMode returns a bool
func (obj *udfUdfType) EnableIndexMode() bool {

	return *obj.obj.EnableIndexMode

}

// If this option is set to true, the index mode is enabled.
// EnableIndexMode returns a bool
func (obj *udfUdfType) HasEnableIndexMode() bool {
	return obj.obj.EnableIndexMode != nil
}

// If this option is set to true, the index mode is enabled.
// SetEnableIndexMode sets the bool value in the UdfUdfType object
func (obj *udfUdfType) SetEnableIndexMode(value bool) UdfUdfType {

	obj.obj.EnableIndexMode = &value
	return obj
}

// TBD
// SkipValueSetting returns a UdfSkipValueSettingType
func (obj *udfUdfType) SkipValueSetting() UdfSkipValueSettingType {
	if obj.obj.SkipValueSetting == nil {
		obj.obj.SkipValueSetting = NewUdfSkipValueSettingType().Msg()
	}
	if obj.skipValueSettingHolder == nil {
		obj.skipValueSettingHolder = &udfSkipValueSettingType{obj: obj.obj.SkipValueSetting}
	}
	return obj.skipValueSettingHolder
}

// TBD
// SkipValueSetting returns a UdfSkipValueSettingType
func (obj *udfUdfType) HasSkipValueSetting() bool {
	return obj.obj.SkipValueSetting != nil
}

// TBD
// SetSkipValueSetting sets the UdfSkipValueSettingType value in the UdfUdfType object
func (obj *udfUdfType) SetSkipValueSetting(value UdfSkipValueSettingType) UdfUdfType {

	obj.skipValueSettingHolder = nil
	obj.obj.SkipValueSetting = value.Msg()

	return obj
}

// TBD
// SkipSynchronizationSetting returns a UdfSkipSynchronizationSettingType
func (obj *udfUdfType) SkipSynchronizationSetting() UdfSkipSynchronizationSettingType {
	if obj.obj.SkipSynchronizationSetting == nil {
		obj.obj.SkipSynchronizationSetting = NewUdfSkipSynchronizationSettingType().Msg()
	}
	if obj.skipSynchronizationSettingHolder == nil {
		obj.skipSynchronizationSettingHolder = &udfSkipSynchronizationSettingType{obj: obj.obj.SkipSynchronizationSetting}
	}
	return obj.skipSynchronizationSettingHolder
}

// TBD
// SkipSynchronizationSetting returns a UdfSkipSynchronizationSettingType
func (obj *udfUdfType) HasSkipSynchronizationSetting() bool {
	return obj.obj.SkipSynchronizationSetting != nil
}

// TBD
// SetSkipSynchronizationSetting sets the UdfSkipSynchronizationSettingType value in the UdfUdfType object
func (obj *udfUdfType) SetSkipSynchronizationSetting(value UdfSkipSynchronizationSettingType) UdfUdfType {

	obj.skipSynchronizationSettingHolder = nil
	obj.obj.SkipSynchronizationSetting = value.Msg()

	return obj
}

func (obj *udfUdfType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.UdfId != nil {

		obj.UdfId().validateObj(vObj, set_default)
	}

	if obj.obj.ChainFrom != nil {

		obj.ChainFrom().validateObj(vObj, set_default)
	}

	if obj.obj.CounterSetting != nil {

		obj.CounterSetting().validateObj(vObj, set_default)
	}

	if obj.obj.IPv4Setting != nil {

		obj.IPv4Setting().validateObj(vObj, set_default)
	}

	if obj.obj.NestedCounterSetting != nil {

		obj.NestedCounterSetting().validateObj(vObj, set_default)
	}

	if obj.obj.ValueListSetting != nil {

		obj.ValueListSetting().validateObj(vObj, set_default)
	}

	if obj.obj.RandomSetting != nil {

		obj.RandomSetting().validateObj(vObj, set_default)
	}

	if obj.obj.KillBitSetting != nil {

		obj.KillBitSetting().validateObj(vObj, set_default)
	}

	if obj.obj.SkipValueSetting != nil {

		obj.SkipValueSetting().validateObj(vObj, set_default)
	}

	if obj.obj.SkipSynchronizationSetting != nil {

		obj.SkipSynchronizationSetting().validateObj(vObj, set_default)
	}

}

func (obj *udfUdfType) setDefault() {

}

// ***** TableUdfColumnSettingType *****
type tableUdfColumnSettingType struct {
	validation
	obj         *otg.TableUdfColumnSettingType
	colIdHolder TableUdfColId
}

func NewTableUdfColumnSettingType() TableUdfColumnSettingType {
	obj := tableUdfColumnSettingType{obj: &otg.TableUdfColumnSettingType{}}
	obj.setDefault()
	return &obj
}

func (obj *tableUdfColumnSettingType) Msg() *otg.TableUdfColumnSettingType {
	return obj.obj
}

func (obj *tableUdfColumnSettingType) SetMsg(msg *otg.TableUdfColumnSettingType) TableUdfColumnSettingType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *tableUdfColumnSettingType) ToProto() (*otg.TableUdfColumnSettingType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *tableUdfColumnSettingType) FromProto(msg *otg.TableUdfColumnSettingType) (TableUdfColumnSettingType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *tableUdfColumnSettingType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *tableUdfColumnSettingType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *tableUdfColumnSettingType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *tableUdfColumnSettingType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *tableUdfColumnSettingType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *tableUdfColumnSettingType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *tableUdfColumnSettingType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *tableUdfColumnSettingType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *tableUdfColumnSettingType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *tableUdfColumnSettingType) Clone() (TableUdfColumnSettingType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewTableUdfColumnSettingType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *tableUdfColumnSettingType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *tableUdfColumnSettingType) setNil() {
	obj.colIdHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// TableUdfColumnSettingType is tBD
type TableUdfColumnSettingType interface {
	Validation
	// Msg marshals TableUdfColumnSettingType to protobuf object *otg.TableUdfColumnSettingType
	// and doesn't set defaults
	Msg() *otg.TableUdfColumnSettingType
	// SetMsg unmarshals TableUdfColumnSettingType from protobuf object *otg.TableUdfColumnSettingType
	// and doesn't set defaults
	SetMsg(*otg.TableUdfColumnSettingType) TableUdfColumnSettingType
	// ToProto marshals TableUdfColumnSettingType to protobuf object *otg.TableUdfColumnSettingType
	ToProto() (*otg.TableUdfColumnSettingType, error)
	// ToPbText marshals TableUdfColumnSettingType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals TableUdfColumnSettingType to YAML text
	ToYaml() (string, error)
	// ToJson marshals TableUdfColumnSettingType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals TableUdfColumnSettingType from protobuf object *otg.TableUdfColumnSettingType
	FromProto(msg *otg.TableUdfColumnSettingType) (TableUdfColumnSettingType, error)
	// FromPbText unmarshals TableUdfColumnSettingType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals TableUdfColumnSettingType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals TableUdfColumnSettingType from JSON text
	FromJson(value string) error
	// Validate validates TableUdfColumnSettingType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (TableUdfColumnSettingType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ColId returns TableUdfColId, set in TableUdfColumnSettingType.
	// TableUdfColId is tBD
	ColId() TableUdfColId
	// SetColId assigns TableUdfColId provided by user to TableUdfColumnSettingType.
	// TableUdfColId is tBD
	SetColId(value TableUdfColId) TableUdfColumnSettingType
	// HasColId checks if ColId has been set in TableUdfColumnSettingType
	HasColId() bool
	// Offset returns int32, set in TableUdfColumnSettingType.
	Offset() int32
	// SetOffset assigns int32 provided by user to TableUdfColumnSettingType
	SetOffset(value int32) TableUdfColumnSettingType
	// HasOffset checks if Offset has been set in TableUdfColumnSettingType
	HasOffset() bool
	// Size returns int32, set in TableUdfColumnSettingType.
	Size() int32
	// SetSize assigns int32 provided by user to TableUdfColumnSettingType
	SetSize(value int32) TableUdfColumnSettingType
	// HasSize checks if Size has been set in TableUdfColumnSettingType
	HasSize() bool
	setNil()
}

func (obj *tableUdfColumnSettingType) populateXml(xObj *Argument) error {

	if obj.HasOffset() {

		member := Member{
			Name:  "offset",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Offset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSize() {

		member := Member{
			Name:  "size",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Size()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *tableUdfColumnSettingType) populateFromXml(xObj *RetVal) error {

	return nil
}

// The column that this data applies to.
// ColId returns a TableUdfColId
func (obj *tableUdfColumnSettingType) ColId() TableUdfColId {
	if obj.obj.ColId == nil {
		obj.obj.ColId = NewTableUdfColId().Msg()
	}
	if obj.colIdHolder == nil {
		obj.colIdHolder = &tableUdfColId{obj: obj.obj.ColId}
	}
	return obj.colIdHolder
}

// The column that this data applies to.
// ColId returns a TableUdfColId
func (obj *tableUdfColumnSettingType) HasColId() bool {
	return obj.obj.ColId != nil
}

// The column that this data applies to.
// SetColId sets the TableUdfColId value in the TableUdfColumnSettingType object
func (obj *tableUdfColumnSettingType) SetColId(value TableUdfColId) TableUdfColumnSettingType {

	obj.colIdHolder = nil
	obj.obj.ColId = value.Msg()

	return obj
}

// The offset, in bytes, from the beginning of the packet to the start   of the column data.
// Offset returns a int32
func (obj *tableUdfColumnSettingType) Offset() int32 {

	return *obj.obj.Offset

}

// The offset, in bytes, from the beginning of the packet to the start   of the column data.
// Offset returns a int32
func (obj *tableUdfColumnSettingType) HasOffset() bool {
	return obj.obj.Offset != nil
}

// The offset, in bytes, from the beginning of the packet to the start   of the column data.
// SetOffset sets the int32 value in the TableUdfColumnSettingType object
func (obj *tableUdfColumnSettingType) SetOffset(value int32) TableUdfColumnSettingType {

	obj.obj.Offset = &value
	return obj
}

// The size in bytes of the column data.
// Size returns a int32
func (obj *tableUdfColumnSettingType) Size() int32 {

	return *obj.obj.Size

}

// The size in bytes of the column data.
// Size returns a int32
func (obj *tableUdfColumnSettingType) HasSize() bool {
	return obj.obj.Size != nil
}

// The size in bytes of the column data.
// SetSize sets the int32 value in the TableUdfColumnSettingType object
func (obj *tableUdfColumnSettingType) SetSize(value int32) TableUdfColumnSettingType {

	obj.obj.Size = &value
	return obj
}

func (obj *tableUdfColumnSettingType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ColId != nil {

		obj.ColId().validateObj(vObj, set_default)
	}

}

func (obj *tableUdfColumnSettingType) setDefault() {

}

// ***** StreamQuadGaussianDataList *****
type streamQuadGaussianDataList struct {
	validation
	obj                        *otg.StreamQuadGaussianDataList
	quadGaussianDataListHolder StreamQuadGaussianDataListStreamQuadGaussianControlTypeIter
}

func NewStreamQuadGaussianDataList() StreamQuadGaussianDataList {
	obj := streamQuadGaussianDataList{obj: &otg.StreamQuadGaussianDataList{}}
	obj.setDefault()
	return &obj
}

func (obj *streamQuadGaussianDataList) Msg() *otg.StreamQuadGaussianDataList {
	return obj.obj
}

func (obj *streamQuadGaussianDataList) SetMsg(msg *otg.StreamQuadGaussianDataList) StreamQuadGaussianDataList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamQuadGaussianDataList) ToProto() (*otg.StreamQuadGaussianDataList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamQuadGaussianDataList) FromProto(msg *otg.StreamQuadGaussianDataList) (StreamQuadGaussianDataList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamQuadGaussianDataList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamQuadGaussianDataList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamQuadGaussianDataList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamQuadGaussianDataList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamQuadGaussianDataList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamQuadGaussianDataList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamQuadGaussianDataList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamQuadGaussianDataList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamQuadGaussianDataList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamQuadGaussianDataList) Clone() (StreamQuadGaussianDataList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamQuadGaussianDataList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamQuadGaussianDataList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamQuadGaussianDataList) setNil() {
	obj.quadGaussianDataListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamQuadGaussianDataList is tBD
type StreamQuadGaussianDataList interface {
	Validation
	// Msg marshals StreamQuadGaussianDataList to protobuf object *otg.StreamQuadGaussianDataList
	// and doesn't set defaults
	Msg() *otg.StreamQuadGaussianDataList
	// SetMsg unmarshals StreamQuadGaussianDataList from protobuf object *otg.StreamQuadGaussianDataList
	// and doesn't set defaults
	SetMsg(*otg.StreamQuadGaussianDataList) StreamQuadGaussianDataList
	// ToProto marshals StreamQuadGaussianDataList to protobuf object *otg.StreamQuadGaussianDataList
	ToProto() (*otg.StreamQuadGaussianDataList, error)
	// ToPbText marshals StreamQuadGaussianDataList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamQuadGaussianDataList to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamQuadGaussianDataList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamQuadGaussianDataList from protobuf object *otg.StreamQuadGaussianDataList
	FromProto(msg *otg.StreamQuadGaussianDataList) (StreamQuadGaussianDataList, error)
	// FromPbText unmarshals StreamQuadGaussianDataList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamQuadGaussianDataList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamQuadGaussianDataList from JSON text
	FromJson(value string) error
	// Validate validates StreamQuadGaussianDataList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamQuadGaussianDataList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// QuadGaussianDataList returns StreamQuadGaussianDataListStreamQuadGaussianControlTypeIterIter, set in StreamQuadGaussianDataList
	QuadGaussianDataList() StreamQuadGaussianDataListStreamQuadGaussianControlTypeIter
	setNil()
}

func (obj *streamQuadGaussianDataList) populateXml(xObj *Argument) error {

	if len(obj.QuadGaussianDataList().Items()) != 0 {
		for _, item := range obj.QuadGaussianDataList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *streamQuadGaussianDataList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// QuadGaussianDataList returns a []StreamQuadGaussianControlType
func (obj *streamQuadGaussianDataList) QuadGaussianDataList() StreamQuadGaussianDataListStreamQuadGaussianControlTypeIter {
	if len(obj.obj.QuadGaussianDataList) == 0 {
		obj.obj.QuadGaussianDataList = []*otg.StreamQuadGaussianControlType{}
	}
	if obj.quadGaussianDataListHolder == nil {
		obj.quadGaussianDataListHolder = newStreamQuadGaussianDataListStreamQuadGaussianControlTypeIter(&obj.obj.QuadGaussianDataList).setMsg(obj)
	}
	return obj.quadGaussianDataListHolder
}

type streamQuadGaussianDataListStreamQuadGaussianControlTypeIter struct {
	obj                                *streamQuadGaussianDataList
	streamQuadGaussianControlTypeSlice []StreamQuadGaussianControlType
	fieldPtr                           *[]*otg.StreamQuadGaussianControlType
}

func newStreamQuadGaussianDataListStreamQuadGaussianControlTypeIter(ptr *[]*otg.StreamQuadGaussianControlType) StreamQuadGaussianDataListStreamQuadGaussianControlTypeIter {
	return &streamQuadGaussianDataListStreamQuadGaussianControlTypeIter{fieldPtr: ptr}
}

type StreamQuadGaussianDataListStreamQuadGaussianControlTypeIter interface {
	setMsg(*streamQuadGaussianDataList) StreamQuadGaussianDataListStreamQuadGaussianControlTypeIter
	Items() []StreamQuadGaussianControlType
	Add() StreamQuadGaussianControlType
	Append(items ...StreamQuadGaussianControlType) StreamQuadGaussianDataListStreamQuadGaussianControlTypeIter
	Set(index int, newObj StreamQuadGaussianControlType) StreamQuadGaussianDataListStreamQuadGaussianControlTypeIter
	Clear() StreamQuadGaussianDataListStreamQuadGaussianControlTypeIter
	clearHolderSlice() StreamQuadGaussianDataListStreamQuadGaussianControlTypeIter
	appendHolderSlice(item StreamQuadGaussianControlType) StreamQuadGaussianDataListStreamQuadGaussianControlTypeIter
}

func (obj *streamQuadGaussianDataListStreamQuadGaussianControlTypeIter) setMsg(msg *streamQuadGaussianDataList) StreamQuadGaussianDataListStreamQuadGaussianControlTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&streamQuadGaussianControlType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *streamQuadGaussianDataListStreamQuadGaussianControlTypeIter) Items() []StreamQuadGaussianControlType {
	return obj.streamQuadGaussianControlTypeSlice
}

func (obj *streamQuadGaussianDataListStreamQuadGaussianControlTypeIter) Add() StreamQuadGaussianControlType {
	newObj := &otg.StreamQuadGaussianControlType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &streamQuadGaussianControlType{obj: newObj}
	newLibObj.setDefault()
	obj.streamQuadGaussianControlTypeSlice = append(obj.streamQuadGaussianControlTypeSlice, newLibObj)
	return newLibObj
}

func (obj *streamQuadGaussianDataListStreamQuadGaussianControlTypeIter) Append(items ...StreamQuadGaussianControlType) StreamQuadGaussianDataListStreamQuadGaussianControlTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.streamQuadGaussianControlTypeSlice = append(obj.streamQuadGaussianControlTypeSlice, item)
	}
	return obj
}

func (obj *streamQuadGaussianDataListStreamQuadGaussianControlTypeIter) Set(index int, newObj StreamQuadGaussianControlType) StreamQuadGaussianDataListStreamQuadGaussianControlTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.streamQuadGaussianControlTypeSlice[index] = newObj
	return obj
}
func (obj *streamQuadGaussianDataListStreamQuadGaussianControlTypeIter) Clear() StreamQuadGaussianDataListStreamQuadGaussianControlTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.StreamQuadGaussianControlType{}
		obj.streamQuadGaussianControlTypeSlice = []StreamQuadGaussianControlType{}
	}
	return obj
}
func (obj *streamQuadGaussianDataListStreamQuadGaussianControlTypeIter) clearHolderSlice() StreamQuadGaussianDataListStreamQuadGaussianControlTypeIter {
	if len(obj.streamQuadGaussianControlTypeSlice) > 0 {
		obj.streamQuadGaussianControlTypeSlice = []StreamQuadGaussianControlType{}
	}
	return obj
}
func (obj *streamQuadGaussianDataListStreamQuadGaussianControlTypeIter) appendHolderSlice(item StreamQuadGaussianControlType) StreamQuadGaussianDataListStreamQuadGaussianControlTypeIter {
	obj.streamQuadGaussianControlTypeSlice = append(obj.streamQuadGaussianControlTypeSlice, item)
	return obj
}

func (obj *streamQuadGaussianDataList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.QuadGaussianDataList) != 0 {

		if set_default {
			obj.QuadGaussianDataList().clearHolderSlice()
			for _, item := range obj.obj.QuadGaussianDataList {
				obj.QuadGaussianDataList().appendHolderSlice(&streamQuadGaussianControlType{obj: item})
			}
		}
		for _, item := range obj.QuadGaussianDataList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *streamQuadGaussianDataList) setDefault() {

}

// ***** StreamWeightedPairDataList *****
type streamWeightedPairDataList struct {
	validation
	obj                        *otg.StreamWeightedPairDataList
	weightedPairDataListHolder StreamWeightedPairDataListStreamWeightedPairDataTypeIter
}

func NewStreamWeightedPairDataList() StreamWeightedPairDataList {
	obj := streamWeightedPairDataList{obj: &otg.StreamWeightedPairDataList{}}
	obj.setDefault()
	return &obj
}

func (obj *streamWeightedPairDataList) Msg() *otg.StreamWeightedPairDataList {
	return obj.obj
}

func (obj *streamWeightedPairDataList) SetMsg(msg *otg.StreamWeightedPairDataList) StreamWeightedPairDataList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamWeightedPairDataList) ToProto() (*otg.StreamWeightedPairDataList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamWeightedPairDataList) FromProto(msg *otg.StreamWeightedPairDataList) (StreamWeightedPairDataList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamWeightedPairDataList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamWeightedPairDataList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamWeightedPairDataList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamWeightedPairDataList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamWeightedPairDataList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamWeightedPairDataList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamWeightedPairDataList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamWeightedPairDataList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamWeightedPairDataList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamWeightedPairDataList) Clone() (StreamWeightedPairDataList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamWeightedPairDataList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamWeightedPairDataList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamWeightedPairDataList) setNil() {
	obj.weightedPairDataListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamWeightedPairDataList is tBD
type StreamWeightedPairDataList interface {
	Validation
	// Msg marshals StreamWeightedPairDataList to protobuf object *otg.StreamWeightedPairDataList
	// and doesn't set defaults
	Msg() *otg.StreamWeightedPairDataList
	// SetMsg unmarshals StreamWeightedPairDataList from protobuf object *otg.StreamWeightedPairDataList
	// and doesn't set defaults
	SetMsg(*otg.StreamWeightedPairDataList) StreamWeightedPairDataList
	// ToProto marshals StreamWeightedPairDataList to protobuf object *otg.StreamWeightedPairDataList
	ToProto() (*otg.StreamWeightedPairDataList, error)
	// ToPbText marshals StreamWeightedPairDataList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamWeightedPairDataList to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamWeightedPairDataList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamWeightedPairDataList from protobuf object *otg.StreamWeightedPairDataList
	FromProto(msg *otg.StreamWeightedPairDataList) (StreamWeightedPairDataList, error)
	// FromPbText unmarshals StreamWeightedPairDataList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamWeightedPairDataList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamWeightedPairDataList from JSON text
	FromJson(value string) error
	// Validate validates StreamWeightedPairDataList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamWeightedPairDataList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// WeightedPairDataList returns StreamWeightedPairDataListStreamWeightedPairDataTypeIterIter, set in StreamWeightedPairDataList
	WeightedPairDataList() StreamWeightedPairDataListStreamWeightedPairDataTypeIter
	setNil()
}

func (obj *streamWeightedPairDataList) populateXml(xObj *Argument) error {

	if len(obj.WeightedPairDataList().Items()) != 0 {
		for _, item := range obj.WeightedPairDataList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *streamWeightedPairDataList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// WeightedPairDataList returns a []StreamWeightedPairDataType
func (obj *streamWeightedPairDataList) WeightedPairDataList() StreamWeightedPairDataListStreamWeightedPairDataTypeIter {
	if len(obj.obj.WeightedPairDataList) == 0 {
		obj.obj.WeightedPairDataList = []*otg.StreamWeightedPairDataType{}
	}
	if obj.weightedPairDataListHolder == nil {
		obj.weightedPairDataListHolder = newStreamWeightedPairDataListStreamWeightedPairDataTypeIter(&obj.obj.WeightedPairDataList).setMsg(obj)
	}
	return obj.weightedPairDataListHolder
}

type streamWeightedPairDataListStreamWeightedPairDataTypeIter struct {
	obj                             *streamWeightedPairDataList
	streamWeightedPairDataTypeSlice []StreamWeightedPairDataType
	fieldPtr                        *[]*otg.StreamWeightedPairDataType
}

func newStreamWeightedPairDataListStreamWeightedPairDataTypeIter(ptr *[]*otg.StreamWeightedPairDataType) StreamWeightedPairDataListStreamWeightedPairDataTypeIter {
	return &streamWeightedPairDataListStreamWeightedPairDataTypeIter{fieldPtr: ptr}
}

type StreamWeightedPairDataListStreamWeightedPairDataTypeIter interface {
	setMsg(*streamWeightedPairDataList) StreamWeightedPairDataListStreamWeightedPairDataTypeIter
	Items() []StreamWeightedPairDataType
	Add() StreamWeightedPairDataType
	Append(items ...StreamWeightedPairDataType) StreamWeightedPairDataListStreamWeightedPairDataTypeIter
	Set(index int, newObj StreamWeightedPairDataType) StreamWeightedPairDataListStreamWeightedPairDataTypeIter
	Clear() StreamWeightedPairDataListStreamWeightedPairDataTypeIter
	clearHolderSlice() StreamWeightedPairDataListStreamWeightedPairDataTypeIter
	appendHolderSlice(item StreamWeightedPairDataType) StreamWeightedPairDataListStreamWeightedPairDataTypeIter
}

func (obj *streamWeightedPairDataListStreamWeightedPairDataTypeIter) setMsg(msg *streamWeightedPairDataList) StreamWeightedPairDataListStreamWeightedPairDataTypeIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&streamWeightedPairDataType{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *streamWeightedPairDataListStreamWeightedPairDataTypeIter) Items() []StreamWeightedPairDataType {
	return obj.streamWeightedPairDataTypeSlice
}

func (obj *streamWeightedPairDataListStreamWeightedPairDataTypeIter) Add() StreamWeightedPairDataType {
	newObj := &otg.StreamWeightedPairDataType{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &streamWeightedPairDataType{obj: newObj}
	newLibObj.setDefault()
	obj.streamWeightedPairDataTypeSlice = append(obj.streamWeightedPairDataTypeSlice, newLibObj)
	return newLibObj
}

func (obj *streamWeightedPairDataListStreamWeightedPairDataTypeIter) Append(items ...StreamWeightedPairDataType) StreamWeightedPairDataListStreamWeightedPairDataTypeIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.streamWeightedPairDataTypeSlice = append(obj.streamWeightedPairDataTypeSlice, item)
	}
	return obj
}

func (obj *streamWeightedPairDataListStreamWeightedPairDataTypeIter) Set(index int, newObj StreamWeightedPairDataType) StreamWeightedPairDataListStreamWeightedPairDataTypeIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.streamWeightedPairDataTypeSlice[index] = newObj
	return obj
}
func (obj *streamWeightedPairDataListStreamWeightedPairDataTypeIter) Clear() StreamWeightedPairDataListStreamWeightedPairDataTypeIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.StreamWeightedPairDataType{}
		obj.streamWeightedPairDataTypeSlice = []StreamWeightedPairDataType{}
	}
	return obj
}
func (obj *streamWeightedPairDataListStreamWeightedPairDataTypeIter) clearHolderSlice() StreamWeightedPairDataListStreamWeightedPairDataTypeIter {
	if len(obj.streamWeightedPairDataTypeSlice) > 0 {
		obj.streamWeightedPairDataTypeSlice = []StreamWeightedPairDataType{}
	}
	return obj
}
func (obj *streamWeightedPairDataListStreamWeightedPairDataTypeIter) appendHolderSlice(item StreamWeightedPairDataType) StreamWeightedPairDataListStreamWeightedPairDataTypeIter {
	obj.streamWeightedPairDataTypeSlice = append(obj.streamWeightedPairDataTypeSlice, item)
	return obj
}

func (obj *streamWeightedPairDataList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.WeightedPairDataList) != 0 {

		if set_default {
			obj.WeightedPairDataList().clearHolderSlice()
			for _, item := range obj.obj.WeightedPairDataList {
				obj.WeightedPairDataList().appendHolderSlice(&streamWeightedPairDataType{obj: item})
			}
		}
		for _, item := range obj.WeightedPairDataList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *streamWeightedPairDataList) setDefault() {

}

// ***** StreamChecksumDataType *****
type streamChecksumDataType struct {
	validation
	obj                    *otg.StreamChecksumDataType
	pseudoHeaderInfoHolder StreamPseudoHeaderFieldList
}

func NewStreamChecksumDataType() StreamChecksumDataType {
	obj := streamChecksumDataType{obj: &otg.StreamChecksumDataType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamChecksumDataType) Msg() *otg.StreamChecksumDataType {
	return obj.obj
}

func (obj *streamChecksumDataType) SetMsg(msg *otg.StreamChecksumDataType) StreamChecksumDataType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamChecksumDataType) ToProto() (*otg.StreamChecksumDataType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamChecksumDataType) FromProto(msg *otg.StreamChecksumDataType) (StreamChecksumDataType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamChecksumDataType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamChecksumDataType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamChecksumDataType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamChecksumDataType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamChecksumDataType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamChecksumDataType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamChecksumDataType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamChecksumDataType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamChecksumDataType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamChecksumDataType) Clone() (StreamChecksumDataType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamChecksumDataType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamChecksumDataType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamChecksumDataType) setNil() {
	obj.pseudoHeaderInfoHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamChecksumDataType is tBD
type StreamChecksumDataType interface {
	Validation
	// Msg marshals StreamChecksumDataType to protobuf object *otg.StreamChecksumDataType
	// and doesn't set defaults
	Msg() *otg.StreamChecksumDataType
	// SetMsg unmarshals StreamChecksumDataType from protobuf object *otg.StreamChecksumDataType
	// and doesn't set defaults
	SetMsg(*otg.StreamChecksumDataType) StreamChecksumDataType
	// ToProto marshals StreamChecksumDataType to protobuf object *otg.StreamChecksumDataType
	ToProto() (*otg.StreamChecksumDataType, error)
	// ToPbText marshals StreamChecksumDataType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamChecksumDataType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamChecksumDataType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamChecksumDataType from protobuf object *otg.StreamChecksumDataType
	FromProto(msg *otg.StreamChecksumDataType) (StreamChecksumDataType, error)
	// FromPbText unmarshals StreamChecksumDataType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamChecksumDataType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamChecksumDataType from JSON text
	FromJson(value string) error
	// Validate validates StreamChecksumDataType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamChecksumDataType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ChecksumType returns StreamChecksumDataTypeChecksumTypeEnum, set in StreamChecksumDataType
	ChecksumType() StreamChecksumDataTypeChecksumTypeEnum
	// SetChecksumType assigns StreamChecksumDataTypeChecksumTypeEnum provided by user to StreamChecksumDataType
	SetChecksumType(value StreamChecksumDataTypeChecksumTypeEnum) StreamChecksumDataType
	// HasChecksumType checks if ChecksumType has been set in StreamChecksumDataType
	HasChecksumType() bool
	// ChecksumOffset returns int32, set in StreamChecksumDataType.
	ChecksumOffset() int32
	// SetChecksumOffset assigns int32 provided by user to StreamChecksumDataType
	SetChecksumOffset(value int32) StreamChecksumDataType
	// HasChecksumOffset checks if ChecksumOffset has been set in StreamChecksumDataType
	HasChecksumOffset() bool
	// DataOffset returns int32, set in StreamChecksumDataType.
	DataOffset() int32
	// SetDataOffset assigns int32 provided by user to StreamChecksumDataType
	SetDataOffset(value int32) StreamChecksumDataType
	// HasDataOffset checks if DataOffset has been set in StreamChecksumDataType
	HasDataOffset() bool
	// DataLength returns int32, set in StreamChecksumDataType.
	DataLength() int32
	// SetDataLength assigns int32 provided by user to StreamChecksumDataType
	SetDataLength(value int32) StreamChecksumDataType
	// HasDataLength checks if DataLength has been set in StreamChecksumDataType
	HasDataLength() bool
	// ChecksumError returns StreamChecksumDataTypeChecksumErrorEnum, set in StreamChecksumDataType
	ChecksumError() StreamChecksumDataTypeChecksumErrorEnum
	// SetChecksumError assigns StreamChecksumDataTypeChecksumErrorEnum provided by user to StreamChecksumDataType
	SetChecksumError(value StreamChecksumDataTypeChecksumErrorEnum) StreamChecksumDataType
	// HasChecksumError checks if ChecksumError has been set in StreamChecksumDataType
	HasChecksumError() bool
	// IncludePayload returns bool, set in StreamChecksumDataType.
	IncludePayload() bool
	// SetIncludePayload assigns bool provided by user to StreamChecksumDataType
	SetIncludePayload(value bool) StreamChecksumDataType
	// HasIncludePayload checks if IncludePayload has been set in StreamChecksumDataType
	HasIncludePayload() bool
	// IsPseudoHeader returns bool, set in StreamChecksumDataType.
	IsPseudoHeader() bool
	// SetIsPseudoHeader assigns bool provided by user to StreamChecksumDataType
	SetIsPseudoHeader(value bool) StreamChecksumDataType
	// HasIsPseudoHeader checks if IsPseudoHeader has been set in StreamChecksumDataType
	HasIsPseudoHeader() bool
	// IsUdpMode returns bool, set in StreamChecksumDataType.
	IsUdpMode() bool
	// SetIsUdpMode assigns bool provided by user to StreamChecksumDataType
	SetIsUdpMode(value bool) StreamChecksumDataType
	// HasIsUdpMode checks if IsUdpMode has been set in StreamChecksumDataType
	HasIsUdpMode() bool
	// PseudoHeaderInfo returns StreamPseudoHeaderFieldList, set in StreamChecksumDataType.
	// StreamPseudoHeaderFieldList is tBD
	PseudoHeaderInfo() StreamPseudoHeaderFieldList
	// SetPseudoHeaderInfo assigns StreamPseudoHeaderFieldList provided by user to StreamChecksumDataType.
	// StreamPseudoHeaderFieldList is tBD
	SetPseudoHeaderInfo(value StreamPseudoHeaderFieldList) StreamChecksumDataType
	// HasPseudoHeaderInfo checks if PseudoHeaderInfo has been set in StreamChecksumDataType
	HasPseudoHeaderInfo() bool
	setNil()
}

func (obj *streamChecksumDataType) populateXml(xObj *Argument) error {

	if obj.HasChecksumType() {

		member := Member{
			Name:  "checksumtype",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Stream+eChecksumType",
			Value: strconv.FormatInt(int64(obj.obj.ChecksumType.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasChecksumOffset() {

		member := Member{
			Name:  "checksumoffset",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.ChecksumOffset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasDataOffset() {

		member := Member{
			Name:  "dataoffset",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.DataOffset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasDataLength() {

		member := Member{
			Name:  "datalength",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.DataLength()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasChecksumError() {

		member := Member{
			Name:  "checksumerror",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Stream+eChecksumError",
			Value: strconv.FormatInt(int64(obj.obj.ChecksumError.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIncludePayload() {
		var value string
		if obj.IncludePayload() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "includepayload",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIsPseudoHeader() {
		var value string
		if obj.IsPseudoHeader() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "ispseudoheader",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasIsUdpMode() {
		var value string
		if obj.IsUdpMode() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "isudpmode",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamChecksumDataType) populateFromXml(xObj *RetVal) error {

	return nil
}

type StreamChecksumDataTypeChecksumTypeEnum string

// Enum of ChecksumType on StreamChecksumDataType
var StreamChecksumDataTypeChecksumType = struct {
	KETHERNETFCS StreamChecksumDataTypeChecksumTypeEnum
	KL23CHECKSUM StreamChecksumDataTypeChecksumTypeEnum
	KL4CHECKSUM  StreamChecksumDataTypeChecksumTypeEnum
}{
	KETHERNETFCS: StreamChecksumDataTypeChecksumTypeEnum("kEthernetFCS"),
	KL23CHECKSUM: StreamChecksumDataTypeChecksumTypeEnum("kL23Checksum"),
	KL4CHECKSUM:  StreamChecksumDataTypeChecksumTypeEnum("kL4Checksum"),
}

func (obj *streamChecksumDataType) ChecksumType() StreamChecksumDataTypeChecksumTypeEnum {
	return StreamChecksumDataTypeChecksumTypeEnum(obj.obj.ChecksumType.Enum().String())
}

// TBD
// ChecksumType returns a string
func (obj *streamChecksumDataType) HasChecksumType() bool {
	return obj.obj.ChecksumType != nil
}

func (obj *streamChecksumDataType) SetChecksumType(value StreamChecksumDataTypeChecksumTypeEnum) StreamChecksumDataType {
	intValue, ok := otg.StreamChecksumDataType_ChecksumType_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on StreamChecksumDataTypeChecksumTypeEnum", string(value)))
		return obj
	}
	enumValue := otg.StreamChecksumDataType_ChecksumType_Enum(intValue)
	obj.obj.ChecksumType = &enumValue

	return obj
}

// Checksum field offset relative to the  start of the header.
// ChecksumOffset returns a int32
func (obj *streamChecksumDataType) ChecksumOffset() int32 {

	return *obj.obj.ChecksumOffset

}

// Checksum field offset relative to the  start of the header.
// ChecksumOffset returns a int32
func (obj *streamChecksumDataType) HasChecksumOffset() bool {
	return obj.obj.ChecksumOffset != nil
}

// Checksum field offset relative to the  start of the header.
// SetChecksumOffset sets the int32 value in the StreamChecksumDataType object
func (obj *streamChecksumDataType) SetChecksumOffset(value int32) StreamChecksumDataType {

	obj.obj.ChecksumOffset = &value
	return obj
}

// Where to start calculating checksum, payload or header.
// DataOffset returns a int32
func (obj *streamChecksumDataType) DataOffset() int32 {

	return *obj.obj.DataOffset

}

// Where to start calculating checksum, payload or header.
// DataOffset returns a int32
func (obj *streamChecksumDataType) HasDataOffset() bool {
	return obj.obj.DataOffset != nil
}

// Where to start calculating checksum, payload or header.
// SetDataOffset sets the int32 value in the StreamChecksumDataType object
func (obj *streamChecksumDataType) SetDataOffset(value int32) StreamChecksumDataType {

	obj.obj.DataOffset = &value
	return obj
}

// Over how many bytes to calculate checksum.
// DataLength returns a int32
func (obj *streamChecksumDataType) DataLength() int32 {

	return *obj.obj.DataLength

}

// Over how many bytes to calculate checksum.
// DataLength returns a int32
func (obj *streamChecksumDataType) HasDataLength() bool {
	return obj.obj.DataLength != nil
}

// Over how many bytes to calculate checksum.
// SetDataLength sets the int32 value in the StreamChecksumDataType object
func (obj *streamChecksumDataType) SetDataLength(value int32) StreamChecksumDataType {

	obj.obj.DataLength = &value
	return obj
}

type StreamChecksumDataTypeChecksumErrorEnum string

// Enum of ChecksumError on StreamChecksumDataType
var StreamChecksumDataTypeChecksumError = struct {
	KNOERROR     StreamChecksumDataTypeChecksumErrorEnum
	KBADCHECKSUM StreamChecksumDataTypeChecksumErrorEnum
}{
	KNOERROR:     StreamChecksumDataTypeChecksumErrorEnum("kNoError"),
	KBADCHECKSUM: StreamChecksumDataTypeChecksumErrorEnum("kBadChecksum"),
}

func (obj *streamChecksumDataType) ChecksumError() StreamChecksumDataTypeChecksumErrorEnum {
	return StreamChecksumDataTypeChecksumErrorEnum(obj.obj.ChecksumError.Enum().String())
}

// Command HW to insert error if requested.
// ChecksumError returns a string
func (obj *streamChecksumDataType) HasChecksumError() bool {
	return obj.obj.ChecksumError != nil
}

func (obj *streamChecksumDataType) SetChecksumError(value StreamChecksumDataTypeChecksumErrorEnum) StreamChecksumDataType {
	intValue, ok := otg.StreamChecksumDataType_ChecksumError_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on StreamChecksumDataTypeChecksumErrorEnum", string(value)))
		return obj
	}
	enumValue := otg.StreamChecksumDataType_ChecksumError_Enum(intValue)
	obj.obj.ChecksumError = &enumValue

	return obj
}

// Protocol checksum is calculated including the protocol payload.
// IncludePayload returns a bool
func (obj *streamChecksumDataType) IncludePayload() bool {

	return *obj.obj.IncludePayload

}

// Protocol checksum is calculated including the protocol payload.
// IncludePayload returns a bool
func (obj *streamChecksumDataType) HasIncludePayload() bool {
	return obj.obj.IncludePayload != nil
}

// Protocol checksum is calculated including the protocol payload.
// SetIncludePayload sets the bool value in the StreamChecksumDataType object
func (obj *streamChecksumDataType) SetIncludePayload(value bool) StreamChecksumDataType {

	obj.obj.IncludePayload = &value
	return obj
}

// Protocol checksum is calculated using a pseudoheader.
// IsPseudoHeader returns a bool
func (obj *streamChecksumDataType) IsPseudoHeader() bool {

	return *obj.obj.IsPseudoHeader

}

// Protocol checksum is calculated using a pseudoheader.
// IsPseudoHeader returns a bool
func (obj *streamChecksumDataType) HasIsPseudoHeader() bool {
	return obj.obj.IsPseudoHeader != nil
}

// Protocol checksum is calculated using a pseudoheader.
// SetIsPseudoHeader sets the bool value in the StreamChecksumDataType object
func (obj *streamChecksumDataType) SetIsPseudoHeader(value bool) StreamChecksumDataType {

	obj.obj.IsPseudoHeader = &value
	return obj
}

// Protocol checksum initial value is converted from 0 to -1 by UDP only.
// IsUdpMode returns a bool
func (obj *streamChecksumDataType) IsUdpMode() bool {

	return *obj.obj.IsUdpMode

}

// Protocol checksum initial value is converted from 0 to -1 by UDP only.
// IsUdpMode returns a bool
func (obj *streamChecksumDataType) HasIsUdpMode() bool {
	return obj.obj.IsUdpMode != nil
}

// Protocol checksum initial value is converted from 0 to -1 by UDP only.
// SetIsUdpMode sets the bool value in the StreamChecksumDataType object
func (obj *streamChecksumDataType) SetIsUdpMode(value bool) StreamChecksumDataType {

	obj.obj.IsUdpMode = &value
	return obj
}

// Holds information to retrieve the pseudo-header field values
// PseudoHeaderInfo returns a StreamPseudoHeaderFieldList
func (obj *streamChecksumDataType) PseudoHeaderInfo() StreamPseudoHeaderFieldList {
	if obj.obj.PseudoHeaderInfo == nil {
		obj.obj.PseudoHeaderInfo = NewStreamPseudoHeaderFieldList().Msg()
	}
	if obj.pseudoHeaderInfoHolder == nil {
		obj.pseudoHeaderInfoHolder = &streamPseudoHeaderFieldList{obj: obj.obj.PseudoHeaderInfo}
	}
	return obj.pseudoHeaderInfoHolder
}

// Holds information to retrieve the pseudo-header field values
// PseudoHeaderInfo returns a StreamPseudoHeaderFieldList
func (obj *streamChecksumDataType) HasPseudoHeaderInfo() bool {
	return obj.obj.PseudoHeaderInfo != nil
}

// Holds information to retrieve the pseudo-header field values
// SetPseudoHeaderInfo sets the StreamPseudoHeaderFieldList value in the StreamChecksumDataType object
func (obj *streamChecksumDataType) SetPseudoHeaderInfo(value StreamPseudoHeaderFieldList) StreamChecksumDataType {

	obj.pseudoHeaderInfoHolder = nil
	obj.obj.PseudoHeaderInfo = value.Msg()

	return obj
}

func (obj *streamChecksumDataType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PseudoHeaderInfo != nil {

		obj.PseudoHeaderInfo().validateObj(vObj, set_default)
	}

}

func (obj *streamChecksumDataType) setDefault() {

}

// ***** StreamLengthInsertionType *****
type streamLengthInsertionType struct {
	validation
	obj *otg.StreamLengthInsertionType
}

func NewStreamLengthInsertionType() StreamLengthInsertionType {
	obj := streamLengthInsertionType{obj: &otg.StreamLengthInsertionType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamLengthInsertionType) Msg() *otg.StreamLengthInsertionType {
	return obj.obj
}

func (obj *streamLengthInsertionType) SetMsg(msg *otg.StreamLengthInsertionType) StreamLengthInsertionType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamLengthInsertionType) ToProto() (*otg.StreamLengthInsertionType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamLengthInsertionType) FromProto(msg *otg.StreamLengthInsertionType) (StreamLengthInsertionType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamLengthInsertionType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamLengthInsertionType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamLengthInsertionType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamLengthInsertionType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamLengthInsertionType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamLengthInsertionType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamLengthInsertionType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamLengthInsertionType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamLengthInsertionType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamLengthInsertionType) Clone() (StreamLengthInsertionType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamLengthInsertionType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamLengthInsertionType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// StreamLengthInsertionType is tBD
type StreamLengthInsertionType interface {
	Validation
	// Msg marshals StreamLengthInsertionType to protobuf object *otg.StreamLengthInsertionType
	// and doesn't set defaults
	Msg() *otg.StreamLengthInsertionType
	// SetMsg unmarshals StreamLengthInsertionType from protobuf object *otg.StreamLengthInsertionType
	// and doesn't set defaults
	SetMsg(*otg.StreamLengthInsertionType) StreamLengthInsertionType
	// ToProto marshals StreamLengthInsertionType to protobuf object *otg.StreamLengthInsertionType
	ToProto() (*otg.StreamLengthInsertionType, error)
	// ToPbText marshals StreamLengthInsertionType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamLengthInsertionType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamLengthInsertionType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamLengthInsertionType from protobuf object *otg.StreamLengthInsertionType
	FromProto(msg *otg.StreamLengthInsertionType) (StreamLengthInsertionType, error)
	// FromPbText unmarshals StreamLengthInsertionType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamLengthInsertionType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamLengthInsertionType from JSON text
	FromJson(value string) error
	// Validate validates StreamLengthInsertionType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamLengthInsertionType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Value returns int32, set in StreamLengthInsertionType.
	Value() int32
	// SetValue assigns int32 provided by user to StreamLengthInsertionType
	SetValue(value int32) StreamLengthInsertionType
	// HasValue checks if Value has been set in StreamLengthInsertionType
	HasValue() bool
	// Offset returns int32, set in StreamLengthInsertionType.
	Offset() int32
	// SetOffset assigns int32 provided by user to StreamLengthInsertionType
	SetOffset(value int32) StreamLengthInsertionType
	// HasOffset checks if Offset has been set in StreamLengthInsertionType
	HasOffset() bool
}

func (obj *streamLengthInsertionType) populateXml(xObj *Argument) error {

	if obj.HasValue() {

		member := Member{
			Name:  "value",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Value()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasOffset() {

		member := Member{
			Name:  "offset",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Offset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamLengthInsertionType) populateFromXml(xObj *RetVal) error {

	return nil
}

// Value is subtracted from the packet length and the result is placed at the overlay offset.
// Value returns a int32
func (obj *streamLengthInsertionType) Value() int32 {

	return *obj.obj.Value

}

// Value is subtracted from the packet length and the result is placed at the overlay offset.
// Value returns a int32
func (obj *streamLengthInsertionType) HasValue() bool {
	return obj.obj.Value != nil
}

// Value is subtracted from the packet length and the result is placed at the overlay offset.
// SetValue sets the int32 value in the StreamLengthInsertionType object
func (obj *streamLengthInsertionType) SetValue(value int32) StreamLengthInsertionType {

	obj.obj.Value = &value
	return obj
}

// Offset where we need to overlay the corrected length result.
// Offset returns a int32
func (obj *streamLengthInsertionType) Offset() int32 {

	return *obj.obj.Offset

}

// Offset where we need to overlay the corrected length result.
// Offset returns a int32
func (obj *streamLengthInsertionType) HasOffset() bool {
	return obj.obj.Offset != nil
}

// Offset where we need to overlay the corrected length result.
// SetOffset sets the int32 value in the StreamLengthInsertionType object
func (obj *streamLengthInsertionType) SetOffset(value int32) StreamLengthInsertionType {

	obj.obj.Offset = &value
	return obj
}

func (obj *streamLengthInsertionType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *streamLengthInsertionType) setDefault() {

}

// ***** UdfCounterSettingType *****
type udfCounterSettingType struct {
	validation
	obj *otg.UdfCounterSettingType
}

func NewUdfCounterSettingType() UdfCounterSettingType {
	obj := udfCounterSettingType{obj: &otg.UdfCounterSettingType{}}
	obj.setDefault()
	return &obj
}

func (obj *udfCounterSettingType) Msg() *otg.UdfCounterSettingType {
	return obj.obj
}

func (obj *udfCounterSettingType) SetMsg(msg *otg.UdfCounterSettingType) UdfCounterSettingType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *udfCounterSettingType) ToProto() (*otg.UdfCounterSettingType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *udfCounterSettingType) FromProto(msg *otg.UdfCounterSettingType) (UdfCounterSettingType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *udfCounterSettingType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *udfCounterSettingType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *udfCounterSettingType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfCounterSettingType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *udfCounterSettingType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfCounterSettingType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *udfCounterSettingType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *udfCounterSettingType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *udfCounterSettingType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *udfCounterSettingType) Clone() (UdfCounterSettingType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewUdfCounterSettingType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *udfCounterSettingType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// UdfCounterSettingType is tBD
type UdfCounterSettingType interface {
	Validation
	// Msg marshals UdfCounterSettingType to protobuf object *otg.UdfCounterSettingType
	// and doesn't set defaults
	Msg() *otg.UdfCounterSettingType
	// SetMsg unmarshals UdfCounterSettingType from protobuf object *otg.UdfCounterSettingType
	// and doesn't set defaults
	SetMsg(*otg.UdfCounterSettingType) UdfCounterSettingType
	// ToProto marshals UdfCounterSettingType to protobuf object *otg.UdfCounterSettingType
	ToProto() (*otg.UdfCounterSettingType, error)
	// ToPbText marshals UdfCounterSettingType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals UdfCounterSettingType to YAML text
	ToYaml() (string, error)
	// ToJson marshals UdfCounterSettingType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals UdfCounterSettingType from protobuf object *otg.UdfCounterSettingType
	FromProto(msg *otg.UdfCounterSettingType) (UdfCounterSettingType, error)
	// FromPbText unmarshals UdfCounterSettingType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals UdfCounterSettingType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals UdfCounterSettingType from JSON text
	FromJson(value string) error
	// Validate validates UdfCounterSettingType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (UdfCounterSettingType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Repeat returns int64, set in UdfCounterSettingType.
	Repeat() int64
	// SetRepeat assigns int64 provided by user to UdfCounterSettingType
	SetRepeat(value int64) UdfCounterSettingType
	// HasRepeat checks if Repeat has been set in UdfCounterSettingType
	HasRepeat() bool
	// InitVal returns int64, set in UdfCounterSettingType.
	InitVal() int64
	// SetInitVal assigns int64 provided by user to UdfCounterSettingType
	SetInitVal(value int64) UdfCounterSettingType
	// HasInitVal checks if InitVal has been set in UdfCounterSettingType
	HasInitVal() bool
	// Step returns int64, set in UdfCounterSettingType.
	Step() int64
	// SetStep assigns int64 provided by user to UdfCounterSettingType
	SetStep(value int64) UdfCounterSettingType
	// HasStep checks if Step has been set in UdfCounterSettingType
	HasStep() bool
	// EnableCascade returns bool, set in UdfCounterSettingType.
	EnableCascade() bool
	// SetEnableCascade assigns bool provided by user to UdfCounterSettingType
	SetEnableCascade(value bool) UdfCounterSettingType
	// HasEnableCascade checks if EnableCascade has been set in UdfCounterSettingType
	HasEnableCascade() bool
	// ContinuouslyCounting returns bool, set in UdfCounterSettingType.
	ContinuouslyCounting() bool
	// SetContinuouslyCounting assigns bool provided by user to UdfCounterSettingType
	SetContinuouslyCounting(value bool) UdfCounterSettingType
	// HasContinuouslyCounting checks if ContinuouslyCounting has been set in UdfCounterSettingType
	HasContinuouslyCounting() bool
}

func (obj *udfCounterSettingType) populateXml(xObj *Argument) error {

	if obj.HasRepeat() {

		member := Member{
			Name:  "repeat",
			Type:  "int64",
			Value: strconv.FormatInt(obj.Repeat(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasInitVal() {

		member := Member{
			Name:  "initval",
			Type:  "int64",
			Value: strconv.FormatInt(obj.InitVal(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasStep() {

		member := Member{
			Name:  "step",
			Type:  "int64",
			Value: strconv.FormatInt(obj.Step(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEnableCascade() {
		var value string
		if obj.EnableCascade() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enablecascade",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasContinuouslyCounting() {
		var value string
		if obj.ContinuouslyCounting() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "continuouslycounting",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *udfCounterSettingType) populateFromXml(xObj *RetVal) error {

	return nil
}

// The counter is incremented or decremented the number of times based   on this option. Set to zero to repeat indefinitely.
// Repeat returns a int64
func (obj *udfCounterSettingType) Repeat() int64 {

	return *obj.obj.Repeat

}

// The counter is incremented or decremented the number of times based   on this option. Set to zero to repeat indefinitely.
// Repeat returns a int64
func (obj *udfCounterSettingType) HasRepeat() bool {
	return obj.obj.Repeat != nil
}

// The counter is incremented or decremented the number of times based   on this option. Set to zero to repeat indefinitely.
// SetRepeat sets the int64 value in the UdfCounterSettingType object
func (obj *udfCounterSettingType) SetRepeat(value int64) UdfCounterSettingType {

	obj.obj.Repeat = &value
	return obj
}

// The initial value of the counter.
// InitVal returns a int64
func (obj *udfCounterSettingType) InitVal() int64 {

	return *obj.obj.InitVal

}

// The initial value of the counter.
// InitVal returns a int64
func (obj *udfCounterSettingType) HasInitVal() bool {
	return obj.obj.InitVal != nil
}

// The initial value of the counter.
// SetInitVal sets the int64 value in the UdfCounterSettingType object
func (obj *udfCounterSettingType) SetInitVal(value int64) UdfCounterSettingType {

	obj.obj.InitVal = &value
	return obj
}

// The step size for counter increment/decrement.
// Step returns a int64
func (obj *udfCounterSettingType) Step() int64 {

	return *obj.obj.Step

}

// The step size for counter increment/decrement.
// Step returns a int64
func (obj *udfCounterSettingType) HasStep() bool {
	return obj.obj.Step != nil
}

// The step size for counter increment/decrement.
// SetStep sets the int64 value in the UdfCounterSettingType object
func (obj *udfCounterSettingType) SetStep(value int64) UdfCounterSettingType {

	obj.obj.Step = &value
	return obj
}

// If this option is set to true, then the UDF counter is not reset   with the start of each stream, but rather continues counting   from the ending value of the previous stream.
// EnableCascade returns a bool
func (obj *udfCounterSettingType) EnableCascade() bool {

	return *obj.obj.EnableCascade

}

// If this option is set to true, then the UDF counter is not reset   with the start of each stream, but rather continues counting   from the ending value of the previous stream.
// EnableCascade returns a bool
func (obj *udfCounterSettingType) HasEnableCascade() bool {
	return obj.obj.EnableCascade != nil
}

// If this option is set to true, then the UDF counter is not reset   with the start of each stream, but rather continues counting   from the ending value of the previous stream.
// SetEnableCascade sets the bool value in the UdfCounterSettingType object
func (obj *udfCounterSettingType) SetEnableCascade(value bool) UdfCounterSettingType {

	obj.obj.EnableCascade = &value
	return obj
}

// If this option is set to true, then the repeat value is ignored   and the UDF does not reset to initVal but continuously counts.
// ContinuouslyCounting returns a bool
func (obj *udfCounterSettingType) ContinuouslyCounting() bool {

	return *obj.obj.ContinuouslyCounting

}

// If this option is set to true, then the repeat value is ignored   and the UDF does not reset to initVal but continuously counts.
// ContinuouslyCounting returns a bool
func (obj *udfCounterSettingType) HasContinuouslyCounting() bool {
	return obj.obj.ContinuouslyCounting != nil
}

// If this option is set to true, then the repeat value is ignored   and the UDF does not reset to initVal but continuously counts.
// SetContinuouslyCounting sets the bool value in the UdfCounterSettingType object
func (obj *udfCounterSettingType) SetContinuouslyCounting(value bool) UdfCounterSettingType {

	obj.obj.ContinuouslyCounting = &value
	return obj
}

func (obj *udfCounterSettingType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *udfCounterSettingType) setDefault() {

}

// ***** UdfIPv4SettingType *****
type udfIPv4SettingType struct {
	validation
	obj *otg.UdfIPv4SettingType
}

func NewUdfIPv4SettingType() UdfIPv4SettingType {
	obj := udfIPv4SettingType{obj: &otg.UdfIPv4SettingType{}}
	obj.setDefault()
	return &obj
}

func (obj *udfIPv4SettingType) Msg() *otg.UdfIPv4SettingType {
	return obj.obj
}

func (obj *udfIPv4SettingType) SetMsg(msg *otg.UdfIPv4SettingType) UdfIPv4SettingType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *udfIPv4SettingType) ToProto() (*otg.UdfIPv4SettingType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *udfIPv4SettingType) FromProto(msg *otg.UdfIPv4SettingType) (UdfIPv4SettingType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *udfIPv4SettingType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *udfIPv4SettingType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *udfIPv4SettingType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfIPv4SettingType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *udfIPv4SettingType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfIPv4SettingType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *udfIPv4SettingType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *udfIPv4SettingType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *udfIPv4SettingType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *udfIPv4SettingType) Clone() (UdfIPv4SettingType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewUdfIPv4SettingType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *udfIPv4SettingType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// UdfIPv4SettingType is tBD
type UdfIPv4SettingType interface {
	Validation
	// Msg marshals UdfIPv4SettingType to protobuf object *otg.UdfIPv4SettingType
	// and doesn't set defaults
	Msg() *otg.UdfIPv4SettingType
	// SetMsg unmarshals UdfIPv4SettingType from protobuf object *otg.UdfIPv4SettingType
	// and doesn't set defaults
	SetMsg(*otg.UdfIPv4SettingType) UdfIPv4SettingType
	// ToProto marshals UdfIPv4SettingType to protobuf object *otg.UdfIPv4SettingType
	ToProto() (*otg.UdfIPv4SettingType, error)
	// ToPbText marshals UdfIPv4SettingType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals UdfIPv4SettingType to YAML text
	ToYaml() (string, error)
	// ToJson marshals UdfIPv4SettingType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals UdfIPv4SettingType from protobuf object *otg.UdfIPv4SettingType
	FromProto(msg *otg.UdfIPv4SettingType) (UdfIPv4SettingType, error)
	// FromPbText unmarshals UdfIPv4SettingType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals UdfIPv4SettingType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals UdfIPv4SettingType from JSON text
	FromJson(value string) error
	// Validate validates UdfIPv4SettingType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (UdfIPv4SettingType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// InitVal returns int64, set in UdfIPv4SettingType.
	InitVal() int64
	// SetInitVal assigns int64 provided by user to UdfIPv4SettingType
	SetInitVal(value int64) UdfIPv4SettingType
	// HasInitVal checks if InitVal has been set in UdfIPv4SettingType
	HasInitVal() bool
	// RepeatValue returns int64, set in UdfIPv4SettingType.
	RepeatValue() int64
	// SetRepeatValue assigns int64 provided by user to UdfIPv4SettingType
	SetRepeatValue(value int64) UdfIPv4SettingType
	// HasRepeatValue checks if RepeatValue has been set in UdfIPv4SettingType
	HasRepeatValue() bool
	// ValueStep returns int64, set in UdfIPv4SettingType.
	ValueStep() int64
	// SetValueStep assigns int64 provided by user to UdfIPv4SettingType
	SetValueStep(value int64) UdfIPv4SettingType
	// HasValueStep checks if ValueStep has been set in UdfIPv4SettingType
	HasValueStep() bool
	// RepeatLoop returns int64, set in UdfIPv4SettingType.
	RepeatLoop() int64
	// SetRepeatLoop assigns int64 provided by user to UdfIPv4SettingType
	SetRepeatLoop(value int64) UdfIPv4SettingType
	// HasRepeatLoop checks if RepeatLoop has been set in UdfIPv4SettingType
	HasRepeatLoop() bool
	// Mask returns int32, set in UdfIPv4SettingType.
	Mask() int32
	// SetMask assigns int32 provided by user to UdfIPv4SettingType
	SetMask(value int32) UdfIPv4SettingType
	// HasMask checks if Mask has been set in UdfIPv4SettingType
	HasMask() bool
	// ContinuouslyCounting returns bool, set in UdfIPv4SettingType.
	ContinuouslyCounting() bool
	// SetContinuouslyCounting assigns bool provided by user to UdfIPv4SettingType
	SetContinuouslyCounting(value bool) UdfIPv4SettingType
	// HasContinuouslyCounting checks if ContinuouslyCounting has been set in UdfIPv4SettingType
	HasContinuouslyCounting() bool
	// SkipZerosAndOnes returns bool, set in UdfIPv4SettingType.
	SkipZerosAndOnes() bool
	// SetSkipZerosAndOnes assigns bool provided by user to UdfIPv4SettingType
	SetSkipZerosAndOnes(value bool) UdfIPv4SettingType
	// HasSkipZerosAndOnes checks if SkipZerosAndOnes has been set in UdfIPv4SettingType
	HasSkipZerosAndOnes() bool
}

func (obj *udfIPv4SettingType) populateXml(xObj *Argument) error {

	if obj.HasInitVal() {

		member := Member{
			Name:  "initval",
			Type:  "int64",
			Value: strconv.FormatInt(obj.InitVal(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasRepeatValue() {

		member := Member{
			Name:  "repeatvalue",
			Type:  "int64",
			Value: strconv.FormatInt(obj.RepeatValue(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasValueStep() {

		member := Member{
			Name:  "valuestep",
			Type:  "int64",
			Value: strconv.FormatInt(obj.ValueStep(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasRepeatLoop() {

		member := Member{
			Name:  "repeatloop",
			Type:  "int64",
			Value: strconv.FormatInt(obj.RepeatLoop(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasMask() {

		member := Member{
			Name:  "mask",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Mask()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasContinuouslyCounting() {
		var value string
		if obj.ContinuouslyCounting() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "continuouslycounting",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSkipZerosAndOnes() {
		var value string
		if obj.SkipZerosAndOnes() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "skipzerosandones",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *udfIPv4SettingType) populateFromXml(xObj *RetVal) error {

	return nil
}

// The initial value of the counter.
// InitVal returns a int64
func (obj *udfIPv4SettingType) InitVal() int64 {

	return *obj.obj.InitVal

}

// The initial value of the counter.
// InitVal returns a int64
func (obj *udfIPv4SettingType) HasInitVal() bool {
	return obj.obj.InitVal != nil
}

// The initial value of the counter.
// SetInitVal sets the int64 value in the UdfIPv4SettingType object
func (obj *udfIPv4SettingType) SetInitVal(value int64) UdfIPv4SettingType {

	obj.obj.InitVal = &value
	return obj
}

// The number of times each value is repeated for each iteration.
// RepeatValue returns a int64
func (obj *udfIPv4SettingType) RepeatValue() int64 {

	return *obj.obj.RepeatValue

}

// The number of times each value is repeated for each iteration.
// RepeatValue returns a int64
func (obj *udfIPv4SettingType) HasRepeatValue() bool {
	return obj.obj.RepeatValue != nil
}

// The number of times each value is repeated for each iteration.
// SetRepeatValue sets the int64 value in the UdfIPv4SettingType object
func (obj *udfIPv4SettingType) SetRepeatValue(value int64) UdfIPv4SettingType {

	obj.obj.RepeatValue = &value
	return obj
}

// The amount to increment value for each repitition.
// ValueStep returns a int64
func (obj *udfIPv4SettingType) ValueStep() int64 {

	return *obj.obj.ValueStep

}

// The amount to increment value for each repitition.
// ValueStep returns a int64
func (obj *udfIPv4SettingType) HasValueStep() bool {
	return obj.obj.ValueStep != nil
}

// The amount to increment value for each repitition.
// SetValueStep sets the int64 value in the UdfIPv4SettingType object
func (obj *udfIPv4SettingType) SetValueStep(value int64) UdfIPv4SettingType {

	obj.obj.ValueStep = &value
	return obj
}

// The number iterations of the loop. This number must be at least 1.
// RepeatLoop returns a int64
func (obj *udfIPv4SettingType) RepeatLoop() int64 {

	return *obj.obj.RepeatLoop

}

// The number iterations of the loop. This number must be at least 1.
// RepeatLoop returns a int64
func (obj *udfIPv4SettingType) HasRepeatLoop() bool {
	return obj.obj.RepeatLoop != nil
}

// The number iterations of the loop. This number must be at least 1.
// SetRepeatLoop sets the int64 value in the UdfIPv4SettingType object
func (obj *udfIPv4SettingType) SetRepeatLoop(value int64) UdfIPv4SettingType {

	obj.obj.RepeatLoop = &value
	return obj
}

// Tells how many bits from LSB are to skip while counting,if calculated   value has all zeros or all ones.
// Mask returns a int32
func (obj *udfIPv4SettingType) Mask() int32 {

	return *obj.obj.Mask

}

// Tells how many bits from LSB are to skip while counting,if calculated   value has all zeros or all ones.
// Mask returns a int32
func (obj *udfIPv4SettingType) HasMask() bool {
	return obj.obj.Mask != nil
}

// Tells how many bits from LSB are to skip while counting,if calculated   value has all zeros or all ones.
// SetMask sets the int32 value in the UdfIPv4SettingType object
func (obj *udfIPv4SettingType) SetMask(value int32) UdfIPv4SettingType {

	obj.obj.Mask = &value
	return obj
}

// If this option is set to true, then the outerRepetitions value   is ignored and the UDF does not reset to initVal but continuously   counts.
// ContinuouslyCounting returns a bool
func (obj *udfIPv4SettingType) ContinuouslyCounting() bool {

	return *obj.obj.ContinuouslyCounting

}

// If this option is set to true, then the outerRepetitions value   is ignored and the UDF does not reset to initVal but continuously   counts.
// ContinuouslyCounting returns a bool
func (obj *udfIPv4SettingType) HasContinuouslyCounting() bool {
	return obj.obj.ContinuouslyCounting != nil
}

// If this option is set to true, then the outerRepetitions value   is ignored and the UDF does not reset to initVal but continuously   counts.
// SetContinuouslyCounting sets the bool value in the UdfIPv4SettingType object
func (obj *udfIPv4SettingType) SetContinuouslyCounting(value bool) UdfIPv4SettingType {

	obj.obj.ContinuouslyCounting = &value
	return obj
}

// Decides if the counter wants to skip the values that match with the Mask.
// SkipZerosAndOnes returns a bool
func (obj *udfIPv4SettingType) SkipZerosAndOnes() bool {

	return *obj.obj.SkipZerosAndOnes

}

// Decides if the counter wants to skip the values that match with the Mask.
// SkipZerosAndOnes returns a bool
func (obj *udfIPv4SettingType) HasSkipZerosAndOnes() bool {
	return obj.obj.SkipZerosAndOnes != nil
}

// Decides if the counter wants to skip the values that match with the Mask.
// SetSkipZerosAndOnes sets the bool value in the UdfIPv4SettingType object
func (obj *udfIPv4SettingType) SetSkipZerosAndOnes(value bool) UdfIPv4SettingType {

	obj.obj.SkipZerosAndOnes = &value
	return obj
}

func (obj *udfIPv4SettingType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *udfIPv4SettingType) setDefault() {

}

// ***** UdfNestedCounterSettingType *****
type udfNestedCounterSettingType struct {
	validation
	obj *otg.UdfNestedCounterSettingType
}

func NewUdfNestedCounterSettingType() UdfNestedCounterSettingType {
	obj := udfNestedCounterSettingType{obj: &otg.UdfNestedCounterSettingType{}}
	obj.setDefault()
	return &obj
}

func (obj *udfNestedCounterSettingType) Msg() *otg.UdfNestedCounterSettingType {
	return obj.obj
}

func (obj *udfNestedCounterSettingType) SetMsg(msg *otg.UdfNestedCounterSettingType) UdfNestedCounterSettingType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *udfNestedCounterSettingType) ToProto() (*otg.UdfNestedCounterSettingType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *udfNestedCounterSettingType) FromProto(msg *otg.UdfNestedCounterSettingType) (UdfNestedCounterSettingType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *udfNestedCounterSettingType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *udfNestedCounterSettingType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *udfNestedCounterSettingType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfNestedCounterSettingType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *udfNestedCounterSettingType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfNestedCounterSettingType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *udfNestedCounterSettingType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *udfNestedCounterSettingType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *udfNestedCounterSettingType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *udfNestedCounterSettingType) Clone() (UdfNestedCounterSettingType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewUdfNestedCounterSettingType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *udfNestedCounterSettingType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// UdfNestedCounterSettingType is tBD
type UdfNestedCounterSettingType interface {
	Validation
	// Msg marshals UdfNestedCounterSettingType to protobuf object *otg.UdfNestedCounterSettingType
	// and doesn't set defaults
	Msg() *otg.UdfNestedCounterSettingType
	// SetMsg unmarshals UdfNestedCounterSettingType from protobuf object *otg.UdfNestedCounterSettingType
	// and doesn't set defaults
	SetMsg(*otg.UdfNestedCounterSettingType) UdfNestedCounterSettingType
	// ToProto marshals UdfNestedCounterSettingType to protobuf object *otg.UdfNestedCounterSettingType
	ToProto() (*otg.UdfNestedCounterSettingType, error)
	// ToPbText marshals UdfNestedCounterSettingType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals UdfNestedCounterSettingType to YAML text
	ToYaml() (string, error)
	// ToJson marshals UdfNestedCounterSettingType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals UdfNestedCounterSettingType from protobuf object *otg.UdfNestedCounterSettingType
	FromProto(msg *otg.UdfNestedCounterSettingType) (UdfNestedCounterSettingType, error)
	// FromPbText unmarshals UdfNestedCounterSettingType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals UdfNestedCounterSettingType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals UdfNestedCounterSettingType from JSON text
	FromJson(value string) error
	// Validate validates UdfNestedCounterSettingType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (UdfNestedCounterSettingType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// InitVal returns int64, set in UdfNestedCounterSettingType.
	InitVal() int64
	// SetInitVal assigns int64 provided by user to UdfNestedCounterSettingType
	SetInitVal(value int64) UdfNestedCounterSettingType
	// HasInitVal checks if InitVal has been set in UdfNestedCounterSettingType
	HasInitVal() bool
	// ValueRepetitions returns int64, set in UdfNestedCounterSettingType.
	ValueRepetitions() int64
	// SetValueRepetitions assigns int64 provided by user to UdfNestedCounterSettingType
	SetValueRepetitions(value int64) UdfNestedCounterSettingType
	// HasValueRepetitions checks if ValueRepetitions has been set in UdfNestedCounterSettingType
	HasValueRepetitions() bool
	// ValueStep returns int64, set in UdfNestedCounterSettingType.
	ValueStep() int64
	// SetValueStep assigns int64 provided by user to UdfNestedCounterSettingType
	SetValueStep(value int64) UdfNestedCounterSettingType
	// HasValueStep checks if ValueStep has been set in UdfNestedCounterSettingType
	HasValueStep() bool
	// InnerStep returns int64, set in UdfNestedCounterSettingType.
	InnerStep() int64
	// SetInnerStep assigns int64 provided by user to UdfNestedCounterSettingType
	SetInnerStep(value int64) UdfNestedCounterSettingType
	// HasInnerStep checks if InnerStep has been set in UdfNestedCounterSettingType
	HasInnerStep() bool
	// InnerRepetitions returns int64, set in UdfNestedCounterSettingType.
	InnerRepetitions() int64
	// SetInnerRepetitions assigns int64 provided by user to UdfNestedCounterSettingType
	SetInnerRepetitions(value int64) UdfNestedCounterSettingType
	// HasInnerRepetitions checks if InnerRepetitions has been set in UdfNestedCounterSettingType
	HasInnerRepetitions() bool
	// OuterStep returns int64, set in UdfNestedCounterSettingType.
	OuterStep() int64
	// SetOuterStep assigns int64 provided by user to UdfNestedCounterSettingType
	SetOuterStep(value int64) UdfNestedCounterSettingType
	// HasOuterStep checks if OuterStep has been set in UdfNestedCounterSettingType
	HasOuterStep() bool
	// OuterRepetitions returns int64, set in UdfNestedCounterSettingType.
	OuterRepetitions() int64
	// SetOuterRepetitions assigns int64 provided by user to UdfNestedCounterSettingType
	SetOuterRepetitions(value int64) UdfNestedCounterSettingType
	// HasOuterRepetitions checks if OuterRepetitions has been set in UdfNestedCounterSettingType
	HasOuterRepetitions() bool
	// ContinuouslyCounting returns bool, set in UdfNestedCounterSettingType.
	ContinuouslyCounting() bool
	// SetContinuouslyCounting assigns bool provided by user to UdfNestedCounterSettingType
	SetContinuouslyCounting(value bool) UdfNestedCounterSettingType
	// HasContinuouslyCounting checks if ContinuouslyCounting has been set in UdfNestedCounterSettingType
	HasContinuouslyCounting() bool
}

func (obj *udfNestedCounterSettingType) populateXml(xObj *Argument) error {

	if obj.HasInitVal() {

		member := Member{
			Name:  "initval",
			Type:  "int64",
			Value: strconv.FormatInt(obj.InitVal(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasValueRepetitions() {

		member := Member{
			Name:  "valuerepetitions",
			Type:  "int64",
			Value: strconv.FormatInt(obj.ValueRepetitions(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasValueStep() {

		member := Member{
			Name:  "valuestep",
			Type:  "int64",
			Value: strconv.FormatInt(obj.ValueStep(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasInnerStep() {

		member := Member{
			Name:  "innerstep",
			Type:  "int64",
			Value: strconv.FormatInt(obj.InnerStep(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasInnerRepetitions() {

		member := Member{
			Name:  "innerrepetitions",
			Type:  "int64",
			Value: strconv.FormatInt(obj.InnerRepetitions(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasOuterStep() {

		member := Member{
			Name:  "outerstep",
			Type:  "int64",
			Value: strconv.FormatInt(obj.OuterStep(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasOuterRepetitions() {

		member := Member{
			Name:  "outerrepetitions",
			Type:  "int64",
			Value: strconv.FormatInt(obj.OuterRepetitions(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasContinuouslyCounting() {
		var value string
		if obj.ContinuouslyCounting() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "continuouslycounting",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *udfNestedCounterSettingType) populateFromXml(xObj *RetVal) error {

	return nil
}

// The initial value of the counter.
// InitVal returns a int64
func (obj *udfNestedCounterSettingType) InitVal() int64 {

	return *obj.obj.InitVal

}

// The initial value of the counter.
// InitVal returns a int64
func (obj *udfNestedCounterSettingType) HasInitVal() bool {
	return obj.obj.InitVal != nil
}

// The initial value of the counter.
// SetInitVal sets the int64 value in the UdfNestedCounterSettingType object
func (obj *udfNestedCounterSettingType) SetInitVal(value int64) UdfNestedCounterSettingType {

	obj.obj.InitVal = &value
	return obj
}

// The number of times each value is repeated for each iteration   of the inner loop. This number must be at least 1.
// ValueRepetitions returns a int64
func (obj *udfNestedCounterSettingType) ValueRepetitions() int64 {

	return *obj.obj.ValueRepetitions

}

// The number of times each value is repeated for each iteration   of the inner loop. This number must be at least 1.
// ValueRepetitions returns a int64
func (obj *udfNestedCounterSettingType) HasValueRepetitions() bool {
	return obj.obj.ValueRepetitions != nil
}

// The number of times each value is repeated for each iteration   of the inner loop. This number must be at least 1.
// SetValueRepetitions sets the int64 value in the UdfNestedCounterSettingType object
func (obj *udfNestedCounterSettingType) SetValueRepetitions(value int64) UdfNestedCounterSettingType {

	obj.obj.ValueRepetitions = &value
	return obj
}

// The amount to increment value for each repitition. (NOTE: hardware   has 3 loops, network doesn't increment innermost, just repeats value,   this exposes the innermost increment)
// ValueStep returns a int64
func (obj *udfNestedCounterSettingType) ValueStep() int64 {

	return *obj.obj.ValueStep

}

// The amount to increment value for each repitition. (NOTE: hardware   has 3 loops, network doesn't increment innermost, just repeats value,   this exposes the innermost increment)
// ValueStep returns a int64
func (obj *udfNestedCounterSettingType) HasValueStep() bool {
	return obj.obj.ValueStep != nil
}

// The amount to increment value for each repitition. (NOTE: hardware   has 3 loops, network doesn't increment innermost, just repeats value,   this exposes the innermost increment)
// SetValueStep sets the int64 value in the UdfNestedCounterSettingType object
func (obj *udfNestedCounterSettingType) SetValueStep(value int64) UdfNestedCounterSettingType {

	obj.obj.ValueStep = &value
	return obj
}

// The step size between inner loop iterations. Each iteration   of the inner loop requires one complete set of value   repetitions.
// InnerStep returns a int64
func (obj *udfNestedCounterSettingType) InnerStep() int64 {

	return *obj.obj.InnerStep

}

// The step size between inner loop iterations. Each iteration   of the inner loop requires one complete set of value   repetitions.
// InnerStep returns a int64
func (obj *udfNestedCounterSettingType) HasInnerStep() bool {
	return obj.obj.InnerStep != nil
}

// The step size between inner loop iterations. Each iteration   of the inner loop requires one complete set of value   repetitions.
// SetInnerStep sets the int64 value in the UdfNestedCounterSettingType object
func (obj *udfNestedCounterSettingType) SetInnerStep(value int64) UdfNestedCounterSettingType {

	obj.obj.InnerStep = &value
	return obj
}

// The number iterations of the inner loop to form one cycle of   the inner loop. This number must be at least 1.
// InnerRepetitions returns a int64
func (obj *udfNestedCounterSettingType) InnerRepetitions() int64 {

	return *obj.obj.InnerRepetitions

}

// The number iterations of the inner loop to form one cycle of   the inner loop. This number must be at least 1.
// InnerRepetitions returns a int64
func (obj *udfNestedCounterSettingType) HasInnerRepetitions() bool {
	return obj.obj.InnerRepetitions != nil
}

// The number iterations of the inner loop to form one cycle of   the inner loop. This number must be at least 1.
// SetInnerRepetitions sets the int64 value in the UdfNestedCounterSettingType object
func (obj *udfNestedCounterSettingType) SetInnerRepetitions(value int64) UdfNestedCounterSettingType {

	obj.obj.InnerRepetitions = &value
	return obj
}

// The step size between out loop iterations. Each iteration   of the outer loop requires one complete cycle of the inner loop.
// OuterStep returns a int64
func (obj *udfNestedCounterSettingType) OuterStep() int64 {

	return *obj.obj.OuterStep

}

// The step size between out loop iterations. Each iteration   of the outer loop requires one complete cycle of the inner loop.
// OuterStep returns a int64
func (obj *udfNestedCounterSettingType) HasOuterStep() bool {
	return obj.obj.OuterStep != nil
}

// The step size between out loop iterations. Each iteration   of the outer loop requires one complete cycle of the inner loop.
// SetOuterStep sets the int64 value in the UdfNestedCounterSettingType object
func (obj *udfNestedCounterSettingType) SetOuterStep(value int64) UdfNestedCounterSettingType {

	obj.obj.OuterStep = &value
	return obj
}

// The number of times the outer loop is repeated. Repeat indefinitely   if this number is zero.
// OuterRepetitions returns a int64
func (obj *udfNestedCounterSettingType) OuterRepetitions() int64 {

	return *obj.obj.OuterRepetitions

}

// The number of times the outer loop is repeated. Repeat indefinitely   if this number is zero.
// OuterRepetitions returns a int64
func (obj *udfNestedCounterSettingType) HasOuterRepetitions() bool {
	return obj.obj.OuterRepetitions != nil
}

// The number of times the outer loop is repeated. Repeat indefinitely   if this number is zero.
// SetOuterRepetitions sets the int64 value in the UdfNestedCounterSettingType object
func (obj *udfNestedCounterSettingType) SetOuterRepetitions(value int64) UdfNestedCounterSettingType {

	obj.obj.OuterRepetitions = &value
	return obj
}

// If this option is set to true, then the outerRepetitions value   is ignored and the UDF does not reset to initVal but continuously   counts.
// ContinuouslyCounting returns a bool
func (obj *udfNestedCounterSettingType) ContinuouslyCounting() bool {

	return *obj.obj.ContinuouslyCounting

}

// If this option is set to true, then the outerRepetitions value   is ignored and the UDF does not reset to initVal but continuously   counts.
// ContinuouslyCounting returns a bool
func (obj *udfNestedCounterSettingType) HasContinuouslyCounting() bool {
	return obj.obj.ContinuouslyCounting != nil
}

// If this option is set to true, then the outerRepetitions value   is ignored and the UDF does not reset to initVal but continuously   counts.
// SetContinuouslyCounting sets the bool value in the UdfNestedCounterSettingType object
func (obj *udfNestedCounterSettingType) SetContinuouslyCounting(value bool) UdfNestedCounterSettingType {

	obj.obj.ContinuouslyCounting = &value
	return obj
}

func (obj *udfNestedCounterSettingType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *udfNestedCounterSettingType) setDefault() {

}

// ***** UdfUdfValueListSettingType *****
type udfUdfValueListSettingType struct {
	validation
	obj *otg.UdfUdfValueListSettingType
}

func NewUdfUdfValueListSettingType() UdfUdfValueListSettingType {
	obj := udfUdfValueListSettingType{obj: &otg.UdfUdfValueListSettingType{}}
	obj.setDefault()
	return &obj
}

func (obj *udfUdfValueListSettingType) Msg() *otg.UdfUdfValueListSettingType {
	return obj.obj
}

func (obj *udfUdfValueListSettingType) SetMsg(msg *otg.UdfUdfValueListSettingType) UdfUdfValueListSettingType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *udfUdfValueListSettingType) ToProto() (*otg.UdfUdfValueListSettingType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *udfUdfValueListSettingType) FromProto(msg *otg.UdfUdfValueListSettingType) (UdfUdfValueListSettingType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *udfUdfValueListSettingType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *udfUdfValueListSettingType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *udfUdfValueListSettingType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfUdfValueListSettingType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *udfUdfValueListSettingType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfUdfValueListSettingType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *udfUdfValueListSettingType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *udfUdfValueListSettingType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *udfUdfValueListSettingType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *udfUdfValueListSettingType) Clone() (UdfUdfValueListSettingType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewUdfUdfValueListSettingType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *udfUdfValueListSettingType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// UdfUdfValueListSettingType is tBD
type UdfUdfValueListSettingType interface {
	Validation
	// Msg marshals UdfUdfValueListSettingType to protobuf object *otg.UdfUdfValueListSettingType
	// and doesn't set defaults
	Msg() *otg.UdfUdfValueListSettingType
	// SetMsg unmarshals UdfUdfValueListSettingType from protobuf object *otg.UdfUdfValueListSettingType
	// and doesn't set defaults
	SetMsg(*otg.UdfUdfValueListSettingType) UdfUdfValueListSettingType
	// ToProto marshals UdfUdfValueListSettingType to protobuf object *otg.UdfUdfValueListSettingType
	ToProto() (*otg.UdfUdfValueListSettingType, error)
	// ToPbText marshals UdfUdfValueListSettingType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals UdfUdfValueListSettingType to YAML text
	ToYaml() (string, error)
	// ToJson marshals UdfUdfValueListSettingType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals UdfUdfValueListSettingType from protobuf object *otg.UdfUdfValueListSettingType
	FromProto(msg *otg.UdfUdfValueListSettingType) (UdfUdfValueListSettingType, error)
	// FromPbText unmarshals UdfUdfValueListSettingType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals UdfUdfValueListSettingType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals UdfUdfValueListSettingType from JSON text
	FromJson(value string) error
	// Validate validates UdfUdfValueListSettingType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (UdfUdfValueListSettingType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Length returns int32, set in UdfUdfValueListSettingType.
	Length() int32
	// SetLength assigns int32 provided by user to UdfUdfValueListSettingType
	SetLength(value int32) UdfUdfValueListSettingType
	// HasLength checks if Length has been set in UdfUdfValueListSettingType
	HasLength() bool
	// RepeatCount returns int32, set in UdfUdfValueListSettingType.
	RepeatCount() int32
	// SetRepeatCount assigns int32 provided by user to UdfUdfValueListSettingType
	SetRepeatCount(value int32) UdfUdfValueListSettingType
	// HasRepeatCount checks if RepeatCount has been set in UdfUdfValueListSettingType
	HasRepeatCount() bool
	// EntrySize returns int32, set in UdfUdfValueListSettingType.
	EntrySize() int32
	// SetEntrySize assigns int32 provided by user to UdfUdfValueListSettingType
	SetEntrySize(value int32) UdfUdfValueListSettingType
	// HasEntrySize checks if EntrySize has been set in UdfUdfValueListSettingType
	HasEntrySize() bool
	// RegionOffset returns int32, set in UdfUdfValueListSettingType.
	RegionOffset() int32
	// SetRegionOffset assigns int32 provided by user to UdfUdfValueListSettingType
	SetRegionOffset(value int32) UdfUdfValueListSettingType
	// HasRegionOffset checks if RegionOffset has been set in UdfUdfValueListSettingType
	HasRegionOffset() bool
	// ReuseVl returns bool, set in UdfUdfValueListSettingType.
	ReuseVl() bool
	// SetReuseVl assigns bool provided by user to UdfUdfValueListSettingType
	SetReuseVl(value bool) UdfUdfValueListSettingType
	// HasReuseVl checks if ReuseVl has been set in UdfUdfValueListSettingType
	HasReuseVl() bool
	// SourceStreamId returns int32, set in UdfUdfValueListSettingType.
	SourceStreamId() int32
	// SetSourceStreamId assigns int32 provided by user to UdfUdfValueListSettingType
	SetSourceStreamId(value int32) UdfUdfValueListSettingType
	// HasSourceStreamId checks if SourceStreamId has been set in UdfUdfValueListSettingType
	HasSourceStreamId() bool
	// SourceUdfId returns int32, set in UdfUdfValueListSettingType.
	SourceUdfId() int32
	// SetSourceUdfId assigns int32 provided by user to UdfUdfValueListSettingType
	SetSourceUdfId(value int32) UdfUdfValueListSettingType
	// HasSourceUdfId checks if SourceUdfId has been set in UdfUdfValueListSettingType
	HasSourceUdfId() bool
	// StartEntryOffset returns int32, set in UdfUdfValueListSettingType.
	StartEntryOffset() int32
	// SetStartEntryOffset assigns int32 provided by user to UdfUdfValueListSettingType
	SetStartEntryOffset(value int32) UdfUdfValueListSettingType
	// HasStartEntryOffset checks if StartEntryOffset has been set in UdfUdfValueListSettingType
	HasStartEntryOffset() bool
	// NumEntries returns int32, set in UdfUdfValueListSettingType.
	NumEntries() int32
	// SetNumEntries assigns int32 provided by user to UdfUdfValueListSettingType
	SetNumEntries(value int32) UdfUdfValueListSettingType
	// HasNumEntries checks if NumEntries has been set in UdfUdfValueListSettingType
	HasNumEntries() bool
	// UseNestedCounter returns bool, set in UdfUdfValueListSettingType.
	UseNestedCounter() bool
	// SetUseNestedCounter assigns bool provided by user to UdfUdfValueListSettingType
	SetUseNestedCounter(value bool) UdfUdfValueListSettingType
	// HasUseNestedCounter checks if UseNestedCounter has been set in UdfUdfValueListSettingType
	HasUseNestedCounter() bool
}

func (obj *udfUdfValueListSettingType) populateXml(xObj *Argument) error {

	if obj.HasLength() {

		member := Member{
			Name:  "length",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Length()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasRepeatCount() {

		member := Member{
			Name:  "repeatcount",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.RepeatCount()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasEntrySize() {

		member := Member{
			Name:  "entrysize",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.EntrySize()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasRegionOffset() {

		member := Member{
			Name:  "regionoffset",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.RegionOffset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasReuseVl() {
		var value string
		if obj.ReuseVl() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "reusevl",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSourceStreamId() {

		member := Member{
			Name:  "sourcestreamid",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.SourceStreamId()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasSourceUdfId() {

		member := Member{
			Name:  "sourceudfid",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.SourceUdfId()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasStartEntryOffset() {

		member := Member{
			Name:  "startentryoffset",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.StartEntryOffset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasNumEntries() {

		member := Member{
			Name:  "numentries",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.NumEntries()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasUseNestedCounter() {
		var value string
		if obj.UseNestedCounter() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "usenestedcounter",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *udfUdfValueListSettingType) populateFromXml(xObj *RetVal) error {

	return nil
}

// Number of values in the value list.
// Length returns a int32
func (obj *udfUdfValueListSettingType) Length() int32 {

	return *obj.obj.Length

}

// Number of values in the value list.
// Length returns a int32
func (obj *udfUdfValueListSettingType) HasLength() bool {
	return obj.obj.Length != nil
}

// Number of values in the value list.
// SetLength sets the int32 value in the UdfUdfValueListSettingType object
func (obj *udfUdfValueListSettingType) SetLength(value int32) UdfUdfValueListSettingType {

	obj.obj.Length = &value
	return obj
}

// Number of times to repeat the value list.
// RepeatCount returns a int32
func (obj *udfUdfValueListSettingType) RepeatCount() int32 {

	return *obj.obj.RepeatCount

}

// Number of times to repeat the value list.
// RepeatCount returns a int32
func (obj *udfUdfValueListSettingType) HasRepeatCount() bool {
	return obj.obj.RepeatCount != nil
}

// Number of times to repeat the value list.
// SetRepeatCount sets the int32 value in the UdfUdfValueListSettingType object
func (obj *udfUdfValueListSettingType) SetRepeatCount(value int32) UdfUdfValueListSettingType {

	obj.obj.RepeatCount = &value
	return obj
}

// Size of the value list entry in bytes.   Default: 0 (for legacy support to represent 4 byte word)   Valid numbers: 0,1,2,4 on HW supporting entries smaller than 4.
// EntrySize returns a int32
func (obj *udfUdfValueListSettingType) EntrySize() int32 {

	return *obj.obj.EntrySize

}

// Size of the value list entry in bytes.   Default: 0 (for legacy support to represent 4 byte word)   Valid numbers: 0,1,2,4 on HW supporting entries smaller than 4.
// EntrySize returns a int32
func (obj *udfUdfValueListSettingType) HasEntrySize() bool {
	return obj.obj.EntrySize != nil
}

// Size of the value list entry in bytes.   Default: 0 (for legacy support to represent 4 byte word)   Valid numbers: 0,1,2,4 on HW supporting entries smaller than 4.
// SetEntrySize sets the int32 value in the UdfUdfValueListSettingType object
func (obj *udfUdfValueListSettingType) SetEntrySize(value int32) UdfUdfValueListSettingType {

	obj.obj.EntrySize = &value
	return obj
}

// Validated offset from the beginning of the shared VL memory region.   Ignored for HW not supporting shared VL memory region.   Default: -1 i.e. UINT_MAX to indicate invalid offset. 0 is a valid offset.
// RegionOffset returns a int32
func (obj *udfUdfValueListSettingType) RegionOffset() int32 {

	return *obj.obj.RegionOffset

}

// Validated offset from the beginning of the shared VL memory region.   Ignored for HW not supporting shared VL memory region.   Default: -1 i.e. UINT_MAX to indicate invalid offset. 0 is a valid offset.
// RegionOffset returns a int32
func (obj *udfUdfValueListSettingType) HasRegionOffset() bool {
	return obj.obj.RegionOffset != nil
}

// Validated offset from the beginning of the shared VL memory region.   Ignored for HW not supporting shared VL memory region.   Default: -1 i.e. UINT_MAX to indicate invalid offset. 0 is a valid offset.
// SetRegionOffset sets the int32 value in the UdfUdfValueListSettingType object
func (obj *udfUdfValueListSettingType) SetRegionOffset(value int32) UdfUdfValueListSettingType {

	obj.obj.RegionOffset = &value
	return obj
}

// Reuse a configured value list.
// ReuseVl returns a bool
func (obj *udfUdfValueListSettingType) ReuseVl() bool {

	return *obj.obj.ReuseVl

}

// Reuse a configured value list.
// ReuseVl returns a bool
func (obj *udfUdfValueListSettingType) HasReuseVl() bool {
	return obj.obj.ReuseVl != nil
}

// Reuse a configured value list.
// SetReuseVl sets the bool value in the UdfUdfValueListSettingType object
func (obj *udfUdfValueListSettingType) SetReuseVl(value bool) UdfUdfValueListSettingType {

	obj.obj.ReuseVl = &value
	return obj
}

// Stream Id of the source value list.
// SourceStreamId returns a int32
func (obj *udfUdfValueListSettingType) SourceStreamId() int32 {

	return *obj.obj.SourceStreamId

}

// Stream Id of the source value list.
// SourceStreamId returns a int32
func (obj *udfUdfValueListSettingType) HasSourceStreamId() bool {
	return obj.obj.SourceStreamId != nil
}

// Stream Id of the source value list.
// SetSourceStreamId sets the int32 value in the UdfUdfValueListSettingType object
func (obj *udfUdfValueListSettingType) SetSourceStreamId(value int32) UdfUdfValueListSettingType {

	obj.obj.SourceStreamId = &value
	return obj
}

// Udf Id of the source value list.
// SourceUdfId returns a int32
func (obj *udfUdfValueListSettingType) SourceUdfId() int32 {

	return *obj.obj.SourceUdfId

}

// Udf Id of the source value list.
// SourceUdfId returns a int32
func (obj *udfUdfValueListSettingType) HasSourceUdfId() bool {
	return obj.obj.SourceUdfId != nil
}

// Udf Id of the source value list.
// SetSourceUdfId sets the int32 value in the UdfUdfValueListSettingType object
func (obj *udfUdfValueListSettingType) SetSourceUdfId(value int32) UdfUdfValueListSettingType {

	obj.obj.SourceUdfId = &value
	return obj
}

// Number of entries in configured VL after which the list is to be reused.
// StartEntryOffset returns a int32
func (obj *udfUdfValueListSettingType) StartEntryOffset() int32 {

	return *obj.obj.StartEntryOffset

}

// Number of entries in configured VL after which the list is to be reused.
// StartEntryOffset returns a int32
func (obj *udfUdfValueListSettingType) HasStartEntryOffset() bool {
	return obj.obj.StartEntryOffset != nil
}

// Number of entries in configured VL after which the list is to be reused.
// SetStartEntryOffset sets the int32 value in the UdfUdfValueListSettingType object
func (obj *udfUdfValueListSettingType) SetStartEntryOffset(value int32) UdfUdfValueListSettingType {

	obj.obj.StartEntryOffset = &value
	return obj
}

// The number of Value List entries that will be shared starting from startEntryOffset.
// NumEntries returns a int32
func (obj *udfUdfValueListSettingType) NumEntries() int32 {

	return *obj.obj.NumEntries

}

// The number of Value List entries that will be shared starting from startEntryOffset.
// NumEntries returns a int32
func (obj *udfUdfValueListSettingType) HasNumEntries() bool {
	return obj.obj.NumEntries != nil
}

// The number of Value List entries that will be shared starting from startEntryOffset.
// SetNumEntries sets the int32 value in the UdfUdfValueListSettingType object
func (obj *udfUdfValueListSettingType) SetNumEntries(value int32) UdfUdfValueListSettingType {

	obj.obj.NumEntries = &value
	return obj
}

// Enable usage of the nested counter to loop through the value list.
// UseNestedCounter returns a bool
func (obj *udfUdfValueListSettingType) UseNestedCounter() bool {

	return *obj.obj.UseNestedCounter

}

// Enable usage of the nested counter to loop through the value list.
// UseNestedCounter returns a bool
func (obj *udfUdfValueListSettingType) HasUseNestedCounter() bool {
	return obj.obj.UseNestedCounter != nil
}

// Enable usage of the nested counter to loop through the value list.
// SetUseNestedCounter sets the bool value in the UdfUdfValueListSettingType object
func (obj *udfUdfValueListSettingType) SetUseNestedCounter(value bool) UdfUdfValueListSettingType {

	obj.obj.UseNestedCounter = &value
	return obj
}

func (obj *udfUdfValueListSettingType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *udfUdfValueListSettingType) setDefault() {

}

// ***** UdfRandomSettingType *****
type udfRandomSettingType struct {
	validation
	obj *otg.UdfRandomSettingType
}

func NewUdfRandomSettingType() UdfRandomSettingType {
	obj := udfRandomSettingType{obj: &otg.UdfRandomSettingType{}}
	obj.setDefault()
	return &obj
}

func (obj *udfRandomSettingType) Msg() *otg.UdfRandomSettingType {
	return obj.obj
}

func (obj *udfRandomSettingType) SetMsg(msg *otg.UdfRandomSettingType) UdfRandomSettingType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *udfRandomSettingType) ToProto() (*otg.UdfRandomSettingType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *udfRandomSettingType) FromProto(msg *otg.UdfRandomSettingType) (UdfRandomSettingType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *udfRandomSettingType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *udfRandomSettingType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *udfRandomSettingType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfRandomSettingType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *udfRandomSettingType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfRandomSettingType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *udfRandomSettingType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *udfRandomSettingType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *udfRandomSettingType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *udfRandomSettingType) Clone() (UdfRandomSettingType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewUdfRandomSettingType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *udfRandomSettingType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// UdfRandomSettingType is tBD
type UdfRandomSettingType interface {
	Validation
	// Msg marshals UdfRandomSettingType to protobuf object *otg.UdfRandomSettingType
	// and doesn't set defaults
	Msg() *otg.UdfRandomSettingType
	// SetMsg unmarshals UdfRandomSettingType from protobuf object *otg.UdfRandomSettingType
	// and doesn't set defaults
	SetMsg(*otg.UdfRandomSettingType) UdfRandomSettingType
	// ToProto marshals UdfRandomSettingType to protobuf object *otg.UdfRandomSettingType
	ToProto() (*otg.UdfRandomSettingType, error)
	// ToPbText marshals UdfRandomSettingType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals UdfRandomSettingType to YAML text
	ToYaml() (string, error)
	// ToJson marshals UdfRandomSettingType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals UdfRandomSettingType from protobuf object *otg.UdfRandomSettingType
	FromProto(msg *otg.UdfRandomSettingType) (UdfRandomSettingType, error)
	// FromPbText unmarshals UdfRandomSettingType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals UdfRandomSettingType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals UdfRandomSettingType from JSON text
	FromJson(value string) error
	// Validate validates UdfRandomSettingType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (UdfRandomSettingType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// MaskSelect returns int64, set in UdfRandomSettingType.
	MaskSelect() int64
	// SetMaskSelect assigns int64 provided by user to UdfRandomSettingType
	SetMaskSelect(value int64) UdfRandomSettingType
	// HasMaskSelect checks if MaskSelect has been set in UdfRandomSettingType
	HasMaskSelect() bool
	// MaskVal returns int64, set in UdfRandomSettingType.
	MaskVal() int64
	// SetMaskVal assigns int64 provided by user to UdfRandomSettingType
	SetMaskVal(value int64) UdfRandomSettingType
	// HasMaskVal checks if MaskVal has been set in UdfRandomSettingType
	HasMaskVal() bool
	// RandomType returns UdfRandomSettingTypeRandomTypeEnum, set in UdfRandomSettingType
	RandomType() UdfRandomSettingTypeRandomTypeEnum
	// SetRandomType assigns UdfRandomSettingTypeRandomTypeEnum provided by user to UdfRandomSettingType
	SetRandomType(value UdfRandomSettingTypeRandomTypeEnum) UdfRandomSettingType
	// HasRandomType checks if RandomType has been set in UdfRandomSettingType
	HasRandomType() bool
	// InitRandomSeed returns int64, set in UdfRandomSettingType.
	InitRandomSeed() int64
	// SetInitRandomSeed assigns int64 provided by user to UdfRandomSettingType
	SetInitRandomSeed(value int64) UdfRandomSettingType
	// HasInitRandomSeed checks if InitRandomSeed has been set in UdfRandomSettingType
	HasInitRandomSeed() bool
	// StartVal returns int64, set in UdfRandomSettingType.
	StartVal() int64
	// SetStartVal assigns int64 provided by user to UdfRandomSettingType
	SetStartVal(value int64) UdfRandomSettingType
	// HasStartVal checks if StartVal has been set in UdfRandomSettingType
	HasStartVal() bool
	// MinVal returns int64, set in UdfRandomSettingType.
	MinVal() int64
	// SetMinVal assigns int64 provided by user to UdfRandomSettingType
	SetMinVal(value int64) UdfRandomSettingType
	// HasMinVal checks if MinVal has been set in UdfRandomSettingType
	HasMinVal() bool
	// MaxVal returns int64, set in UdfRandomSettingType.
	MaxVal() int64
	// SetMaxVal assigns int64 provided by user to UdfRandomSettingType
	SetMaxVal(value int64) UdfRandomSettingType
	// HasMaxVal checks if MaxVal has been set in UdfRandomSettingType
	HasMaxVal() bool
}

func (obj *udfRandomSettingType) populateXml(xObj *Argument) error {

	if obj.HasMaskSelect() {

		member := Member{
			Name:  "maskselect",
			Type:  "int64",
			Value: strconv.FormatInt(obj.MaskSelect(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasMaskVal() {

		member := Member{
			Name:  "maskval",
			Type:  "int64",
			Value: strconv.FormatInt(obj.MaskVal(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasRandomType() {

		member := Member{
			Name:  "randomtype",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Udf+eRandomType",
			Value: strconv.FormatInt(int64(obj.obj.RandomType.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasInitRandomSeed() {

		member := Member{
			Name:  "initrandomseed",
			Type:  "int64",
			Value: strconv.FormatInt(obj.InitRandomSeed(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasStartVal() {

		member := Member{
			Name:  "startval",
			Type:  "int64",
			Value: strconv.FormatInt(obj.StartVal(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasMinVal() {

		member := Member{
			Name:  "minval",
			Type:  "int64",
			Value: strconv.FormatInt(obj.MinVal(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasMaxVal() {

		member := Member{
			Name:  "maxval",
			Type:  "int64",
			Value: strconv.FormatInt(obj.MaxVal(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *udfRandomSettingType) populateFromXml(xObj *RetVal) error {

	return nil
}

// This is a bit mask that enables, on a bit-by-bit basis, use   of the absolute counter value bits as defined by mMaskval option   Not supported for Kokamo.
// MaskSelect returns a int64
func (obj *udfRandomSettingType) MaskSelect() int64 {

	return *obj.obj.MaskSelect

}

// This is a bit mask that enables, on a bit-by-bit basis, use   of the absolute counter value bits as defined by mMaskval option   Not supported for Kokamo.
// MaskSelect returns a int64
func (obj *udfRandomSettingType) HasMaskSelect() bool {
	return obj.obj.MaskSelect != nil
}

// This is a bit mask that enables, on a bit-by-bit basis, use   of the absolute counter value bits as defined by mMaskval option   Not supported for Kokamo.
// SetMaskSelect sets the int64 value in the UdfRandomSettingType object
func (obj *udfRandomSettingType) SetMaskSelect(value int64) UdfRandomSettingType {

	obj.obj.MaskSelect = &value
	return obj
}

// A bit mask of absolute values for this UDF counter. It is used in   association with the mMaskselect; bits must be set 'on' or the   bits in mMaskselect is ignored.   Not supported for Kokamo.
// MaskVal returns a int64
func (obj *udfRandomSettingType) MaskVal() int64 {

	return *obj.obj.MaskVal

}

// A bit mask of absolute values for this UDF counter. It is used in   association with the mMaskselect; bits must be set 'on' or the   bits in mMaskselect is ignored.   Not supported for Kokamo.
// MaskVal returns a int64
func (obj *udfRandomSettingType) HasMaskVal() bool {
	return obj.obj.MaskVal != nil
}

// A bit mask of absolute values for this UDF counter. It is used in   association with the mMaskselect; bits must be set 'on' or the   bits in mMaskselect is ignored.   Not supported for Kokamo.
// SetMaskVal sets the int64 value in the UdfRandomSettingType object
func (obj *udfRandomSettingType) SetMaskVal(value int64) UdfRandomSettingType {

	obj.obj.MaskVal = &value
	return obj
}

type UdfRandomSettingTypeRandomTypeEnum string

// Enum of RandomType on UdfRandomSettingType
var UdfRandomSettingTypeRandomType = struct {
	KRANDOMNONREPEATABLE          UdfRandomSettingTypeRandomTypeEnum
	KRANDOMREPEATABLEWITHSEED     UdfRandomSettingTypeRandomTypeEnum
	KRANDOMREPEATABLEWITHSTARTVAL UdfRandomSettingTypeRandomTypeEnum
}{
	KRANDOMNONREPEATABLE:          UdfRandomSettingTypeRandomTypeEnum("kRandomNonRepeatable"),
	KRANDOMREPEATABLEWITHSEED:     UdfRandomSettingTypeRandomTypeEnum("kRandomRepeatableWithSeed"),
	KRANDOMREPEATABLEWITHSTARTVAL: UdfRandomSettingTypeRandomTypeEnum("kRandomRepeatableWithStartVal"),
}

func (obj *udfRandomSettingType) RandomType() UdfRandomSettingTypeRandomTypeEnum {
	return UdfRandomSettingTypeRandomTypeEnum(obj.obj.RandomType.Enum().String())
}

// If this option is set to kRandomRepeatableWithSeed, then the sequence of random    values in this UDF will be the same after each traffic start, provided the    initRandomSeed is the same at each traffic start; if the initRandomSeed is not the same,   then a different sequence will be used.  The startVal will be ignored in this case.   If this option is set to kRandomRepeatableWithStartVal, then the first value generated   by the random generator will always be startVal.  The sequence of random    values in this UDF will be the same after each traffic start, provided the    startVal is the same at each traffic start, and the initrandomSeed is also the   same at each traffic start; if the startVal or initRandomSeed are not the same   as the previous value at the start of the next test, then a different sequence    will be used.   If this option is set to kRandomNonRepeatable, then the sequence of random values    in this UDF will almost always be different after each traffic start; the    initRandomSeed and startVal will be ignored in this case.   Not supported for Jasper and Mazuma.
// RandomType returns a string
func (obj *udfRandomSettingType) HasRandomType() bool {
	return obj.obj.RandomType != nil
}

func (obj *udfRandomSettingType) SetRandomType(value UdfRandomSettingTypeRandomTypeEnum) UdfRandomSettingType {
	intValue, ok := otg.UdfRandomSettingType_RandomType_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on UdfRandomSettingTypeRandomTypeEnum", string(value)))
		return obj
	}
	enumValue := otg.UdfRandomSettingType_RandomType_Enum(intValue)
	obj.obj.RandomType = &enumValue

	return obj
}

// Initial random seed.   Must be a non-zero value.   In use only when randomType is set to kRandomRepeatableWithSeed or kRandomRepeatableWithStartVal.   Not supported for Jasper and Mazuma.
// InitRandomSeed returns a int64
func (obj *udfRandomSettingType) InitRandomSeed() int64 {

	return *obj.obj.InitRandomSeed

}

// Initial random seed.   Must be a non-zero value.   In use only when randomType is set to kRandomRepeatableWithSeed or kRandomRepeatableWithStartVal.   Not supported for Jasper and Mazuma.
// InitRandomSeed returns a int64
func (obj *udfRandomSettingType) HasInitRandomSeed() bool {
	return obj.obj.InitRandomSeed != nil
}

// Initial random seed.   Must be a non-zero value.   In use only when randomType is set to kRandomRepeatableWithSeed or kRandomRepeatableWithStartVal.   Not supported for Jasper and Mazuma.
// SetInitRandomSeed sets the int64 value in the UdfRandomSettingType object
func (obj *udfRandomSettingType) SetInitRandomSeed(value int64) UdfRandomSettingType {

	obj.obj.InitRandomSeed = &value
	return obj
}

// First value that will be generated in the random range.   Must be greater than or equal to minVal and less than or equal to maxVal.   In use only when randomType is set to kRandomRepeatableWithStartVal.   Not supported for Jasper and Mazuma.
// StartVal returns a int64
func (obj *udfRandomSettingType) StartVal() int64 {

	return *obj.obj.StartVal

}

// First value that will be generated in the random range.   Must be greater than or equal to minVal and less than or equal to maxVal.   In use only when randomType is set to kRandomRepeatableWithStartVal.   Not supported for Jasper and Mazuma.
// StartVal returns a int64
func (obj *udfRandomSettingType) HasStartVal() bool {
	return obj.obj.StartVal != nil
}

// First value that will be generated in the random range.   Must be greater than or equal to minVal and less than or equal to maxVal.   In use only when randomType is set to kRandomRepeatableWithStartVal.   Not supported for Jasper and Mazuma.
// SetStartVal sets the int64 value in the UdfRandomSettingType object
func (obj *udfRandomSettingType) SetStartVal(value int64) UdfRandomSettingType {

	obj.obj.StartVal = &value
	return obj
}

// Minimum value in the random range for this UDF and this stream.   Not supported for Jasper and Mazuma.
// MinVal returns a int64
func (obj *udfRandomSettingType) MinVal() int64 {

	return *obj.obj.MinVal

}

// Minimum value in the random range for this UDF and this stream.   Not supported for Jasper and Mazuma.
// MinVal returns a int64
func (obj *udfRandomSettingType) HasMinVal() bool {
	return obj.obj.MinVal != nil
}

// Minimum value in the random range for this UDF and this stream.   Not supported for Jasper and Mazuma.
// SetMinVal sets the int64 value in the UdfRandomSettingType object
func (obj *udfRandomSettingType) SetMinVal(value int64) UdfRandomSettingType {

	obj.obj.MinVal = &value
	return obj
}

// Maximum value in the random range for this UDF and this stream.   This value is used as the replacement value if a skip value is encountered.   Not supported for Jasper and Mazuma.
// MaxVal returns a int64
func (obj *udfRandomSettingType) MaxVal() int64 {

	return *obj.obj.MaxVal

}

// Maximum value in the random range for this UDF and this stream.   This value is used as the replacement value if a skip value is encountered.   Not supported for Jasper and Mazuma.
// MaxVal returns a int64
func (obj *udfRandomSettingType) HasMaxVal() bool {
	return obj.obj.MaxVal != nil
}

// Maximum value in the random range for this UDF and this stream.   This value is used as the replacement value if a skip value is encountered.   Not supported for Jasper and Mazuma.
// SetMaxVal sets the int64 value in the UdfRandomSettingType object
func (obj *udfRandomSettingType) SetMaxVal(value int64) UdfRandomSettingType {

	obj.obj.MaxVal = &value
	return obj
}

func (obj *udfRandomSettingType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *udfRandomSettingType) setDefault() {

}

// ***** UdfKillBitSettingType *****
type udfKillBitSettingType struct {
	validation
	obj *otg.UdfKillBitSettingType
}

func NewUdfKillBitSettingType() UdfKillBitSettingType {
	obj := udfKillBitSettingType{obj: &otg.UdfKillBitSettingType{}}
	obj.setDefault()
	return &obj
}

func (obj *udfKillBitSettingType) Msg() *otg.UdfKillBitSettingType {
	return obj.obj
}

func (obj *udfKillBitSettingType) SetMsg(msg *otg.UdfKillBitSettingType) UdfKillBitSettingType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *udfKillBitSettingType) ToProto() (*otg.UdfKillBitSettingType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *udfKillBitSettingType) FromProto(msg *otg.UdfKillBitSettingType) (UdfKillBitSettingType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *udfKillBitSettingType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *udfKillBitSettingType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *udfKillBitSettingType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfKillBitSettingType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *udfKillBitSettingType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfKillBitSettingType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *udfKillBitSettingType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *udfKillBitSettingType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *udfKillBitSettingType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *udfKillBitSettingType) Clone() (UdfKillBitSettingType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewUdfKillBitSettingType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *udfKillBitSettingType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// UdfKillBitSettingType is tBD
type UdfKillBitSettingType interface {
	Validation
	// Msg marshals UdfKillBitSettingType to protobuf object *otg.UdfKillBitSettingType
	// and doesn't set defaults
	Msg() *otg.UdfKillBitSettingType
	// SetMsg unmarshals UdfKillBitSettingType from protobuf object *otg.UdfKillBitSettingType
	// and doesn't set defaults
	SetMsg(*otg.UdfKillBitSettingType) UdfKillBitSettingType
	// ToProto marshals UdfKillBitSettingType to protobuf object *otg.UdfKillBitSettingType
	ToProto() (*otg.UdfKillBitSettingType, error)
	// ToPbText marshals UdfKillBitSettingType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals UdfKillBitSettingType to YAML text
	ToYaml() (string, error)
	// ToJson marshals UdfKillBitSettingType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals UdfKillBitSettingType from protobuf object *otg.UdfKillBitSettingType
	FromProto(msg *otg.UdfKillBitSettingType) (UdfKillBitSettingType, error)
	// FromPbText unmarshals UdfKillBitSettingType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals UdfKillBitSettingType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals UdfKillBitSettingType from JSON text
	FromJson(value string) error
	// Validate validates UdfKillBitSettingType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (UdfKillBitSettingType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Length returns int32, set in UdfKillBitSettingType.
	Length() int32
	// SetLength assigns int32 provided by user to UdfKillBitSettingType
	SetLength(value int32) UdfKillBitSettingType
	// HasLength checks if Length has been set in UdfKillBitSettingType
	HasLength() bool
}

func (obj *udfKillBitSettingType) populateXml(xObj *Argument) error {

	if obj.HasLength() {

		member := Member{
			Name:  "length",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Length()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *udfKillBitSettingType) populateFromXml(xObj *RetVal) error {

	return nil
}

// Number of bits in the kill bit list.
// Length returns a int32
func (obj *udfKillBitSettingType) Length() int32 {

	return *obj.obj.Length

}

// Number of bits in the kill bit list.
// Length returns a int32
func (obj *udfKillBitSettingType) HasLength() bool {
	return obj.obj.Length != nil
}

// Number of bits in the kill bit list.
// SetLength sets the int32 value in the UdfKillBitSettingType object
func (obj *udfKillBitSettingType) SetLength(value int32) UdfKillBitSettingType {

	obj.obj.Length = &value
	return obj
}

func (obj *udfKillBitSettingType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *udfKillBitSettingType) setDefault() {

}

// ***** UdfSkipValueSettingType *****
type udfSkipValueSettingType struct {
	validation
	obj                 *otg.UdfSkipValueSettingType
	skipValueListHolder UdfListInt64
}

func NewUdfSkipValueSettingType() UdfSkipValueSettingType {
	obj := udfSkipValueSettingType{obj: &otg.UdfSkipValueSettingType{}}
	obj.setDefault()
	return &obj
}

func (obj *udfSkipValueSettingType) Msg() *otg.UdfSkipValueSettingType {
	return obj.obj
}

func (obj *udfSkipValueSettingType) SetMsg(msg *otg.UdfSkipValueSettingType) UdfSkipValueSettingType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *udfSkipValueSettingType) ToProto() (*otg.UdfSkipValueSettingType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *udfSkipValueSettingType) FromProto(msg *otg.UdfSkipValueSettingType) (UdfSkipValueSettingType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *udfSkipValueSettingType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *udfSkipValueSettingType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *udfSkipValueSettingType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfSkipValueSettingType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *udfSkipValueSettingType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfSkipValueSettingType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *udfSkipValueSettingType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *udfSkipValueSettingType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *udfSkipValueSettingType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *udfSkipValueSettingType) Clone() (UdfSkipValueSettingType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewUdfSkipValueSettingType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *udfSkipValueSettingType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *udfSkipValueSettingType) setNil() {
	obj.skipValueListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// UdfSkipValueSettingType is tBD
type UdfSkipValueSettingType interface {
	Validation
	// Msg marshals UdfSkipValueSettingType to protobuf object *otg.UdfSkipValueSettingType
	// and doesn't set defaults
	Msg() *otg.UdfSkipValueSettingType
	// SetMsg unmarshals UdfSkipValueSettingType from protobuf object *otg.UdfSkipValueSettingType
	// and doesn't set defaults
	SetMsg(*otg.UdfSkipValueSettingType) UdfSkipValueSettingType
	// ToProto marshals UdfSkipValueSettingType to protobuf object *otg.UdfSkipValueSettingType
	ToProto() (*otg.UdfSkipValueSettingType, error)
	// ToPbText marshals UdfSkipValueSettingType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals UdfSkipValueSettingType to YAML text
	ToYaml() (string, error)
	// ToJson marshals UdfSkipValueSettingType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals UdfSkipValueSettingType from protobuf object *otg.UdfSkipValueSettingType
	FromProto(msg *otg.UdfSkipValueSettingType) (UdfSkipValueSettingType, error)
	// FromPbText unmarshals UdfSkipValueSettingType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals UdfSkipValueSettingType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals UdfSkipValueSettingType from JSON text
	FromJson(value string) error
	// Validate validates UdfSkipValueSettingType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (UdfSkipValueSettingType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Enable returns bool, set in UdfSkipValueSettingType.
	Enable() bool
	// SetEnable assigns bool provided by user to UdfSkipValueSettingType
	SetEnable(value bool) UdfSkipValueSettingType
	// HasEnable checks if Enable has been set in UdfSkipValueSettingType
	HasEnable() bool
	// SkipValueList returns UdfListInt64, set in UdfSkipValueSettingType.
	// UdfListInt64 is tBD
	SkipValueList() UdfListInt64
	// SetSkipValueList assigns UdfListInt64 provided by user to UdfSkipValueSettingType.
	// UdfListInt64 is tBD
	SetSkipValueList(value UdfListInt64) UdfSkipValueSettingType
	// HasSkipValueList checks if SkipValueList has been set in UdfSkipValueSettingType
	HasSkipValueList() bool
	setNil()
}

func (obj *udfSkipValueSettingType) populateXml(xObj *Argument) error {

	if obj.HasEnable() {
		var value string
		if obj.Enable() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enable",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *udfSkipValueSettingType) populateFromXml(xObj *RetVal) error {

	return nil
}

// If this option is set to true, the skipValue parameter will be skipped in the UDF.   Currently, this can only be enabled if the counter mode is random.   This is not supported on Jasper or Mazuma.
// Enable returns a bool
func (obj *udfSkipValueSettingType) Enable() bool {

	return *obj.obj.Enable

}

// If this option is set to true, the skipValue parameter will be skipped in the UDF.   Currently, this can only be enabled if the counter mode is random.   This is not supported on Jasper or Mazuma.
// Enable returns a bool
func (obj *udfSkipValueSettingType) HasEnable() bool {
	return obj.obj.Enable != nil
}

// If this option is set to true, the skipValue parameter will be skipped in the UDF.   Currently, this can only be enabled if the counter mode is random.   This is not supported on Jasper or Mazuma.
// SetEnable sets the bool value in the UdfSkipValueSettingType object
func (obj *udfSkipValueSettingType) SetEnable(value bool) UdfSkipValueSettingType {

	obj.obj.Enable = &value
	return obj
}

// The values to skip in the UDF if enabled.   Currently, only 1 skip value per UDF is supported.   This is not supported on Jasper or Mazuma.
// SkipValueList returns a UdfListInt64
func (obj *udfSkipValueSettingType) SkipValueList() UdfListInt64 {
	if obj.obj.SkipValueList == nil {
		obj.obj.SkipValueList = NewUdfListInt64().Msg()
	}
	if obj.skipValueListHolder == nil {
		obj.skipValueListHolder = &udfListInt64{obj: obj.obj.SkipValueList}
	}
	return obj.skipValueListHolder
}

// The values to skip in the UDF if enabled.   Currently, only 1 skip value per UDF is supported.   This is not supported on Jasper or Mazuma.
// SkipValueList returns a UdfListInt64
func (obj *udfSkipValueSettingType) HasSkipValueList() bool {
	return obj.obj.SkipValueList != nil
}

// The values to skip in the UDF if enabled.   Currently, only 1 skip value per UDF is supported.   This is not supported on Jasper or Mazuma.
// SetSkipValueList sets the UdfListInt64 value in the UdfSkipValueSettingType object
func (obj *udfSkipValueSettingType) SetSkipValueList(value UdfListInt64) UdfSkipValueSettingType {

	obj.skipValueListHolder = nil
	obj.obj.SkipValueList = value.Msg()

	return obj
}

func (obj *udfSkipValueSettingType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.SkipValueList != nil {

		obj.SkipValueList().validateObj(vObj, set_default)
	}

}

func (obj *udfSkipValueSettingType) setDefault() {

}

// ***** UdfSkipSynchronizationSettingType *****
type udfSkipSynchronizationSettingType struct {
	validation
	obj              *otg.UdfSkipSynchronizationSettingType
	syncMasterHolder IdTypeUdfId
}

func NewUdfSkipSynchronizationSettingType() UdfSkipSynchronizationSettingType {
	obj := udfSkipSynchronizationSettingType{obj: &otg.UdfSkipSynchronizationSettingType{}}
	obj.setDefault()
	return &obj
}

func (obj *udfSkipSynchronizationSettingType) Msg() *otg.UdfSkipSynchronizationSettingType {
	return obj.obj
}

func (obj *udfSkipSynchronizationSettingType) SetMsg(msg *otg.UdfSkipSynchronizationSettingType) UdfSkipSynchronizationSettingType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *udfSkipSynchronizationSettingType) ToProto() (*otg.UdfSkipSynchronizationSettingType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *udfSkipSynchronizationSettingType) FromProto(msg *otg.UdfSkipSynchronizationSettingType) (UdfSkipSynchronizationSettingType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *udfSkipSynchronizationSettingType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *udfSkipSynchronizationSettingType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *udfSkipSynchronizationSettingType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfSkipSynchronizationSettingType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *udfSkipSynchronizationSettingType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfSkipSynchronizationSettingType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *udfSkipSynchronizationSettingType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *udfSkipSynchronizationSettingType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *udfSkipSynchronizationSettingType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *udfSkipSynchronizationSettingType) Clone() (UdfSkipSynchronizationSettingType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewUdfSkipSynchronizationSettingType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *udfSkipSynchronizationSettingType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *udfSkipSynchronizationSettingType) setNil() {
	obj.syncMasterHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// UdfSkipSynchronizationSettingType is tBD
type UdfSkipSynchronizationSettingType interface {
	Validation
	// Msg marshals UdfSkipSynchronizationSettingType to protobuf object *otg.UdfSkipSynchronizationSettingType
	// and doesn't set defaults
	Msg() *otg.UdfSkipSynchronizationSettingType
	// SetMsg unmarshals UdfSkipSynchronizationSettingType from protobuf object *otg.UdfSkipSynchronizationSettingType
	// and doesn't set defaults
	SetMsg(*otg.UdfSkipSynchronizationSettingType) UdfSkipSynchronizationSettingType
	// ToProto marshals UdfSkipSynchronizationSettingType to protobuf object *otg.UdfSkipSynchronizationSettingType
	ToProto() (*otg.UdfSkipSynchronizationSettingType, error)
	// ToPbText marshals UdfSkipSynchronizationSettingType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals UdfSkipSynchronizationSettingType to YAML text
	ToYaml() (string, error)
	// ToJson marshals UdfSkipSynchronizationSettingType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals UdfSkipSynchronizationSettingType from protobuf object *otg.UdfSkipSynchronizationSettingType
	FromProto(msg *otg.UdfSkipSynchronizationSettingType) (UdfSkipSynchronizationSettingType, error)
	// FromPbText unmarshals UdfSkipSynchronizationSettingType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals UdfSkipSynchronizationSettingType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals UdfSkipSynchronizationSettingType from JSON text
	FromJson(value string) error
	// Validate validates UdfSkipSynchronizationSettingType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (UdfSkipSynchronizationSettingType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Enable returns bool, set in UdfSkipSynchronizationSettingType.
	Enable() bool
	// SetEnable assigns bool provided by user to UdfSkipSynchronizationSettingType
	SetEnable(value bool) UdfSkipSynchronizationSettingType
	// HasEnable checks if Enable has been set in UdfSkipSynchronizationSettingType
	HasEnable() bool
	// SyncMaster returns IdTypeUdfId, set in UdfSkipSynchronizationSettingType.
	// IdTypeUdfId is tBD
	SyncMaster() IdTypeUdfId
	// SetSyncMaster assigns IdTypeUdfId provided by user to UdfSkipSynchronizationSettingType.
	// IdTypeUdfId is tBD
	SetSyncMaster(value IdTypeUdfId) UdfSkipSynchronizationSettingType
	// HasSyncMaster checks if SyncMaster has been set in UdfSkipSynchronizationSettingType
	HasSyncMaster() bool
	setNil()
}

func (obj *udfSkipSynchronizationSettingType) populateXml(xObj *Argument) error {

	if obj.HasEnable() {
		var value string
		if obj.Enable() {
			value = "1"
		} else {
			value = "0"
		}

		member := Member{
			Name:  "enable",
			Type:  "bool",
			Value: value,
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *udfSkipSynchronizationSettingType) populateFromXml(xObj *RetVal) error {

	return nil
}

// If this option is set to true, this UDF will be synchronized with the UDF set in   syncPrimary, with this UDF acting as the Secondary.  There is no need to enable   synchronization in the primary UDF.   Currently, only odd-numbered UDFs (i.e. UDF 1, 3, 5, 7, 9) can act as secondary, and,   thus, have synchronization enabled.   When synchronized, if the primary UDF skips a value, the secondary UDF will also skip   its current value.   Both the primary and secondary UDF must have the same counter mode and range.   Currently, this can only be enabled if the counter mode is random.   This is not supported on Jasper or Mazuma.
// Enable returns a bool
func (obj *udfSkipSynchronizationSettingType) Enable() bool {

	return *obj.obj.Enable

}

// If this option is set to true, this UDF will be synchronized with the UDF set in   syncPrimary, with this UDF acting as the Secondary.  There is no need to enable   synchronization in the primary UDF.   Currently, only odd-numbered UDFs (i.e. UDF 1, 3, 5, 7, 9) can act as secondary, and,   thus, have synchronization enabled.   When synchronized, if the primary UDF skips a value, the secondary UDF will also skip   its current value.   Both the primary and secondary UDF must have the same counter mode and range.   Currently, this can only be enabled if the counter mode is random.   This is not supported on Jasper or Mazuma.
// Enable returns a bool
func (obj *udfSkipSynchronizationSettingType) HasEnable() bool {
	return obj.obj.Enable != nil
}

// If this option is set to true, this UDF will be synchronized with the UDF set in   syncPrimary, with this UDF acting as the Secondary.  There is no need to enable   synchronization in the primary UDF.   Currently, only odd-numbered UDFs (i.e. UDF 1, 3, 5, 7, 9) can act as secondary, and,   thus, have synchronization enabled.   When synchronized, if the primary UDF skips a value, the secondary UDF will also skip   its current value.   Both the primary and secondary UDF must have the same counter mode and range.   Currently, this can only be enabled if the counter mode is random.   This is not supported on Jasper or Mazuma.
// SetEnable sets the bool value in the UdfSkipSynchronizationSettingType object
func (obj *udfSkipSynchronizationSettingType) SetEnable(value bool) UdfSkipSynchronizationSettingType {

	obj.obj.Enable = &value
	return obj
}

// The primary UDF to which this UDF is synchronized if enable is set to true.   Currently, only even-numbered UDFs (i.e. UDF 0, 2, 4, 6, 8) can act as primary,   and only UDF N+1 can be synchronized with and act as secondary to UDF N.   This means that if this is UDF 1, the primary can only be UDF 0;    if this is UDF 3, the primary can only be UDF 2 etc.   This is not supported on Jasper or Mazuma.
// SyncMaster returns a IdTypeUdfId
func (obj *udfSkipSynchronizationSettingType) SyncMaster() IdTypeUdfId {
	if obj.obj.SyncMaster == nil {
		obj.obj.SyncMaster = NewIdTypeUdfId().Msg()
	}
	if obj.syncMasterHolder == nil {
		obj.syncMasterHolder = &idTypeUdfId{obj: obj.obj.SyncMaster}
	}
	return obj.syncMasterHolder
}

// The primary UDF to which this UDF is synchronized if enable is set to true.   Currently, only even-numbered UDFs (i.e. UDF 0, 2, 4, 6, 8) can act as primary,   and only UDF N+1 can be synchronized with and act as secondary to UDF N.   This means that if this is UDF 1, the primary can only be UDF 0;    if this is UDF 3, the primary can only be UDF 2 etc.   This is not supported on Jasper or Mazuma.
// SyncMaster returns a IdTypeUdfId
func (obj *udfSkipSynchronizationSettingType) HasSyncMaster() bool {
	return obj.obj.SyncMaster != nil
}

// The primary UDF to which this UDF is synchronized if enable is set to true.   Currently, only even-numbered UDFs (i.e. UDF 0, 2, 4, 6, 8) can act as primary,   and only UDF N+1 can be synchronized with and act as secondary to UDF N.   This means that if this is UDF 1, the primary can only be UDF 0;    if this is UDF 3, the primary can only be UDF 2 etc.   This is not supported on Jasper or Mazuma.
// SetSyncMaster sets the IdTypeUdfId value in the UdfSkipSynchronizationSettingType object
func (obj *udfSkipSynchronizationSettingType) SetSyncMaster(value IdTypeUdfId) UdfSkipSynchronizationSettingType {

	obj.syncMasterHolder = nil
	obj.obj.SyncMaster = value.Msg()

	return obj
}

func (obj *udfSkipSynchronizationSettingType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.SyncMaster != nil {

		obj.SyncMaster().validateObj(vObj, set_default)
	}

}

func (obj *udfSkipSynchronizationSettingType) setDefault() {

}

// ***** StreamQuadGaussianControlType *****
type streamQuadGaussianControlType struct {
	validation
	obj                  *otg.StreamQuadGaussianControlType
	firstGaussianHolder  StreamQuadGaussianPacketDataType
	secondGaussianHolder StreamQuadGaussianPacketDataType
	thirdGaussianHolder  StreamQuadGaussianPacketDataType
	fourthGaussianHolder StreamQuadGaussianPacketDataType
}

func NewStreamQuadGaussianControlType() StreamQuadGaussianControlType {
	obj := streamQuadGaussianControlType{obj: &otg.StreamQuadGaussianControlType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamQuadGaussianControlType) Msg() *otg.StreamQuadGaussianControlType {
	return obj.obj
}

func (obj *streamQuadGaussianControlType) SetMsg(msg *otg.StreamQuadGaussianControlType) StreamQuadGaussianControlType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamQuadGaussianControlType) ToProto() (*otg.StreamQuadGaussianControlType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamQuadGaussianControlType) FromProto(msg *otg.StreamQuadGaussianControlType) (StreamQuadGaussianControlType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamQuadGaussianControlType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamQuadGaussianControlType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamQuadGaussianControlType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamQuadGaussianControlType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamQuadGaussianControlType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamQuadGaussianControlType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamQuadGaussianControlType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamQuadGaussianControlType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamQuadGaussianControlType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamQuadGaussianControlType) Clone() (StreamQuadGaussianControlType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamQuadGaussianControlType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamQuadGaussianControlType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamQuadGaussianControlType) setNil() {
	obj.firstGaussianHolder = nil
	obj.secondGaussianHolder = nil
	obj.thirdGaussianHolder = nil
	obj.fourthGaussianHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamQuadGaussianControlType is tBD
type StreamQuadGaussianControlType interface {
	Validation
	// Msg marshals StreamQuadGaussianControlType to protobuf object *otg.StreamQuadGaussianControlType
	// and doesn't set defaults
	Msg() *otg.StreamQuadGaussianControlType
	// SetMsg unmarshals StreamQuadGaussianControlType from protobuf object *otg.StreamQuadGaussianControlType
	// and doesn't set defaults
	SetMsg(*otg.StreamQuadGaussianControlType) StreamQuadGaussianControlType
	// ToProto marshals StreamQuadGaussianControlType to protobuf object *otg.StreamQuadGaussianControlType
	ToProto() (*otg.StreamQuadGaussianControlType, error)
	// ToPbText marshals StreamQuadGaussianControlType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamQuadGaussianControlType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamQuadGaussianControlType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamQuadGaussianControlType from protobuf object *otg.StreamQuadGaussianControlType
	FromProto(msg *otg.StreamQuadGaussianControlType) (StreamQuadGaussianControlType, error)
	// FromPbText unmarshals StreamQuadGaussianControlType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamQuadGaussianControlType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamQuadGaussianControlType from JSON text
	FromJson(value string) error
	// Validate validates StreamQuadGaussianControlType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamQuadGaussianControlType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// FirstGaussian returns StreamQuadGaussianPacketDataType, set in StreamQuadGaussianControlType.
	// StreamQuadGaussianPacketDataType is tBD
	FirstGaussian() StreamQuadGaussianPacketDataType
	// SetFirstGaussian assigns StreamQuadGaussianPacketDataType provided by user to StreamQuadGaussianControlType.
	// StreamQuadGaussianPacketDataType is tBD
	SetFirstGaussian(value StreamQuadGaussianPacketDataType) StreamQuadGaussianControlType
	// HasFirstGaussian checks if FirstGaussian has been set in StreamQuadGaussianControlType
	HasFirstGaussian() bool
	// SecondGaussian returns StreamQuadGaussianPacketDataType, set in StreamQuadGaussianControlType.
	// StreamQuadGaussianPacketDataType is tBD
	SecondGaussian() StreamQuadGaussianPacketDataType
	// SetSecondGaussian assigns StreamQuadGaussianPacketDataType provided by user to StreamQuadGaussianControlType.
	// StreamQuadGaussianPacketDataType is tBD
	SetSecondGaussian(value StreamQuadGaussianPacketDataType) StreamQuadGaussianControlType
	// HasSecondGaussian checks if SecondGaussian has been set in StreamQuadGaussianControlType
	HasSecondGaussian() bool
	// ThirdGaussian returns StreamQuadGaussianPacketDataType, set in StreamQuadGaussianControlType.
	// StreamQuadGaussianPacketDataType is tBD
	ThirdGaussian() StreamQuadGaussianPacketDataType
	// SetThirdGaussian assigns StreamQuadGaussianPacketDataType provided by user to StreamQuadGaussianControlType.
	// StreamQuadGaussianPacketDataType is tBD
	SetThirdGaussian(value StreamQuadGaussianPacketDataType) StreamQuadGaussianControlType
	// HasThirdGaussian checks if ThirdGaussian has been set in StreamQuadGaussianControlType
	HasThirdGaussian() bool
	// FourthGaussian returns StreamQuadGaussianPacketDataType, set in StreamQuadGaussianControlType.
	// StreamQuadGaussianPacketDataType is tBD
	FourthGaussian() StreamQuadGaussianPacketDataType
	// SetFourthGaussian assigns StreamQuadGaussianPacketDataType provided by user to StreamQuadGaussianControlType.
	// StreamQuadGaussianPacketDataType is tBD
	SetFourthGaussian(value StreamQuadGaussianPacketDataType) StreamQuadGaussianControlType
	// HasFourthGaussian checks if FourthGaussian has been set in StreamQuadGaussianControlType
	HasFourthGaussian() bool
	setNil()
}

func (obj *streamQuadGaussianControlType) populateXml(xObj *Argument) error {

	return nil
}

func (obj *streamQuadGaussianControlType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// FirstGaussian returns a StreamQuadGaussianPacketDataType
func (obj *streamQuadGaussianControlType) FirstGaussian() StreamQuadGaussianPacketDataType {
	if obj.obj.FirstGaussian == nil {
		obj.obj.FirstGaussian = NewStreamQuadGaussianPacketDataType().Msg()
	}
	if obj.firstGaussianHolder == nil {
		obj.firstGaussianHolder = &streamQuadGaussianPacketDataType{obj: obj.obj.FirstGaussian}
	}
	return obj.firstGaussianHolder
}

// TBD
// FirstGaussian returns a StreamQuadGaussianPacketDataType
func (obj *streamQuadGaussianControlType) HasFirstGaussian() bool {
	return obj.obj.FirstGaussian != nil
}

// TBD
// SetFirstGaussian sets the StreamQuadGaussianPacketDataType value in the StreamQuadGaussianControlType object
func (obj *streamQuadGaussianControlType) SetFirstGaussian(value StreamQuadGaussianPacketDataType) StreamQuadGaussianControlType {

	obj.firstGaussianHolder = nil
	obj.obj.FirstGaussian = value.Msg()

	return obj
}

// TBD
// SecondGaussian returns a StreamQuadGaussianPacketDataType
func (obj *streamQuadGaussianControlType) SecondGaussian() StreamQuadGaussianPacketDataType {
	if obj.obj.SecondGaussian == nil {
		obj.obj.SecondGaussian = NewStreamQuadGaussianPacketDataType().Msg()
	}
	if obj.secondGaussianHolder == nil {
		obj.secondGaussianHolder = &streamQuadGaussianPacketDataType{obj: obj.obj.SecondGaussian}
	}
	return obj.secondGaussianHolder
}

// TBD
// SecondGaussian returns a StreamQuadGaussianPacketDataType
func (obj *streamQuadGaussianControlType) HasSecondGaussian() bool {
	return obj.obj.SecondGaussian != nil
}

// TBD
// SetSecondGaussian sets the StreamQuadGaussianPacketDataType value in the StreamQuadGaussianControlType object
func (obj *streamQuadGaussianControlType) SetSecondGaussian(value StreamQuadGaussianPacketDataType) StreamQuadGaussianControlType {

	obj.secondGaussianHolder = nil
	obj.obj.SecondGaussian = value.Msg()

	return obj
}

// TBD
// ThirdGaussian returns a StreamQuadGaussianPacketDataType
func (obj *streamQuadGaussianControlType) ThirdGaussian() StreamQuadGaussianPacketDataType {
	if obj.obj.ThirdGaussian == nil {
		obj.obj.ThirdGaussian = NewStreamQuadGaussianPacketDataType().Msg()
	}
	if obj.thirdGaussianHolder == nil {
		obj.thirdGaussianHolder = &streamQuadGaussianPacketDataType{obj: obj.obj.ThirdGaussian}
	}
	return obj.thirdGaussianHolder
}

// TBD
// ThirdGaussian returns a StreamQuadGaussianPacketDataType
func (obj *streamQuadGaussianControlType) HasThirdGaussian() bool {
	return obj.obj.ThirdGaussian != nil
}

// TBD
// SetThirdGaussian sets the StreamQuadGaussianPacketDataType value in the StreamQuadGaussianControlType object
func (obj *streamQuadGaussianControlType) SetThirdGaussian(value StreamQuadGaussianPacketDataType) StreamQuadGaussianControlType {

	obj.thirdGaussianHolder = nil
	obj.obj.ThirdGaussian = value.Msg()

	return obj
}

// TBD
// FourthGaussian returns a StreamQuadGaussianPacketDataType
func (obj *streamQuadGaussianControlType) FourthGaussian() StreamQuadGaussianPacketDataType {
	if obj.obj.FourthGaussian == nil {
		obj.obj.FourthGaussian = NewStreamQuadGaussianPacketDataType().Msg()
	}
	if obj.fourthGaussianHolder == nil {
		obj.fourthGaussianHolder = &streamQuadGaussianPacketDataType{obj: obj.obj.FourthGaussian}
	}
	return obj.fourthGaussianHolder
}

// TBD
// FourthGaussian returns a StreamQuadGaussianPacketDataType
func (obj *streamQuadGaussianControlType) HasFourthGaussian() bool {
	return obj.obj.FourthGaussian != nil
}

// TBD
// SetFourthGaussian sets the StreamQuadGaussianPacketDataType value in the StreamQuadGaussianControlType object
func (obj *streamQuadGaussianControlType) SetFourthGaussian(value StreamQuadGaussianPacketDataType) StreamQuadGaussianControlType {

	obj.fourthGaussianHolder = nil
	obj.obj.FourthGaussian = value.Msg()

	return obj
}

func (obj *streamQuadGaussianControlType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.FirstGaussian != nil {

		obj.FirstGaussian().validateObj(vObj, set_default)
	}

	if obj.obj.SecondGaussian != nil {

		obj.SecondGaussian().validateObj(vObj, set_default)
	}

	if obj.obj.ThirdGaussian != nil {

		obj.ThirdGaussian().validateObj(vObj, set_default)
	}

	if obj.obj.FourthGaussian != nil {

		obj.FourthGaussian().validateObj(vObj, set_default)
	}

}

func (obj *streamQuadGaussianControlType) setDefault() {

}

// ***** StreamWeightedPairDataType *****
type streamWeightedPairDataType struct {
	validation
	obj *otg.StreamWeightedPairDataType
}

func NewStreamWeightedPairDataType() StreamWeightedPairDataType {
	obj := streamWeightedPairDataType{obj: &otg.StreamWeightedPairDataType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamWeightedPairDataType) Msg() *otg.StreamWeightedPairDataType {
	return obj.obj
}

func (obj *streamWeightedPairDataType) SetMsg(msg *otg.StreamWeightedPairDataType) StreamWeightedPairDataType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamWeightedPairDataType) ToProto() (*otg.StreamWeightedPairDataType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamWeightedPairDataType) FromProto(msg *otg.StreamWeightedPairDataType) (StreamWeightedPairDataType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamWeightedPairDataType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamWeightedPairDataType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamWeightedPairDataType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamWeightedPairDataType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamWeightedPairDataType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamWeightedPairDataType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamWeightedPairDataType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamWeightedPairDataType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamWeightedPairDataType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamWeightedPairDataType) Clone() (StreamWeightedPairDataType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamWeightedPairDataType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamWeightedPairDataType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// StreamWeightedPairDataType is tBD
type StreamWeightedPairDataType interface {
	Validation
	// Msg marshals StreamWeightedPairDataType to protobuf object *otg.StreamWeightedPairDataType
	// and doesn't set defaults
	Msg() *otg.StreamWeightedPairDataType
	// SetMsg unmarshals StreamWeightedPairDataType from protobuf object *otg.StreamWeightedPairDataType
	// and doesn't set defaults
	SetMsg(*otg.StreamWeightedPairDataType) StreamWeightedPairDataType
	// ToProto marshals StreamWeightedPairDataType to protobuf object *otg.StreamWeightedPairDataType
	ToProto() (*otg.StreamWeightedPairDataType, error)
	// ToPbText marshals StreamWeightedPairDataType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamWeightedPairDataType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamWeightedPairDataType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamWeightedPairDataType from protobuf object *otg.StreamWeightedPairDataType
	FromProto(msg *otg.StreamWeightedPairDataType) (StreamWeightedPairDataType, error)
	// FromPbText unmarshals StreamWeightedPairDataType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamWeightedPairDataType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamWeightedPairDataType from JSON text
	FromJson(value string) error
	// Validate validates StreamWeightedPairDataType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamWeightedPairDataType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// LengthWeight returns int32, set in StreamWeightedPairDataType.
	LengthWeight() int32
	// SetLengthWeight assigns int32 provided by user to StreamWeightedPairDataType
	SetLengthWeight(value int32) StreamWeightedPairDataType
	// HasLengthWeight checks if LengthWeight has been set in StreamWeightedPairDataType
	HasLengthWeight() bool
	// LengthSizeMin returns int32, set in StreamWeightedPairDataType.
	LengthSizeMin() int32
	// SetLengthSizeMin assigns int32 provided by user to StreamWeightedPairDataType
	SetLengthSizeMin(value int32) StreamWeightedPairDataType
	// HasLengthSizeMin checks if LengthSizeMin has been set in StreamWeightedPairDataType
	HasLengthSizeMin() bool
	// LengthSizeMax returns int32, set in StreamWeightedPairDataType.
	LengthSizeMax() int32
	// SetLengthSizeMax assigns int32 provided by user to StreamWeightedPairDataType
	SetLengthSizeMax(value int32) StreamWeightedPairDataType
	// HasLengthSizeMax checks if LengthSizeMax has been set in StreamWeightedPairDataType
	HasLengthSizeMax() bool
}

func (obj *streamWeightedPairDataType) populateXml(xObj *Argument) error {

	if obj.HasLengthWeight() {

		member := Member{
			Name:  "lengthweight",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.LengthWeight()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasLengthSizeMin() {

		member := Member{
			Name:  "lengthsizemin",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.LengthSizeMin()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasLengthSizeMax() {

		member := Member{
			Name:  "lengthsizemax",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.LengthSizeMax()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamWeightedPairDataType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// LengthWeight returns a int32
func (obj *streamWeightedPairDataType) LengthWeight() int32 {

	return *obj.obj.LengthWeight

}

// TBD
// LengthWeight returns a int32
func (obj *streamWeightedPairDataType) HasLengthWeight() bool {
	return obj.obj.LengthWeight != nil
}

// TBD
// SetLengthWeight sets the int32 value in the StreamWeightedPairDataType object
func (obj *streamWeightedPairDataType) SetLengthWeight(value int32) StreamWeightedPairDataType {

	obj.obj.LengthWeight = &value
	return obj
}

// TBD
// LengthSizeMin returns a int32
func (obj *streamWeightedPairDataType) LengthSizeMin() int32 {

	return *obj.obj.LengthSizeMin

}

// TBD
// LengthSizeMin returns a int32
func (obj *streamWeightedPairDataType) HasLengthSizeMin() bool {
	return obj.obj.LengthSizeMin != nil
}

// TBD
// SetLengthSizeMin sets the int32 value in the StreamWeightedPairDataType object
func (obj *streamWeightedPairDataType) SetLengthSizeMin(value int32) StreamWeightedPairDataType {

	obj.obj.LengthSizeMin = &value
	return obj
}

// TBD
// LengthSizeMax returns a int32
func (obj *streamWeightedPairDataType) LengthSizeMax() int32 {

	return *obj.obj.LengthSizeMax

}

// TBD
// LengthSizeMax returns a int32
func (obj *streamWeightedPairDataType) HasLengthSizeMax() bool {
	return obj.obj.LengthSizeMax != nil
}

// TBD
// SetLengthSizeMax sets the int32 value in the StreamWeightedPairDataType object
func (obj *streamWeightedPairDataType) SetLengthSizeMax(value int32) StreamWeightedPairDataType {

	obj.obj.LengthSizeMax = &value
	return obj
}

func (obj *streamWeightedPairDataType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *streamWeightedPairDataType) setDefault() {

}

// ***** StreamPseudoHeaderFieldList *****
type streamPseudoHeaderFieldList struct {
	validation
	obj                         *otg.StreamPseudoHeaderFieldList
	pseudoHeaderFieldListHolder StreamPseudoHeaderFieldListStreamPseudoHeaderFieldIter
}

func NewStreamPseudoHeaderFieldList() StreamPseudoHeaderFieldList {
	obj := streamPseudoHeaderFieldList{obj: &otg.StreamPseudoHeaderFieldList{}}
	obj.setDefault()
	return &obj
}

func (obj *streamPseudoHeaderFieldList) Msg() *otg.StreamPseudoHeaderFieldList {
	return obj.obj
}

func (obj *streamPseudoHeaderFieldList) SetMsg(msg *otg.StreamPseudoHeaderFieldList) StreamPseudoHeaderFieldList {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamPseudoHeaderFieldList) ToProto() (*otg.StreamPseudoHeaderFieldList, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamPseudoHeaderFieldList) FromProto(msg *otg.StreamPseudoHeaderFieldList) (StreamPseudoHeaderFieldList, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamPseudoHeaderFieldList) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamPseudoHeaderFieldList) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamPseudoHeaderFieldList) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamPseudoHeaderFieldList) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamPseudoHeaderFieldList) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamPseudoHeaderFieldList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamPseudoHeaderFieldList) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamPseudoHeaderFieldList) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamPseudoHeaderFieldList) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamPseudoHeaderFieldList) Clone() (StreamPseudoHeaderFieldList, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamPseudoHeaderFieldList()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamPseudoHeaderFieldList) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamPseudoHeaderFieldList) setNil() {
	obj.pseudoHeaderFieldListHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamPseudoHeaderFieldList is tBD
type StreamPseudoHeaderFieldList interface {
	Validation
	// Msg marshals StreamPseudoHeaderFieldList to protobuf object *otg.StreamPseudoHeaderFieldList
	// and doesn't set defaults
	Msg() *otg.StreamPseudoHeaderFieldList
	// SetMsg unmarshals StreamPseudoHeaderFieldList from protobuf object *otg.StreamPseudoHeaderFieldList
	// and doesn't set defaults
	SetMsg(*otg.StreamPseudoHeaderFieldList) StreamPseudoHeaderFieldList
	// ToProto marshals StreamPseudoHeaderFieldList to protobuf object *otg.StreamPseudoHeaderFieldList
	ToProto() (*otg.StreamPseudoHeaderFieldList, error)
	// ToPbText marshals StreamPseudoHeaderFieldList to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamPseudoHeaderFieldList to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamPseudoHeaderFieldList to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamPseudoHeaderFieldList from protobuf object *otg.StreamPseudoHeaderFieldList
	FromProto(msg *otg.StreamPseudoHeaderFieldList) (StreamPseudoHeaderFieldList, error)
	// FromPbText unmarshals StreamPseudoHeaderFieldList from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamPseudoHeaderFieldList from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamPseudoHeaderFieldList from JSON text
	FromJson(value string) error
	// Validate validates StreamPseudoHeaderFieldList
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamPseudoHeaderFieldList, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// PseudoHeaderFieldList returns StreamPseudoHeaderFieldListStreamPseudoHeaderFieldIterIter, set in StreamPseudoHeaderFieldList
	PseudoHeaderFieldList() StreamPseudoHeaderFieldListStreamPseudoHeaderFieldIter
	setNil()
}

func (obj *streamPseudoHeaderFieldList) populateXml(xObj *Argument) error {

	if len(obj.PseudoHeaderFieldList().Items()) != 0 {
		for _, item := range obj.PseudoHeaderFieldList().Items() {
			it := Item{
				Type: "",
			}

			tmpArg := &Argument{}
			err := item.populateXml(tmpArg)
			if err != nil {
				return err
			}
			it.Member = tmpArg.Member

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *streamPseudoHeaderFieldList) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// PseudoHeaderFieldList returns a []StreamPseudoHeaderField
func (obj *streamPseudoHeaderFieldList) PseudoHeaderFieldList() StreamPseudoHeaderFieldListStreamPseudoHeaderFieldIter {
	if len(obj.obj.PseudoHeaderFieldList) == 0 {
		obj.obj.PseudoHeaderFieldList = []*otg.StreamPseudoHeaderField{}
	}
	if obj.pseudoHeaderFieldListHolder == nil {
		obj.pseudoHeaderFieldListHolder = newStreamPseudoHeaderFieldListStreamPseudoHeaderFieldIter(&obj.obj.PseudoHeaderFieldList).setMsg(obj)
	}
	return obj.pseudoHeaderFieldListHolder
}

type streamPseudoHeaderFieldListStreamPseudoHeaderFieldIter struct {
	obj                          *streamPseudoHeaderFieldList
	streamPseudoHeaderFieldSlice []StreamPseudoHeaderField
	fieldPtr                     *[]*otg.StreamPseudoHeaderField
}

func newStreamPseudoHeaderFieldListStreamPseudoHeaderFieldIter(ptr *[]*otg.StreamPseudoHeaderField) StreamPseudoHeaderFieldListStreamPseudoHeaderFieldIter {
	return &streamPseudoHeaderFieldListStreamPseudoHeaderFieldIter{fieldPtr: ptr}
}

type StreamPseudoHeaderFieldListStreamPseudoHeaderFieldIter interface {
	setMsg(*streamPseudoHeaderFieldList) StreamPseudoHeaderFieldListStreamPseudoHeaderFieldIter
	Items() []StreamPseudoHeaderField
	Add() StreamPseudoHeaderField
	Append(items ...StreamPseudoHeaderField) StreamPseudoHeaderFieldListStreamPseudoHeaderFieldIter
	Set(index int, newObj StreamPseudoHeaderField) StreamPseudoHeaderFieldListStreamPseudoHeaderFieldIter
	Clear() StreamPseudoHeaderFieldListStreamPseudoHeaderFieldIter
	clearHolderSlice() StreamPseudoHeaderFieldListStreamPseudoHeaderFieldIter
	appendHolderSlice(item StreamPseudoHeaderField) StreamPseudoHeaderFieldListStreamPseudoHeaderFieldIter
}

func (obj *streamPseudoHeaderFieldListStreamPseudoHeaderFieldIter) setMsg(msg *streamPseudoHeaderFieldList) StreamPseudoHeaderFieldListStreamPseudoHeaderFieldIter {
	obj.clearHolderSlice()
	for _, val := range *obj.fieldPtr {
		obj.appendHolderSlice(&streamPseudoHeaderField{obj: val})
	}
	obj.obj = msg
	return obj
}

func (obj *streamPseudoHeaderFieldListStreamPseudoHeaderFieldIter) Items() []StreamPseudoHeaderField {
	return obj.streamPseudoHeaderFieldSlice
}

func (obj *streamPseudoHeaderFieldListStreamPseudoHeaderFieldIter) Add() StreamPseudoHeaderField {
	newObj := &otg.StreamPseudoHeaderField{}
	*obj.fieldPtr = append(*obj.fieldPtr, newObj)
	newLibObj := &streamPseudoHeaderField{obj: newObj}
	newLibObj.setDefault()
	obj.streamPseudoHeaderFieldSlice = append(obj.streamPseudoHeaderFieldSlice, newLibObj)
	return newLibObj
}

func (obj *streamPseudoHeaderFieldListStreamPseudoHeaderFieldIter) Append(items ...StreamPseudoHeaderField) StreamPseudoHeaderFieldListStreamPseudoHeaderFieldIter {
	for _, item := range items {
		newObj := item.Msg()
		*obj.fieldPtr = append(*obj.fieldPtr, newObj)
		obj.streamPseudoHeaderFieldSlice = append(obj.streamPseudoHeaderFieldSlice, item)
	}
	return obj
}

func (obj *streamPseudoHeaderFieldListStreamPseudoHeaderFieldIter) Set(index int, newObj StreamPseudoHeaderField) StreamPseudoHeaderFieldListStreamPseudoHeaderFieldIter {
	(*obj.fieldPtr)[index] = newObj.Msg()
	obj.streamPseudoHeaderFieldSlice[index] = newObj
	return obj
}
func (obj *streamPseudoHeaderFieldListStreamPseudoHeaderFieldIter) Clear() StreamPseudoHeaderFieldListStreamPseudoHeaderFieldIter {
	if len(*obj.fieldPtr) > 0 {
		*obj.fieldPtr = []*otg.StreamPseudoHeaderField{}
		obj.streamPseudoHeaderFieldSlice = []StreamPseudoHeaderField{}
	}
	return obj
}
func (obj *streamPseudoHeaderFieldListStreamPseudoHeaderFieldIter) clearHolderSlice() StreamPseudoHeaderFieldListStreamPseudoHeaderFieldIter {
	if len(obj.streamPseudoHeaderFieldSlice) > 0 {
		obj.streamPseudoHeaderFieldSlice = []StreamPseudoHeaderField{}
	}
	return obj
}
func (obj *streamPseudoHeaderFieldListStreamPseudoHeaderFieldIter) appendHolderSlice(item StreamPseudoHeaderField) StreamPseudoHeaderFieldListStreamPseudoHeaderFieldIter {
	obj.streamPseudoHeaderFieldSlice = append(obj.streamPseudoHeaderFieldSlice, item)
	return obj
}

func (obj *streamPseudoHeaderFieldList) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if len(obj.obj.PseudoHeaderFieldList) != 0 {

		if set_default {
			obj.PseudoHeaderFieldList().clearHolderSlice()
			for _, item := range obj.obj.PseudoHeaderFieldList {
				obj.PseudoHeaderFieldList().appendHolderSlice(&streamPseudoHeaderField{obj: item})
			}
		}
		for _, item := range obj.PseudoHeaderFieldList().Items() {
			item.validateObj(vObj, set_default)
		}

	}

}

func (obj *streamPseudoHeaderFieldList) setDefault() {

}

// ***** UdfListInt64 *****
type udfListInt64 struct {
	validation
	obj *otg.UdfListInt64
}

func NewUdfListInt64() UdfListInt64 {
	obj := udfListInt64{obj: &otg.UdfListInt64{}}
	obj.setDefault()
	return &obj
}

func (obj *udfListInt64) Msg() *otg.UdfListInt64 {
	return obj.obj
}

func (obj *udfListInt64) SetMsg(msg *otg.UdfListInt64) UdfListInt64 {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *udfListInt64) ToProto() (*otg.UdfListInt64, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *udfListInt64) FromProto(msg *otg.UdfListInt64) (UdfListInt64, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *udfListInt64) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *udfListInt64) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *udfListInt64) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfListInt64) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *udfListInt64) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *udfListInt64) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *udfListInt64) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *udfListInt64) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *udfListInt64) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *udfListInt64) Clone() (UdfListInt64, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewUdfListInt64()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *udfListInt64) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// UdfListInt64 is tBD
type UdfListInt64 interface {
	Validation
	// Msg marshals UdfListInt64 to protobuf object *otg.UdfListInt64
	// and doesn't set defaults
	Msg() *otg.UdfListInt64
	// SetMsg unmarshals UdfListInt64 from protobuf object *otg.UdfListInt64
	// and doesn't set defaults
	SetMsg(*otg.UdfListInt64) UdfListInt64
	// ToProto marshals UdfListInt64 to protobuf object *otg.UdfListInt64
	ToProto() (*otg.UdfListInt64, error)
	// ToPbText marshals UdfListInt64 to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals UdfListInt64 to YAML text
	ToYaml() (string, error)
	// ToJson marshals UdfListInt64 to JSON text
	ToJson() (string, error)
	// FromProto unmarshals UdfListInt64 from protobuf object *otg.UdfListInt64
	FromProto(msg *otg.UdfListInt64) (UdfListInt64, error)
	// FromPbText unmarshals UdfListInt64 from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals UdfListInt64 from YAML text
	FromYaml(value string) error
	// FromJson unmarshals UdfListInt64 from JSON text
	FromJson(value string) error
	// Validate validates UdfListInt64
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (UdfListInt64, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// ListInt64 returns []int64, set in UdfListInt64.
	ListInt64() []int64
	// SetListInt64 assigns []int64 provided by user to UdfListInt64
	SetListInt64(value []int64) UdfListInt64
}

func (obj *udfListInt64) populateXml(xObj *Argument) error {

	if len(obj.ListInt64()) != 0 {
		for _, item := range obj.ListInt64() {
			it := Item{
				Type:  "None",
				Value: strconv.FormatInt(item, 10),
			}

			xObj.Item = append(xObj.Item, it)
		}
	}

	return nil
}

func (obj *udfListInt64) populateFromXml(xObj *RetVal) error {

	return nil
}

// description is TBD
// ListInt64 returns a []int64
func (obj *udfListInt64) ListInt64() []int64 {
	if obj.obj.ListInt64 == nil {
		obj.obj.ListInt64 = make([]int64, 0)
	}
	return obj.obj.ListInt64
}

// description is TBD
// SetListInt64 sets the []int64 value in the UdfListInt64 object
func (obj *udfListInt64) SetListInt64(value []int64) UdfListInt64 {

	if obj.obj.ListInt64 == nil {
		obj.obj.ListInt64 = make([]int64, 0)
	}
	obj.obj.ListInt64 = value

	return obj
}

func (obj *udfListInt64) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *udfListInt64) setDefault() {

}

// ***** StreamQuadGaussianPacketDataType *****
type streamQuadGaussianPacketDataType struct {
	validation
	obj                *otg.StreamQuadGaussianPacketDataType
	lengthWeightHolder StreamQuadGaussianFractionalDataType
	lengthWidthHolder  StreamQuadGaussianFractionalDataType
	lengthCenterHolder StreamQuadGaussianFractionalDataType
}

func NewStreamQuadGaussianPacketDataType() StreamQuadGaussianPacketDataType {
	obj := streamQuadGaussianPacketDataType{obj: &otg.StreamQuadGaussianPacketDataType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamQuadGaussianPacketDataType) Msg() *otg.StreamQuadGaussianPacketDataType {
	return obj.obj
}

func (obj *streamQuadGaussianPacketDataType) SetMsg(msg *otg.StreamQuadGaussianPacketDataType) StreamQuadGaussianPacketDataType {
	obj.setNil()
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamQuadGaussianPacketDataType) ToProto() (*otg.StreamQuadGaussianPacketDataType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamQuadGaussianPacketDataType) FromProto(msg *otg.StreamQuadGaussianPacketDataType) (StreamQuadGaussianPacketDataType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamQuadGaussianPacketDataType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamQuadGaussianPacketDataType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamQuadGaussianPacketDataType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamQuadGaussianPacketDataType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamQuadGaussianPacketDataType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamQuadGaussianPacketDataType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}
	obj.setNil()
	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamQuadGaussianPacketDataType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamQuadGaussianPacketDataType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamQuadGaussianPacketDataType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamQuadGaussianPacketDataType) Clone() (StreamQuadGaussianPacketDataType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamQuadGaussianPacketDataType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamQuadGaussianPacketDataType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

func (obj *streamQuadGaussianPacketDataType) setNil() {
	obj.lengthWeightHolder = nil
	obj.lengthWidthHolder = nil
	obj.lengthCenterHolder = nil
	obj.validationErrors = nil
	obj.warnings = nil
	obj.constraints = make(map[string]map[string]Constraints)
}

// StreamQuadGaussianPacketDataType is tBD
type StreamQuadGaussianPacketDataType interface {
	Validation
	// Msg marshals StreamQuadGaussianPacketDataType to protobuf object *otg.StreamQuadGaussianPacketDataType
	// and doesn't set defaults
	Msg() *otg.StreamQuadGaussianPacketDataType
	// SetMsg unmarshals StreamQuadGaussianPacketDataType from protobuf object *otg.StreamQuadGaussianPacketDataType
	// and doesn't set defaults
	SetMsg(*otg.StreamQuadGaussianPacketDataType) StreamQuadGaussianPacketDataType
	// ToProto marshals StreamQuadGaussianPacketDataType to protobuf object *otg.StreamQuadGaussianPacketDataType
	ToProto() (*otg.StreamQuadGaussianPacketDataType, error)
	// ToPbText marshals StreamQuadGaussianPacketDataType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamQuadGaussianPacketDataType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamQuadGaussianPacketDataType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamQuadGaussianPacketDataType from protobuf object *otg.StreamQuadGaussianPacketDataType
	FromProto(msg *otg.StreamQuadGaussianPacketDataType) (StreamQuadGaussianPacketDataType, error)
	// FromPbText unmarshals StreamQuadGaussianPacketDataType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamQuadGaussianPacketDataType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamQuadGaussianPacketDataType from JSON text
	FromJson(value string) error
	// Validate validates StreamQuadGaussianPacketDataType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamQuadGaussianPacketDataType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// LengthWeight returns StreamQuadGaussianFractionalDataType, set in StreamQuadGaussianPacketDataType.
	// StreamQuadGaussianFractionalDataType is tBD
	LengthWeight() StreamQuadGaussianFractionalDataType
	// SetLengthWeight assigns StreamQuadGaussianFractionalDataType provided by user to StreamQuadGaussianPacketDataType.
	// StreamQuadGaussianFractionalDataType is tBD
	SetLengthWeight(value StreamQuadGaussianFractionalDataType) StreamQuadGaussianPacketDataType
	// HasLengthWeight checks if LengthWeight has been set in StreamQuadGaussianPacketDataType
	HasLengthWeight() bool
	// LengthWidth returns StreamQuadGaussianFractionalDataType, set in StreamQuadGaussianPacketDataType.
	// StreamQuadGaussianFractionalDataType is tBD
	LengthWidth() StreamQuadGaussianFractionalDataType
	// SetLengthWidth assigns StreamQuadGaussianFractionalDataType provided by user to StreamQuadGaussianPacketDataType.
	// StreamQuadGaussianFractionalDataType is tBD
	SetLengthWidth(value StreamQuadGaussianFractionalDataType) StreamQuadGaussianPacketDataType
	// HasLengthWidth checks if LengthWidth has been set in StreamQuadGaussianPacketDataType
	HasLengthWidth() bool
	// LengthCenter returns StreamQuadGaussianFractionalDataType, set in StreamQuadGaussianPacketDataType.
	// StreamQuadGaussianFractionalDataType is tBD
	LengthCenter() StreamQuadGaussianFractionalDataType
	// SetLengthCenter assigns StreamQuadGaussianFractionalDataType provided by user to StreamQuadGaussianPacketDataType.
	// StreamQuadGaussianFractionalDataType is tBD
	SetLengthCenter(value StreamQuadGaussianFractionalDataType) StreamQuadGaussianPacketDataType
	// HasLengthCenter checks if LengthCenter has been set in StreamQuadGaussianPacketDataType
	HasLengthCenter() bool
	setNil()
}

func (obj *streamQuadGaussianPacketDataType) populateXml(xObj *Argument) error {

	return nil
}

func (obj *streamQuadGaussianPacketDataType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// LengthWeight returns a StreamQuadGaussianFractionalDataType
func (obj *streamQuadGaussianPacketDataType) LengthWeight() StreamQuadGaussianFractionalDataType {
	if obj.obj.LengthWeight == nil {
		obj.obj.LengthWeight = NewStreamQuadGaussianFractionalDataType().Msg()
	}
	if obj.lengthWeightHolder == nil {
		obj.lengthWeightHolder = &streamQuadGaussianFractionalDataType{obj: obj.obj.LengthWeight}
	}
	return obj.lengthWeightHolder
}

// TBD
// LengthWeight returns a StreamQuadGaussianFractionalDataType
func (obj *streamQuadGaussianPacketDataType) HasLengthWeight() bool {
	return obj.obj.LengthWeight != nil
}

// TBD
// SetLengthWeight sets the StreamQuadGaussianFractionalDataType value in the StreamQuadGaussianPacketDataType object
func (obj *streamQuadGaussianPacketDataType) SetLengthWeight(value StreamQuadGaussianFractionalDataType) StreamQuadGaussianPacketDataType {

	obj.lengthWeightHolder = nil
	obj.obj.LengthWeight = value.Msg()

	return obj
}

// TBD
// LengthWidth returns a StreamQuadGaussianFractionalDataType
func (obj *streamQuadGaussianPacketDataType) LengthWidth() StreamQuadGaussianFractionalDataType {
	if obj.obj.LengthWidth == nil {
		obj.obj.LengthWidth = NewStreamQuadGaussianFractionalDataType().Msg()
	}
	if obj.lengthWidthHolder == nil {
		obj.lengthWidthHolder = &streamQuadGaussianFractionalDataType{obj: obj.obj.LengthWidth}
	}
	return obj.lengthWidthHolder
}

// TBD
// LengthWidth returns a StreamQuadGaussianFractionalDataType
func (obj *streamQuadGaussianPacketDataType) HasLengthWidth() bool {
	return obj.obj.LengthWidth != nil
}

// TBD
// SetLengthWidth sets the StreamQuadGaussianFractionalDataType value in the StreamQuadGaussianPacketDataType object
func (obj *streamQuadGaussianPacketDataType) SetLengthWidth(value StreamQuadGaussianFractionalDataType) StreamQuadGaussianPacketDataType {

	obj.lengthWidthHolder = nil
	obj.obj.LengthWidth = value.Msg()

	return obj
}

// TBD
// LengthCenter returns a StreamQuadGaussianFractionalDataType
func (obj *streamQuadGaussianPacketDataType) LengthCenter() StreamQuadGaussianFractionalDataType {
	if obj.obj.LengthCenter == nil {
		obj.obj.LengthCenter = NewStreamQuadGaussianFractionalDataType().Msg()
	}
	if obj.lengthCenterHolder == nil {
		obj.lengthCenterHolder = &streamQuadGaussianFractionalDataType{obj: obj.obj.LengthCenter}
	}
	return obj.lengthCenterHolder
}

// TBD
// LengthCenter returns a StreamQuadGaussianFractionalDataType
func (obj *streamQuadGaussianPacketDataType) HasLengthCenter() bool {
	return obj.obj.LengthCenter != nil
}

// TBD
// SetLengthCenter sets the StreamQuadGaussianFractionalDataType value in the StreamQuadGaussianPacketDataType object
func (obj *streamQuadGaussianPacketDataType) SetLengthCenter(value StreamQuadGaussianFractionalDataType) StreamQuadGaussianPacketDataType {

	obj.lengthCenterHolder = nil
	obj.obj.LengthCenter = value.Msg()

	return obj
}

func (obj *streamQuadGaussianPacketDataType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.LengthWeight != nil {

		obj.LengthWeight().validateObj(vObj, set_default)
	}

	if obj.obj.LengthWidth != nil {

		obj.LengthWidth().validateObj(vObj, set_default)
	}

	if obj.obj.LengthCenter != nil {

		obj.LengthCenter().validateObj(vObj, set_default)
	}

}

func (obj *streamQuadGaussianPacketDataType) setDefault() {

}

// ***** StreamPseudoHeaderField *****
type streamPseudoHeaderField struct {
	validation
	obj *otg.StreamPseudoHeaderField
}

func NewStreamPseudoHeaderField() StreamPseudoHeaderField {
	obj := streamPseudoHeaderField{obj: &otg.StreamPseudoHeaderField{}}
	obj.setDefault()
	return &obj
}

func (obj *streamPseudoHeaderField) Msg() *otg.StreamPseudoHeaderField {
	return obj.obj
}

func (obj *streamPseudoHeaderField) SetMsg(msg *otg.StreamPseudoHeaderField) StreamPseudoHeaderField {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamPseudoHeaderField) ToProto() (*otg.StreamPseudoHeaderField, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamPseudoHeaderField) FromProto(msg *otg.StreamPseudoHeaderField) (StreamPseudoHeaderField, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamPseudoHeaderField) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamPseudoHeaderField) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamPseudoHeaderField) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamPseudoHeaderField) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamPseudoHeaderField) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamPseudoHeaderField) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamPseudoHeaderField) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamPseudoHeaderField) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamPseudoHeaderField) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamPseudoHeaderField) Clone() (StreamPseudoHeaderField, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamPseudoHeaderField()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamPseudoHeaderField) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// StreamPseudoHeaderField is tBD
type StreamPseudoHeaderField interface {
	Validation
	// Msg marshals StreamPseudoHeaderField to protobuf object *otg.StreamPseudoHeaderField
	// and doesn't set defaults
	Msg() *otg.StreamPseudoHeaderField
	// SetMsg unmarshals StreamPseudoHeaderField from protobuf object *otg.StreamPseudoHeaderField
	// and doesn't set defaults
	SetMsg(*otg.StreamPseudoHeaderField) StreamPseudoHeaderField
	// ToProto marshals StreamPseudoHeaderField to protobuf object *otg.StreamPseudoHeaderField
	ToProto() (*otg.StreamPseudoHeaderField, error)
	// ToPbText marshals StreamPseudoHeaderField to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamPseudoHeaderField to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamPseudoHeaderField to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamPseudoHeaderField from protobuf object *otg.StreamPseudoHeaderField
	FromProto(msg *otg.StreamPseudoHeaderField) (StreamPseudoHeaderField, error)
	// FromPbText unmarshals StreamPseudoHeaderField from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamPseudoHeaderField from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamPseudoHeaderField from JSON text
	FromJson(value string) error
	// Validate validates StreamPseudoHeaderField
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamPseudoHeaderField, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// Mode returns StreamPseudoHeaderFieldModeEnum, set in StreamPseudoHeaderField
	Mode() StreamPseudoHeaderFieldModeEnum
	// SetMode assigns StreamPseudoHeaderFieldModeEnum provided by user to StreamPseudoHeaderField
	SetMode(value StreamPseudoHeaderFieldModeEnum) StreamPseudoHeaderField
	// HasMode checks if Mode has been set in StreamPseudoHeaderField
	HasMode() bool
	// Offset returns int32, set in StreamPseudoHeaderField.
	Offset() int32
	// SetOffset assigns int32 provided by user to StreamPseudoHeaderField
	SetOffset(value int32) StreamPseudoHeaderField
	// HasOffset checks if Offset has been set in StreamPseudoHeaderField
	HasOffset() bool
	// Length returns int32, set in StreamPseudoHeaderField.
	Length() int32
	// SetLength assigns int32 provided by user to StreamPseudoHeaderField
	SetLength(value int32) StreamPseudoHeaderField
	// HasLength checks if Length has been set in StreamPseudoHeaderField
	HasLength() bool
	// PseudoValue returns string, set in StreamPseudoHeaderField.
	PseudoValue() string
	// SetPseudoValue assigns string provided by user to StreamPseudoHeaderField
	SetPseudoValue(value string) StreamPseudoHeaderField
	// HasPseudoValue checks if PseudoValue has been set in StreamPseudoHeaderField
	HasPseudoValue() bool
}

func (obj *streamPseudoHeaderField) populateXml(xObj *Argument) error {

	if obj.HasMode() {

		member := Member{
			Name:  "mode",
			Type:  "Ixia.IxOS.RPC.PCPU.RPF.Stream+ePseudoHeaderFieldType",
			Value: strconv.FormatInt(int64(obj.obj.Mode.Number()-1), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasOffset() {

		member := Member{
			Name:  "offset",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Offset()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasLength() {

		member := Member{
			Name:  "length",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.Length()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasPseudoValue() {

		member := Member{
			Name:  "pseudovalue",
			Type:  "octets",
			Value: obj.PseudoValue(),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamPseudoHeaderField) populateFromXml(xObj *RetVal) error {

	return nil
}

type StreamPseudoHeaderFieldModeEnum string

// Enum of Mode on StreamPseudoHeaderField
var StreamPseudoHeaderFieldMode = struct {
	KFIXED                StreamPseudoHeaderFieldModeEnum
	KLENGTHINSERTION      StreamPseudoHeaderFieldModeEnum
	KPARTOFBACKGROUNDDATA StreamPseudoHeaderFieldModeEnum
}{
	KFIXED:                StreamPseudoHeaderFieldModeEnum("kFixed"),
	KLENGTHINSERTION:      StreamPseudoHeaderFieldModeEnum("kLengthInsertion"),
	KPARTOFBACKGROUNDDATA: StreamPseudoHeaderFieldModeEnum("kPartOfBackgroundData"),
}

func (obj *streamPseudoHeaderField) Mode() StreamPseudoHeaderFieldModeEnum {
	return StreamPseudoHeaderFieldModeEnum(obj.obj.Mode.Enum().String())
}

// -    kFixed is ProtocolNumber in Pseudoheader, pseudoValue will carry the value, Ex ProtocolNumber in Pseudoheader   -    kLengthInsertion is length field in TCP/UDP Pseudo header, Ex length field in TCP/UDP Pseudo header   -    kPartOfBackgroundData Anything else which is part of the packet, Anything else which is part of the packet
// Mode returns a string
func (obj *streamPseudoHeaderField) HasMode() bool {
	return obj.obj.Mode != nil
}

func (obj *streamPseudoHeaderField) SetMode(value StreamPseudoHeaderFieldModeEnum) StreamPseudoHeaderField {
	intValue, ok := otg.StreamPseudoHeaderField_Mode_Enum_value[string(value)]
	if !ok {
		obj.validationErrors = append(obj.validationErrors, fmt.Sprintf(
			"%s is not a valid choice on StreamPseudoHeaderFieldModeEnum", string(value)))
		return obj
	}
	enumValue := otg.StreamPseudoHeaderField_Mode_Enum(intValue)
	obj.obj.Mode = &enumValue

	return obj
}

// offset into the background data where the value of the  pseudo header field is located, valid only if mode is kPartOfBackgroundData
// Offset returns a int32
func (obj *streamPseudoHeaderField) Offset() int32 {

	return *obj.obj.Offset

}

// offset into the background data where the value of the  pseudo header field is located, valid only if mode is kPartOfBackgroundData
// Offset returns a int32
func (obj *streamPseudoHeaderField) HasOffset() bool {
	return obj.obj.Offset != nil
}

// offset into the background data where the value of the  pseudo header field is located, valid only if mode is kPartOfBackgroundData
// SetOffset sets the int32 value in the StreamPseudoHeaderField object
func (obj *streamPseudoHeaderField) SetOffset(value int32) StreamPseudoHeaderField {

	obj.obj.Offset = &value
	return obj
}

// The field length in bytes. This should be used when reading from background data.   Valid only if mode is kPartOfBackgroundData or kLengthInsertion
// Length returns a int32
func (obj *streamPseudoHeaderField) Length() int32 {

	return *obj.obj.Length

}

// The field length in bytes. This should be used when reading from background data.   Valid only if mode is kPartOfBackgroundData or kLengthInsertion
// Length returns a int32
func (obj *streamPseudoHeaderField) HasLength() bool {
	return obj.obj.Length != nil
}

// The field length in bytes. This should be used when reading from background data.   Valid only if mode is kPartOfBackgroundData or kLengthInsertion
// SetLength sets the int32 value in the StreamPseudoHeaderField object
func (obj *streamPseudoHeaderField) SetLength(value int32) StreamPseudoHeaderField {

	obj.obj.Length = &value
	return obj
}

// Holds the the pseudo field value as a byte array. Should be used only when the mode is kFixed or kLengthInsertion
// PseudoValue returns a string
func (obj *streamPseudoHeaderField) PseudoValue() string {

	return *obj.obj.PseudoValue

}

// Holds the the pseudo field value as a byte array. Should be used only when the mode is kFixed or kLengthInsertion
// PseudoValue returns a string
func (obj *streamPseudoHeaderField) HasPseudoValue() bool {
	return obj.obj.PseudoValue != nil
}

// Holds the the pseudo field value as a byte array. Should be used only when the mode is kFixed or kLengthInsertion
// SetPseudoValue sets the string value in the StreamPseudoHeaderField object
func (obj *streamPseudoHeaderField) SetPseudoValue(value string) StreamPseudoHeaderField {

	obj.obj.PseudoValue = &value
	return obj
}

func (obj *streamPseudoHeaderField) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *streamPseudoHeaderField) setDefault() {

}

// ***** StreamQuadGaussianFractionalDataType *****
type streamQuadGaussianFractionalDataType struct {
	validation
	obj *otg.StreamQuadGaussianFractionalDataType
}

func NewStreamQuadGaussianFractionalDataType() StreamQuadGaussianFractionalDataType {
	obj := streamQuadGaussianFractionalDataType{obj: &otg.StreamQuadGaussianFractionalDataType{}}
	obj.setDefault()
	return &obj
}

func (obj *streamQuadGaussianFractionalDataType) Msg() *otg.StreamQuadGaussianFractionalDataType {
	return obj.obj
}

func (obj *streamQuadGaussianFractionalDataType) SetMsg(msg *otg.StreamQuadGaussianFractionalDataType) StreamQuadGaussianFractionalDataType {

	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *streamQuadGaussianFractionalDataType) ToProto() (*otg.StreamQuadGaussianFractionalDataType, error) {
	err := obj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return obj.Msg(), nil
}

func (obj *streamQuadGaussianFractionalDataType) FromProto(msg *otg.StreamQuadGaussianFractionalDataType) (StreamQuadGaussianFractionalDataType, error) {
	newObj := obj.SetMsg(msg)
	err := newObj.validateToAndFrom()
	if err != nil {
		return nil, err
	}
	return newObj, nil
}

func (obj *streamQuadGaussianFractionalDataType) ToPbText() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	protoMarshal, err := proto.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(protoMarshal), nil
}

func (obj *streamQuadGaussianFractionalDataType) FromPbText(value string) error {
	retObj := proto.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *streamQuadGaussianFractionalDataType) ToYaml() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamQuadGaussianFractionalDataType) FromYaml(value string) error {
	if value == "" {
		value = "{}"
	}
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	uError := opts.Unmarshal([]byte(data), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return vErr
	}
	return nil
}

func (obj *streamQuadGaussianFractionalDataType) ToJson() (string, error) {
	vErr := obj.validateToAndFrom()
	if vErr != nil {
		return "", vErr
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (obj *streamQuadGaussianFractionalDataType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	if value == "" {
		value = "{}"
	}
	uError := opts.Unmarshal([]byte(value), obj.Msg())
	if uError != nil {
		return fmt.Errorf("unmarshal error %s", strings.Replace(
			uError.Error(), "\u00a0", " ", -1)[7:])
	}

	err := obj.validateToAndFrom()
	if err != nil {
		return err
	}
	return nil
}

func (obj *streamQuadGaussianFractionalDataType) validateToAndFrom() error {
	// emptyVars()
	obj.validateObj(&obj.validation, true)
	return obj.validationResult()
}

func (obj *streamQuadGaussianFractionalDataType) Validate() error {
	// emptyVars()
	obj.validateObj(&obj.validation, false)
	return obj.validationResult()
}

func (obj *streamQuadGaussianFractionalDataType) String() string {
	str, err := obj.ToYaml()
	if err != nil {
		return err.Error()
	}
	return str
}

func (obj *streamQuadGaussianFractionalDataType) Clone() (StreamQuadGaussianFractionalDataType, error) {
	vErr := obj.Validate()
	if vErr != nil {
		return nil, vErr
	}
	newObj := NewStreamQuadGaussianFractionalDataType()
	data, err := proto.Marshal(obj.Msg())
	if err != nil {
		return nil, err
	}
	pbErr := proto.Unmarshal(data, newObj.Msg())
	if pbErr != nil {
		return nil, pbErr
	}
	return newObj, nil
}

func (obj *streamQuadGaussianFractionalDataType) ToRpfXml() (*Argument, error) {
	ret := &Argument{}
	err := obj.populateXml(ret)
	return ret, err
}

// StreamQuadGaussianFractionalDataType is tBD
type StreamQuadGaussianFractionalDataType interface {
	Validation
	// Msg marshals StreamQuadGaussianFractionalDataType to protobuf object *otg.StreamQuadGaussianFractionalDataType
	// and doesn't set defaults
	Msg() *otg.StreamQuadGaussianFractionalDataType
	// SetMsg unmarshals StreamQuadGaussianFractionalDataType from protobuf object *otg.StreamQuadGaussianFractionalDataType
	// and doesn't set defaults
	SetMsg(*otg.StreamQuadGaussianFractionalDataType) StreamQuadGaussianFractionalDataType
	// ToProto marshals StreamQuadGaussianFractionalDataType to protobuf object *otg.StreamQuadGaussianFractionalDataType
	ToProto() (*otg.StreamQuadGaussianFractionalDataType, error)
	// ToPbText marshals StreamQuadGaussianFractionalDataType to protobuf text
	ToPbText() (string, error)
	// ToYaml marshals StreamQuadGaussianFractionalDataType to YAML text
	ToYaml() (string, error)
	// ToJson marshals StreamQuadGaussianFractionalDataType to JSON text
	ToJson() (string, error)
	// FromProto unmarshals StreamQuadGaussianFractionalDataType from protobuf object *otg.StreamQuadGaussianFractionalDataType
	FromProto(msg *otg.StreamQuadGaussianFractionalDataType) (StreamQuadGaussianFractionalDataType, error)
	// FromPbText unmarshals StreamQuadGaussianFractionalDataType from protobuf text
	FromPbText(value string) error
	// FromYaml unmarshals StreamQuadGaussianFractionalDataType from YAML text
	FromYaml(value string) error
	// FromJson unmarshals StreamQuadGaussianFractionalDataType from JSON text
	FromJson(value string) error
	// Validate validates StreamQuadGaussianFractionalDataType
	Validate() error
	// A stringer function
	String() string
	// Clones the object
	Clone() (StreamQuadGaussianFractionalDataType, error)
	validateToAndFrom() error
	validateObj(vObj *validation, set_default bool)
	setDefault()
	ToRpfXml() (*Argument, error)
	populateXml(*Argument) error
	populateFromXml(*RetVal) error
	// MInteger returns int64, set in StreamQuadGaussianFractionalDataType.
	MInteger() int64
	// SetMInteger assigns int64 provided by user to StreamQuadGaussianFractionalDataType
	SetMInteger(value int64) StreamQuadGaussianFractionalDataType
	// HasMInteger checks if MInteger has been set in StreamQuadGaussianFractionalDataType
	HasMInteger() bool
	// MFractional returns int32, set in StreamQuadGaussianFractionalDataType.
	MFractional() int32
	// SetMFractional assigns int32 provided by user to StreamQuadGaussianFractionalDataType
	SetMFractional(value int32) StreamQuadGaussianFractionalDataType
	// HasMFractional checks if MFractional has been set in StreamQuadGaussianFractionalDataType
	HasMFractional() bool
}

func (obj *streamQuadGaussianFractionalDataType) populateXml(xObj *Argument) error {

	if obj.HasMInteger() {

		member := Member{
			Name:  "minteger",
			Type:  "int64",
			Value: strconv.FormatInt(obj.MInteger(), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	if obj.HasMFractional() {

		member := Member{
			Name:  "mfractional",
			Type:  "int32",
			Value: strconv.FormatInt(int64(obj.MFractional()), 10),
		}
		xObj.Member = append(xObj.Member, member)
	}

	return nil
}

func (obj *streamQuadGaussianFractionalDataType) populateFromXml(xObj *RetVal) error {

	return nil
}

// TBD
// MInteger returns a int64
func (obj *streamQuadGaussianFractionalDataType) MInteger() int64 {

	return *obj.obj.MInteger

}

// TBD
// MInteger returns a int64
func (obj *streamQuadGaussianFractionalDataType) HasMInteger() bool {
	return obj.obj.MInteger != nil
}

// TBD
// SetMInteger sets the int64 value in the StreamQuadGaussianFractionalDataType object
func (obj *streamQuadGaussianFractionalDataType) SetMInteger(value int64) StreamQuadGaussianFractionalDataType {

	obj.obj.MInteger = &value
	return obj
}

// TBD
// MFractional returns a int32
func (obj *streamQuadGaussianFractionalDataType) MFractional() int32 {

	return *obj.obj.MFractional

}

// TBD
// MFractional returns a int32
func (obj *streamQuadGaussianFractionalDataType) HasMFractional() bool {
	return obj.obj.MFractional != nil
}

// TBD
// SetMFractional sets the int32 value in the StreamQuadGaussianFractionalDataType object
func (obj *streamQuadGaussianFractionalDataType) SetMFractional(value int32) StreamQuadGaussianFractionalDataType {

	obj.obj.MFractional = &value
	return obj
}

func (obj *streamQuadGaussianFractionalDataType) validateObj(vObj *validation, set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *streamQuadGaussianFractionalDataType) setDefault() {

}
