// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: sanity.proto

package sanity

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpenapiClient is the client API for Openapi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenapiClient interface {
	// Sets configuration resources.
	SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error)
	// Deprecated: please use post instead
	//
	// Sets configuration resources.
	UpdateConfiguration(ctx context.Context, in *UpdateConfigurationRequest, opts ...grpc.CallOption) (*UpdateConfigurationResponse, error)
	// Gets the configuration resources.
	GetConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetConfigResponse, error)
	// Gets metrics.
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error)
	// Gets warnings.
	GetWarnings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetWarningsResponse, error)
	// Clears warnings.
	ClearWarnings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClearWarningsResponse, error)
	// simple GET api with single return type
	GetRootResponse(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRootResponseResponse, error)
	// Description missing in models
	DummyResponseTest(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DummyResponseTestResponse, error)
	// simple POST api with single return type
	PostRootResponse(ctx context.Context, in *PostRootResponseRequest, opts ...grpc.CallOption) (*PostRootResponseResponse, error)
	// return list of some items
	GetAllItems(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllItemsResponse, error)
	// return single item
	GetSingleItem(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSingleItemResponse, error)
	// return single item
	GetSingleItemLevel2(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSingleItemLevel2Response, error)
	// Description missing in models
	GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetVersionResponse, error)
}

type openapiClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenapiClient(cc grpc.ClientConnInterface) OpenapiClient {
	return &openapiClient{cc}
}

func (c *openapiClient) SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error) {
	out := new(SetConfigResponse)
	err := c.cc.Invoke(ctx, "/sanity.Openapi/SetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openapiClient) UpdateConfiguration(ctx context.Context, in *UpdateConfigurationRequest, opts ...grpc.CallOption) (*UpdateConfigurationResponse, error) {
	out := new(UpdateConfigurationResponse)
	err := c.cc.Invoke(ctx, "/sanity.Openapi/UpdateConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openapiClient) GetConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, "/sanity.Openapi/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openapiClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error) {
	out := new(GetMetricsResponse)
	err := c.cc.Invoke(ctx, "/sanity.Openapi/GetMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openapiClient) GetWarnings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetWarningsResponse, error) {
	out := new(GetWarningsResponse)
	err := c.cc.Invoke(ctx, "/sanity.Openapi/GetWarnings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openapiClient) ClearWarnings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClearWarningsResponse, error) {
	out := new(ClearWarningsResponse)
	err := c.cc.Invoke(ctx, "/sanity.Openapi/ClearWarnings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openapiClient) GetRootResponse(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRootResponseResponse, error) {
	out := new(GetRootResponseResponse)
	err := c.cc.Invoke(ctx, "/sanity.Openapi/GetRootResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openapiClient) DummyResponseTest(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DummyResponseTestResponse, error) {
	out := new(DummyResponseTestResponse)
	err := c.cc.Invoke(ctx, "/sanity.Openapi/DummyResponseTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openapiClient) PostRootResponse(ctx context.Context, in *PostRootResponseRequest, opts ...grpc.CallOption) (*PostRootResponseResponse, error) {
	out := new(PostRootResponseResponse)
	err := c.cc.Invoke(ctx, "/sanity.Openapi/PostRootResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openapiClient) GetAllItems(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllItemsResponse, error) {
	out := new(GetAllItemsResponse)
	err := c.cc.Invoke(ctx, "/sanity.Openapi/GetAllItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openapiClient) GetSingleItem(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSingleItemResponse, error) {
	out := new(GetSingleItemResponse)
	err := c.cc.Invoke(ctx, "/sanity.Openapi/GetSingleItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openapiClient) GetSingleItemLevel2(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSingleItemLevel2Response, error) {
	out := new(GetSingleItemLevel2Response)
	err := c.cc.Invoke(ctx, "/sanity.Openapi/GetSingleItemLevel2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openapiClient) GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, "/sanity.Openapi/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenapiServer is the server API for Openapi service.
// All implementations must embed UnimplementedOpenapiServer
// for forward compatibility
type OpenapiServer interface {
	// Sets configuration resources.
	SetConfig(context.Context, *SetConfigRequest) (*SetConfigResponse, error)
	// Deprecated: please use post instead
	//
	// Sets configuration resources.
	UpdateConfiguration(context.Context, *UpdateConfigurationRequest) (*UpdateConfigurationResponse, error)
	// Gets the configuration resources.
	GetConfig(context.Context, *emptypb.Empty) (*GetConfigResponse, error)
	// Gets metrics.
	GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error)
	// Gets warnings.
	GetWarnings(context.Context, *emptypb.Empty) (*GetWarningsResponse, error)
	// Clears warnings.
	ClearWarnings(context.Context, *emptypb.Empty) (*ClearWarningsResponse, error)
	// simple GET api with single return type
	GetRootResponse(context.Context, *emptypb.Empty) (*GetRootResponseResponse, error)
	// Description missing in models
	DummyResponseTest(context.Context, *emptypb.Empty) (*DummyResponseTestResponse, error)
	// simple POST api with single return type
	PostRootResponse(context.Context, *PostRootResponseRequest) (*PostRootResponseResponse, error)
	// return list of some items
	GetAllItems(context.Context, *emptypb.Empty) (*GetAllItemsResponse, error)
	// return single item
	GetSingleItem(context.Context, *emptypb.Empty) (*GetSingleItemResponse, error)
	// return single item
	GetSingleItemLevel2(context.Context, *emptypb.Empty) (*GetSingleItemLevel2Response, error)
	// Description missing in models
	GetVersion(context.Context, *emptypb.Empty) (*GetVersionResponse, error)
	mustEmbedUnimplementedOpenapiServer()
}

// UnimplementedOpenapiServer must be embedded to have forward compatible implementations.
type UnimplementedOpenapiServer struct {
}

func (UnimplementedOpenapiServer) SetConfig(context.Context, *SetConfigRequest) (*SetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedOpenapiServer) UpdateConfiguration(context.Context, *UpdateConfigurationRequest) (*UpdateConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfiguration not implemented")
}
func (UnimplementedOpenapiServer) GetConfig(context.Context, *emptypb.Empty) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedOpenapiServer) GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedOpenapiServer) GetWarnings(context.Context, *emptypb.Empty) (*GetWarningsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWarnings not implemented")
}
func (UnimplementedOpenapiServer) ClearWarnings(context.Context, *emptypb.Empty) (*ClearWarningsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearWarnings not implemented")
}
func (UnimplementedOpenapiServer) GetRootResponse(context.Context, *emptypb.Empty) (*GetRootResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRootResponse not implemented")
}
func (UnimplementedOpenapiServer) DummyResponseTest(context.Context, *emptypb.Empty) (*DummyResponseTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DummyResponseTest not implemented")
}
func (UnimplementedOpenapiServer) PostRootResponse(context.Context, *PostRootResponseRequest) (*PostRootResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRootResponse not implemented")
}
func (UnimplementedOpenapiServer) GetAllItems(context.Context, *emptypb.Empty) (*GetAllItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllItems not implemented")
}
func (UnimplementedOpenapiServer) GetSingleItem(context.Context, *emptypb.Empty) (*GetSingleItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleItem not implemented")
}
func (UnimplementedOpenapiServer) GetSingleItemLevel2(context.Context, *emptypb.Empty) (*GetSingleItemLevel2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleItemLevel2 not implemented")
}
func (UnimplementedOpenapiServer) GetVersion(context.Context, *emptypb.Empty) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedOpenapiServer) mustEmbedUnimplementedOpenapiServer() {}

// UnsafeOpenapiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenapiServer will
// result in compilation errors.
type UnsafeOpenapiServer interface {
	mustEmbedUnimplementedOpenapiServer()
}

func RegisterOpenapiServer(s grpc.ServiceRegistrar, srv OpenapiServer) {
	s.RegisterService(&Openapi_ServiceDesc, srv)
}

func _Openapi_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenapiServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sanity.Openapi/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenapiServer).SetConfig(ctx, req.(*SetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openapi_UpdateConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenapiServer).UpdateConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sanity.Openapi/UpdateConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenapiServer).UpdateConfiguration(ctx, req.(*UpdateConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openapi_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenapiServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sanity.Openapi/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenapiServer).GetConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openapi_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenapiServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sanity.Openapi/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenapiServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openapi_GetWarnings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenapiServer).GetWarnings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sanity.Openapi/GetWarnings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenapiServer).GetWarnings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openapi_ClearWarnings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenapiServer).ClearWarnings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sanity.Openapi/ClearWarnings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenapiServer).ClearWarnings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openapi_GetRootResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenapiServer).GetRootResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sanity.Openapi/GetRootResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenapiServer).GetRootResponse(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openapi_DummyResponseTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenapiServer).DummyResponseTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sanity.Openapi/DummyResponseTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenapiServer).DummyResponseTest(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openapi_PostRootResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRootResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenapiServer).PostRootResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sanity.Openapi/PostRootResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenapiServer).PostRootResponse(ctx, req.(*PostRootResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openapi_GetAllItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenapiServer).GetAllItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sanity.Openapi/GetAllItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenapiServer).GetAllItems(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openapi_GetSingleItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenapiServer).GetSingleItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sanity.Openapi/GetSingleItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenapiServer).GetSingleItem(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openapi_GetSingleItemLevel2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenapiServer).GetSingleItemLevel2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sanity.Openapi/GetSingleItemLevel2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenapiServer).GetSingleItemLevel2(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openapi_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenapiServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sanity.Openapi/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenapiServer).GetVersion(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Openapi_ServiceDesc is the grpc.ServiceDesc for Openapi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Openapi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sanity.Openapi",
	HandlerType: (*OpenapiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetConfig",
			Handler:    _Openapi_SetConfig_Handler,
		},
		{
			MethodName: "UpdateConfiguration",
			Handler:    _Openapi_UpdateConfiguration_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _Openapi_GetConfig_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _Openapi_GetMetrics_Handler,
		},
		{
			MethodName: "GetWarnings",
			Handler:    _Openapi_GetWarnings_Handler,
		},
		{
			MethodName: "ClearWarnings",
			Handler:    _Openapi_ClearWarnings_Handler,
		},
		{
			MethodName: "GetRootResponse",
			Handler:    _Openapi_GetRootResponse_Handler,
		},
		{
			MethodName: "DummyResponseTest",
			Handler:    _Openapi_DummyResponseTest_Handler,
		},
		{
			MethodName: "PostRootResponse",
			Handler:    _Openapi_PostRootResponse_Handler,
		},
		{
			MethodName: "GetAllItems",
			Handler:    _Openapi_GetAllItems_Handler,
		},
		{
			MethodName: "GetSingleItem",
			Handler:    _Openapi_GetSingleItem_Handler,
		},
		{
			MethodName: "GetSingleItemLevel2",
			Handler:    _Openapi_GetSingleItemLevel2_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _Openapi_GetVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sanity.proto",
}
