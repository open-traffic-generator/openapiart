// This file is autogenerated. Do not modify
package controllers

import (
	"errors"
	"io"
	"log"
	"net/http"

	openapi "github.com/open-traffic-generator/goapi/pkg"
	"github.com/open-traffic-generator/goapi/pkg/httpapi"
	"github.com/open-traffic-generator/goapi/pkg/httpapi/interfaces"
)

type unitTestController struct {
	handler interfaces.UnitTestHandler
}

func NewHttpUnitTestController(handler interfaces.UnitTestHandler) interfaces.UnitTestController {
	return &unitTestController{handler}
}

func (ctrl *unitTestController) Routes() []httpapi.Route {
	return []httpapi.Route{
		{Path: "/api/test", Method: "GET", Name: "GetTestConfig", Handler: ctrl.GetTestConfig},
		{Path: "/api/test", Method: "POST", Name: "SetTestConfig", Handler: ctrl.SetTestConfig},
	}
}

/*
GetTestConfig: GET /api/test
Description: Get the new restructured unit test config.
*/
func (ctrl *unitTestController) GetTestConfig(w http.ResponseWriter, r *http.Request) {
	result, err := ctrl.handler.GetTestConfig(r)
	if err != nil {
		ctrl.responseGetTestConfigError(w, "internal", err)
		return
	}

	if result.HasTestConfig() {
		if _, err := httpapi.WriteJSONResponse(w, 200, result.TestConfig().Marshal()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseGetTestConfigError(w, "internal", errors.New("Unknown error"))
}

func (ctrl *unitTestController) responseGetTestConfigError(w http.ResponseWriter, errorKind openapi.ErrorKindEnum, rsp_err error) {
	var result openapi.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(openapi.Error); ok {
		result = rErr
	} else {
		result = openapi.NewError()
		err := result.Unmarshal().FromJson(rsp_err.Error())
		if err != nil {
			_ = result.SetCode(statusCode)
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			_ = result.SetErrors([]string{rsp_err.Error()})
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result.Marshal()); err != nil {
		log.Print(err.Error())
	}
}

/*
SetTestConfig: POST /api/test
Description: Sets the new restructured unit test configuration.
*/
func (ctrl *unitTestController) SetTestConfig(w http.ResponseWriter, r *http.Request) {
	var item openapi.TestConfig
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = openapi.NewTestConfig()
			err := item.Unmarshal().FromJson(string(body))
			if err != nil {
				ctrl.responseSetTestConfigError(w, "validation", err)
				return
			}
		} else {
			ctrl.responseSetTestConfigError(w, "validation", readError)
			return
		}
	} else {
		bodyError := errors.New("Request does not have a body")
		ctrl.responseSetTestConfigError(w, "validation", bodyError)
		return
	}
	result, err := ctrl.handler.SetTestConfig(item, r)
	if err != nil {
		ctrl.responseSetTestConfigError(w, "internal", err)
		return
	}

	if result.HasResponseBytes() {
		if _, err := httpapi.WriteByteResponse(w, 200, result.ResponseBytes()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseSetTestConfigError(w, "internal", errors.New("Unknown error"))
}

func (ctrl *unitTestController) responseSetTestConfigError(w http.ResponseWriter, errorKind openapi.ErrorKindEnum, rsp_err error) {
	var result openapi.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(openapi.Error); ok {
		result = rErr
	} else {
		result = openapi.NewError()
		err := result.Unmarshal().FromJson(rsp_err.Error())
		if err != nil {
			_ = result.SetCode(statusCode)
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			_ = result.SetErrors([]string{rsp_err.Error()})
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result.Marshal()); err != nil {
		log.Print(err.Error())
	}
}
