// This file is autogenerated. Do not modify
package controllers

import (
	"errors"
	"io"
	"log"
	"net/http"

	openapi "github.com/open-traffic-generator/goapi/pkg"
	"github.com/open-traffic-generator/goapi/pkg/httpapi"
	"github.com/open-traffic-generator/goapi/pkg/httpapi/interfaces"
)

type metricsController struct {
	handler interfaces.MetricsHandler
}

func NewHttpMetricsController(handler interfaces.MetricsHandler) interfaces.MetricsController {
	return &metricsController{handler}
}

func (ctrl *metricsController) Routes() []httpapi.Route {
	return []httpapi.Route{
		{Path: "/api/metrics", Method: "GET", Name: "GetMetrics", Handler: ctrl.GetMetrics},
		{Path: "/api/warnings", Method: "GET", Name: "GetWarnings", Handler: ctrl.GetWarnings},
		{Path: "/api/warnings", Method: "DELETE", Name: "ClearWarnings", Handler: ctrl.ClearWarnings},
	}
}

/*
GetMetrics: GET /api/metrics
Description: Gets metrics.
*/
func (ctrl *metricsController) GetMetrics(w http.ResponseWriter, r *http.Request) {
	var item openapi.MetricsRequest
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = openapi.NewMetricsRequest()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseGetMetricsError(w, "validation", err)
				return
			}
		} else {
			ctrl.responseGetMetricsError(w, "validation", readError)
			return
		}
	} else {
		bodyError := errors.New("Request does not have a body")
		ctrl.responseGetMetricsError(w, "validation", bodyError)
		return
	}
	result, err := ctrl.handler.GetMetrics(item, r)
	if err != nil {
		ctrl.responseGetMetricsError(w, "internal", err)
		return
	}

	if result.HasMetrics() {
		if _, err := httpapi.WriteJSONResponse(w, 200, result.Metrics()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseGetMetricsError(w, "internal", errors.New("Unknown error"))
}

func (ctrl *metricsController) responseGetMetricsError(w http.ResponseWriter, errorKind openapi.ErrorKindEnum, rsp_err error) {
	var result openapi.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(openapi.Error); ok {
		result = rErr
	} else {
		result = openapi.NewError()
		err := result.FromJson(rsp_err.Error())
		if err != nil {
			result.Msg().Code = &statusCode
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			result.Msg().Errors = []string{rsp_err.Error()}
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result); err != nil {
		log.Print(err.Error())
	}
}

/*
GetWarnings: GET /api/warnings
Description: Gets warnings.
*/
func (ctrl *metricsController) GetWarnings(w http.ResponseWriter, r *http.Request) {
	result, err := ctrl.handler.GetWarnings(r)
	if err != nil {
		ctrl.responseGetWarningsError(w, "internal", err)
		return
	}

	if result.HasWarningDetails() {
		if _, err := httpapi.WriteJSONResponse(w, 200, result.WarningDetails()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseGetWarningsError(w, "internal", errors.New("Unknown error"))
}

func (ctrl *metricsController) responseGetWarningsError(w http.ResponseWriter, errorKind openapi.ErrorKindEnum, rsp_err error) {
	var result openapi.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(openapi.Error); ok {
		result = rErr
	} else {
		result = openapi.NewError()
		err := result.FromJson(rsp_err.Error())
		if err != nil {
			result.Msg().Code = &statusCode
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			result.Msg().Errors = []string{rsp_err.Error()}
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result); err != nil {
		log.Print(err.Error())
	}
}

/*
ClearWarnings: DELETE /api/warnings
Description: Clears warnings.
*/
func (ctrl *metricsController) ClearWarnings(w http.ResponseWriter, r *http.Request) {
	result, err := ctrl.handler.ClearWarnings(r)
	if err != nil {
		ctrl.responseClearWarningsError(w, "internal", err)
		return
	}

	if result.HasResponseString() {
		if _, err := httpapi.WriteAnyResponse(w, 200, result.ResponseString()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseClearWarningsError(w, "internal", errors.New("Unknown error"))
}

func (ctrl *metricsController) responseClearWarningsError(w http.ResponseWriter, errorKind openapi.ErrorKindEnum, rsp_err error) {
	var result openapi.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(openapi.Error); ok {
		result = rErr
	} else {
		result = openapi.NewError()
		err := result.FromJson(rsp_err.Error())
		if err != nil {
			result.Msg().Code = &statusCode
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			result.Msg().Errors = []string{rsp_err.Error()}
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result); err != nil {
		log.Print(err.Error())
	}
}
