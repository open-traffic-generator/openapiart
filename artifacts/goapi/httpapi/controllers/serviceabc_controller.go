// This file is autogenerated. Do not modify
package controllers

import (
	"errors"
	"log"
	"net/http"

	openapi "github.com/open-traffic-generator/goapi/pkg"
	"github.com/open-traffic-generator/goapi/pkg/httpapi"
	"github.com/open-traffic-generator/goapi/pkg/httpapi/interfaces"
)

type serviceAbcController struct {
	handler interfaces.ServiceAbcHandler
}

func NewHttpServiceAbcController(handler interfaces.ServiceAbcHandler) interfaces.ServiceAbcController {
	return &serviceAbcController{handler}
}

func (ctrl *serviceAbcController) Routes() []httpapi.Route {
	return []httpapi.Route{
		{Path: "/api/serviceb", Method: "GET", Name: "GetAllItems", Handler: ctrl.GetAllItems},
		{Path: "/api/serviceb/{item_id}", Method: "GET", Name: "GetSingleItem", Handler: ctrl.GetSingleItem},
		{Path: "/api/serviceb/{item_id}/{level_2}", Method: "GET", Name: "GetSingleItemLevel2", Handler: ctrl.GetSingleItemLevel2},
	}
}

/*
GetAllItems: GET /api/serviceb
Description: return list of some items
*/
func (ctrl *serviceAbcController) GetAllItems(w http.ResponseWriter, r *http.Request) {
	result, err := ctrl.handler.GetAllItems(r)
	if err != nil {
		ctrl.responseGetAllItemsError(w, "internal", err)
		return
	}

	if result.HasServiceAbcItemList() {
		if _, err := httpapi.WriteJSONResponse(w, 200, result.ServiceAbcItemList()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseGetAllItemsError(w, "internal", errors.New("Unknown error"))
}

func (ctrl *serviceAbcController) responseGetAllItemsError(w http.ResponseWriter, errorKind openapi.ErrorKindEnum, rsp_err error) {
	var result openapi.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(openapi.Error); ok {
		result = rErr
	} else {
		result = openapi.NewError()
		err := result.FromJson(rsp_err.Error())
		if err != nil {
			result.Msg().Code = statusCode
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			result.Msg().Errors = []string{rsp_err.Error()}
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result); err != nil {
		log.Print(err.Error())
	}
}

/*
GetSingleItem: GET /api/serviceb/{item_id}
Description: return single item
*/
func (ctrl *serviceAbcController) GetSingleItem(w http.ResponseWriter, r *http.Request) {
	result, err := ctrl.handler.GetSingleItem(r)
	if err != nil {
		ctrl.responseGetSingleItemError(w, "internal", err)
		return
	}

	if result.HasServiceAbcItem() {
		if _, err := httpapi.WriteJSONResponse(w, 200, result.ServiceAbcItem()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseGetSingleItemError(w, "internal", errors.New("Unknown error"))
}

func (ctrl *serviceAbcController) responseGetSingleItemError(w http.ResponseWriter, errorKind openapi.ErrorKindEnum, rsp_err error) {
	var result openapi.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(openapi.Error); ok {
		result = rErr
	} else {
		result = openapi.NewError()
		err := result.FromJson(rsp_err.Error())
		if err != nil {
			result.Msg().Code = statusCode
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			result.Msg().Errors = []string{rsp_err.Error()}
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result); err != nil {
		log.Print(err.Error())
	}
}

/*
GetSingleItemLevel2: GET /api/serviceb/{item_id}/{level_2}
Description: return single item
*/
func (ctrl *serviceAbcController) GetSingleItemLevel2(w http.ResponseWriter, r *http.Request) {
	result, err := ctrl.handler.GetSingleItemLevel2(r)
	if err != nil {
		ctrl.responseGetSingleItemLevel2Error(w, "internal", err)
		return
	}

	if result.HasServiceAbcItem() {
		if _, err := httpapi.WriteJSONResponse(w, 200, result.ServiceAbcItem()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseGetSingleItemLevel2Error(w, "internal", errors.New("Unknown error"))
}

func (ctrl *serviceAbcController) responseGetSingleItemLevel2Error(w http.ResponseWriter, errorKind openapi.ErrorKindEnum, rsp_err error) {
	var result openapi.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(openapi.Error); ok {
		result = rErr
	} else {
		result = openapi.NewError()
		err := result.FromJson(rsp_err.Error())
		if err != nil {
			result.Msg().Code = statusCode
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			result.Msg().Errors = []string{rsp_err.Error()}
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result); err != nil {
		log.Print(err.Error())
	}
}
