// This file is autogenerated. Do not modify
package controllers

import (
	"errors"
	"io"
	"log"
	"net/http"

	openapi "github.com/open-traffic-generator/goapi/pkg"
	"github.com/open-traffic-generator/goapi/pkg/httpapi"
	"github.com/open-traffic-generator/goapi/pkg/httpapi/interfaces"
)

type apiTestController struct {
	handler interfaces.ApiTestHandler
}

func NewHttpApiTestController(handler interfaces.ApiTestHandler) interfaces.ApiTestController {
	return &apiTestController{handler}
}

func (ctrl *apiTestController) Routes() []httpapi.Route {
	return []httpapi.Route{
		{Path: "/api/apitest", Method: "GET", Name: "GetRootResponse", Handler: ctrl.GetRootResponse},
		{Path: "/api/apitest", Method: "DELETE", Name: "DummyResponseTest", Handler: ctrl.DummyResponseTest},
		{Path: "/api/apitest", Method: "POST", Name: "PostRootResponse", Handler: ctrl.PostRootResponse},
	}
}

/*
GetRootResponse: GET /api/apitest
Description: simple GET api with single return type
*/
func (ctrl *apiTestController) GetRootResponse(w http.ResponseWriter, r *http.Request) {
	result, err := ctrl.handler.GetRootResponse(r)
	if err != nil {
		ctrl.responseGetRootResponseError(w, "internal", err)
		return
	}

	if result.HasCommonResponseSuccess() {
		if _, err := httpapi.WriteJSONResponse(w, 200, result.CommonResponseSuccess()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseGetRootResponseError(w, "internal", errors.New("Unknown error"))
}

func (ctrl *apiTestController) responseGetRootResponseError(w http.ResponseWriter, errorKind openapi.ErrorKindEnum, rsp_err error) {
	var result openapi.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(openapi.Error); ok {
		result = rErr
	} else {
		result = openapi.NewError()
		err := result.FromJson(rsp_err.Error())
		if err != nil {
			result.Msg().Code = statusCode
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			result.Msg().Errors = []string{rsp_err.Error()}
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result); err != nil {
		log.Print(err.Error())
	}
}

/*
DummyResponseTest: DELETE /api/apitest
Description:
*/
func (ctrl *apiTestController) DummyResponseTest(w http.ResponseWriter, r *http.Request) {
	result, err := ctrl.handler.DummyResponseTest(r)
	if err != nil {
		ctrl.responseDummyResponseTestError(w, "internal", err)
		return
	}

	if result.HasResponseString() {
		if _, err := httpapi.WriteAnyResponse(w, 200, result.ResponseString()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseDummyResponseTestError(w, "internal", errors.New("Unknown error"))
}

func (ctrl *apiTestController) responseDummyResponseTestError(w http.ResponseWriter, errorKind openapi.ErrorKindEnum, rsp_err error) {
	var result openapi.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(openapi.Error); ok {
		result = rErr
	} else {
		result = openapi.NewError()
		err := result.FromJson(rsp_err.Error())
		if err != nil {
			result.Msg().Code = statusCode
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			result.Msg().Errors = []string{rsp_err.Error()}
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result); err != nil {
		log.Print(err.Error())
	}
}

/*
PostRootResponse: POST /api/apitest
Description: simple POST api with single return type
*/
func (ctrl *apiTestController) PostRootResponse(w http.ResponseWriter, r *http.Request) {
	var item openapi.ApiTestInputBody
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = openapi.NewApiTestInputBody()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responsePostRootResponseError(w, "validation", err)
				return
			}
		} else {
			ctrl.responsePostRootResponseError(w, "validation", readError)
			return
		}
	} else {
		bodyError := errors.New("Request does not have a body")
		ctrl.responsePostRootResponseError(w, "validation", bodyError)
		return
	}
	result, err := ctrl.handler.PostRootResponse(item, r)
	if err != nil {
		ctrl.responsePostRootResponseError(w, "internal", err)
		return
	}

	if result.HasCommonResponseSuccess() {
		if _, err := httpapi.WriteJSONResponse(w, 200, result.CommonResponseSuccess()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responsePostRootResponseError(w, "internal", errors.New("Unknown error"))
}

func (ctrl *apiTestController) responsePostRootResponseError(w http.ResponseWriter, errorKind openapi.ErrorKindEnum, rsp_err error) {
	var result openapi.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(openapi.Error); ok {
		result = rErr
	} else {
		result = openapi.NewError()
		err := result.FromJson(rsp_err.Error())
		if err != nil {
			result.Msg().Code = statusCode
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			result.Msg().Errors = []string{rsp_err.Error()}
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result); err != nil {
		log.Print(err.Error())
	}
}
